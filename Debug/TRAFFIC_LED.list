
TRAFFIC_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005288  08005288  00015288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080053bc  080053bc  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053bc  080053bc  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080053c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000003c  08005400  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08005400  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139e6  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d1f  00000000  00000000  00033a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00036770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00037808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011a10  00000000  00000000  00038730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e90  00000000  00000000  0004a140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064e3c  00000000  00000000  00060fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c5e0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a00  00000000  00000000  000c5e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005270 	.word	0x08005270

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08005270 	.word	0x08005270

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <getKeyinput>:
#include "button.h"


int buttonFlag[3] = {0,0,0};

void getKeyinput(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	//-----PROCESS BUTTON 1------------

	// BEGIN: timer_flag[1] == 1
	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == 0)){
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <getKeyinput+0x88>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d110      	bne.n	8000422 <getKeyinput+0x2e>
 8000400:	2390      	movs	r3, #144	; 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0018      	movs	r0, r3
 8000408:	f001 ff22 	bl	8002250 <HAL_GPIO_ReadPin>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d108      	bne.n	8000422 <getKeyinput+0x2e>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		buttonFlag[0] = 1;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <getKeyinput+0x8c>)
 8000412:	2201      	movs	r2, #1
 8000414:	601a      	str	r2, [r3, #0]
		setTimer(3, 300);  //Không đọc nút nhấn trong 200ms sau khi nhấn lần đầu tiên
 8000416:	2396      	movs	r3, #150	; 0x96
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	0019      	movs	r1, r3
 800041c:	2003      	movs	r0, #3
 800041e:	f001 fb47 	bl	8001ab0 <setTimer>
	}
	// không đọc tiếp nút nhấn trong 200ms

	// ----PROCESS BUTTON 2-----------

	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)){
 8000422:	4b16      	ldr	r3, [pc, #88]	; (800047c <getKeyinput+0x88>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d110      	bne.n	800044c <getKeyinput+0x58>
 800042a:	2390      	movs	r3, #144	; 0x90
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	2108      	movs	r1, #8
 8000430:	0018      	movs	r0, r3
 8000432:	f001 ff0d 	bl	8002250 <HAL_GPIO_ReadPin>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d108      	bne.n	800044c <getKeyinput+0x58>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		buttonFlag[1] = 1;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <getKeyinput+0x8c>)
 800043c:	2201      	movs	r2, #1
 800043e:	605a      	str	r2, [r3, #4]
		setTimer(3, 300);
 8000440:	2396      	movs	r3, #150	; 0x96
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	0019      	movs	r1, r3
 8000446:	2003      	movs	r0, #3
 8000448:	f001 fb32 	bl	8001ab0 <setTimer>
	}

	// ----- PROCESS BUTTON 3 -----------
	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == 0)){
 800044c:	4b0b      	ldr	r3, [pc, #44]	; (800047c <getKeyinput+0x88>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d110      	bne.n	8000476 <getKeyinput+0x82>
 8000454:	2390      	movs	r3, #144	; 0x90
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	2102      	movs	r1, #2
 800045a:	0018      	movs	r0, r3
 800045c:	f001 fef8 	bl	8002250 <HAL_GPIO_ReadPin>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d108      	bne.n	8000476 <getKeyinput+0x82>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		setTimer(3, 300);
 8000464:	2396      	movs	r3, #150	; 0x96
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	0019      	movs	r1, r3
 800046a:	2003      	movs	r0, #3
 800046c:	f001 fb20 	bl	8001ab0 <setTimer>
		buttonFlag[2] = 1;
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <getKeyinput+0x8c>)
 8000472:	2201      	movs	r2, #1
 8000474:	609a      	str	r2, [r3, #8]
	}

}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000020 	.word	0x20000020
 8000480:	20000058 	.word	0x20000058

08000484 <isButtonPress>:
int isButtonPress(int i){
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <isButtonPress+0x2c>)
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	0092      	lsls	r2, r2, #2
 8000492:	58d3      	ldr	r3, [r2, r3]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d106      	bne.n	80004a6 <isButtonPress+0x22>
		buttonFlag[i] = 0;
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <isButtonPress+0x2c>)
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	0092      	lsls	r2, r2, #2
 800049e:	2100      	movs	r1, #0
 80004a0:	50d1      	str	r1, [r2, r3]
		return 1;
 80004a2:	2301      	movs	r3, #1
 80004a4:	e000      	b.n	80004a8 <isButtonPress+0x24>
	}
	return 0;
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000058 	.word	0x20000058

080004b4 <fsm_auto_run>:
 *      Author: HOME
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	switch (status) {   // LINE 1
 80004b8:	4bce      	ldr	r3, [pc, #824]	; (80007f4 <fsm_auto_run+0x340>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b04      	cmp	r3, #4
 80004be:	d900      	bls.n	80004c2 <fsm_auto_run+0xe>
 80004c0:	e225      	b.n	800090e <fsm_auto_run+0x45a>
 80004c2:	009a      	lsls	r2, r3, #2
 80004c4:	4bcc      	ldr	r3, [pc, #816]	; (80007f8 <fsm_auto_run+0x344>)
 80004c6:	18d3      	adds	r3, r2, r3
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	469f      	mov	pc, r3
		case auto_init:
			// ------- ALL LED OFF -------------
			single_LED_off();
 80004cc:	f000 ff64 	bl	8001398 <single_LED_off>
			status = auto_red_green;
 80004d0:	4bc8      	ldr	r3, [pc, #800]	; (80007f4 <fsm_auto_run+0x340>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	601a      	str	r2, [r3, #0]
			count0 = (time_red_green + time_red_yellow)/1000;
 80004d6:	4bc9      	ldr	r3, [pc, #804]	; (80007fc <fsm_auto_run+0x348>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4bc9      	ldr	r3, [pc, #804]	; (8000800 <fsm_auto_run+0x34c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	18d3      	adds	r3, r2, r3
 80004e0:	22fa      	movs	r2, #250	; 0xfa
 80004e2:	0091      	lsls	r1, r2, #2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f7ff fe99 	bl	800021c <__divsi3>
 80004ea:	0003      	movs	r3, r0
 80004ec:	001a      	movs	r2, r3
 80004ee:	4bc5      	ldr	r3, [pc, #788]	; (8000804 <fsm_auto_run+0x350>)
 80004f0:	601a      	str	r2, [r3, #0]
			count1 = time_red_green/1000;
 80004f2:	4bc2      	ldr	r3, [pc, #776]	; (80007fc <fsm_auto_run+0x348>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	22fa      	movs	r2, #250	; 0xfa
 80004f8:	0091      	lsls	r1, r2, #2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f7ff fe8e 	bl	800021c <__divsi3>
 8000500:	0003      	movs	r3, r0
 8000502:	001a      	movs	r2, r3
 8000504:	4bc0      	ldr	r3, [pc, #768]	; (8000808 <fsm_auto_run+0x354>)
 8000506:	601a      	str	r2, [r3, #0]
			updateClockBuffer(count0, count1);
 8000508:	4bbe      	ldr	r3, [pc, #760]	; (8000804 <fsm_auto_run+0x350>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4bbe      	ldr	r3, [pc, #760]	; (8000808 <fsm_auto_run+0x354>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	0019      	movs	r1, r3
 8000512:	0010      	movs	r0, r2
 8000514:	f000 ff10 	bl	8001338 <updateClockBuffer>
			setTimer(0, time_red_green);
 8000518:	4bb8      	ldr	r3, [pc, #736]	; (80007fc <fsm_auto_run+0x348>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	0019      	movs	r1, r3
 800051e:	2000      	movs	r0, #0
 8000520:	f001 fac6 	bl	8001ab0 <setTimer>
			setTimer(1, 1000); // count 1s
 8000524:	23fa      	movs	r3, #250	; 0xfa
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	0019      	movs	r1, r3
 800052a:	2001      	movs	r0, #1
 800052c:	f001 fac0 	bl	8001ab0 <setTimer>
			setTimer(2, 20);  // scan led
 8000530:	2114      	movs	r1, #20
 8000532:	2002      	movs	r0, #2
 8000534:	f001 fabc 	bl	8001ab0 <setTimer>
			lcd_goto_XY(1, 0);
 8000538:	2100      	movs	r1, #0
 800053a:	2001      	movs	r0, #1
 800053c:	f000 fd2b 	bl	8000f96 <lcd_goto_XY>
			lcd_send_string("MODE: AUTO");
 8000540:	4bb2      	ldr	r3, [pc, #712]	; (800080c <fsm_auto_run+0x358>)
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fd07 	bl	8000f56 <lcd_send_string>
			lcd_goto_XY(0, 0);
 8000548:	2100      	movs	r1, #0
 800054a:	2000      	movs	r0, #0
 800054c:	f000 fd23 	bl	8000f96 <lcd_goto_XY>
			lcd_send_string("PLEASE SLOW DOWN");
 8000550:	4baf      	ldr	r3, [pc, #700]	; (8000810 <fsm_auto_run+0x35c>)
 8000552:	0018      	movs	r0, r3
 8000554:	f000 fcff 	bl	8000f56 <lcd_send_string>
			break;
 8000558:	e165      	b.n	8000826 <fsm_auto_run+0x372>
		case auto_red_green:
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET); // yellow 0 off
 800055a:	2390      	movs	r3, #144	; 0x90
 800055c:	05db      	lsls	r3, r3, #23
 800055e:	2201      	movs	r2, #1
 8000560:	2110      	movs	r1, #16
 8000562:	0018      	movs	r0, r3
 8000564:	f001 fe91 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); // red 1 on
 8000568:	2390      	movs	r3, #144	; 0x90
 800056a:	05db      	lsls	r3, r3, #23
 800056c:	2201      	movs	r2, #1
 800056e:	2104      	movs	r1, #4
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fe8a 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET); // red0 on
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	0159      	lsls	r1, r3, #5
 800057a:	2390      	movs	r3, #144	; 0x90
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	2200      	movs	r2, #0
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fe82 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET); // green1 on
 8000586:	4ba3      	ldr	r3, [pc, #652]	; (8000814 <fsm_auto_run+0x360>)
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	0018      	movs	r0, r3
 800058e:	f001 fe7c 	bl	800228a <HAL_GPIO_WritePin>
			if(timer_flag[0] == 1){
 8000592:	4ba1      	ldr	r3, [pc, #644]	; (8000818 <fsm_auto_run+0x364>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d126      	bne.n	80005e8 <fsm_auto_run+0x134>
				status = auto_red_yellow;
 800059a:	4b96      	ldr	r3, [pc, #600]	; (80007f4 <fsm_auto_run+0x340>)
 800059c:	2202      	movs	r2, #2
 800059e:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_yellow);
 80005a0:	4b97      	ldr	r3, [pc, #604]	; (8000800 <fsm_auto_run+0x34c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	0019      	movs	r1, r3
 80005a6:	2000      	movs	r0, #0
 80005a8:	f001 fa82 	bl	8001ab0 <setTimer>
				count0 = time_red_yellow/1000;;
 80005ac:	4b94      	ldr	r3, [pc, #592]	; (8000800 <fsm_auto_run+0x34c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	22fa      	movs	r2, #250	; 0xfa
 80005b2:	0091      	lsls	r1, r2, #2
 80005b4:	0018      	movs	r0, r3
 80005b6:	f7ff fe31 	bl	800021c <__divsi3>
 80005ba:	0003      	movs	r3, r0
 80005bc:	001a      	movs	r2, r3
 80005be:	4b91      	ldr	r3, [pc, #580]	; (8000804 <fsm_auto_run+0x350>)
 80005c0:	601a      	str	r2, [r3, #0]
				count1 = time_red_yellow/1000;
 80005c2:	4b8f      	ldr	r3, [pc, #572]	; (8000800 <fsm_auto_run+0x34c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	22fa      	movs	r2, #250	; 0xfa
 80005c8:	0091      	lsls	r1, r2, #2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f7ff fe26 	bl	800021c <__divsi3>
 80005d0:	0003      	movs	r3, r0
 80005d2:	001a      	movs	r2, r3
 80005d4:	4b8c      	ldr	r3, [pc, #560]	; (8000808 <fsm_auto_run+0x354>)
 80005d6:	601a      	str	r2, [r3, #0]
				updateClockBuffer(count0, count1);
 80005d8:	4b8a      	ldr	r3, [pc, #552]	; (8000804 <fsm_auto_run+0x350>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b8a      	ldr	r3, [pc, #552]	; (8000808 <fsm_auto_run+0x354>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	0019      	movs	r1, r3
 80005e2:	0010      	movs	r0, r2
 80005e4:	f000 fea8 	bl	8001338 <updateClockBuffer>
			}
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 80005e8:	2001      	movs	r0, #1
 80005ea:	f7ff ff4b 	bl	8000484 <isButtonPress>
 80005ee:	0003      	movs	r3, r0
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d000      	beq.n	80005f6 <fsm_auto_run+0x142>
 80005f4:	e0f7      	b.n	80007e6 <fsm_auto_run+0x332>
				status = manual_red_green;
 80005f6:	4b7f      	ldr	r3, [pc, #508]	; (80007f4 <fsm_auto_run+0x340>)
 80005f8:	2205      	movs	r2, #5
 80005fa:	601a      	str	r2, [r3, #0]
				Diable_Led();
 80005fc:	f000 fcf4 	bl	8000fe8 <Diable_Led>

				lcd_clear_display();// ----CLEAR LCD ----
 8000600:	f000 fcbe 	bl	8000f80 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000604:	2100      	movs	r1, #0
 8000606:	2001      	movs	r0, #1
 8000608:	f000 fcc5 	bl	8000f96 <lcd_goto_XY>
				lcd_send_string("MODE: MANUAL");
 800060c:	4b83      	ldr	r3, [pc, #524]	; (800081c <fsm_auto_run+0x368>)
 800060e:	0018      	movs	r0, r3
 8000610:	f000 fca1 	bl	8000f56 <lcd_send_string>
				lcd_goto_XY(0, 0);
 8000614:	2100      	movs	r1, #0
 8000616:	2000      	movs	r0, #0
 8000618:	f000 fcbd 	bl	8000f96 <lcd_goto_XY>
				lcd_send_string("WAIT LED TO GO");
 800061c:	4b80      	ldr	r3, [pc, #512]	; (8000820 <fsm_auto_run+0x36c>)
 800061e:	0018      	movs	r0, r3
 8000620:	f000 fc99 	bl	8000f56 <lcd_send_string>
				return;
 8000624:	e174      	b.n	8000910 <fsm_auto_run+0x45c>
			}
			break;
		case auto_red_yellow:
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 off
 8000626:	4b7b      	ldr	r3, [pc, #492]	; (8000814 <fsm_auto_run+0x360>)
 8000628:	2201      	movs	r2, #1
 800062a:	2110      	movs	r1, #16
 800062c:	0018      	movs	r0, r3
 800062e:	f001 fe2c 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET); // yellow1 on
 8000632:	4b78      	ldr	r3, [pc, #480]	; (8000814 <fsm_auto_run+0x360>)
 8000634:	2200      	movs	r2, #0
 8000636:	2120      	movs	r1, #32
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fe26 	bl	800228a <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 800063e:	4b76      	ldr	r3, [pc, #472]	; (8000818 <fsm_auto_run+0x364>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d000      	beq.n	8000648 <fsm_auto_run+0x194>
 8000646:	e0d0      	b.n	80007ea <fsm_auto_run+0x336>
				status = auto_green_red;
 8000648:	4b6a      	ldr	r3, [pc, #424]	; (80007f4 <fsm_auto_run+0x340>)
 800064a:	2203      	movs	r2, #3
 800064c:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 800064e:	4b6b      	ldr	r3, [pc, #428]	; (80007fc <fsm_auto_run+0x348>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	0019      	movs	r1, r3
 8000654:	2000      	movs	r0, #0
 8000656:	f001 fa2b 	bl	8001ab0 <setTimer>
				count0 = (time_red_green)/1000;
 800065a:	4b68      	ldr	r3, [pc, #416]	; (80007fc <fsm_auto_run+0x348>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	22fa      	movs	r2, #250	; 0xfa
 8000660:	0091      	lsls	r1, r2, #2
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff fdda 	bl	800021c <__divsi3>
 8000668:	0003      	movs	r3, r0
 800066a:	001a      	movs	r2, r3
 800066c:	4b65      	ldr	r3, [pc, #404]	; (8000804 <fsm_auto_run+0x350>)
 800066e:	601a      	str	r2, [r3, #0]
				count1 = (time_red_green + time_red_yellow)/1000;
 8000670:	4b62      	ldr	r3, [pc, #392]	; (80007fc <fsm_auto_run+0x348>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b62      	ldr	r3, [pc, #392]	; (8000800 <fsm_auto_run+0x34c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	18d3      	adds	r3, r2, r3
 800067a:	22fa      	movs	r2, #250	; 0xfa
 800067c:	0091      	lsls	r1, r2, #2
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff fdcc 	bl	800021c <__divsi3>
 8000684:	0003      	movs	r3, r0
 8000686:	001a      	movs	r2, r3
 8000688:	4b5f      	ldr	r3, [pc, #380]	; (8000808 <fsm_auto_run+0x354>)
 800068a:	601a      	str	r2, [r3, #0]
				updateClockBuffer(count0, count1);
 800068c:	4b5d      	ldr	r3, [pc, #372]	; (8000804 <fsm_auto_run+0x350>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b5d      	ldr	r3, [pc, #372]	; (8000808 <fsm_auto_run+0x354>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	0019      	movs	r1, r3
 8000696:	0010      	movs	r0, r2
 8000698:	f000 fe4e 	bl	8001338 <updateClockBuffer>
			}
			break;
 800069c:	e0a5      	b.n	80007ea <fsm_auto_run+0x336>
		case auto_green_red:
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red 0 off
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	0159      	lsls	r1, r3, #5
 80006a2:	2390      	movs	r3, #144	; 0x90
 80006a4:	05db      	lsls	r3, r3, #23
 80006a6:	2201      	movs	r2, #1
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fdee 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); // yellow 1 off
 80006ae:	4b59      	ldr	r3, [pc, #356]	; (8000814 <fsm_auto_run+0x360>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	2120      	movs	r1, #32
 80006b4:	0018      	movs	r0, r3
 80006b6:	f001 fde8 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET); // green 0 on
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	0059      	lsls	r1, r3, #1
 80006be:	2390      	movs	r3, #144	; 0x90
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2200      	movs	r2, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fde0 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 80006ca:	2390      	movs	r3, #144	; 0x90
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	2200      	movs	r2, #0
 80006d0:	2104      	movs	r1, #4
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 fdd9 	bl	800228a <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 80006d8:	4b4f      	ldr	r3, [pc, #316]	; (8000818 <fsm_auto_run+0x364>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d126      	bne.n	800072e <fsm_auto_run+0x27a>
				status = auto_yellow_red;
 80006e0:	4b44      	ldr	r3, [pc, #272]	; (80007f4 <fsm_auto_run+0x340>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_yellow);
 80006e6:	4b46      	ldr	r3, [pc, #280]	; (8000800 <fsm_auto_run+0x34c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	0019      	movs	r1, r3
 80006ec:	2000      	movs	r0, #0
 80006ee:	f001 f9df 	bl	8001ab0 <setTimer>
				count0 = time_red_yellow/1000;
 80006f2:	4b43      	ldr	r3, [pc, #268]	; (8000800 <fsm_auto_run+0x34c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	22fa      	movs	r2, #250	; 0xfa
 80006f8:	0091      	lsls	r1, r2, #2
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff fd8e 	bl	800021c <__divsi3>
 8000700:	0003      	movs	r3, r0
 8000702:	001a      	movs	r2, r3
 8000704:	4b3f      	ldr	r3, [pc, #252]	; (8000804 <fsm_auto_run+0x350>)
 8000706:	601a      	str	r2, [r3, #0]
				count1 = time_red_yellow/1000;
 8000708:	4b3d      	ldr	r3, [pc, #244]	; (8000800 <fsm_auto_run+0x34c>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	22fa      	movs	r2, #250	; 0xfa
 800070e:	0091      	lsls	r1, r2, #2
 8000710:	0018      	movs	r0, r3
 8000712:	f7ff fd83 	bl	800021c <__divsi3>
 8000716:	0003      	movs	r3, r0
 8000718:	001a      	movs	r2, r3
 800071a:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <fsm_auto_run+0x354>)
 800071c:	601a      	str	r2, [r3, #0]
				updateClockBuffer(count0, count1);
 800071e:	4b39      	ldr	r3, [pc, #228]	; (8000804 <fsm_auto_run+0x350>)
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	4b39      	ldr	r3, [pc, #228]	; (8000808 <fsm_auto_run+0x354>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	0019      	movs	r1, r3
 8000728:	0010      	movs	r0, r2
 800072a:	f000 fe05 	bl	8001338 <updateClockBuffer>
			}
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 800072e:	2001      	movs	r0, #1
 8000730:	f7ff fea8 	bl	8000484 <isButtonPress>
 8000734:	0003      	movs	r3, r0
 8000736:	2b01      	cmp	r3, #1
 8000738:	d159      	bne.n	80007ee <fsm_auto_run+0x33a>
				status = manual_green_red;
 800073a:	4b2e      	ldr	r3, [pc, #184]	; (80007f4 <fsm_auto_run+0x340>)
 800073c:	2206      	movs	r2, #6
 800073e:	601a      	str	r2, [r3, #0]
				Diable_Led();
 8000740:	f000 fc52 	bl	8000fe8 <Diable_Led>

				lcd_clear_display();// ----CLEAR LCD ----
 8000744:	f000 fc1c 	bl	8000f80 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000748:	2100      	movs	r1, #0
 800074a:	2001      	movs	r0, #1
 800074c:	f000 fc23 	bl	8000f96 <lcd_goto_XY>
				lcd_send_string("MODE: MANUAL");
 8000750:	4b32      	ldr	r3, [pc, #200]	; (800081c <fsm_auto_run+0x368>)
 8000752:	0018      	movs	r0, r3
 8000754:	f000 fbff 	bl	8000f56 <lcd_send_string>
				lcd_goto_XY(0, 0);
 8000758:	2100      	movs	r1, #0
 800075a:	2000      	movs	r0, #0
 800075c:	f000 fc1b 	bl	8000f96 <lcd_goto_XY>
				lcd_send_string("WAIT LED TO GO");
 8000760:	4b2f      	ldr	r3, [pc, #188]	; (8000820 <fsm_auto_run+0x36c>)
 8000762:	0018      	movs	r0, r3
 8000764:	f000 fbf7 	bl	8000f56 <lcd_send_string>
				return;
 8000768:	e0d2      	b.n	8000910 <fsm_auto_run+0x45c>
			}
			break;
		case auto_yellow_red:
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 on
 800076a:	2390      	movs	r3, #144	; 0x90
 800076c:	05db      	lsls	r3, r3, #23
 800076e:	2200      	movs	r2, #0
 8000770:	2110      	movs	r1, #16
 8000772:	0018      	movs	r0, r3
 8000774:	f001 fd89 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET); // green 0 off
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	0059      	lsls	r1, r3, #1
 800077c:	2390      	movs	r3, #144	; 0x90
 800077e:	05db      	lsls	r3, r3, #23
 8000780:	2201      	movs	r2, #1
 8000782:	0018      	movs	r0, r3
 8000784:	f001 fd81 	bl	800228a <HAL_GPIO_WritePin>
			if(timer_flag[0] == 1){
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <fsm_auto_run+0x364>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d149      	bne.n	8000824 <fsm_auto_run+0x370>
				status = auto_red_green;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <fsm_auto_run+0x340>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <fsm_auto_run+0x348>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	0019      	movs	r1, r3
 800079c:	2000      	movs	r0, #0
 800079e:	f001 f987 	bl	8001ab0 <setTimer>
				count0 = (time_red_green + time_red_yellow)/1000;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <fsm_auto_run+0x348>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <fsm_auto_run+0x34c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	18d3      	adds	r3, r2, r3
 80007ac:	22fa      	movs	r2, #250	; 0xfa
 80007ae:	0091      	lsls	r1, r2, #2
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fd33 	bl	800021c <__divsi3>
 80007b6:	0003      	movs	r3, r0
 80007b8:	001a      	movs	r2, r3
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <fsm_auto_run+0x350>)
 80007bc:	601a      	str	r2, [r3, #0]
				count1 = time_red_green / 1000;
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <fsm_auto_run+0x348>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	22fa      	movs	r2, #250	; 0xfa
 80007c4:	0091      	lsls	r1, r2, #2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fd28 	bl	800021c <__divsi3>
 80007cc:	0003      	movs	r3, r0
 80007ce:	001a      	movs	r2, r3
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <fsm_auto_run+0x354>)
 80007d2:	601a      	str	r2, [r3, #0]
				updateClockBuffer(count0, count1);
 80007d4:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <fsm_auto_run+0x350>)
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <fsm_auto_run+0x354>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	0019      	movs	r1, r3
 80007de:	0010      	movs	r0, r2
 80007e0:	f000 fdaa 	bl	8001338 <updateClockBuffer>
			}

			break;
 80007e4:	e01e      	b.n	8000824 <fsm_auto_run+0x370>
			break;
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	e01d      	b.n	8000826 <fsm_auto_run+0x372>
			break;
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	e01b      	b.n	8000826 <fsm_auto_run+0x372>
			break;
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	e019      	b.n	8000826 <fsm_auto_run+0x372>
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	20000068 	.word	0x20000068
 80007f8:	08005348 	.word	0x08005348
 80007fc:	20000014 	.word	0x20000014
 8000800:	20000018 	.word	0x20000018
 8000804:	2000006c 	.word	0x2000006c
 8000808:	20000070 	.word	0x20000070
 800080c:	08005288 	.word	0x08005288
 8000810:	08005294 	.word	0x08005294
 8000814:	48000400 	.word	0x48000400
 8000818:	20000020 	.word	0x20000020
 800081c:	080052a8 	.word	0x080052a8
 8000820:	080052b8 	.word	0x080052b8
			break;
 8000824:	46c0      	nop			; (mov r8, r8)
		default: // ----- MANUAL MODE & SETTING MODE & SLOW MODE---------
			return;
	}

	if(timer_flag[2] == 1){
 8000826:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <fsm_auto_run+0x460>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d105      	bne.n	800083a <fsm_auto_run+0x386>
		setTimer(2, 20);
 800082e:	2114      	movs	r1, #20
 8000830:	2002      	movs	r0, #2
 8000832:	f001 f93d 	bl	8001ab0 <setTimer>
		Scan7SEG();
 8000836:	f000 fbfb 	bl	8001030 <Scan7SEG>
	}
	if(timer_flag[1] == 1){
 800083a:	4b36      	ldr	r3, [pc, #216]	; (8000914 <fsm_auto_run+0x460>)
 800083c:	685b      	ldr	r3, [r3, #4]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d117      	bne.n	8000872 <fsm_auto_run+0x3be>
		setTimer(1, 1000);
 8000842:	23fa      	movs	r3, #250	; 0xfa
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	0019      	movs	r1, r3
 8000848:	2001      	movs	r0, #1
 800084a:	f001 f931 	bl	8001ab0 <setTimer>
		count0 --; count1 --;
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <fsm_auto_run+0x464>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	1e5a      	subs	r2, r3, #1
 8000854:	4b30      	ldr	r3, [pc, #192]	; (8000918 <fsm_auto_run+0x464>)
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	4b30      	ldr	r3, [pc, #192]	; (800091c <fsm_auto_run+0x468>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	1e5a      	subs	r2, r3, #1
 800085e:	4b2f      	ldr	r3, [pc, #188]	; (800091c <fsm_auto_run+0x468>)
 8000860:	601a      	str	r2, [r3, #0]
		updateClockBuffer(count0, count1);
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <fsm_auto_run+0x464>)
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	4b2d      	ldr	r3, [pc, #180]	; (800091c <fsm_auto_run+0x468>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	0019      	movs	r1, r3
 800086c:	0010      	movs	r0, r2
 800086e:	f000 fd63 	bl	8001338 <updateClockBuffer>
	}
	// -------SWITCHING SLOW MODE ---------------
	if(isButtonPress(0)==1){
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fe06 	bl	8000484 <isButtonPress>
 8000878:	0003      	movs	r3, r0
 800087a:	2b01      	cmp	r3, #1
 800087c:	d11f      	bne.n	80008be <fsm_auto_run+0x40a>
		single_LED_off();// ------ALL LED OFF----------
 800087e:	f000 fd8b 	bl	8001398 <single_LED_off>
		Diable_Led(); //--- Disable led 7 segment ------
 8000882:	f000 fbb1 	bl	8000fe8 <Diable_Led>
		status = SLOW;
 8000886:	4b26      	ldr	r3, [pc, #152]	; (8000920 <fsm_auto_run+0x46c>)
 8000888:	2219      	movs	r2, #25
 800088a:	601a      	str	r2, [r3, #0]
		setTimer(0, 500);
 800088c:	23fa      	movs	r3, #250	; 0xfa
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	0019      	movs	r1, r3
 8000892:	2000      	movs	r0, #0
 8000894:	f001 f90c 	bl	8001ab0 <setTimer>
		lcd_clear_display(); // ----CLEAR LCD ----
 8000898:	f000 fb72 	bl	8000f80 <lcd_clear_display>
		lcd_goto_XY(1, 0);
 800089c:	2100      	movs	r1, #0
 800089e:	2001      	movs	r0, #1
 80008a0:	f000 fb79 	bl	8000f96 <lcd_goto_XY>
		lcd_send_string("MODE: SLOW");
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <fsm_auto_run+0x470>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fb55 	bl	8000f56 <lcd_send_string>
		lcd_goto_XY(0, 0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 fb71 	bl	8000f96 <lcd_goto_XY>
		lcd_send_string("FREE-STAY ALERT");
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <fsm_auto_run+0x474>)
 80008b6:	0018      	movs	r0, r3
 80008b8:	f000 fb4d 	bl	8000f56 <lcd_send_string>
		return;
 80008bc:	e028      	b.n	8000910 <fsm_auto_run+0x45c>
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 80008be:	2002      	movs	r0, #2
 80008c0:	f7ff fde0 	bl	8000484 <isButtonPress>
 80008c4:	0003      	movs	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d122      	bne.n	8000910 <fsm_auto_run+0x45c>
		time_red_yellow = 0;
 80008ca:	4b18      	ldr	r3, [pc, #96]	; (800092c <fsm_auto_run+0x478>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <fsm_auto_run+0x47c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
		single_LED_off();
 80008d6:	f000 fd5f 	bl	8001398 <single_LED_off>
		status = set_green;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <fsm_auto_run+0x46c>)
 80008dc:	2208      	movs	r2, #8
 80008de:	601a      	str	r2, [r3, #0]
		setTimer(0, 100);
 80008e0:	2164      	movs	r1, #100	; 0x64
 80008e2:	2000      	movs	r0, #0
 80008e4:	f001 f8e4 	bl	8001ab0 <setTimer>

		lcd_clear_display(); // ----CLEAR LCD ----
 80008e8:	f000 fb4a 	bl	8000f80 <lcd_clear_display>
		lcd_goto_XY(1, 0);
 80008ec:	2100      	movs	r1, #0
 80008ee:	2001      	movs	r0, #1
 80008f0:	f000 fb51 	bl	8000f96 <lcd_goto_XY>
		lcd_send_string("MODE: SETTING");
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <fsm_auto_run+0x480>)
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 fb2d 	bl	8000f56 <lcd_send_string>
		lcd_goto_XY(0, 0);
 80008fc:	2100      	movs	r1, #0
 80008fe:	2000      	movs	r0, #0
 8000900:	f000 fb49 	bl	8000f96 <lcd_goto_XY>
		lcd_send_string("INCREASE TIMELED");
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <fsm_auto_run+0x484>)
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fb25 	bl	8000f56 <lcd_send_string>
 800090c:	e000      	b.n	8000910 <fsm_auto_run+0x45c>
			return;
 800090e:	46c0      	nop			; (mov r8, r8)
	}
}
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000020 	.word	0x20000020
 8000918:	2000006c 	.word	0x2000006c
 800091c:	20000070 	.word	0x20000070
 8000920:	20000068 	.word	0x20000068
 8000924:	080052c8 	.word	0x080052c8
 8000928:	080052d4 	.word	0x080052d4
 800092c:	20000018 	.word	0x20000018
 8000930:	20000014 	.word	0x20000014
 8000934:	080052e4 	.word	0x080052e4
 8000938:	080052f4 	.word	0x080052f4

0800093c <fsm_manual>:
 *      Author: Admin
 */

#include "fsm_manual.h"

void fsm_manual(){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	switch (status) {
 8000940:	4b6e      	ldr	r3, [pc, #440]	; (8000afc <fsm_manual+0x1c0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b05      	cmp	r3, #5
 8000946:	d002      	beq.n	800094e <fsm_manual+0x12>
 8000948:	2b06      	cmp	r3, #6
 800094a:	d05e      	beq.n	8000a0a <fsm_manual+0xce>
				lcd_send_string("PLEASE SLOW DOWN");
				return;
			}
			break;
		default:
			return;
 800094c:	e0d4      	b.n	8000af8 <fsm_manual+0x1bc>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 800094e:	2380      	movs	r3, #128	; 0x80
 8000950:	0159      	lsls	r1, r3, #5
 8000952:	2390      	movs	r3, #144	; 0x90
 8000954:	05db      	lsls	r3, r3, #23
 8000956:	2200      	movs	r2, #0
 8000958:	0018      	movs	r0, r3
 800095a:	f001 fc96 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800095e:	4b68      	ldr	r3, [pc, #416]	; (8000b00 <fsm_manual+0x1c4>)
 8000960:	2200      	movs	r2, #0
 8000962:	2110      	movs	r1, #16
 8000964:	0018      	movs	r0, r3
 8000966:	f001 fc90 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 800096a:	2390      	movs	r3, #144	; 0x90
 800096c:	05db      	lsls	r3, r3, #23
 800096e:	2201      	movs	r2, #1
 8000970:	2104      	movs	r1, #4
 8000972:	0018      	movs	r0, r3
 8000974:	f001 fc89 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	0059      	lsls	r1, r3, #1
 800097c:	2390      	movs	r3, #144	; 0x90
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	2201      	movs	r2, #1
 8000982:	0018      	movs	r0, r3
 8000984:	f001 fc81 	bl	800228a <HAL_GPIO_WritePin>
			if(isButtonPress(1) == 1){
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff fd7b 	bl	8000484 <isButtonPress>
 800098e:	0003      	movs	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d102      	bne.n	800099a <fsm_manual+0x5e>
				status = manual_green_red;
 8000994:	4b59      	ldr	r3, [pc, #356]	; (8000afc <fsm_manual+0x1c0>)
 8000996:	2206      	movs	r2, #6
 8000998:	601a      	str	r2, [r3, #0]
			if(isButtonPress(0) == 1){
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fd72 	bl	8000484 <isButtonPress>
 80009a0:	0003      	movs	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d000      	beq.n	80009a8 <fsm_manual+0x6c>
 80009a6:	e08d      	b.n	8000ac4 <fsm_manual+0x188>
				status = auto_red_green;
 80009a8:	4b54      	ldr	r3, [pc, #336]	; (8000afc <fsm_manual+0x1c0>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 80009ae:	4b55      	ldr	r3, [pc, #340]	; (8000b04 <fsm_manual+0x1c8>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4b55      	ldr	r3, [pc, #340]	; (8000b08 <fsm_manual+0x1cc>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	18d3      	adds	r3, r2, r3
 80009b8:	22fa      	movs	r2, #250	; 0xfa
 80009ba:	0091      	lsls	r1, r2, #2
 80009bc:	0018      	movs	r0, r3
 80009be:	f7ff fc2d 	bl	800021c <__divsi3>
 80009c2:	0003      	movs	r3, r0
 80009c4:	001a      	movs	r2, r3
 80009c6:	4b51      	ldr	r3, [pc, #324]	; (8000b0c <fsm_manual+0x1d0>)
 80009c8:	601a      	str	r2, [r3, #0]
				count1 = time_red_green / 1000;
 80009ca:	4b4e      	ldr	r3, [pc, #312]	; (8000b04 <fsm_manual+0x1c8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	22fa      	movs	r2, #250	; 0xfa
 80009d0:	0091      	lsls	r1, r2, #2
 80009d2:	0018      	movs	r0, r3
 80009d4:	f7ff fc22 	bl	800021c <__divsi3>
 80009d8:	0003      	movs	r3, r0
 80009da:	001a      	movs	r2, r3
 80009dc:	4b4c      	ldr	r3, [pc, #304]	; (8000b10 <fsm_manual+0x1d4>)
 80009de:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 80009e0:	4b48      	ldr	r3, [pc, #288]	; (8000b04 <fsm_manual+0x1c8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	0019      	movs	r1, r3
 80009e6:	2000      	movs	r0, #0
 80009e8:	f001 f862 	bl	8001ab0 <setTimer>
				lcd_clear_display();
 80009ec:	f000 fac8 	bl	8000f80 <lcd_clear_display>
				lcd_send_string("MODE: AUTO");
 80009f0:	4b48      	ldr	r3, [pc, #288]	; (8000b14 <fsm_manual+0x1d8>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 faaf 	bl	8000f56 <lcd_send_string>
				lcd_goto_XY(0, 0);
 80009f8:	2100      	movs	r1, #0
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 facb 	bl	8000f96 <lcd_goto_XY>
				lcd_send_string("PLEASE SLOW DOWN");
 8000a00:	4b45      	ldr	r3, [pc, #276]	; (8000b18 <fsm_manual+0x1dc>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 faa7 	bl	8000f56 <lcd_send_string>
				return;
 8000a08:	e076      	b.n	8000af8 <fsm_manual+0x1bc>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000a0a:	2390      	movs	r3, #144	; 0x90
 8000a0c:	05db      	lsls	r3, r3, #23
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2104      	movs	r1, #4
 8000a12:	0018      	movs	r0, r3
 8000a14:	f001 fc39 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	0059      	lsls	r1, r3, #1
 8000a1c:	2390      	movs	r3, #144	; 0x90
 8000a1e:	05db      	lsls	r3, r3, #23
 8000a20:	2200      	movs	r2, #0
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 fc31 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	0159      	lsls	r1, r3, #5
 8000a2c:	2390      	movs	r3, #144	; 0x90
 8000a2e:	05db      	lsls	r3, r3, #23
 8000a30:	2201      	movs	r2, #1
 8000a32:	0018      	movs	r0, r3
 8000a34:	f001 fc29 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000a38:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <fsm_manual+0x1c4>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2110      	movs	r1, #16
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fc23 	bl	800228a <HAL_GPIO_WritePin>
			if(isButtonPress(1) == 1){
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fd1d 	bl	8000484 <isButtonPress>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d102      	bne.n	8000a56 <fsm_manual+0x11a>
				status = manual_red_green;
 8000a50:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <fsm_manual+0x1c0>)
 8000a52:	2205      	movs	r2, #5
 8000a54:	601a      	str	r2, [r3, #0]
			if(isButtonPress(0) == 1){
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff fd14 	bl	8000484 <isButtonPress>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d132      	bne.n	8000ac8 <fsm_manual+0x18c>
				status = auto_green_red;
 8000a62:	4b26      	ldr	r3, [pc, #152]	; (8000afc <fsm_manual+0x1c0>)
 8000a64:	2203      	movs	r2, #3
 8000a66:	601a      	str	r2, [r3, #0]
				count0 = time_red_green/1000;
 8000a68:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <fsm_manual+0x1c8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	22fa      	movs	r2, #250	; 0xfa
 8000a6e:	0091      	lsls	r1, r2, #2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f7ff fbd3 	bl	800021c <__divsi3>
 8000a76:	0003      	movs	r3, r0
 8000a78:	001a      	movs	r2, r3
 8000a7a:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <fsm_manual+0x1d0>)
 8000a7c:	601a      	str	r2, [r3, #0]
				count1 =   (time_red_green + time_red_yellow)/1000;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <fsm_manual+0x1c8>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <fsm_manual+0x1cc>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	18d3      	adds	r3, r2, r3
 8000a88:	22fa      	movs	r2, #250	; 0xfa
 8000a8a:	0091      	lsls	r1, r2, #2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff fbc5 	bl	800021c <__divsi3>
 8000a92:	0003      	movs	r3, r0
 8000a94:	001a      	movs	r2, r3
 8000a96:	4b1e      	ldr	r3, [pc, #120]	; (8000b10 <fsm_manual+0x1d4>)
 8000a98:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <fsm_manual+0x1c8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f001 f805 	bl	8001ab0 <setTimer>
				lcd_clear_display();
 8000aa6:	f000 fa6b 	bl	8000f80 <lcd_clear_display>
				lcd_send_string("MODE: AUTO");
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <fsm_manual+0x1d8>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 fa52 	bl	8000f56 <lcd_send_string>
				lcd_goto_XY(0, 0);
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 fa6e 	bl	8000f96 <lcd_goto_XY>
				lcd_send_string("PLEASE SLOW DOWN");
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <fsm_manual+0x1dc>)
 8000abc:	0018      	movs	r0, r3
 8000abe:	f000 fa4a 	bl	8000f56 <lcd_send_string>
				return;
 8000ac2:	e019      	b.n	8000af8 <fsm_manual+0x1bc>
			break;
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	e000      	b.n	8000aca <fsm_manual+0x18e>
			break;
 8000ac8:	46c0      	nop			; (mov r8, r8)
	}

	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 8000aca:	2002      	movs	r0, #2
 8000acc:	f7ff fcda 	bl	8000484 <isButtonPress>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d110      	bne.n	8000af8 <fsm_manual+0x1bc>
		setTimer(0, 100);
 8000ad6:	2164      	movs	r1, #100	; 0x64
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f000 ffe9 	bl	8001ab0 <setTimer>
		single_LED_off();
 8000ade:	f000 fc5b 	bl	8001398 <single_LED_off>
		status = set_green;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <fsm_manual+0x1c0>)
 8000ae4:	2208      	movs	r2, #8
 8000ae6:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <fsm_manual+0x1c8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
		time_red_yellow = 0;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <fsm_manual+0x1cc>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
		lcd_clear_display(); // ----CLEAR LCD ----
 8000af4:	f000 fa44 	bl	8000f80 <lcd_clear_display>
	}
}
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000068 	.word	0x20000068
 8000b00:	48000400 	.word	0x48000400
 8000b04:	20000014 	.word	0x20000014
 8000b08:	20000018 	.word	0x20000018
 8000b0c:	2000006c 	.word	0x2000006c
 8000b10:	20000070 	.word	0x20000070
 8000b14:	08005308 	.word	0x08005308
 8000b18:	08005314 	.word	0x08005314

08000b1c <fsm_setting>:
#include "fsm_setting.h"

int increment[5] = {1000,2000,5000,10000,20000};
int i = 0;

void fsm_setting(){
 8000b1c:	b5b0      	push	{r4, r5, r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	switch (status) {
 8000b20:	4b77      	ldr	r3, [pc, #476]	; (8000d00 <fsm_setting+0x1e4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b07      	cmp	r3, #7
 8000b26:	d062      	beq.n	8000bee <fsm_setting+0xd2>
 8000b28:	2b08      	cmp	r3, #8
 8000b2a:	d000      	beq.n	8000b2e <fsm_setting+0x12>
 8000b2c:	e0e4      	b.n	8000cf8 <fsm_setting+0x1dc>
		case set_green:
			if(timer_flag[0] == 1){
 8000b2e:	4b75      	ldr	r3, [pc, #468]	; (8000d04 <fsm_setting+0x1e8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d110      	bne.n	8000b58 <fsm_setting+0x3c>
				setTimer(0, 100);
 8000b36:	2164      	movs	r1, #100	; 0x64
 8000b38:	2000      	movs	r0, #0
 8000b3a:	f000 ffb9 	bl	8001ab0 <setTimer>
				HAL_GPIO_TogglePin(G0_GPIO_Port, G0_Pin);
 8000b3e:	2380      	movs	r3, #128	; 0x80
 8000b40:	005a      	lsls	r2, r3, #1
 8000b42:	2390      	movs	r3, #144	; 0x90
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	0011      	movs	r1, r2
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f001 fbbb 	bl	80022c4 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8000b4e:	4b6e      	ldr	r3, [pc, #440]	; (8000d08 <fsm_setting+0x1ec>)
 8000b50:	2110      	movs	r1, #16
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 fbb6 	bl	80022c4 <HAL_GPIO_TogglePin>
			}
			if(isButtonPress(0) == 1){  // TIME INCREASE
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff fc93 	bl	8000484 <isButtonPress>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d111      	bne.n	8000b88 <fsm_setting+0x6c>
				time_red_green += increment[i];
 8000b64:	4b69      	ldr	r3, [pc, #420]	; (8000d0c <fsm_setting+0x1f0>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b69      	ldr	r3, [pc, #420]	; (8000d10 <fsm_setting+0x1f4>)
 8000b6a:	0092      	lsls	r2, r2, #2
 8000b6c:	58d2      	ldr	r2, [r2, r3]
 8000b6e:	4b69      	ldr	r3, [pc, #420]	; (8000d14 <fsm_setting+0x1f8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	18d2      	adds	r2, r2, r3
 8000b74:	4b67      	ldr	r3, [pc, #412]	; (8000d14 <fsm_setting+0x1f8>)
 8000b76:	601a      	str	r2, [r3, #0]
				if(time_red_green > 98000){
 8000b78:	4b66      	ldr	r3, [pc, #408]	; (8000d14 <fsm_setting+0x1f8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a66      	ldr	r2, [pc, #408]	; (8000d18 <fsm_setting+0x1fc>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	dd02      	ble.n	8000b88 <fsm_setting+0x6c>
					time_red_green = 0;
 8000b82:	4b64      	ldr	r3, [pc, #400]	; (8000d14 <fsm_setting+0x1f8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButtonPress(2) == 1){
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fc7b 	bl	8000484 <isButtonPress>
 8000b8e:	0003      	movs	r3, r0
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d113      	bne.n	8000bbc <fsm_setting+0xa0>
				status = set_yellow;
 8000b94:	4b5a      	ldr	r3, [pc, #360]	; (8000d00 <fsm_setting+0x1e4>)
 8000b96:	2207      	movs	r2, #7
 8000b98:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	0059      	lsls	r1, r3, #1
 8000b9e:	2390      	movs	r3, #144	; 0x90
 8000ba0:	05db      	lsls	r3, r3, #23
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 fb70 	bl	800228a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000baa:	4b57      	ldr	r3, [pc, #348]	; (8000d08 <fsm_setting+0x1ec>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	2110      	movs	r1, #16
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 fb6a 	bl	800228a <HAL_GPIO_WritePin>
				i = 0;
 8000bb6:	4b55      	ldr	r3, [pc, #340]	; (8000d0c <fsm_setting+0x1f0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
			}
			updateClockBuffer(time_red_green/1000, increment[i]/1000);
 8000bbc:	4b55      	ldr	r3, [pc, #340]	; (8000d14 <fsm_setting+0x1f8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	22fa      	movs	r2, #250	; 0xfa
 8000bc2:	0091      	lsls	r1, r2, #2
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff fb29 	bl	800021c <__divsi3>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	001c      	movs	r4, r3
 8000bce:	4b4f      	ldr	r3, [pc, #316]	; (8000d0c <fsm_setting+0x1f0>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	4b4f      	ldr	r3, [pc, #316]	; (8000d10 <fsm_setting+0x1f4>)
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	58d3      	ldr	r3, [r2, r3]
 8000bd8:	22fa      	movs	r2, #250	; 0xfa
 8000bda:	0091      	lsls	r1, r2, #2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fb1d 	bl	800021c <__divsi3>
 8000be2:	0003      	movs	r3, r0
 8000be4:	0019      	movs	r1, r3
 8000be6:	0020      	movs	r0, r4
 8000be8:	f000 fba6 	bl	8001338 <updateClockBuffer>
			break;
 8000bec:	e067      	b.n	8000cbe <fsm_setting+0x1a2>
		case set_yellow:
			if(timer_flag[0] == 1){
 8000bee:	4b45      	ldr	r3, [pc, #276]	; (8000d04 <fsm_setting+0x1e8>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d10e      	bne.n	8000c14 <fsm_setting+0xf8>
				setTimer(0, 100);
 8000bf6:	2164      	movs	r1, #100	; 0x64
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f000 ff59 	bl	8001ab0 <setTimer>
				HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
 8000bfe:	2390      	movs	r3, #144	; 0x90
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	2110      	movs	r1, #16
 8000c04:	0018      	movs	r0, r3
 8000c06:	f001 fb5d 	bl	80022c4 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000c0a:	4b3f      	ldr	r3, [pc, #252]	; (8000d08 <fsm_setting+0x1ec>)
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f001 fb58 	bl	80022c4 <HAL_GPIO_TogglePin>
			}
			if(isButtonPress(0) == 1){
 8000c14:	2000      	movs	r0, #0
 8000c16:	f7ff fc35 	bl	8000484 <isButtonPress>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d109      	bne.n	8000c34 <fsm_setting+0x118>
				time_red_yellow += increment[i];
 8000c20:	4b3a      	ldr	r3, [pc, #232]	; (8000d0c <fsm_setting+0x1f0>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b3a      	ldr	r3, [pc, #232]	; (8000d10 <fsm_setting+0x1f4>)
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	58d2      	ldr	r2, [r2, r3]
 8000c2a:	4b3c      	ldr	r3, [pc, #240]	; (8000d1c <fsm_setting+0x200>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	18d2      	adds	r2, r2, r3
 8000c30:	4b3a      	ldr	r3, [pc, #232]	; (8000d1c <fsm_setting+0x200>)
 8000c32:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPress(2) == 1){
 8000c34:	2002      	movs	r0, #2
 8000c36:	f7ff fc25 	bl	8000484 <isButtonPress>
 8000c3a:	0003      	movs	r3, r0
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d125      	bne.n	8000c8c <fsm_setting+0x170>
				if( ( (time_red_yellow + time_red_green) >= 100000)  && (time_red_green == 0) ){
 8000c40:	4b36      	ldr	r3, [pc, #216]	; (8000d1c <fsm_setting+0x200>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <fsm_setting+0x1f8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	4a35      	ldr	r2, [pc, #212]	; (8000d20 <fsm_setting+0x204>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	dd17      	ble.n	8000c80 <fsm_setting+0x164>
 8000c50:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <fsm_setting+0x1f8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d113      	bne.n	8000c80 <fsm_setting+0x164>
					HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 8000c58:	2390      	movs	r3, #144	; 0x90
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2110      	movs	r1, #16
 8000c60:	0018      	movs	r0, r3
 8000c62:	f001 fb12 	bl	800228a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8000c66:	4b28      	ldr	r3, [pc, #160]	; (8000d08 <fsm_setting+0x1ec>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f001 fb0c 	bl	800228a <HAL_GPIO_WritePin>
					status = set_green;
 8000c72:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <fsm_setting+0x1e4>)
 8000c74:	2208      	movs	r2, #8
 8000c76:	601a      	str	r2, [r3, #0]
					i = 0;
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <fsm_setting+0x1f0>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	e005      	b.n	8000c8c <fsm_setting+0x170>
				}
				else {
					lcd_clear_display();
 8000c80:	f000 f97e 	bl	8000f80 <lcd_clear_display>
					status = auto_init;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <fsm_setting+0x1e4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
					return;
 8000c8a:	e036      	b.n	8000cfa <fsm_setting+0x1de>
				}
			}
			updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <fsm_setting+0x200>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	22fa      	movs	r2, #250	; 0xfa
 8000c92:	0091      	lsls	r1, r2, #2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff fac1 	bl	800021c <__divsi3>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	001c      	movs	r4, r3
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <fsm_setting+0x1f0>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <fsm_setting+0x1f4>)
 8000ca4:	0092      	lsls	r2, r2, #2
 8000ca6:	58d3      	ldr	r3, [r2, r3]
 8000ca8:	22fa      	movs	r2, #250	; 0xfa
 8000caa:	0091      	lsls	r1, r2, #2
 8000cac:	0018      	movs	r0, r3
 8000cae:	f7ff fab5 	bl	800021c <__divsi3>
 8000cb2:	0003      	movs	r3, r0
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	f000 fb3e 	bl	8001338 <updateClockBuffer>
			break;
 8000cbc:	46c0      	nop			; (mov r8, r8)
		default:
			return;
	}

	if(isButtonPress(1) == 1){
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f7ff fbe0 	bl	8000484 <isButtonPress>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d10b      	bne.n	8000ce2 <fsm_setting+0x1c6>
		 ++i;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <fsm_setting+0x1f0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <fsm_setting+0x1f0>)
 8000cd2:	601a      	str	r2, [r3, #0]
		 if(i >=5) i = 0;
 8000cd4:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <fsm_setting+0x1f0>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	dd02      	ble.n	8000ce2 <fsm_setting+0x1c6>
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <fsm_setting+0x1f0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag[2] == 1){
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <fsm_setting+0x1e8>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d107      	bne.n	8000cfa <fsm_setting+0x1de>
		setTimer(2, 20);
 8000cea:	2114      	movs	r1, #20
 8000cec:	2002      	movs	r0, #2
 8000cee:	f000 fedf 	bl	8001ab0 <setTimer>
		Scan7SEG();
 8000cf2:	f000 f99d 	bl	8001030 <Scan7SEG>
 8000cf6:	e000      	b.n	8000cfa <fsm_setting+0x1de>
			return;
 8000cf8:	46c0      	nop			; (mov r8, r8)
	}

}
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	20000068 	.word	0x20000068
 8000d04:	20000020 	.word	0x20000020
 8000d08:	48000400 	.word	0x48000400
 8000d0c:	20000064 	.word	0x20000064
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000014 	.word	0x20000014
 8000d18:	00017ed0 	.word	0x00017ed0
 8000d1c:	20000018 	.word	0x20000018
 8000d20:	0001869f 	.word	0x0001869f

08000d24 <fsm_slow_run>:
 *  Created on: Nov 8, 2024
 *      Author: xjkpr
 */
#include "fsm_slow.h"

void fsm_slow_run(){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	if(status == SLOW){
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <fsm_slow_run+0xb8>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b19      	cmp	r3, #25
 8000d2e:	d151      	bne.n	8000dd4 <fsm_slow_run+0xb0>
		if(timer_flag[0]==1){
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <fsm_slow_run+0xbc>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d110      	bne.n	8000d5a <fsm_slow_run+0x36>
			HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
 8000d38:	2390      	movs	r3, #144	; 0x90
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f001 fac0 	bl	80022c4 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000d44:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <fsm_slow_run+0xc0>)
 8000d46:	2120      	movs	r1, #32
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f001 fabb 	bl	80022c4 <HAL_GPIO_TogglePin>
			setTimer(0, 500);
 8000d4e:	23fa      	movs	r3, #250	; 0xfa
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	0019      	movs	r1, r3
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 feab 	bl	8001ab0 <setTimer>
		}
		if(isButtonPress(0)==1){
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fb92 	bl	8000484 <isButtonPress>
 8000d60:	0003      	movs	r3, r0
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d137      	bne.n	8000dd6 <fsm_slow_run+0xb2>
			lcd_clear_display();
 8000d66:	f000 f90b 	bl	8000f80 <lcd_clear_display>
			lcd_goto_XY(1, 0);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f000 f912 	bl	8000f96 <lcd_goto_XY>
			lcd_send_string("MODE: AUTO");
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <fsm_slow_run+0xc4>)
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 f8ee 	bl	8000f56 <lcd_send_string>
			lcd_goto_XY(0, 0);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	f000 f90a 	bl	8000f96 <lcd_goto_XY>
			lcd_send_string("PLEASE SLOW DOWN");
 8000d82:	4b1a      	ldr	r3, [pc, #104]	; (8000dec <fsm_slow_run+0xc8>)
 8000d84:	0018      	movs	r0, r3
 8000d86:	f000 f8e6 	bl	8000f56 <lcd_send_string>
			single_LED_off();
 8000d8a:	f000 fb05 	bl	8001398 <single_LED_off>
			status = auto_red_green;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <fsm_slow_run+0xb8>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	601a      	str	r2, [r3, #0]
			count0 = (time_red_green + time_red_yellow)/1000;
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <fsm_slow_run+0xcc>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <fsm_slow_run+0xd0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	22fa      	movs	r2, #250	; 0xfa
 8000da0:	0091      	lsls	r1, r2, #2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fa3a 	bl	800021c <__divsi3>
 8000da8:	0003      	movs	r3, r0
 8000daa:	001a      	movs	r2, r3
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <fsm_slow_run+0xd4>)
 8000dae:	601a      	str	r2, [r3, #0]
			count1 = time_red_green / 1000;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <fsm_slow_run+0xcc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	22fa      	movs	r2, #250	; 0xfa
 8000db6:	0091      	lsls	r1, r2, #2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f7ff fa2f 	bl	800021c <__divsi3>
 8000dbe:	0003      	movs	r3, r0
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <fsm_slow_run+0xd8>)
 8000dc4:	601a      	str	r2, [r3, #0]
			setTimer(0, time_red_green);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <fsm_slow_run+0xcc>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	0019      	movs	r1, r3
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f000 fe6f 	bl	8001ab0 <setTimer>
 8000dd2:	e000      	b.n	8000dd6 <fsm_slow_run+0xb2>
		}
	}
	else
		return;
 8000dd4:	46c0      	nop			; (mov r8, r8)
}
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	20000068 	.word	0x20000068
 8000de0:	20000020 	.word	0x20000020
 8000de4:	48000400 	.word	0x48000400
 8000de8:	08005328 	.word	0x08005328
 8000dec:	08005334 	.word	0x08005334
 8000df0:	20000014 	.word	0x20000014
 8000df4:	20000018 	.word	0x20000018
 8000df8:	2000006c 	.word	0x2000006c
 8000dfc:	20000070 	.word	0x20000070

08000e00 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af02      	add	r7, sp, #8
 8000e06:	0002      	movs	r2, r0
 8000e08:	1dfb      	adds	r3, r7, #7
 8000e0a:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000e0c:	200f      	movs	r0, #15
 8000e0e:	183b      	adds	r3, r7, r0
 8000e10:	1dfa      	adds	r2, r7, #7
 8000e12:	7812      	ldrb	r2, [r2, #0]
 8000e14:	210f      	movs	r1, #15
 8000e16:	438a      	bics	r2, r1
 8000e18:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	011a      	lsls	r2, r3, #4
 8000e20:	240e      	movs	r4, #14
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e26:	183b      	adds	r3, r7, r0
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	b2da      	uxtb	r2, r3
 8000e30:	2108      	movs	r1, #8
 8000e32:	187b      	adds	r3, r7, r1
 8000e34:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e36:	183b      	adds	r3, r7, r0
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	220c      	movs	r2, #12
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2208      	movs	r2, #8
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e60:	187a      	adds	r2, r7, r1
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <lcd_send_cmd+0x78>)
 8000e64:	2364      	movs	r3, #100	; 0x64
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2304      	movs	r3, #4
 8000e6a:	214e      	movs	r1, #78	; 0x4e
 8000e6c:	f001 faec 	bl	8002448 <HAL_I2C_Master_Transmit>
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b005      	add	sp, #20
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	200000a0 	.word	0x200000a0

08000e7c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e7c:	b590      	push	{r4, r7, lr}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af02      	add	r7, sp, #8
 8000e82:	0002      	movs	r2, r0
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e88:	200f      	movs	r0, #15
 8000e8a:	183b      	adds	r3, r7, r0
 8000e8c:	1dfa      	adds	r2, r7, #7
 8000e8e:	7812      	ldrb	r2, [r2, #0]
 8000e90:	210f      	movs	r1, #15
 8000e92:	438a      	bics	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	011a      	lsls	r2, r3, #4
 8000e9c:	240e      	movs	r4, #14
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000ea2:	183b      	adds	r3, r7, r0
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	220d      	movs	r2, #13
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	2108      	movs	r1, #8
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000eb2:	183b      	adds	r3, r7, r0
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2209      	movs	r2, #9
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	220d      	movs	r2, #13
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	187b      	adds	r3, r7, r1
 8000ecc:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2209      	movs	r2, #9
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000edc:	187a      	adds	r2, r7, r1
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <lcd_send_data+0x78>)
 8000ee0:	2364      	movs	r3, #100	; 0x64
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	214e      	movs	r1, #78	; 0x4e
 8000ee8:	f001 faae 	bl	8002448 <HAL_I2C_Master_Transmit>
}
 8000eec:	46c0      	nop			; (mov r8, r8)
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b005      	add	sp, #20
 8000ef2:	bd90      	pop	{r4, r7, pc}
 8000ef4:	200000a0 	.word	0x200000a0

08000ef8 <lcd_init>:

void lcd_init (void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000efc:	2033      	movs	r0, #51	; 0x33
 8000efe:	f7ff ff7f 	bl	8000e00 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000f02:	2032      	movs	r0, #50	; 0x32
 8000f04:	f7ff ff7c 	bl	8000e00 <lcd_send_cmd>
	HAL_Delay(50);
 8000f08:	2032      	movs	r0, #50	; 0x32
 8000f0a:	f000 feb9 	bl	8001c80 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000f0e:	2028      	movs	r0, #40	; 0x28
 8000f10:	f7ff ff76 	bl	8000e00 <lcd_send_cmd>
	HAL_Delay(50);
 8000f14:	2032      	movs	r0, #50	; 0x32
 8000f16:	f000 feb3 	bl	8001c80 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	f7ff ff70 	bl	8000e00 <lcd_send_cmd>
	HAL_Delay(50);
 8000f20:	2032      	movs	r0, #50	; 0x32
 8000f22:	f000 fead 	bl	8001c80 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000f26:	2006      	movs	r0, #6
 8000f28:	f7ff ff6a 	bl	8000e00 <lcd_send_cmd>
	HAL_Delay(50);
 8000f2c:	2032      	movs	r0, #50	; 0x32
 8000f2e:	f000 fea7 	bl	8001c80 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000f32:	200c      	movs	r0, #12
 8000f34:	f7ff ff64 	bl	8000e00 <lcd_send_cmd>
	HAL_Delay(50);
 8000f38:	2032      	movs	r0, #50	; 0x32
 8000f3a:	f000 fea1 	bl	8001c80 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f7ff ff5e 	bl	8000e00 <lcd_send_cmd>
	HAL_Delay(50);
 8000f44:	2032      	movs	r0, #50	; 0x32
 8000f46:	f000 fe9b 	bl	8001c80 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000f4a:	2080      	movs	r0, #128	; 0x80
 8000f4c:	f7ff ff58 	bl	8000e00 <lcd_send_cmd>
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000f5e:	e006      	b.n	8000f6e <lcd_send_string+0x18>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	607a      	str	r2, [r7, #4]
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff ff87 	bl	8000e7c <lcd_send_data>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1f4      	bne.n	8000f60 <lcd_send_string+0xa>
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b002      	add	sp, #8
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000f84:	2001      	movs	r0, #1
 8000f86:	f7ff ff3b 	bl	8000e00 <lcd_send_cmd>
	HAL_Delay(5);
 8000f8a:	2005      	movs	r0, #5
 8000f8c:	f000 fe78 	bl	8001c80 <HAL_Delay>
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b084      	sub	sp, #16
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d10a      	bne.n	8000fbc <lcd_goto_XY+0x26>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	18d3      	adds	r3, r2, r3
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	18fb      	adds	r3, r7, r3
 8000fb6:	327f      	adds	r2, #127	; 0x7f
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	e00b      	b.n	8000fd4 <lcd_goto_XY+0x3e>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	3340      	adds	r3, #64	; 0x40
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	2280      	movs	r2, #128	; 0x80
 8000fc8:	4252      	negs	r2, r2
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b25a      	sxtb	r2, r3
 8000fce:	230f      	movs	r3, #15
 8000fd0:	18fb      	adds	r3, r7, r3
 8000fd2:	701a      	strb	r2, [r3, #0]
	}
	lcd_send_cmd(pos_Addr);
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f7ff ff10 	bl	8000e00 <lcd_send_cmd>
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b004      	add	sp, #16
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <Diable_Led>:
 */
#include "led_display.h"

int led_buffer[4] = {0,0,0,0};
int led_index = 0;
void Diable_Led(){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000fec:	2390      	movs	r3, #144	; 0x90
 8000fee:	05db      	lsls	r3, r3, #23
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f001 f948 	bl	800228a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <Diable_Led+0x40>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2102      	movs	r1, #2
 8001000:	0018      	movs	r0, r3
 8001002:	f001 f942 	bl	800228a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <Diable_Led+0x44>)
 8001008:	2200      	movs	r2, #0
 800100a:	2108      	movs	r1, #8
 800100c:	0018      	movs	r0, r3
 800100e:	f001 f93c 	bl	800228a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	0119      	lsls	r1, r3, #4
 8001016:	2390      	movs	r3, #144	; 0x90
 8001018:	05db      	lsls	r3, r3, #23
 800101a:	2200      	movs	r2, #0
 800101c:	0018      	movs	r0, r3
 800101e:	f001 f934 	bl	800228a <HAL_GPIO_WritePin>
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	48001400 	.word	0x48001400
 800102c:	48000400 	.word	0x48000400

08001030 <Scan7SEG>:
void Scan7SEG(){
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	Diable_Led();
 8001034:	f7ff ffd8 	bl	8000fe8 <Diable_Led>
	switch(led_index){
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <Scan7SEG+0xa8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2b03      	cmp	r3, #3
 800103e:	d02d      	beq.n	800109c <Scan7SEG+0x6c>
 8001040:	dc3a      	bgt.n	80010b8 <Scan7SEG+0x88>
 8001042:	2b02      	cmp	r3, #2
 8001044:	d01e      	beq.n	8001084 <Scan7SEG+0x54>
 8001046:	dc37      	bgt.n	80010b8 <Scan7SEG+0x88>
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <Scan7SEG+0x22>
 800104c:	2b01      	cmp	r3, #1
 800104e:	d00d      	beq.n	800106c <Scan7SEG+0x3c>
		case 3:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
			display7SEG(led_buffer[3]);
			break;
		default:
			break;
 8001050:	e032      	b.n	80010b8 <Scan7SEG+0x88>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8001052:	2390      	movs	r3, #144	; 0x90
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	2201      	movs	r2, #1
 8001058:	2101      	movs	r1, #1
 800105a:	0018      	movs	r0, r3
 800105c:	f001 f915 	bl	800228a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <Scan7SEG+0xac>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	0018      	movs	r0, r3
 8001066:	f000 f83f 	bl	80010e8 <display7SEG>
			break;
 800106a:	e026      	b.n	80010ba <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <Scan7SEG+0xb0>)
 800106e:	2201      	movs	r2, #1
 8001070:	2102      	movs	r1, #2
 8001072:	0018      	movs	r0, r3
 8001074:	f001 f909 	bl	800228a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <Scan7SEG+0xac>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f000 f833 	bl	80010e8 <display7SEG>
			break;
 8001082:	e01a      	b.n	80010ba <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <Scan7SEG+0xb4>)
 8001086:	2201      	movs	r2, #1
 8001088:	2108      	movs	r1, #8
 800108a:	0018      	movs	r0, r3
 800108c:	f001 f8fd 	bl	800228a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <Scan7SEG+0xac>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	0018      	movs	r0, r3
 8001096:	f000 f827 	bl	80010e8 <display7SEG>
			break;
 800109a:	e00e      	b.n	80010ba <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800109c:	2380      	movs	r3, #128	; 0x80
 800109e:	0119      	lsls	r1, r3, #4
 80010a0:	2390      	movs	r3, #144	; 0x90
 80010a2:	05db      	lsls	r3, r3, #23
 80010a4:	2201      	movs	r2, #1
 80010a6:	0018      	movs	r0, r3
 80010a8:	f001 f8ef 	bl	800228a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <Scan7SEG+0xac>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 f819 	bl	80010e8 <display7SEG>
			break;
 80010b6:	e000      	b.n	80010ba <Scan7SEG+0x8a>
			break;
 80010b8:	46c0      	nop			; (mov r8, r8)
	}
	if((++led_index) >= 4) led_index = 0;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <Scan7SEG+0xa8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <Scan7SEG+0xa8>)
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <Scan7SEG+0xa8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b03      	cmp	r3, #3
 80010ca:	dd02      	ble.n	80010d2 <Scan7SEG+0xa2>
 80010cc:	4b02      	ldr	r3, [pc, #8]	; (80010d8 <Scan7SEG+0xa8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000084 	.word	0x20000084
 80010dc:	20000074 	.word	0x20000074
 80010e0:	48001400 	.word	0x48001400
 80010e4:	48000400 	.word	0x48000400

080010e8 <display7SEG>:
void display7SEG(int num){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b09      	cmp	r3, #9
 80010f4:	d900      	bls.n	80010f8 <display7SEG+0x10>
 80010f6:	e113      	b.n	8001320 <display7SEG+0x238>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	009a      	lsls	r2, r3, #2
 80010fc:	4b8b      	ldr	r3, [pc, #556]	; (800132c <display7SEG+0x244>)
 80010fe:	18d3      	adds	r3, r2, r3
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	469f      	mov	pc, r3
	switch(num){
		case 0:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8001104:	4b8a      	ldr	r3, [pc, #552]	; (8001330 <display7SEG+0x248>)
 8001106:	2200      	movs	r2, #0
 8001108:	2101      	movs	r1, #1
 800110a:	0018      	movs	r0, r3
 800110c:	f001 f8bd 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8001110:	2390      	movs	r3, #144	; 0x90
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	2200      	movs	r2, #0
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	0018      	movs	r0, r3
 800111a:	f001 f8b6 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 800111e:	2390      	movs	r3, #144	; 0x90
 8001120:	05db      	lsls	r3, r3, #23
 8001122:	2200      	movs	r2, #0
 8001124:	2120      	movs	r1, #32
 8001126:	0018      	movs	r0, r3
 8001128:	f001 f8af 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 800112c:	4b81      	ldr	r3, [pc, #516]	; (8001334 <display7SEG+0x24c>)
 800112e:	2200      	movs	r2, #0
 8001130:	2102      	movs	r1, #2
 8001132:	0018      	movs	r0, r3
 8001134:	f001 f8a9 	bl	800228a <HAL_GPIO_WritePin>
			break;
 8001138:	e0f3      	b.n	8001322 <display7SEG+0x23a>
		case 1:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 800113a:	4b7d      	ldr	r3, [pc, #500]	; (8001330 <display7SEG+0x248>)
 800113c:	2201      	movs	r2, #1
 800113e:	2101      	movs	r1, #1
 8001140:	0018      	movs	r0, r3
 8001142:	f001 f8a2 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8001146:	2390      	movs	r3, #144	; 0x90
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	2200      	movs	r2, #0
 800114c:	2140      	movs	r1, #64	; 0x40
 800114e:	0018      	movs	r0, r3
 8001150:	f001 f89b 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8001154:	2390      	movs	r3, #144	; 0x90
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	2200      	movs	r2, #0
 800115a:	2120      	movs	r1, #32
 800115c:	0018      	movs	r0, r3
 800115e:	f001 f894 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8001162:	4b74      	ldr	r3, [pc, #464]	; (8001334 <display7SEG+0x24c>)
 8001164:	2200      	movs	r2, #0
 8001166:	2102      	movs	r1, #2
 8001168:	0018      	movs	r0, r3
 800116a:	f001 f88e 	bl	800228a <HAL_GPIO_WritePin>
			break;
 800116e:	e0d8      	b.n	8001322 <display7SEG+0x23a>
		case 2:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8001170:	4b6f      	ldr	r3, [pc, #444]	; (8001330 <display7SEG+0x248>)
 8001172:	2200      	movs	r2, #0
 8001174:	2101      	movs	r1, #1
 8001176:	0018      	movs	r0, r3
 8001178:	f001 f887 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 800117c:	2390      	movs	r3, #144	; 0x90
 800117e:	05db      	lsls	r3, r3, #23
 8001180:	2201      	movs	r2, #1
 8001182:	2140      	movs	r1, #64	; 0x40
 8001184:	0018      	movs	r0, r3
 8001186:	f001 f880 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 800118a:	2390      	movs	r3, #144	; 0x90
 800118c:	05db      	lsls	r3, r3, #23
 800118e:	2200      	movs	r2, #0
 8001190:	2120      	movs	r1, #32
 8001192:	0018      	movs	r0, r3
 8001194:	f001 f879 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8001198:	4b66      	ldr	r3, [pc, #408]	; (8001334 <display7SEG+0x24c>)
 800119a:	2200      	movs	r2, #0
 800119c:	2102      	movs	r1, #2
 800119e:	0018      	movs	r0, r3
 80011a0:	f001 f873 	bl	800228a <HAL_GPIO_WritePin>
			break;
 80011a4:	e0bd      	b.n	8001322 <display7SEG+0x23a>
		case 3:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 80011a6:	4b62      	ldr	r3, [pc, #392]	; (8001330 <display7SEG+0x248>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	2101      	movs	r1, #1
 80011ac:	0018      	movs	r0, r3
 80011ae:	f001 f86c 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 80011b2:	2390      	movs	r3, #144	; 0x90
 80011b4:	05db      	lsls	r3, r3, #23
 80011b6:	2201      	movs	r2, #1
 80011b8:	2140      	movs	r1, #64	; 0x40
 80011ba:	0018      	movs	r0, r3
 80011bc:	f001 f865 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 80011c0:	2390      	movs	r3, #144	; 0x90
 80011c2:	05db      	lsls	r3, r3, #23
 80011c4:	2200      	movs	r2, #0
 80011c6:	2120      	movs	r1, #32
 80011c8:	0018      	movs	r0, r3
 80011ca:	f001 f85e 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80011ce:	4b59      	ldr	r3, [pc, #356]	; (8001334 <display7SEG+0x24c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	2102      	movs	r1, #2
 80011d4:	0018      	movs	r0, r3
 80011d6:	f001 f858 	bl	800228a <HAL_GPIO_WritePin>
			break;
 80011da:	e0a2      	b.n	8001322 <display7SEG+0x23a>
		case 4:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 80011dc:	4b54      	ldr	r3, [pc, #336]	; (8001330 <display7SEG+0x248>)
 80011de:	2200      	movs	r2, #0
 80011e0:	2101      	movs	r1, #1
 80011e2:	0018      	movs	r0, r3
 80011e4:	f001 f851 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80011e8:	2390      	movs	r3, #144	; 0x90
 80011ea:	05db      	lsls	r3, r3, #23
 80011ec:	2200      	movs	r2, #0
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	0018      	movs	r0, r3
 80011f2:	f001 f84a 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 80011f6:	2390      	movs	r3, #144	; 0x90
 80011f8:	05db      	lsls	r3, r3, #23
 80011fa:	2201      	movs	r2, #1
 80011fc:	2120      	movs	r1, #32
 80011fe:	0018      	movs	r0, r3
 8001200:	f001 f843 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8001204:	4b4b      	ldr	r3, [pc, #300]	; (8001334 <display7SEG+0x24c>)
 8001206:	2200      	movs	r2, #0
 8001208:	2102      	movs	r1, #2
 800120a:	0018      	movs	r0, r3
 800120c:	f001 f83d 	bl	800228a <HAL_GPIO_WritePin>
			break;
 8001210:	e087      	b.n	8001322 <display7SEG+0x23a>
		case 5:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <display7SEG+0x248>)
 8001214:	2201      	movs	r2, #1
 8001216:	2101      	movs	r1, #1
 8001218:	0018      	movs	r0, r3
 800121a:	f001 f836 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800121e:	2390      	movs	r3, #144	; 0x90
 8001220:	05db      	lsls	r3, r3, #23
 8001222:	2200      	movs	r2, #0
 8001224:	2140      	movs	r1, #64	; 0x40
 8001226:	0018      	movs	r0, r3
 8001228:	f001 f82f 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 800122c:	2390      	movs	r3, #144	; 0x90
 800122e:	05db      	lsls	r3, r3, #23
 8001230:	2201      	movs	r2, #1
 8001232:	2120      	movs	r1, #32
 8001234:	0018      	movs	r0, r3
 8001236:	f001 f828 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 800123a:	4b3e      	ldr	r3, [pc, #248]	; (8001334 <display7SEG+0x24c>)
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	0018      	movs	r0, r3
 8001242:	f001 f822 	bl	800228a <HAL_GPIO_WritePin>
			break;
 8001246:	e06c      	b.n	8001322 <display7SEG+0x23a>
		case 6:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8001248:	4b39      	ldr	r3, [pc, #228]	; (8001330 <display7SEG+0x248>)
 800124a:	2200      	movs	r2, #0
 800124c:	2101      	movs	r1, #1
 800124e:	0018      	movs	r0, r3
 8001250:	f001 f81b 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8001254:	2390      	movs	r3, #144	; 0x90
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	2201      	movs	r2, #1
 800125a:	2140      	movs	r1, #64	; 0x40
 800125c:	0018      	movs	r0, r3
 800125e:	f001 f814 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8001262:	2390      	movs	r3, #144	; 0x90
 8001264:	05db      	lsls	r3, r3, #23
 8001266:	2201      	movs	r2, #1
 8001268:	2120      	movs	r1, #32
 800126a:	0018      	movs	r0, r3
 800126c:	f001 f80d 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8001270:	4b30      	ldr	r3, [pc, #192]	; (8001334 <display7SEG+0x24c>)
 8001272:	2200      	movs	r2, #0
 8001274:	2102      	movs	r1, #2
 8001276:	0018      	movs	r0, r3
 8001278:	f001 f807 	bl	800228a <HAL_GPIO_WritePin>
			break;
 800127c:	e051      	b.n	8001322 <display7SEG+0x23a>
		case 7:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 800127e:	4b2c      	ldr	r3, [pc, #176]	; (8001330 <display7SEG+0x248>)
 8001280:	2201      	movs	r2, #1
 8001282:	2101      	movs	r1, #1
 8001284:	0018      	movs	r0, r3
 8001286:	f001 f800 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 800128a:	2390      	movs	r3, #144	; 0x90
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	2201      	movs	r2, #1
 8001290:	2140      	movs	r1, #64	; 0x40
 8001292:	0018      	movs	r0, r3
 8001294:	f000 fff9 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8001298:	2390      	movs	r3, #144	; 0x90
 800129a:	05db      	lsls	r3, r3, #23
 800129c:	2201      	movs	r2, #1
 800129e:	2120      	movs	r1, #32
 80012a0:	0018      	movs	r0, r3
 80012a2:	f000 fff2 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <display7SEG+0x24c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	2102      	movs	r1, #2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f000 ffec 	bl	800228a <HAL_GPIO_WritePin>
			break;
 80012b2:	e036      	b.n	8001322 <display7SEG+0x23a>
		case 8:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 80012b4:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <display7SEG+0x248>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	2101      	movs	r1, #1
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 ffe5 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80012c0:	2390      	movs	r3, #144	; 0x90
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	2200      	movs	r2, #0
 80012c6:	2140      	movs	r1, #64	; 0x40
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 ffde 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 80012ce:	2390      	movs	r3, #144	; 0x90
 80012d0:	05db      	lsls	r3, r3, #23
 80012d2:	2200      	movs	r2, #0
 80012d4:	2120      	movs	r1, #32
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 ffd7 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <display7SEG+0x24c>)
 80012de:	2201      	movs	r2, #1
 80012e0:	2102      	movs	r1, #2
 80012e2:	0018      	movs	r0, r3
 80012e4:	f000 ffd1 	bl	800228a <HAL_GPIO_WritePin>
			break;
 80012e8:	e01b      	b.n	8001322 <display7SEG+0x23a>
		case 9:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <display7SEG+0x248>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	2101      	movs	r1, #1
 80012f0:	0018      	movs	r0, r3
 80012f2:	f000 ffca 	bl	800228a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80012f6:	2390      	movs	r3, #144	; 0x90
 80012f8:	05db      	lsls	r3, r3, #23
 80012fa:	2200      	movs	r2, #0
 80012fc:	2140      	movs	r1, #64	; 0x40
 80012fe:	0018      	movs	r0, r3
 8001300:	f000 ffc3 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8001304:	2390      	movs	r3, #144	; 0x90
 8001306:	05db      	lsls	r3, r3, #23
 8001308:	2200      	movs	r2, #0
 800130a:	2120      	movs	r1, #32
 800130c:	0018      	movs	r0, r3
 800130e:	f000 ffbc 	bl	800228a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <display7SEG+0x24c>)
 8001314:	2201      	movs	r2, #1
 8001316:	2102      	movs	r1, #2
 8001318:	0018      	movs	r0, r3
 800131a:	f000 ffb6 	bl	800228a <HAL_GPIO_WritePin>
			break;
 800131e:	e000      	b.n	8001322 <display7SEG+0x23a>
		default:
			break;
 8001320:	46c0      	nop			; (mov r8, r8)
	}
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	0800535c 	.word	0x0800535c
 8001330:	48001400 	.word	0x48001400
 8001334:	48000400 	.word	0x48000400

08001338 <updateClockBuffer>:
void updateClockBuffer(int num1, int num2){
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	210a      	movs	r1, #10
 8001346:	0018      	movs	r0, r3
 8001348:	f7fe ff68 	bl	800021c <__divsi3>
 800134c:	0003      	movs	r3, r0
 800134e:	001a      	movs	r2, r3
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <updateClockBuffer+0x5c>)
 8001352:	601a      	str	r2, [r3, #0]
	led_buffer[1] = num1 % 10;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	210a      	movs	r1, #10
 8001358:	0018      	movs	r0, r3
 800135a:	f7ff f845 	bl	80003e8 <__aeabi_idivmod>
 800135e:	000b      	movs	r3, r1
 8001360:	001a      	movs	r2, r3
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <updateClockBuffer+0x5c>)
 8001364:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	210a      	movs	r1, #10
 800136a:	0018      	movs	r0, r3
 800136c:	f7fe ff56 	bl	800021c <__divsi3>
 8001370:	0003      	movs	r3, r0
 8001372:	001a      	movs	r2, r3
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <updateClockBuffer+0x5c>)
 8001376:	609a      	str	r2, [r3, #8]
	led_buffer[3] = num2 % 10;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	210a      	movs	r1, #10
 800137c:	0018      	movs	r0, r3
 800137e:	f7ff f833 	bl	80003e8 <__aeabi_idivmod>
 8001382:	000b      	movs	r3, r1
 8001384:	001a      	movs	r2, r3
 8001386:	4b03      	ldr	r3, [pc, #12]	; (8001394 <updateClockBuffer+0x5c>)
 8001388:	60da      	str	r2, [r3, #12]
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	20000074 	.word	0x20000074

08001398 <single_LED_off>:
void single_LED_off(){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 800139c:	2380      	movs	r3, #128	; 0x80
 800139e:	0159      	lsls	r1, r3, #5
 80013a0:	2390      	movs	r3, #144	; 0x90
 80013a2:	05db      	lsls	r3, r3, #23
 80013a4:	2201      	movs	r2, #1
 80013a6:	0018      	movs	r0, r3
 80013a8:	f000 ff6f 	bl	800228a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 80013ac:	2390      	movs	r3, #144	; 0x90
 80013ae:	05db      	lsls	r3, r3, #23
 80013b0:	2201      	movs	r2, #1
 80013b2:	2110      	movs	r1, #16
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 ff68 	bl	800228a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	0059      	lsls	r1, r3, #1
 80013be:	2390      	movs	r3, #144	; 0x90
 80013c0:	05db      	lsls	r3, r3, #23
 80013c2:	2201      	movs	r2, #1
 80013c4:	0018      	movs	r0, r3
 80013c6:	f000 ff60 	bl	800228a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80013ca:	2390      	movs	r3, #144	; 0x90
 80013cc:	05db      	lsls	r3, r3, #23
 80013ce:	2201      	movs	r2, #1
 80013d0:	2104      	movs	r1, #4
 80013d2:	0018      	movs	r0, r3
 80013d4:	f000 ff59 	bl	800228a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <single_LED_off+0x60>)
 80013da:	2201      	movs	r2, #1
 80013dc:	2120      	movs	r1, #32
 80013de:	0018      	movs	r0, r3
 80013e0:	f000 ff53 	bl	800228a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <single_LED_off+0x60>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	2110      	movs	r1, #16
 80013ea:	0018      	movs	r0, r3
 80013ec:	f000 ff4d 	bl	800228a <HAL_GPIO_WritePin>
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	48000400 	.word	0x48000400

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001400:	f000 fbda 	bl	8001bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001404:	f000 f85a 	bl	80014bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001408:	f000 f976 	bl	80016f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800140c:	f000 f8f0 	bl	80015f0 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001410:	f000 f8ae 	bl	8001570 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001414:	f000 f940 	bl	8001698 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <main+0xa8>)
 800141a:	0018      	movs	r0, r3
 800141c:	f002 f990 	bl	8003740 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart1, &data, 1);
 8001420:	4921      	ldr	r1, [pc, #132]	; (80014a8 <main+0xac>)
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <main+0xb0>)
 8001424:	2201      	movs	r2, #1
 8001426:	0018      	movs	r0, r3
 8001428:	f002 fd92 	bl	8003f50 <HAL_UART_Receive_IT>
  lcd_init();
 800142c:	f7ff fd64 	bl	8000ef8 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(4, 1000); // debug
 8001430:	23fa      	movs	r3, #250	; 0xfa
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	0019      	movs	r1, r3
 8001436:	2004      	movs	r0, #4
 8001438:	f000 fb3a 	bl	8001ab0 <setTimer>
  while (1)
  {
	  fsm_auto_run();
 800143c:	f7ff f83a 	bl	80004b4 <fsm_auto_run>
	  fsm_manual();
 8001440:	f7ff fa7c 	bl	800093c <fsm_manual>
	  fsm_setting();
 8001444:	f7ff fb6a 	bl	8000b1c <fsm_setting>
	  fsm_slow_run();
 8001448:	f7ff fc6c 	bl	8000d24 <fsm_slow_run>
//	if(timer_flag[4] == 1){  // debug
//		setTimer(4, 1000);
//		HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
//	}
	  if(flag == 1){
 800144c:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <main+0xb4>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d1f3      	bne.n	800143c <main+0x40>
		  if(data == '1'){
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <main+0xac>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b31      	cmp	r3, #49	; 0x31
 800145a:	d107      	bne.n	800146c <main+0x70>
			  buttonFlag[0] = 1;
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <main+0xb8>)
 800145e:	2201      	movs	r2, #1
 8001460:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <main+0xbc>)
 8001464:	2101      	movs	r1, #1
 8001466:	0018      	movs	r0, r3
 8001468:	f000 ff2c 	bl	80022c4 <HAL_GPIO_TogglePin>
		  }
		  if(data == '2'){
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <main+0xac>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b32      	cmp	r3, #50	; 0x32
 8001472:	d107      	bne.n	8001484 <main+0x88>
			  buttonFlag[1] = 1;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <main+0xb8>)
 8001476:	2201      	movs	r2, #1
 8001478:	605a      	str	r2, [r3, #4]
			  HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <main+0xbc>)
 800147c:	2101      	movs	r1, #1
 800147e:	0018      	movs	r0, r3
 8001480:	f000 ff20 	bl	80022c4 <HAL_GPIO_TogglePin>
		  }
		  if(data == '3'){
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <main+0xac>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b33      	cmp	r3, #51	; 0x33
 800148a:	d107      	bne.n	800149c <main+0xa0>
			  buttonFlag[2] = 1;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <main+0xb8>)
 800148e:	2201      	movs	r2, #1
 8001490:	609a      	str	r2, [r3, #8]
			  HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <main+0xbc>)
 8001494:	2101      	movs	r1, #1
 8001496:	0018      	movs	r0, r3
 8001498:	f000 ff14 	bl	80022c4 <HAL_GPIO_TogglePin>
		  }
		  flag = 0;
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <main+0xb4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
	  fsm_auto_run();
 80014a2:	e7cb      	b.n	800143c <main+0x40>
 80014a4:	20000180 	.word	0x20000180
 80014a8:	2000017c 	.word	0x2000017c
 80014ac:	200000f4 	.word	0x200000f4
 80014b0:	20000088 	.word	0x20000088
 80014b4:	20000058 	.word	0x20000058
 80014b8:	48000400 	.word	0x48000400

080014bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b095      	sub	sp, #84	; 0x54
 80014c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014c2:	2420      	movs	r4, #32
 80014c4:	193b      	adds	r3, r7, r4
 80014c6:	0018      	movs	r0, r3
 80014c8:	2330      	movs	r3, #48	; 0x30
 80014ca:	001a      	movs	r2, r3
 80014cc:	2100      	movs	r1, #0
 80014ce:	f003 fec7 	bl	8005260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d2:	2310      	movs	r3, #16
 80014d4:	18fb      	adds	r3, r7, r3
 80014d6:	0018      	movs	r0, r3
 80014d8:	2310      	movs	r3, #16
 80014da:	001a      	movs	r2, r3
 80014dc:	2100      	movs	r1, #0
 80014de:	f003 febf 	bl	8005260 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014e2:	003b      	movs	r3, r7
 80014e4:	0018      	movs	r0, r3
 80014e6:	2310      	movs	r3, #16
 80014e8:	001a      	movs	r2, r3
 80014ea:	2100      	movs	r1, #0
 80014ec:	f003 feb8 	bl	8005260 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014f0:	0021      	movs	r1, r4
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2202      	movs	r2, #2
 80014f6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	2201      	movs	r2, #1
 80014fc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014fe:	187b      	adds	r3, r7, r1
 8001500:	2210      	movs	r2, #16
 8001502:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001504:	187b      	adds	r3, r7, r1
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150a:	187b      	adds	r3, r7, r1
 800150c:	0018      	movs	r0, r3
 800150e:	f001 fb9b 	bl	8002c48 <HAL_RCC_OscConfig>
 8001512:	1e03      	subs	r3, r0, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001516:	f000 f9a3 	bl	8001860 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	2110      	movs	r1, #16
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2207      	movs	r2, #7
 8001520:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2100      	movs	r1, #0
 8001538:	0018      	movs	r0, r3
 800153a:	f001 fe9f 	bl	800327c <HAL_RCC_ClockConfig>
 800153e:	1e03      	subs	r3, r0, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001542:	f000 f98d 	bl	8001860 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001546:	003b      	movs	r3, r7
 8001548:	2221      	movs	r2, #33	; 0x21
 800154a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800154c:	003b      	movs	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001552:	003b      	movs	r3, r7
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001558:	003b      	movs	r3, r7
 800155a:	0018      	movs	r0, r3
 800155c:	f001 ffd2 	bl	8003504 <HAL_RCCEx_PeriphCLKConfig>
 8001560:	1e03      	subs	r3, r0, #0
 8001562:	d001      	beq.n	8001568 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001564:	f000 f97c 	bl	8001860 <Error_Handler>
  }
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b015      	add	sp, #84	; 0x54
 800156e:	bd90      	pop	{r4, r7, pc}

08001570 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001574:	4b1b      	ldr	r3, [pc, #108]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001576:	4a1c      	ldr	r2, [pc, #112]	; (80015e8 <MX_I2C1_Init+0x78>)
 8001578:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800157a:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <MX_I2C1_Init+0x74>)
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <MX_I2C1_Init+0x7c>)
 800157e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001588:	2201      	movs	r2, #1
 800158a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <MX_I2C1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <MX_I2C1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <MX_I2C1_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015aa:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015ac:	0018      	movs	r0, r3
 80015ae:	f000 fea5 	bl	80022fc <HAL_I2C_Init>
 80015b2:	1e03      	subs	r3, r0, #0
 80015b4:	d001      	beq.n	80015ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015b6:	f000 f953 	bl	8001860 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015bc:	2100      	movs	r1, #0
 80015be:	0018      	movs	r0, r3
 80015c0:	f001 faaa 	bl	8002b18 <HAL_I2CEx_ConfigAnalogFilter>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015c8:	f000 f94a 	bl	8001860 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <MX_I2C1_Init+0x74>)
 80015ce:	2100      	movs	r1, #0
 80015d0:	0018      	movs	r0, r3
 80015d2:	f001 faed 	bl	8002bb0 <HAL_I2CEx_ConfigDigitalFilter>
 80015d6:	1e03      	subs	r3, r0, #0
 80015d8:	d001      	beq.n	80015de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015da:	f000 f941 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200000a0 	.word	0x200000a0
 80015e8:	40005400 	.word	0x40005400
 80015ec:	2000090e 	.word	0x2000090e

080015f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015f6:	2308      	movs	r3, #8
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	0018      	movs	r0, r3
 80015fc:	2310      	movs	r3, #16
 80015fe:	001a      	movs	r2, r3
 8001600:	2100      	movs	r1, #0
 8001602:	f003 fe2d 	bl	8005260 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001606:	003b      	movs	r3, r7
 8001608:	0018      	movs	r0, r3
 800160a:	2308      	movs	r3, #8
 800160c:	001a      	movs	r2, r3
 800160e:	2100      	movs	r1, #0
 8001610:	f003 fe26 	bl	8005260 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001614:	4b1e      	ldr	r3, [pc, #120]	; (8001690 <MX_TIM2_Init+0xa0>)
 8001616:	2280      	movs	r2, #128	; 0x80
 8001618:	05d2      	lsls	r2, r2, #23
 800161a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800161c:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_TIM2_Init+0xa0>)
 800161e:	4a1d      	ldr	r2, [pc, #116]	; (8001694 <MX_TIM2_Init+0xa4>)
 8001620:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_TIM2_Init+0xa0>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001628:	4b19      	ldr	r3, [pc, #100]	; (8001690 <MX_TIM2_Init+0xa0>)
 800162a:	2209      	movs	r2, #9
 800162c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_TIM2_Init+0xa0>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_TIM2_Init+0xa0>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_TIM2_Init+0xa0>)
 800163c:	0018      	movs	r0, r3
 800163e:	f002 f82f 	bl	80036a0 <HAL_TIM_Base_Init>
 8001642:	1e03      	subs	r3, r0, #0
 8001644:	d001      	beq.n	800164a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001646:	f000 f90b 	bl	8001860 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164a:	2108      	movs	r1, #8
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	0152      	lsls	r2, r2, #5
 8001652:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001654:	187a      	adds	r2, r7, r1
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_TIM2_Init+0xa0>)
 8001658:	0011      	movs	r1, r2
 800165a:	0018      	movs	r0, r3
 800165c:	f002 f9aa 	bl	80039b4 <HAL_TIM_ConfigClockSource>
 8001660:	1e03      	subs	r3, r0, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001664:	f000 f8fc 	bl	8001860 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001668:	003b      	movs	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	003b      	movs	r3, r7
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001674:	003a      	movs	r2, r7
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_TIM2_Init+0xa0>)
 8001678:	0011      	movs	r1, r2
 800167a:	0018      	movs	r0, r3
 800167c:	f002 fbac 	bl	8003dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001680:	1e03      	subs	r3, r0, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001684:	f000 f8ec 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b006      	add	sp, #24
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000180 	.word	0x20000180
 8001694:	00001f3f 	.word	0x00001f3f

08001698 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 800169e:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <MX_USART1_UART_Init+0x5c>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016a4:	2296      	movs	r2, #150	; 0x96
 80016a6:	0192      	lsls	r2, r2, #6
 80016a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <MX_USART1_UART_Init+0x58>)
 80016dc:	0018      	movs	r0, r3
 80016de:	f002 fbe3 	bl	8003ea8 <HAL_UART_Init>
 80016e2:	1e03      	subs	r3, r0, #0
 80016e4:	d001      	beq.n	80016ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016e6:	f000 f8bb 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	200000f4 	.word	0x200000f4
 80016f4:	40013800 	.word	0x40013800

080016f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fe:	240c      	movs	r4, #12
 8001700:	193b      	adds	r3, r7, r4
 8001702:	0018      	movs	r0, r3
 8001704:	2314      	movs	r3, #20
 8001706:	001a      	movs	r2, r3
 8001708:	2100      	movs	r1, #0
 800170a:	f003 fda9 	bl	8005260 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800170e:	4b44      	ldr	r3, [pc, #272]	; (8001820 <MX_GPIO_Init+0x128>)
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	4b43      	ldr	r3, [pc, #268]	; (8001820 <MX_GPIO_Init+0x128>)
 8001714:	2180      	movs	r1, #128	; 0x80
 8001716:	03c9      	lsls	r1, r1, #15
 8001718:	430a      	orrs	r2, r1
 800171a:	615a      	str	r2, [r3, #20]
 800171c:	4b40      	ldr	r3, [pc, #256]	; (8001820 <MX_GPIO_Init+0x128>)
 800171e:	695a      	ldr	r2, [r3, #20]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	03db      	lsls	r3, r3, #15
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <MX_GPIO_Init+0x128>)
 800172c:	695a      	ldr	r2, [r3, #20]
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <MX_GPIO_Init+0x128>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0289      	lsls	r1, r1, #10
 8001734:	430a      	orrs	r2, r1
 8001736:	615a      	str	r2, [r3, #20]
 8001738:	4b39      	ldr	r3, [pc, #228]	; (8001820 <MX_GPIO_Init+0x128>)
 800173a:	695a      	ldr	r2, [r3, #20]
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	029b      	lsls	r3, r3, #10
 8001740:	4013      	ands	r3, r2
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	4b36      	ldr	r3, [pc, #216]	; (8001820 <MX_GPIO_Init+0x128>)
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	4b35      	ldr	r3, [pc, #212]	; (8001820 <MX_GPIO_Init+0x128>)
 800174c:	2180      	movs	r1, #128	; 0x80
 800174e:	02c9      	lsls	r1, r1, #11
 8001750:	430a      	orrs	r2, r1
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	4b32      	ldr	r3, [pc, #200]	; (8001820 <MX_GPIO_Init+0x128>)
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	02db      	lsls	r3, r3, #11
 800175c:	4013      	ands	r3, r2
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, A_Pin|EN1_Pin, GPIO_PIN_RESET);
 8001762:	4b30      	ldr	r3, [pc, #192]	; (8001824 <MX_GPIO_Init+0x12c>)
 8001764:	2200      	movs	r2, #0
 8001766:	2103      	movs	r1, #3
 8001768:	0018      	movs	r0, r3
 800176a:	f000 fd8e 	bl	800228a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|R1_Pin|Y0_Pin|C_Pin
 800176e:	492e      	ldr	r1, [pc, #184]	; (8001828 <MX_GPIO_Init+0x130>)
 8001770:	2390      	movs	r3, #144	; 0x90
 8001772:	05db      	lsls	r3, r3, #23
 8001774:	2200      	movs	r2, #0
 8001776:	0018      	movs	r0, r3
 8001778:	f000 fd87 	bl	800228a <HAL_GPIO_WritePin>
                          |B_Pin|G0_Pin|EN3_Pin|R0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DEBUG_Pin|D_Pin|EN2_Pin|G1_Pin
 800177c:	4b2b      	ldr	r3, [pc, #172]	; (800182c <MX_GPIO_Init+0x134>)
 800177e:	2200      	movs	r2, #0
 8001780:	213b      	movs	r1, #59	; 0x3b
 8001782:	0018      	movs	r0, r3
 8001784:	f000 fd81 	bl	800228a <HAL_GPIO_WritePin>
                          |Y1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A_Pin EN1_Pin */
  GPIO_InitStruct.Pin = A_Pin|EN1_Pin;
 8001788:	193b      	adds	r3, r7, r4
 800178a:	2203      	movs	r2, #3
 800178c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	193b      	adds	r3, r7, r4
 8001790:	2201      	movs	r2, #1
 8001792:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	193b      	adds	r3, r7, r4
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	193b      	adds	r3, r7, r4
 800179c:	2200      	movs	r2, #0
 800179e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017a0:	193b      	adds	r3, r7, r4
 80017a2:	4a20      	ldr	r2, [pc, #128]	; (8001824 <MX_GPIO_Init+0x12c>)
 80017a4:	0019      	movs	r1, r3
 80017a6:	0010      	movs	r0, r2
 80017a8:	f000 fbea 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin R1_Pin Y0_Pin C_Pin
                           B_Pin G0_Pin EN3_Pin R0_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|R1_Pin|Y0_Pin|C_Pin
 80017ac:	193b      	adds	r3, r7, r4
 80017ae:	4a1e      	ldr	r2, [pc, #120]	; (8001828 <MX_GPIO_Init+0x130>)
 80017b0:	601a      	str	r2, [r3, #0]
                          |B_Pin|G0_Pin|EN3_Pin|R0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	193b      	adds	r3, r7, r4
 80017b4:	2201      	movs	r2, #1
 80017b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	193b      	adds	r3, r7, r4
 80017c0:	2200      	movs	r2, #0
 80017c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	193a      	adds	r2, r7, r4
 80017c6:	2390      	movs	r3, #144	; 0x90
 80017c8:	05db      	lsls	r3, r3, #23
 80017ca:	0011      	movs	r1, r2
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 fbd7 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	228a      	movs	r2, #138	; 0x8a
 80017d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	193b      	adds	r3, r7, r4
 80017da:	2200      	movs	r2, #0
 80017dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017de:	193b      	adds	r3, r7, r4
 80017e0:	2201      	movs	r2, #1
 80017e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	193a      	adds	r2, r7, r4
 80017e6:	2390      	movs	r3, #144	; 0x90
 80017e8:	05db      	lsls	r3, r3, #23
 80017ea:	0011      	movs	r1, r2
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 fbc7 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_DEBUG_Pin D_Pin EN2_Pin G1_Pin
                           Y1_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|D_Pin|EN2_Pin|G1_Pin
 80017f2:	0021      	movs	r1, r4
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	223b      	movs	r2, #59	; 0x3b
 80017f8:	601a      	str	r2, [r3, #0]
                          |Y1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	2201      	movs	r2, #1
 80017fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	187b      	adds	r3, r7, r1
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	187b      	adds	r3, r7, r1
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	187b      	adds	r3, r7, r1
 800180e:	4a07      	ldr	r2, [pc, #28]	; (800182c <MX_GPIO_Init+0x134>)
 8001810:	0019      	movs	r1, r3
 8001812:	0010      	movs	r0, r2
 8001814:	f000 fbb4 	bl	8001f80 <HAL_GPIO_Init>

}
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b009      	add	sp, #36	; 0x24
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	40021000 	.word	0x40021000
 8001824:	48001400 	.word	0x48001400
 8001828:	00001975 	.word	0x00001975
 800182c:	48000400 	.word	0x48000400

08001830 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &data, 1);
 8001838:	4906      	ldr	r1, [pc, #24]	; (8001854 <HAL_UART_RxCpltCallback+0x24>)
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <HAL_UART_RxCpltCallback+0x28>)
 800183c:	2201      	movs	r2, #1
 800183e:	0018      	movs	r0, r3
 8001840:	f002 fb86 	bl	8003f50 <HAL_UART_Receive_IT>
	flag = 1;
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_UART_RxCpltCallback+0x2c>)
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b002      	add	sp, #8
 8001850:	bd80      	pop	{r7, pc}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	2000017c 	.word	0x2000017c
 8001858:	200000f4 	.word	0x200000f4
 800185c:	20000088 	.word	0x20000088

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001868:	e7fe      	b.n	8001868 <Error_Handler+0x8>
	...

0800186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x44>)
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_MspInit+0x44>)
 8001878:	2101      	movs	r1, #1
 800187a:	430a      	orrs	r2, r1
 800187c:	619a      	str	r2, [r3, #24]
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_MspInit+0x44>)
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2201      	movs	r2, #1
 8001884:	4013      	ands	r3, r2
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_MspInit+0x44>)
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_MspInit+0x44>)
 8001890:	2180      	movs	r1, #128	; 0x80
 8001892:	0549      	lsls	r1, r1, #21
 8001894:	430a      	orrs	r2, r1
 8001896:	61da      	str	r2, [r3, #28]
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_MspInit+0x44>)
 800189a:	69da      	ldr	r2, [r3, #28]
 800189c:	2380      	movs	r3, #128	; 0x80
 800189e:	055b      	lsls	r3, r3, #21
 80018a0:	4013      	ands	r3, r2
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b002      	add	sp, #8
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			; (mov r8, r8)
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018b4:	b590      	push	{r4, r7, lr}
 80018b6:	b08b      	sub	sp, #44	; 0x2c
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	2414      	movs	r4, #20
 80018be:	193b      	adds	r3, r7, r4
 80018c0:	0018      	movs	r0, r3
 80018c2:	2314      	movs	r3, #20
 80018c4:	001a      	movs	r2, r3
 80018c6:	2100      	movs	r1, #0
 80018c8:	f003 fcca 	bl	8005260 <memset>
  if(hi2c->Instance==I2C1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_I2C_MspInit+0x94>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d133      	bne.n	800193e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b1d      	ldr	r3, [pc, #116]	; (800194c <HAL_I2C_MspInit+0x98>)
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <HAL_I2C_MspInit+0x98>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	0289      	lsls	r1, r1, #10
 80018e0:	430a      	orrs	r2, r1
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_I2C_MspInit+0x98>)
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	029b      	lsls	r3, r3, #10
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	22c0      	movs	r2, #192	; 0xc0
 80018f6:	00d2      	lsls	r2, r2, #3
 80018f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fa:	0021      	movs	r1, r4
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2212      	movs	r2, #18
 8001900:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	187b      	adds	r3, r7, r1
 8001904:	2200      	movs	r2, #0
 8001906:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001908:	187b      	adds	r3, r7, r1
 800190a:	2203      	movs	r2, #3
 800190c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800190e:	187b      	adds	r3, r7, r1
 8001910:	2204      	movs	r2, #4
 8001912:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001914:	187a      	adds	r2, r7, r1
 8001916:	2390      	movs	r3, #144	; 0x90
 8001918:	05db      	lsls	r3, r3, #23
 800191a:	0011      	movs	r1, r2
 800191c:	0018      	movs	r0, r3
 800191e:	f000 fb2f 	bl	8001f80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_I2C_MspInit+0x98>)
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_I2C_MspInit+0x98>)
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	0389      	lsls	r1, r1, #14
 800192c:	430a      	orrs	r2, r1
 800192e:	61da      	str	r2, [r3, #28]
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_I2C_MspInit+0x98>)
 8001932:	69da      	ldr	r2, [r3, #28]
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	039b      	lsls	r3, r3, #14
 8001938:	4013      	ands	r3, r2
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b00b      	add	sp, #44	; 0x2c
 8001944:	bd90      	pop	{r4, r7, pc}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	40005400 	.word	0x40005400
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	05db      	lsls	r3, r3, #23
 8001960:	429a      	cmp	r2, r3
 8001962:	d113      	bne.n	800198c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_TIM_Base_MspInit+0x44>)
 8001966:	69da      	ldr	r2, [r3, #28]
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_TIM_Base_MspInit+0x44>)
 800196a:	2101      	movs	r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	61da      	str	r2, [r3, #28]
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_TIM_Base_MspInit+0x44>)
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	200f      	movs	r0, #15
 8001982:	f000 fa4d 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001986:	200f      	movs	r0, #15
 8001988:	f000 fa5f 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b004      	add	sp, #16
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b590      	push	{r4, r7, lr}
 800199a:	b08b      	sub	sp, #44	; 0x2c
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	2414      	movs	r4, #20
 80019a2:	193b      	adds	r3, r7, r4
 80019a4:	0018      	movs	r0, r3
 80019a6:	2314      	movs	r3, #20
 80019a8:	001a      	movs	r2, r3
 80019aa:	2100      	movs	r1, #0
 80019ac:	f003 fc58 	bl	8005260 <memset>
  if(huart->Instance==USART1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <HAL_UART_MspInit+0xa0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d139      	bne.n	8001a2e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019ba:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_UART_MspInit+0xa4>)
 80019bc:	699a      	ldr	r2, [r3, #24]
 80019be:	4b1f      	ldr	r3, [pc, #124]	; (8001a3c <HAL_UART_MspInit+0xa4>)
 80019c0:	2180      	movs	r1, #128	; 0x80
 80019c2:	01c9      	lsls	r1, r1, #7
 80019c4:	430a      	orrs	r2, r1
 80019c6:	619a      	str	r2, [r3, #24]
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_UART_MspInit+0xa4>)
 80019ca:	699a      	ldr	r2, [r3, #24]
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	01db      	lsls	r3, r3, #7
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
 80019d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_UART_MspInit+0xa4>)
 80019d8:	695a      	ldr	r2, [r3, #20]
 80019da:	4b18      	ldr	r3, [pc, #96]	; (8001a3c <HAL_UART_MspInit+0xa4>)
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	02c9      	lsls	r1, r1, #11
 80019e0:	430a      	orrs	r2, r1
 80019e2:	615a      	str	r2, [r3, #20]
 80019e4:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <HAL_UART_MspInit+0xa4>)
 80019e6:	695a      	ldr	r2, [r3, #20]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	02db      	lsls	r3, r3, #11
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019f2:	0021      	movs	r1, r4
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	22c0      	movs	r2, #192	; 0xc0
 80019f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2202      	movs	r2, #2
 80019fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_UART_MspInit+0xa8>)
 8001a16:	0019      	movs	r1, r3
 8001a18:	0010      	movs	r0, r2
 8001a1a:	f000 fab1 	bl	8001f80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2101      	movs	r1, #1
 8001a22:	201b      	movs	r0, #27
 8001a24:	f000 f9fc 	bl	8001e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a28:	201b      	movs	r0, #27
 8001a2a:	f000 fa0e 	bl	8001e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	46bd      	mov	sp, r7
 8001a32:	b00b      	add	sp, #44	; 0x2c
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	48000400 	.word	0x48000400

08001a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <NMI_Handler+0x4>

08001a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <HardFault_Handler+0x4>

08001a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 f8ee 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <TIM2_IRQHandler+0x14>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f001 feac 	bl	80037d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			; (mov r8, r8)
 8001a88:	20000180 	.word	0x20000180

08001a8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <USART1_IRQHandler+0x14>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f002 fab4 	bl	8004000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	200000f4 	.word	0x200000f4

08001aa4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <setTimer>:
#include "timer.h"

int counter[5] = {0, 0, 0, 0, 0};
int timer_flag[5] = {0, 0, 0, 1, 0};// FLAG[3] = 1 TO CHECK BUTTON PRESS( GO TO FUNCTION getKeyinput())

void setTimer(int timer, int duration){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	counter[timer] = duration / 10;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	210a      	movs	r1, #10
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f7fe fbac 	bl	800021c <__divsi3>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	0019      	movs	r1, r3
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <setTimer+0x34>)
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	0092      	lsls	r2, r2, #2
 8001ace:	50d1      	str	r1, [r2, r3]
	timer_flag[timer] = 0;
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <setTimer+0x38>)
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	50d1      	str	r1, [r2, r3]
}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b002      	add	sp, #8
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	2000008c 	.word	0x2000008c
 8001ae8:	20000020 	.word	0x20000020

08001aec <timer_run>:
void timer_run(){
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++){ // 5 timer
 8001af2:	2300      	movs	r3, #0
 8001af4:	607b      	str	r3, [r7, #4]
 8001af6:	e01c      	b.n	8001b32 <timer_run+0x46>
		if(counter[i] > 0){
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <timer_run+0x58>)
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	58d3      	ldr	r3, [r2, r3]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	dd13      	ble.n	8001b2c <timer_run+0x40>
			counter[i]--;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <timer_run+0x58>)
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	0092      	lsls	r2, r2, #2
 8001b0a:	58d3      	ldr	r3, [r2, r3]
 8001b0c:	1e59      	subs	r1, r3, #1
 8001b0e:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <timer_run+0x58>)
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	0092      	lsls	r2, r2, #2
 8001b14:	50d1      	str	r1, [r2, r3]
			if(counter[i] <= 0)
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <timer_run+0x58>)
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	0092      	lsls	r2, r2, #2
 8001b1c:	58d3      	ldr	r3, [r2, r3]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	dc04      	bgt.n	8001b2c <timer_run+0x40>
				timer_flag[i] = 1;
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <timer_run+0x5c>)
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	2101      	movs	r1, #1
 8001b2a:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++){ // 5 timer
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	dddf      	ble.n	8001af8 <timer_run+0xc>
		}
	}
}
 8001b38:	46c0      	nop			; (mov r8, r8)
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	2000008c 	.word	0x2000008c
 8001b48:	20000020 	.word	0x20000020

08001b4c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){ // 10ms each time run
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	getKeyinput();
 8001b54:	f7fe fc4e 	bl	80003f4 <getKeyinput>
	timer_run();
 8001b58:	f7ff ffc8 	bl	8001aec <timer_run>
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b002      	add	sp, #8
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b66:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b68:	f7ff ff9c 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	; (8001ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	; (8001ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	; (8001ba8 <LoopForever+0xe>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	; (8001bb0 <LoopForever+0x16>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b92:	f003 fb41 	bl	8005218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b96:	f7ff fc31 	bl	80013fc <main>

08001b9a <LoopForever>:

LoopForever:
    b LoopForever
 8001b9a:	e7fe      	b.n	8001b9a <LoopForever>
  ldr   r0, =_estack
 8001b9c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba4:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001ba8:	080053c4 	.word	0x080053c4
  ldr r2, =_sbss
 8001bac:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001bb0:	200001cc 	.word	0x200001cc

08001bb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC1_IRQHandler>
	...

08001bb8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <HAL_Init+0x24>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_Init+0x24>)
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f000 f809 	bl	8001be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bce:	f7ff fe4d 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	40022000 	.word	0x40022000

08001be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <HAL_InitTick+0x5c>)
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <HAL_InitTick+0x60>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	23fa      	movs	r3, #250	; 0xfa
 8001bf4:	0098      	lsls	r0, r3, #2
 8001bf6:	f7fe fa87 	bl	8000108 <__udivsi3>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	0020      	movs	r0, r4
 8001c00:	f7fe fa82 	bl	8000108 <__udivsi3>
 8001c04:	0003      	movs	r3, r0
 8001c06:	0018      	movs	r0, r3
 8001c08:	f000 f92f 	bl	8001e6a <HAL_SYSTICK_Config>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e00f      	b.n	8001c34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d80b      	bhi.n	8001c32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	425b      	negs	r3, r3
 8001c20:	2200      	movs	r2, #0
 8001c22:	0018      	movs	r0, r3
 8001c24:	f000 f8fc 	bl	8001e20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_InitTick+0x64>)
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b003      	add	sp, #12
 8001c3a:	bd90      	pop	{r4, r7, pc}
 8001c3c:	2000001c 	.word	0x2000001c
 8001c40:	20000038 	.word	0x20000038
 8001c44:	20000034 	.word	0x20000034

08001c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_IncTick+0x1c>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	001a      	movs	r2, r3
 8001c52:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_IncTick+0x20>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	18d2      	adds	r2, r2, r3
 8001c58:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <HAL_IncTick+0x20>)
 8001c5a:	601a      	str	r2, [r3, #0]
}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	20000038 	.word	0x20000038
 8001c68:	200001c8 	.word	0x200001c8

08001c6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b02      	ldr	r3, [pc, #8]	; (8001c7c <HAL_GetTick+0x10>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	200001c8 	.word	0x200001c8

08001c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c88:	f7ff fff0 	bl	8001c6c <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	3301      	adds	r3, #1
 8001c98:	d005      	beq.n	8001ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_Delay+0x44>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	001a      	movs	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	189b      	adds	r3, r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	f7ff ffe0 	bl	8001c6c <HAL_GetTick>
 8001cac:	0002      	movs	r2, r0
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d8f7      	bhi.n	8001ca8 <HAL_Delay+0x28>
  {
  }
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b004      	add	sp, #16
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	20000038 	.word	0x20000038

08001cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	0002      	movs	r2, r0
 8001cd0:	1dfb      	adds	r3, r7, #7
 8001cd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	1dfb      	adds	r3, r7, #7
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8001cda:	d809      	bhi.n	8001cf0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	231f      	movs	r3, #31
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_EnableIRQ+0x30>)
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4091      	lsls	r1, r2
 8001cec:	000a      	movs	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
  }
}
 8001cf0:	46c0      	nop			; (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	0002      	movs	r2, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	1dfb      	adds	r3, r7, #7
 8001d08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8001d10:	d828      	bhi.n	8001d64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d12:	4a2f      	ldr	r2, [pc, #188]	; (8001dd0 <__NVIC_SetPriority+0xd4>)
 8001d14:	1dfb      	adds	r3, r7, #7
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	089b      	lsrs	r3, r3, #2
 8001d1c:	33c0      	adds	r3, #192	; 0xc0
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	589b      	ldr	r3, [r3, r2]
 8001d22:	1dfa      	adds	r2, r7, #7
 8001d24:	7812      	ldrb	r2, [r2, #0]
 8001d26:	0011      	movs	r1, r2
 8001d28:	2203      	movs	r2, #3
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	00d2      	lsls	r2, r2, #3
 8001d2e:	21ff      	movs	r1, #255	; 0xff
 8001d30:	4091      	lsls	r1, r2
 8001d32:	000a      	movs	r2, r1
 8001d34:	43d2      	mvns	r2, r2
 8001d36:	401a      	ands	r2, r3
 8001d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	019b      	lsls	r3, r3, #6
 8001d3e:	22ff      	movs	r2, #255	; 0xff
 8001d40:	401a      	ands	r2, r3
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	0018      	movs	r0, r3
 8001d48:	2303      	movs	r3, #3
 8001d4a:	4003      	ands	r3, r0
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d50:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <__NVIC_SetPriority+0xd4>)
 8001d52:	1dfb      	adds	r3, r7, #7
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b25b      	sxtb	r3, r3
 8001d58:	089b      	lsrs	r3, r3, #2
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	33c0      	adds	r3, #192	; 0xc0
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d62:	e031      	b.n	8001dc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d64:	4a1b      	ldr	r2, [pc, #108]	; (8001dd4 <__NVIC_SetPriority+0xd8>)
 8001d66:	1dfb      	adds	r3, r7, #7
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	400b      	ands	r3, r1
 8001d70:	3b08      	subs	r3, #8
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3306      	adds	r3, #6
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	18d3      	adds	r3, r2, r3
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	1dfa      	adds	r2, r7, #7
 8001d80:	7812      	ldrb	r2, [r2, #0]
 8001d82:	0011      	movs	r1, r2
 8001d84:	2203      	movs	r2, #3
 8001d86:	400a      	ands	r2, r1
 8001d88:	00d2      	lsls	r2, r2, #3
 8001d8a:	21ff      	movs	r1, #255	; 0xff
 8001d8c:	4091      	lsls	r1, r2
 8001d8e:	000a      	movs	r2, r1
 8001d90:	43d2      	mvns	r2, r2
 8001d92:	401a      	ands	r2, r3
 8001d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	019b      	lsls	r3, r3, #6
 8001d9a:	22ff      	movs	r2, #255	; 0xff
 8001d9c:	401a      	ands	r2, r3
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	0018      	movs	r0, r3
 8001da4:	2303      	movs	r3, #3
 8001da6:	4003      	ands	r3, r0
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dac:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <__NVIC_SetPriority+0xd8>)
 8001dae:	1dfb      	adds	r3, r7, #7
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	001c      	movs	r4, r3
 8001db4:	230f      	movs	r3, #15
 8001db6:	4023      	ands	r3, r4
 8001db8:	3b08      	subs	r3, #8
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	3306      	adds	r3, #6
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	18c3      	adds	r3, r0, r3
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	601a      	str	r2, [r3, #0]
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b003      	add	sp, #12
 8001dce:	bd90      	pop	{r4, r7, pc}
 8001dd0:	e000e100 	.word	0xe000e100
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	1e5a      	subs	r2, r3, #1
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	045b      	lsls	r3, r3, #17
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d301      	bcc.n	8001df0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dec:	2301      	movs	r3, #1
 8001dee:	e010      	b.n	8001e12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <SysTick_Config+0x44>)
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	3a01      	subs	r2, #1
 8001df6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df8:	2301      	movs	r3, #1
 8001dfa:	425b      	negs	r3, r3
 8001dfc:	2103      	movs	r1, #3
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7ff ff7c 	bl	8001cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <SysTick_Config+0x44>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e0a:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SysTick_Config+0x44>)
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	0018      	movs	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	b002      	add	sp, #8
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	e000e010 	.word	0xe000e010

08001e20 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	210f      	movs	r1, #15
 8001e2c:	187b      	adds	r3, r7, r1
 8001e2e:	1c02      	adds	r2, r0, #0
 8001e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b25b      	sxtb	r3, r3
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f7ff ff5d 	bl	8001cfc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b004      	add	sp, #16
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	0002      	movs	r2, r0
 8001e52:	1dfb      	adds	r3, r7, #7
 8001e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b25b      	sxtb	r3, r3
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7ff ff33 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0018      	movs	r0, r3
 8001e76:	f7ff ffaf 	bl	8001dd8 <SysTick_Config>
 8001e7a:	0003      	movs	r3, r0
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b002      	add	sp, #8
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2221      	movs	r2, #33	; 0x21
 8001e90:	5c9b      	ldrb	r3, [r3, r2]
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d008      	beq.n	8001eaa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2204      	movs	r2, #4
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e020      	b.n	8001eec <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	210e      	movs	r1, #14
 8001eb6:	438a      	bics	r2, r1
 8001eb8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	438a      	bics	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4091      	lsls	r1, r2
 8001ed6:	000a      	movs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2221      	movs	r2, #33	; 0x21
 8001ede:	2101      	movs	r1, #1
 8001ee0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	0018      	movs	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b002      	add	sp, #8
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efc:	210f      	movs	r1, #15
 8001efe:	187b      	adds	r3, r7, r1
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2221      	movs	r2, #33	; 0x21
 8001f08:	5c9b      	ldrb	r3, [r3, r2]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d006      	beq.n	8001f1e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2204      	movs	r2, #4
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
 8001f1c:	e028      	b.n	8001f70 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	210e      	movs	r1, #14
 8001f2a:	438a      	bics	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2101      	movs	r1, #1
 8001f3a:	438a      	bics	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f46:	2101      	movs	r1, #1
 8001f48:	4091      	lsls	r1, r2
 8001f4a:	000a      	movs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2221      	movs	r2, #33	; 0x21
 8001f52:	2101      	movs	r1, #1
 8001f54:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	0010      	movs	r0, r2
 8001f6e:	4798      	blx	r3
    }
  }
  return status;
 8001f70:	230f      	movs	r3, #15
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	781b      	ldrb	r3, [r3, #0]
}
 8001f76:	0018      	movs	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	b004      	add	sp, #16
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f8e:	e149      	b.n	8002224 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4091      	lsls	r1, r2
 8001f9a:	000a      	movs	r2, r1
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d100      	bne.n	8001fa8 <HAL_GPIO_Init+0x28>
 8001fa6:	e13a      	b.n	800221e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2203      	movs	r2, #3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d005      	beq.n	8001fc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2203      	movs	r2, #3
 8001fba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d130      	bne.n	8002022 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	409a      	lsls	r2, r3
 8001fce:	0013      	movs	r3, r2
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	409a      	lsls	r2, r3
 8001fe2:	0013      	movs	r3, r2
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	0013      	movs	r3, r2
 8001ffe:	43da      	mvns	r2, r3
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	2201      	movs	r2, #1
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
 8002014:	0013      	movs	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2203      	movs	r2, #3
 8002028:	4013      	ands	r3, r2
 800202a:	2b03      	cmp	r3, #3
 800202c:	d017      	beq.n	800205e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	409a      	lsls	r2, r3
 800203c:	0013      	movs	r3, r2
 800203e:	43da      	mvns	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	409a      	lsls	r2, r3
 8002050:	0013      	movs	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2203      	movs	r2, #3
 8002064:	4013      	ands	r3, r2
 8002066:	2b02      	cmp	r3, #2
 8002068:	d123      	bne.n	80020b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	08da      	lsrs	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	0092      	lsls	r2, r2, #2
 8002074:	58d3      	ldr	r3, [r2, r3]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	2207      	movs	r2, #7
 800207c:	4013      	ands	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	220f      	movs	r2, #15
 8002082:	409a      	lsls	r2, r3
 8002084:	0013      	movs	r3, r2
 8002086:	43da      	mvns	r2, r3
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2107      	movs	r1, #7
 8002096:	400b      	ands	r3, r1
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	409a      	lsls	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	08da      	lsrs	r2, r3, #3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3208      	adds	r2, #8
 80020ac:	0092      	lsls	r2, r2, #2
 80020ae:	6939      	ldr	r1, [r7, #16]
 80020b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	2203      	movs	r2, #3
 80020be:	409a      	lsls	r2, r3
 80020c0:	0013      	movs	r3, r2
 80020c2:	43da      	mvns	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4013      	ands	r3, r2
 80020c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2203      	movs	r2, #3
 80020d0:	401a      	ands	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	409a      	lsls	r2, r3
 80020d8:	0013      	movs	r3, r2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	23c0      	movs	r3, #192	; 0xc0
 80020ec:	029b      	lsls	r3, r3, #10
 80020ee:	4013      	ands	r3, r2
 80020f0:	d100      	bne.n	80020f4 <HAL_GPIO_Init+0x174>
 80020f2:	e094      	b.n	800221e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f4:	4b51      	ldr	r3, [pc, #324]	; (800223c <HAL_GPIO_Init+0x2bc>)
 80020f6:	699a      	ldr	r2, [r3, #24]
 80020f8:	4b50      	ldr	r3, [pc, #320]	; (800223c <HAL_GPIO_Init+0x2bc>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	430a      	orrs	r2, r1
 80020fe:	619a      	str	r2, [r3, #24]
 8002100:	4b4e      	ldr	r3, [pc, #312]	; (800223c <HAL_GPIO_Init+0x2bc>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	2201      	movs	r2, #1
 8002106:	4013      	ands	r3, r2
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800210c:	4a4c      	ldr	r2, [pc, #304]	; (8002240 <HAL_GPIO_Init+0x2c0>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	089b      	lsrs	r3, r3, #2
 8002112:	3302      	adds	r3, #2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	589b      	ldr	r3, [r3, r2]
 8002118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	2203      	movs	r2, #3
 800211e:	4013      	ands	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	220f      	movs	r2, #15
 8002124:	409a      	lsls	r2, r3
 8002126:	0013      	movs	r3, r2
 8002128:	43da      	mvns	r2, r3
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4013      	ands	r3, r2
 800212e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	2390      	movs	r3, #144	; 0x90
 8002134:	05db      	lsls	r3, r3, #23
 8002136:	429a      	cmp	r2, r3
 8002138:	d00d      	beq.n	8002156 <HAL_GPIO_Init+0x1d6>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a41      	ldr	r2, [pc, #260]	; (8002244 <HAL_GPIO_Init+0x2c4>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d007      	beq.n	8002152 <HAL_GPIO_Init+0x1d2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a40      	ldr	r2, [pc, #256]	; (8002248 <HAL_GPIO_Init+0x2c8>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_GPIO_Init+0x1ce>
 800214a:	2302      	movs	r3, #2
 800214c:	e004      	b.n	8002158 <HAL_GPIO_Init+0x1d8>
 800214e:	2305      	movs	r3, #5
 8002150:	e002      	b.n	8002158 <HAL_GPIO_Init+0x1d8>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_GPIO_Init+0x1d8>
 8002156:	2300      	movs	r3, #0
 8002158:	697a      	ldr	r2, [r7, #20]
 800215a:	2103      	movs	r1, #3
 800215c:	400a      	ands	r2, r1
 800215e:	0092      	lsls	r2, r2, #2
 8002160:	4093      	lsls	r3, r2
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002168:	4935      	ldr	r1, [pc, #212]	; (8002240 <HAL_GPIO_Init+0x2c0>)
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	089b      	lsrs	r3, r3, #2
 800216e:	3302      	adds	r3, #2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002176:	4b35      	ldr	r3, [pc, #212]	; (800224c <HAL_GPIO_Init+0x2cc>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43da      	mvns	r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	035b      	lsls	r3, r3, #13
 800218e:	4013      	ands	r3, r2
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800219a:	4b2c      	ldr	r3, [pc, #176]	; (800224c <HAL_GPIO_Init+0x2cc>)
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80021a0:	4b2a      	ldr	r3, [pc, #168]	; (800224c <HAL_GPIO_Init+0x2cc>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43da      	mvns	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	039b      	lsls	r3, r3, #14
 80021b8:	4013      	ands	r3, r2
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_GPIO_Init+0x2cc>)
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_GPIO_Init+0x2cc>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43da      	mvns	r2, r3
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	029b      	lsls	r3, r3, #10
 80021e2:	4013      	ands	r3, r2
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_GPIO_Init+0x2cc>)
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80021f4:	4b15      	ldr	r3, [pc, #84]	; (800224c <HAL_GPIO_Init+0x2cc>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	43da      	mvns	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	025b      	lsls	r3, r3, #9
 800220c:	4013      	ands	r3, r2
 800220e:	d003      	beq.n	8002218 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <HAL_GPIO_Init+0x2cc>)
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	40da      	lsrs	r2, r3
 800222c:	1e13      	subs	r3, r2, #0
 800222e:	d000      	beq.n	8002232 <HAL_GPIO_Init+0x2b2>
 8002230:	e6ae      	b.n	8001f90 <HAL_GPIO_Init+0x10>
  } 
}
 8002232:	46c0      	nop			; (mov r8, r8)
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	b006      	add	sp, #24
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	40010000 	.word	0x40010000
 8002244:	48000400 	.word	0x48000400
 8002248:	48000800 	.word	0x48000800
 800224c:	40010400 	.word	0x40010400

08002250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	000a      	movs	r2, r1
 800225a:	1cbb      	adds	r3, r7, #2
 800225c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	1cba      	adds	r2, r7, #2
 8002264:	8812      	ldrh	r2, [r2, #0]
 8002266:	4013      	ands	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800226a:	230f      	movs	r3, #15
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	e003      	b.n	800227c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002274:	230f      	movs	r3, #15
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800227c:	230f      	movs	r3, #15
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	781b      	ldrb	r3, [r3, #0]
  }
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b004      	add	sp, #16
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	0008      	movs	r0, r1
 8002294:	0011      	movs	r1, r2
 8002296:	1cbb      	adds	r3, r7, #2
 8002298:	1c02      	adds	r2, r0, #0
 800229a:	801a      	strh	r2, [r3, #0]
 800229c:	1c7b      	adds	r3, r7, #1
 800229e:	1c0a      	adds	r2, r1, #0
 80022a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022a2:	1c7b      	adds	r3, r7, #1
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d004      	beq.n	80022b4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022aa:	1cbb      	adds	r3, r7, #2
 80022ac:	881a      	ldrh	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022b2:	e003      	b.n	80022bc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022b4:	1cbb      	adds	r3, r7, #2
 80022b6:	881a      	ldrh	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022bc:	46c0      	nop			; (mov r8, r8)
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	000a      	movs	r2, r1
 80022ce:	1cbb      	adds	r3, r7, #2
 80022d0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022d8:	1cbb      	adds	r3, r7, #2
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	041a      	lsls	r2, r3, #16
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	1cb9      	adds	r1, r7, #2
 80022e8:	8809      	ldrh	r1, [r1, #0]
 80022ea:	400b      	ands	r3, r1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	619a      	str	r2, [r3, #24]
}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b004      	add	sp, #16
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e08f      	b.n	800242e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2241      	movs	r2, #65	; 0x41
 8002312:	5c9b      	ldrb	r3, [r3, r2]
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2240      	movs	r2, #64	; 0x40
 800231e:	2100      	movs	r1, #0
 8002320:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff fac5 	bl	80018b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2241      	movs	r2, #65	; 0x41
 800232e:	2124      	movs	r1, #36	; 0x24
 8002330:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	438a      	bics	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	493b      	ldr	r1, [pc, #236]	; (8002438 <HAL_I2C_Init+0x13c>)
 800234c:	400a      	ands	r2, r1
 800234e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4938      	ldr	r1, [pc, #224]	; (800243c <HAL_I2C_Init+0x140>)
 800235c:	400a      	ands	r2, r1
 800235e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d108      	bne.n	800237a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2180      	movs	r1, #128	; 0x80
 8002372:	0209      	lsls	r1, r1, #8
 8002374:	430a      	orrs	r2, r1
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	e007      	b.n	800238a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2184      	movs	r1, #132	; 0x84
 8002384:	0209      	lsls	r1, r1, #8
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d109      	bne.n	80023a6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2180      	movs	r1, #128	; 0x80
 800239e:	0109      	lsls	r1, r1, #4
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	e007      	b.n	80023b6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4923      	ldr	r1, [pc, #140]	; (8002440 <HAL_I2C_Init+0x144>)
 80023b2:	400a      	ands	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4920      	ldr	r1, [pc, #128]	; (8002444 <HAL_I2C_Init+0x148>)
 80023c2:	430a      	orrs	r2, r1
 80023c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68da      	ldr	r2, [r3, #12]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	491a      	ldr	r1, [pc, #104]	; (800243c <HAL_I2C_Init+0x140>)
 80023d2:	400a      	ands	r2, r1
 80023d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	431a      	orrs	r2, r3
 80023e0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69d9      	ldr	r1, [r3, #28]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1a      	ldr	r2, [r3, #32]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2101      	movs	r1, #1
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2241      	movs	r2, #65	; 0x41
 800241a:	2120      	movs	r1, #32
 800241c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2242      	movs	r2, #66	; 0x42
 8002428:	2100      	movs	r1, #0
 800242a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	0018      	movs	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	b002      	add	sp, #8
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			; (mov r8, r8)
 8002438:	f0ffffff 	.word	0xf0ffffff
 800243c:	ffff7fff 	.word	0xffff7fff
 8002440:	fffff7ff 	.word	0xfffff7ff
 8002444:	02008000 	.word	0x02008000

08002448 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	0008      	movs	r0, r1
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	0019      	movs	r1, r3
 8002456:	230a      	movs	r3, #10
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	1c02      	adds	r2, r0, #0
 800245c:	801a      	strh	r2, [r3, #0]
 800245e:	2308      	movs	r3, #8
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	1c0a      	adds	r2, r1, #0
 8002464:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2241      	movs	r2, #65	; 0x41
 800246a:	5c9b      	ldrb	r3, [r3, r2]
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b20      	cmp	r3, #32
 8002470:	d000      	beq.n	8002474 <HAL_I2C_Master_Transmit+0x2c>
 8002472:	e10a      	b.n	800268a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2240      	movs	r2, #64	; 0x40
 8002478:	5c9b      	ldrb	r3, [r3, r2]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d101      	bne.n	8002482 <HAL_I2C_Master_Transmit+0x3a>
 800247e:	2302      	movs	r3, #2
 8002480:	e104      	b.n	800268c <HAL_I2C_Master_Transmit+0x244>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2240      	movs	r2, #64	; 0x40
 8002486:	2101      	movs	r1, #1
 8002488:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800248a:	f7ff fbef 	bl	8001c6c <HAL_GetTick>
 800248e:	0003      	movs	r3, r0
 8002490:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	0219      	lsls	r1, r3, #8
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2319      	movs	r3, #25
 800249e:	2201      	movs	r2, #1
 80024a0:	f000 f91e 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80024a4:	1e03      	subs	r3, r0, #0
 80024a6:	d001      	beq.n	80024ac <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0ef      	b.n	800268c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2241      	movs	r2, #65	; 0x41
 80024b0:	2121      	movs	r1, #33	; 0x21
 80024b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2242      	movs	r2, #66	; 0x42
 80024b8:	2110      	movs	r1, #16
 80024ba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2208      	movs	r2, #8
 80024cc:	18ba      	adds	r2, r7, r2
 80024ce:	8812      	ldrh	r2, [r2, #0]
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2bff      	cmp	r3, #255	; 0xff
 80024e0:	d906      	bls.n	80024f0 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	22ff      	movs	r2, #255	; 0xff
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	045b      	lsls	r3, r3, #17
 80024ec:	617b      	str	r3, [r7, #20]
 80024ee:	e007      	b.n	8002500 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	049b      	lsls	r3, r3, #18
 80024fe:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	d027      	beq.n	8002558 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3301      	adds	r3, #1
 8002540:	b2da      	uxtb	r2, r3
 8002542:	697c      	ldr	r4, [r7, #20]
 8002544:	230a      	movs	r3, #10
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	8819      	ldrh	r1, [r3, #0]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_I2C_Master_Transmit+0x24c>)
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	0023      	movs	r3, r4
 8002552:	f000 faa7 	bl	8002aa4 <I2C_TransferConfig>
 8002556:	e06f      	b.n	8002638 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	b2da      	uxtb	r2, r3
 800255e:	697c      	ldr	r4, [r7, #20]
 8002560:	230a      	movs	r3, #10
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	8819      	ldrh	r1, [r3, #0]
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <HAL_I2C_Master_Transmit+0x24c>)
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	0023      	movs	r3, r4
 800256e:	f000 fa99 	bl	8002aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002572:	e061      	b.n	8002638 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	0018      	movs	r0, r3
 800257c:	f000 f908 	bl	8002790 <I2C_WaitOnTXISFlagUntilTimeout>
 8002580:	1e03      	subs	r3, r0, #0
 8002582:	d001      	beq.n	8002588 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e081      	b.n	800268c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	781a      	ldrb	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002598:	1c5a      	adds	r2, r3, #1
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b0:	3b01      	subs	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d03a      	beq.n	8002638 <HAL_I2C_Master_Transmit+0x1f0>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d136      	bne.n	8002638 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	0013      	movs	r3, r2
 80025d4:	2200      	movs	r2, #0
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	f000 f882 	bl	80026e0 <I2C_WaitOnFlagUntilTimeout>
 80025dc:	1e03      	subs	r3, r0, #0
 80025de:	d001      	beq.n	80025e4 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e053      	b.n	800268c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2bff      	cmp	r3, #255	; 0xff
 80025ec:	d911      	bls.n	8002612 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	22ff      	movs	r2, #255	; 0xff
 80025f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	045c      	lsls	r4, r3, #17
 80025fe:	230a      	movs	r3, #10
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	8819      	ldrh	r1, [r3, #0]
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	2300      	movs	r3, #0
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	0023      	movs	r3, r4
 800260c:	f000 fa4a 	bl	8002aa4 <I2C_TransferConfig>
 8002610:	e012      	b.n	8002638 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29a      	uxth	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002620:	b2da      	uxtb	r2, r3
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	049c      	lsls	r4, r3, #18
 8002626:	230a      	movs	r3, #10
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	8819      	ldrh	r1, [r3, #0]
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	2300      	movs	r3, #0
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	0023      	movs	r3, r4
 8002634:	f000 fa36 	bl	8002aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d198      	bne.n	8002574 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f8e7 	bl	800281c <I2C_WaitOnSTOPFlagUntilTimeout>
 800264e:	1e03      	subs	r3, r0, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e01a      	b.n	800268c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2220      	movs	r2, #32
 800265c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	490b      	ldr	r1, [pc, #44]	; (8002698 <HAL_I2C_Master_Transmit+0x250>)
 800266a:	400a      	ands	r2, r1
 800266c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2241      	movs	r2, #65	; 0x41
 8002672:	2120      	movs	r1, #32
 8002674:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2242      	movs	r2, #66	; 0x42
 800267a:	2100      	movs	r1, #0
 800267c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2240      	movs	r2, #64	; 0x40
 8002682:	2100      	movs	r1, #0
 8002684:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	e000      	b.n	800268c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800268a:	2302      	movs	r3, #2
  }
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b007      	add	sp, #28
 8002692:	bd90      	pop	{r4, r7, pc}
 8002694:	80002000 	.word	0x80002000
 8002698:	fe00e800 	.word	0xfe00e800

0800269c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2202      	movs	r2, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d103      	bne.n	80026ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d007      	beq.n	80026d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699a      	ldr	r2, [r3, #24]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2101      	movs	r1, #1
 80026d4:	430a      	orrs	r2, r1
 80026d6:	619a      	str	r2, [r3, #24]
  }
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	1dfb      	adds	r3, r7, #7
 80026ee:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f0:	e03a      	b.n	8002768 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f000 f8d3 	bl	80028a4 <I2C_IsErrorOccurred>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d001      	beq.n	8002706 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e040      	b.n	8002788 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	3301      	adds	r3, #1
 800270a:	d02d      	beq.n	8002768 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270c:	f7ff faae 	bl	8001c6c <HAL_GetTick>
 8002710:	0002      	movs	r2, r0
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d302      	bcc.n	8002722 <I2C_WaitOnFlagUntilTimeout+0x42>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d122      	bne.n	8002768 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	4013      	ands	r3, r2
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	425a      	negs	r2, r3
 8002732:	4153      	adcs	r3, r2
 8002734:	b2db      	uxtb	r3, r3
 8002736:	001a      	movs	r2, r3
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	429a      	cmp	r2, r3
 800273e:	d113      	bne.n	8002768 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	2220      	movs	r2, #32
 8002746:	431a      	orrs	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2241      	movs	r2, #65	; 0x41
 8002750:	2120      	movs	r1, #32
 8002752:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2242      	movs	r2, #66	; 0x42
 8002758:	2100      	movs	r1, #0
 800275a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2240      	movs	r2, #64	; 0x40
 8002760:	2100      	movs	r1, #0
 8002762:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e00f      	b.n	8002788 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	4013      	ands	r3, r2
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	425a      	negs	r2, r3
 8002778:	4153      	adcs	r3, r2
 800277a:	b2db      	uxtb	r3, r3
 800277c:	001a      	movs	r2, r3
 800277e:	1dfb      	adds	r3, r7, #7
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d0b5      	beq.n	80026f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b004      	add	sp, #16
 800278e:	bd80      	pop	{r7, pc}

08002790 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b084      	sub	sp, #16
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800279c:	e032      	b.n	8002804 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 f87d 	bl	80028a4 <I2C_IsErrorOccurred>
 80027aa:	1e03      	subs	r3, r0, #0
 80027ac:	d001      	beq.n	80027b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e030      	b.n	8002814 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	3301      	adds	r3, #1
 80027b6:	d025      	beq.n	8002804 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b8:	f7ff fa58 	bl	8001c6c <HAL_GetTick>
 80027bc:	0002      	movs	r2, r0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d302      	bcc.n	80027ce <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11a      	bne.n	8002804 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2202      	movs	r2, #2
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d013      	beq.n	8002804 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e0:	2220      	movs	r2, #32
 80027e2:	431a      	orrs	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2241      	movs	r2, #65	; 0x41
 80027ec:	2120      	movs	r1, #32
 80027ee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2242      	movs	r2, #66	; 0x42
 80027f4:	2100      	movs	r1, #0
 80027f6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2240      	movs	r2, #64	; 0x40
 80027fc:	2100      	movs	r1, #0
 80027fe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e007      	b.n	8002814 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2202      	movs	r2, #2
 800280c:	4013      	ands	r3, r2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d1c5      	bne.n	800279e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	0018      	movs	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	b004      	add	sp, #16
 800281a:	bd80      	pop	{r7, pc}

0800281c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002828:	e02f      	b.n	800288a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	0018      	movs	r0, r3
 8002832:	f000 f837 	bl	80028a4 <I2C_IsErrorOccurred>
 8002836:	1e03      	subs	r3, r0, #0
 8002838:	d001      	beq.n	800283e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e02d      	b.n	800289a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283e:	f7ff fa15 	bl	8001c6c <HAL_GetTick>
 8002842:	0002      	movs	r2, r0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	429a      	cmp	r2, r3
 800284c:	d302      	bcc.n	8002854 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d11a      	bne.n	800288a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2220      	movs	r2, #32
 800285c:	4013      	ands	r3, r2
 800285e:	2b20      	cmp	r3, #32
 8002860:	d013      	beq.n	800288a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	2220      	movs	r2, #32
 8002868:	431a      	orrs	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2241      	movs	r2, #65	; 0x41
 8002872:	2120      	movs	r1, #32
 8002874:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2242      	movs	r2, #66	; 0x42
 800287a:	2100      	movs	r1, #0
 800287c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2240      	movs	r2, #64	; 0x40
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e007      	b.n	800289a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2220      	movs	r2, #32
 8002892:	4013      	ands	r3, r2
 8002894:	2b20      	cmp	r3, #32
 8002896:	d1c8      	bne.n	800282a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b004      	add	sp, #16
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b590      	push	{r4, r7, lr}
 80028a6:	b08b      	sub	sp, #44	; 0x2c
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b0:	2327      	movs	r3, #39	; 0x27
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2210      	movs	r2, #16
 80028cc:	4013      	ands	r3, r2
 80028ce:	d100      	bne.n	80028d2 <I2C_IsErrorOccurred+0x2e>
 80028d0:	e082      	b.n	80029d8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2210      	movs	r2, #16
 80028d8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028da:	e060      	b.n	800299e <I2C_IsErrorOccurred+0xfa>
 80028dc:	2427      	movs	r4, #39	; 0x27
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	193a      	adds	r2, r7, r4
 80028e2:	7812      	ldrb	r2, [r2, #0]
 80028e4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	3301      	adds	r3, #1
 80028ea:	d058      	beq.n	800299e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028ec:	f7ff f9be 	bl	8001c6c <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d306      	bcc.n	800290a <I2C_IsErrorOccurred+0x66>
 80028fc:	193b      	adds	r3, r7, r4
 80028fe:	193a      	adds	r2, r7, r4
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	701a      	strb	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d149      	bne.n	800299e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	01db      	lsls	r3, r3, #7
 8002914:	4013      	ands	r3, r2
 8002916:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002918:	2013      	movs	r0, #19
 800291a:	183b      	adds	r3, r7, r0
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	2142      	movs	r1, #66	; 0x42
 8002920:	5c52      	ldrb	r2, [r2, r1]
 8002922:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	2380      	movs	r3, #128	; 0x80
 800292c:	021b      	lsls	r3, r3, #8
 800292e:	401a      	ands	r2, r3
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	429a      	cmp	r2, r3
 8002936:	d126      	bne.n	8002986 <I2C_IsErrorOccurred+0xe2>
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	01db      	lsls	r3, r3, #7
 800293e:	429a      	cmp	r2, r3
 8002940:	d021      	beq.n	8002986 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002942:	183b      	adds	r3, r7, r0
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b20      	cmp	r3, #32
 8002948:	d01d      	beq.n	8002986 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2180      	movs	r1, #128	; 0x80
 8002956:	01c9      	lsls	r1, r1, #7
 8002958:	430a      	orrs	r2, r1
 800295a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800295c:	f7ff f986 	bl	8001c6c <HAL_GetTick>
 8002960:	0003      	movs	r3, r0
 8002962:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002964:	e00f      	b.n	8002986 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002966:	f7ff f981 	bl	8001c6c <HAL_GetTick>
 800296a:	0002      	movs	r2, r0
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b19      	cmp	r3, #25
 8002972:	d908      	bls.n	8002986 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	2220      	movs	r2, #32
 8002978:	4313      	orrs	r3, r2
 800297a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800297c:	2327      	movs	r3, #39	; 0x27
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]

              break;
 8002984:	e00b      	b.n	800299e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2220      	movs	r2, #32
 800298e:	4013      	ands	r3, r2
 8002990:	2127      	movs	r1, #39	; 0x27
 8002992:	187a      	adds	r2, r7, r1
 8002994:	1879      	adds	r1, r7, r1
 8002996:	7809      	ldrb	r1, [r1, #0]
 8002998:	7011      	strb	r1, [r2, #0]
 800299a:	2b20      	cmp	r3, #32
 800299c:	d1e3      	bne.n	8002966 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2220      	movs	r2, #32
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b20      	cmp	r3, #32
 80029aa:	d004      	beq.n	80029b6 <I2C_IsErrorOccurred+0x112>
 80029ac:	2327      	movs	r3, #39	; 0x27
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d092      	beq.n	80028dc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029b6:	2327      	movs	r3, #39	; 0x27
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d103      	bne.n	80029c8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2220      	movs	r2, #32
 80029c6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	2204      	movs	r2, #4
 80029cc:	4313      	orrs	r3, r2
 80029ce:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80029d0:	2327      	movs	r3, #39	; 0x27
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	2380      	movs	r3, #128	; 0x80
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	4013      	ands	r3, r2
 80029e8:	d00c      	beq.n	8002a04 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2201      	movs	r2, #1
 80029ee:	4313      	orrs	r3, r2
 80029f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2280      	movs	r2, #128	; 0x80
 80029f8:	0052      	lsls	r2, r2, #1
 80029fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029fc:	2327      	movs	r3, #39	; 0x27
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	2380      	movs	r3, #128	; 0x80
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d00c      	beq.n	8002a28 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	2208      	movs	r2, #8
 8002a12:	4313      	orrs	r3, r2
 8002a14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	00d2      	lsls	r2, r2, #3
 8002a1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a20:	2327      	movs	r3, #39	; 0x27
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d00c      	beq.n	8002a4c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	2202      	movs	r2, #2
 8002a36:	4313      	orrs	r3, r2
 8002a38:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2280      	movs	r2, #128	; 0x80
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a44:	2327      	movs	r3, #39	; 0x27
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002a4c:	2327      	movs	r3, #39	; 0x27
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d01d      	beq.n	8002a92 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f7ff fe1f 	bl	800269c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	490d      	ldr	r1, [pc, #52]	; (8002aa0 <I2C_IsErrorOccurred+0x1fc>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2241      	movs	r2, #65	; 0x41
 8002a7e:	2120      	movs	r1, #32
 8002a80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2242      	movs	r2, #66	; 0x42
 8002a86:	2100      	movs	r1, #0
 8002a88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2240      	movs	r2, #64	; 0x40
 8002a8e:	2100      	movs	r1, #0
 8002a90:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002a92:	2327      	movs	r3, #39	; 0x27
 8002a94:	18fb      	adds	r3, r7, r3
 8002a96:	781b      	ldrb	r3, [r3, #0]
}
 8002a98:	0018      	movs	r0, r3
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b00b      	add	sp, #44	; 0x2c
 8002a9e:	bd90      	pop	{r4, r7, pc}
 8002aa0:	fe00e800 	.word	0xfe00e800

08002aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002aa4:	b590      	push	{r4, r7, lr}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	0008      	movs	r0, r1
 8002aae:	0011      	movs	r1, r2
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	240a      	movs	r4, #10
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	1c02      	adds	r2, r0, #0
 8002ab8:	801a      	strh	r2, [r3, #0]
 8002aba:	2009      	movs	r0, #9
 8002abc:	183b      	adds	r3, r7, r0
 8002abe:	1c0a      	adds	r2, r1, #0
 8002ac0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ac2:	193b      	adds	r3, r7, r4
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	059b      	lsls	r3, r3, #22
 8002ac8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002aca:	183b      	adds	r3, r7, r0
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	0419      	lsls	r1, r3, #16
 8002ad0:	23ff      	movs	r3, #255	; 0xff
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ad6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aee:	0d51      	lsrs	r1, r2, #21
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	00d2      	lsls	r2, r2, #3
 8002af4:	400a      	ands	r2, r1
 8002af6:	4907      	ldr	r1, [pc, #28]	; (8002b14 <I2C_TransferConfig+0x70>)
 8002af8:	430a      	orrs	r2, r1
 8002afa:	43d2      	mvns	r2, r2
 8002afc:	401a      	ands	r2, r3
 8002afe:	0011      	movs	r1, r2
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b007      	add	sp, #28
 8002b10:	bd90      	pop	{r4, r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	03ff63ff 	.word	0x03ff63ff

08002b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2241      	movs	r2, #65	; 0x41
 8002b26:	5c9b      	ldrb	r3, [r3, r2]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d138      	bne.n	8002ba0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2240      	movs	r2, #64	; 0x40
 8002b32:	5c9b      	ldrb	r3, [r3, r2]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e032      	b.n	8002ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2240      	movs	r2, #64	; 0x40
 8002b40:	2101      	movs	r1, #1
 8002b42:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2241      	movs	r2, #65	; 0x41
 8002b48:	2124      	movs	r1, #36	; 0x24
 8002b4a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2101      	movs	r1, #1
 8002b58:	438a      	bics	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4911      	ldr	r1, [pc, #68]	; (8002bac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002b68:	400a      	ands	r2, r1
 8002b6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2101      	movs	r1, #1
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2241      	movs	r2, #65	; 0x41
 8002b90:	2120      	movs	r1, #32
 8002b92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b002      	add	sp, #8
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	ffffefff 	.word	0xffffefff

08002bb0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2241      	movs	r2, #65	; 0x41
 8002bbe:	5c9b      	ldrb	r3, [r3, r2]
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d139      	bne.n	8002c3a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2240      	movs	r2, #64	; 0x40
 8002bca:	5c9b      	ldrb	r3, [r3, r2]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d101      	bne.n	8002bd4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	e033      	b.n	8002c3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2240      	movs	r2, #64	; 0x40
 8002bd8:	2101      	movs	r1, #1
 8002bda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2241      	movs	r2, #65	; 0x41
 8002be0:	2124      	movs	r1, #36	; 0x24
 8002be2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2101      	movs	r1, #1
 8002bf0:	438a      	bics	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4a11      	ldr	r2, [pc, #68]	; (8002c44 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	430a      	orrs	r2, r1
 8002c24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2241      	movs	r2, #65	; 0x41
 8002c2a:	2120      	movs	r1, #32
 8002c2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2240      	movs	r2, #64	; 0x40
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
  }
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b004      	add	sp, #16
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	fffff0ff 	.word	0xfffff0ff

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e301      	b.n	800325e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	d100      	bne.n	8002c66 <HAL_RCC_OscConfig+0x1e>
 8002c64:	e08d      	b.n	8002d82 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c66:	4bc3      	ldr	r3, [pc, #780]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d00e      	beq.n	8002c90 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c72:	4bc0      	ldr	r3, [pc, #768]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	220c      	movs	r2, #12
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d116      	bne.n	8002cac <HAL_RCC_OscConfig+0x64>
 8002c7e:	4bbd      	ldr	r3, [pc, #756]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	025b      	lsls	r3, r3, #9
 8002c86:	401a      	ands	r2, r3
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	025b      	lsls	r3, r3, #9
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d10d      	bne.n	8002cac <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	4bb8      	ldr	r3, [pc, #736]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	029b      	lsls	r3, r3, #10
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <HAL_RCC_OscConfig+0x56>
 8002c9c:	e070      	b.n	8002d80 <HAL_RCC_OscConfig+0x138>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d000      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x60>
 8002ca6:	e06b      	b.n	8002d80 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e2d8      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x7c>
 8002cb4:	4baf      	ldr	r3, [pc, #700]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4bae      	ldr	r3, [pc, #696]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cba:	2180      	movs	r1, #128	; 0x80
 8002cbc:	0249      	lsls	r1, r1, #9
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	601a      	str	r2, [r3, #0]
 8002cc2:	e02f      	b.n	8002d24 <HAL_RCC_OscConfig+0xdc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x9e>
 8002ccc:	4ba9      	ldr	r3, [pc, #676]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4ba8      	ldr	r3, [pc, #672]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cd2:	49a9      	ldr	r1, [pc, #676]	; (8002f78 <HAL_RCC_OscConfig+0x330>)
 8002cd4:	400a      	ands	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	4ba6      	ldr	r3, [pc, #664]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4ba5      	ldr	r3, [pc, #660]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cde:	49a7      	ldr	r1, [pc, #668]	; (8002f7c <HAL_RCC_OscConfig+0x334>)
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	601a      	str	r2, [r3, #0]
 8002ce4:	e01e      	b.n	8002d24 <HAL_RCC_OscConfig+0xdc>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d10e      	bne.n	8002d0c <HAL_RCC_OscConfig+0xc4>
 8002cee:	4ba1      	ldr	r3, [pc, #644]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4ba0      	ldr	r3, [pc, #640]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cf4:	2180      	movs	r1, #128	; 0x80
 8002cf6:	02c9      	lsls	r1, r1, #11
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	4b9d      	ldr	r3, [pc, #628]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b9c      	ldr	r3, [pc, #624]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d02:	2180      	movs	r1, #128	; 0x80
 8002d04:	0249      	lsls	r1, r1, #9
 8002d06:	430a      	orrs	r2, r1
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	e00b      	b.n	8002d24 <HAL_RCC_OscConfig+0xdc>
 8002d0c:	4b99      	ldr	r3, [pc, #612]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	4b98      	ldr	r3, [pc, #608]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d12:	4999      	ldr	r1, [pc, #612]	; (8002f78 <HAL_RCC_OscConfig+0x330>)
 8002d14:	400a      	ands	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	4b96      	ldr	r3, [pc, #600]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b95      	ldr	r3, [pc, #596]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d1e:	4997      	ldr	r1, [pc, #604]	; (8002f7c <HAL_RCC_OscConfig+0x334>)
 8002d20:	400a      	ands	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d014      	beq.n	8002d56 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2c:	f7fe ff9e 	bl	8001c6c <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d34:	e008      	b.n	8002d48 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d36:	f7fe ff99 	bl	8001c6c <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b64      	cmp	r3, #100	; 0x64
 8002d42:	d901      	bls.n	8002d48 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e28a      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d48:	4b8a      	ldr	r3, [pc, #552]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	029b      	lsls	r3, r3, #10
 8002d50:	4013      	ands	r3, r2
 8002d52:	d0f0      	beq.n	8002d36 <HAL_RCC_OscConfig+0xee>
 8002d54:	e015      	b.n	8002d82 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d56:	f7fe ff89 	bl	8001c6c <HAL_GetTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d60:	f7fe ff84 	bl	8001c6c <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b64      	cmp	r3, #100	; 0x64
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e275      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	4b80      	ldr	r3, [pc, #512]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	029b      	lsls	r3, r3, #10
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d1f0      	bne.n	8002d60 <HAL_RCC_OscConfig+0x118>
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d80:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2202      	movs	r2, #2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <HAL_RCC_OscConfig+0x146>
 8002d8c:	e069      	b.n	8002e62 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d8e:	4b79      	ldr	r3, [pc, #484]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	220c      	movs	r2, #12
 8002d94:	4013      	ands	r3, r2
 8002d96:	d00b      	beq.n	8002db0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d98:	4b76      	ldr	r3, [pc, #472]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	220c      	movs	r2, #12
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d11c      	bne.n	8002dde <HAL_RCC_OscConfig+0x196>
 8002da4:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	025b      	lsls	r3, r3, #9
 8002dac:	4013      	ands	r3, r2
 8002dae:	d116      	bne.n	8002dde <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002db0:	4b70      	ldr	r3, [pc, #448]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2202      	movs	r2, #2
 8002db6:	4013      	ands	r3, r2
 8002db8:	d005      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x17e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e24b      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc6:	4b6b      	ldr	r3, [pc, #428]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	22f8      	movs	r2, #248	; 0xf8
 8002dcc:	4393      	bics	r3, r2
 8002dce:	0019      	movs	r1, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	00da      	lsls	r2, r3, #3
 8002dd6:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ddc:	e041      	b.n	8002e62 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d024      	beq.n	8002e30 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de6:	4b63      	ldr	r3, [pc, #396]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4b62      	ldr	r3, [pc, #392]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002dec:	2101      	movs	r1, #1
 8002dee:	430a      	orrs	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fe ff3b 	bl	8001c6c <HAL_GetTick>
 8002df6:	0003      	movs	r3, r0
 8002df8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dfc:	f7fe ff36 	bl	8001c6c <HAL_GetTick>
 8002e00:	0002      	movs	r2, r0
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e227      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e0e:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2202      	movs	r2, #2
 8002e14:	4013      	ands	r3, r2
 8002e16:	d0f1      	beq.n	8002dfc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e18:	4b56      	ldr	r3, [pc, #344]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	22f8      	movs	r2, #248	; 0xf8
 8002e1e:	4393      	bics	r3, r2
 8002e20:	0019      	movs	r1, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00da      	lsls	r2, r3, #3
 8002e28:	4b52      	ldr	r3, [pc, #328]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e018      	b.n	8002e62 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e30:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b4f      	ldr	r3, [pc, #316]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	438a      	bics	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe ff16 	bl	8001c6c <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e46:	f7fe ff11 	bl	8001c6c <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e202      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e58:	4b46      	ldr	r3, [pc, #280]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d1f1      	bne.n	8002e46 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2208      	movs	r2, #8
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d036      	beq.n	8002eda <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d019      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e78:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e80:	f7fe fef4 	bl	8001c6c <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7fe feef 	bl	8001c6c <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e1e0      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9c:	4b35      	ldr	r3, [pc, #212]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d0f1      	beq.n	8002e8a <HAL_RCC_OscConfig+0x242>
 8002ea6:	e018      	b.n	8002eda <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea8:	4b32      	ldr	r3, [pc, #200]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002eaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eac:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7fe feda 	bl	8001c6c <HAL_GetTick>
 8002eb8:	0003      	movs	r3, r0
 8002eba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fed5 	bl	8001c6c <HAL_GetTick>
 8002ec2:	0002      	movs	r2, r0
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1c6      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d1f1      	bne.n	8002ebe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d100      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x29e>
 8002ee4:	e0b4      	b.n	8003050 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ee6:	201f      	movs	r0, #31
 8002ee8:	183b      	adds	r3, r7, r0
 8002eea:	2200      	movs	r2, #0
 8002eec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eee:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	055b      	lsls	r3, r3, #21
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d110      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	0549      	lsls	r1, r1, #21
 8002f04:	430a      	orrs	r2, r1
 8002f06:	61da      	str	r2, [r3, #28]
 8002f08:	4b1a      	ldr	r3, [pc, #104]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	055b      	lsls	r3, r3, #21
 8002f10:	4013      	ands	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f16:	183b      	adds	r3, r7, r0
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	4b18      	ldr	r3, [pc, #96]	; (8002f80 <HAL_RCC_OscConfig+0x338>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	d11a      	bne.n	8002f5e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_RCC_OscConfig+0x338>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_RCC_OscConfig+0x338>)
 8002f2e:	2180      	movs	r1, #128	; 0x80
 8002f30:	0049      	lsls	r1, r1, #1
 8002f32:	430a      	orrs	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7fe fe99 	bl	8001c6c <HAL_GetTick>
 8002f3a:	0003      	movs	r3, r0
 8002f3c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f40:	f7fe fe94 	bl	8001c6c <HAL_GetTick>
 8002f44:	0002      	movs	r2, r0
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e185      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_OscConfig+0x338>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d10e      	bne.n	8002f84 <HAL_RCC_OscConfig+0x33c>
 8002f66:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002f68:	6a1a      	ldr	r2, [r3, #32]
 8002f6a:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <HAL_RCC_OscConfig+0x32c>)
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	621a      	str	r2, [r3, #32]
 8002f72:	e035      	b.n	8002fe0 <HAL_RCC_OscConfig+0x398>
 8002f74:	40021000 	.word	0x40021000
 8002f78:	fffeffff 	.word	0xfffeffff
 8002f7c:	fffbffff 	.word	0xfffbffff
 8002f80:	40007000 	.word	0x40007000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10c      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x35e>
 8002f8c:	4bb6      	ldr	r3, [pc, #728]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002f8e:	6a1a      	ldr	r2, [r3, #32]
 8002f90:	4bb5      	ldr	r3, [pc, #724]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002f92:	2101      	movs	r1, #1
 8002f94:	438a      	bics	r2, r1
 8002f96:	621a      	str	r2, [r3, #32]
 8002f98:	4bb3      	ldr	r3, [pc, #716]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002f9a:	6a1a      	ldr	r2, [r3, #32]
 8002f9c:	4bb2      	ldr	r3, [pc, #712]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002f9e:	2104      	movs	r1, #4
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	621a      	str	r2, [r3, #32]
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x398>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b05      	cmp	r3, #5
 8002fac:	d10c      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x380>
 8002fae:	4bae      	ldr	r3, [pc, #696]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fb0:	6a1a      	ldr	r2, [r3, #32]
 8002fb2:	4bad      	ldr	r3, [pc, #692]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	621a      	str	r2, [r3, #32]
 8002fba:	4bab      	ldr	r3, [pc, #684]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fbc:	6a1a      	ldr	r2, [r3, #32]
 8002fbe:	4baa      	ldr	r3, [pc, #680]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	621a      	str	r2, [r3, #32]
 8002fc6:	e00b      	b.n	8002fe0 <HAL_RCC_OscConfig+0x398>
 8002fc8:	4ba7      	ldr	r3, [pc, #668]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	4ba6      	ldr	r3, [pc, #664]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	438a      	bics	r2, r1
 8002fd2:	621a      	str	r2, [r3, #32]
 8002fd4:	4ba4      	ldr	r3, [pc, #656]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fd6:	6a1a      	ldr	r2, [r3, #32]
 8002fd8:	4ba3      	ldr	r3, [pc, #652]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8002fda:	2104      	movs	r1, #4
 8002fdc:	438a      	bics	r2, r1
 8002fde:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d014      	beq.n	8003012 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fe40 	bl	8001c6c <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff0:	e009      	b.n	8003006 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe fe3b 	bl	8001c6c <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	4a9b      	ldr	r2, [pc, #620]	; (800326c <HAL_RCC_OscConfig+0x624>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e12b      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003006:	4b98      	ldr	r3, [pc, #608]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	2202      	movs	r2, #2
 800300c:	4013      	ands	r3, r2
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x3aa>
 8003010:	e013      	b.n	800303a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003012:	f7fe fe2b 	bl	8001c6c <HAL_GetTick>
 8003016:	0003      	movs	r3, r0
 8003018:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	e009      	b.n	8003030 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800301c:	f7fe fe26 	bl	8001c6c <HAL_GetTick>
 8003020:	0002      	movs	r2, r0
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	4a91      	ldr	r2, [pc, #580]	; (800326c <HAL_RCC_OscConfig+0x624>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e116      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003030:	4b8d      	ldr	r3, [pc, #564]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	2202      	movs	r2, #2
 8003036:	4013      	ands	r3, r2
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800303a:	231f      	movs	r3, #31
 800303c:	18fb      	adds	r3, r7, r3
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d105      	bne.n	8003050 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003044:	4b88      	ldr	r3, [pc, #544]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	4b87      	ldr	r3, [pc, #540]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 800304a:	4989      	ldr	r1, [pc, #548]	; (8003270 <HAL_RCC_OscConfig+0x628>)
 800304c:	400a      	ands	r2, r1
 800304e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2210      	movs	r2, #16
 8003056:	4013      	ands	r3, r2
 8003058:	d063      	beq.n	8003122 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d12a      	bne.n	80030b8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003062:	4b81      	ldr	r3, [pc, #516]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003066:	4b80      	ldr	r3, [pc, #512]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003068:	2104      	movs	r1, #4
 800306a:	430a      	orrs	r2, r1
 800306c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800306e:	4b7e      	ldr	r3, [pc, #504]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003072:	4b7d      	ldr	r3, [pc, #500]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003074:	2101      	movs	r1, #1
 8003076:	430a      	orrs	r2, r1
 8003078:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800307a:	f7fe fdf7 	bl	8001c6c <HAL_GetTick>
 800307e:	0003      	movs	r3, r0
 8003080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003084:	f7fe fdf2 	bl	8001c6c <HAL_GetTick>
 8003088:	0002      	movs	r2, r0
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0e3      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003096:	4b74      	ldr	r3, [pc, #464]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	2202      	movs	r2, #2
 800309c:	4013      	ands	r3, r2
 800309e:	d0f1      	beq.n	8003084 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030a0:	4b71      	ldr	r3, [pc, #452]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a4:	22f8      	movs	r2, #248	; 0xf8
 80030a6:	4393      	bics	r3, r2
 80030a8:	0019      	movs	r1, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	00da      	lsls	r2, r3, #3
 80030b0:	4b6d      	ldr	r3, [pc, #436]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030b2:	430a      	orrs	r2, r1
 80030b4:	635a      	str	r2, [r3, #52]	; 0x34
 80030b6:	e034      	b.n	8003122 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	3305      	adds	r3, #5
 80030be:	d111      	bne.n	80030e4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80030c0:	4b69      	ldr	r3, [pc, #420]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030c4:	4b68      	ldr	r3, [pc, #416]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030c6:	2104      	movs	r1, #4
 80030c8:	438a      	bics	r2, r1
 80030ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80030cc:	4b66      	ldr	r3, [pc, #408]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d0:	22f8      	movs	r2, #248	; 0xf8
 80030d2:	4393      	bics	r3, r2
 80030d4:	0019      	movs	r1, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	00da      	lsls	r2, r3, #3
 80030dc:	4b62      	ldr	r3, [pc, #392]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030de:	430a      	orrs	r2, r1
 80030e0:	635a      	str	r2, [r3, #52]	; 0x34
 80030e2:	e01e      	b.n	8003122 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80030e4:	4b60      	ldr	r3, [pc, #384]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030e8:	4b5f      	ldr	r3, [pc, #380]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030ea:	2104      	movs	r1, #4
 80030ec:	430a      	orrs	r2, r1
 80030ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80030f0:	4b5d      	ldr	r3, [pc, #372]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f4:	4b5c      	ldr	r3, [pc, #368]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80030f6:	2101      	movs	r1, #1
 80030f8:	438a      	bics	r2, r1
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7fe fdb6 	bl	8001c6c <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003106:	f7fe fdb1 	bl	8001c6c <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e0a2      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003118:	4b53      	ldr	r3, [pc, #332]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 800311a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311c:	2202      	movs	r2, #2
 800311e:	4013      	ands	r3, r2
 8003120:	d1f1      	bne.n	8003106 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d100      	bne.n	800312c <HAL_RCC_OscConfig+0x4e4>
 800312a:	e097      	b.n	800325c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800312c:	4b4e      	ldr	r3, [pc, #312]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	220c      	movs	r2, #12
 8003132:	4013      	ands	r3, r2
 8003134:	2b08      	cmp	r3, #8
 8003136:	d100      	bne.n	800313a <HAL_RCC_OscConfig+0x4f2>
 8003138:	e06b      	b.n	8003212 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d14c      	bne.n	80031dc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003142:	4b49      	ldr	r3, [pc, #292]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	4b48      	ldr	r3, [pc, #288]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003148:	494a      	ldr	r1, [pc, #296]	; (8003274 <HAL_RCC_OscConfig+0x62c>)
 800314a:	400a      	ands	r2, r1
 800314c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fe fd8d 	bl	8001c6c <HAL_GetTick>
 8003152:	0003      	movs	r3, r0
 8003154:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003158:	f7fe fd88 	bl	8001c6c <HAL_GetTick>
 800315c:	0002      	movs	r2, r0
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e079      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800316a:	4b3f      	ldr	r3, [pc, #252]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	049b      	lsls	r3, r3, #18
 8003172:	4013      	ands	r3, r2
 8003174:	d1f0      	bne.n	8003158 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003176:	4b3c      	ldr	r3, [pc, #240]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	220f      	movs	r2, #15
 800317c:	4393      	bics	r3, r2
 800317e:	0019      	movs	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003184:	4b38      	ldr	r3, [pc, #224]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003186:	430a      	orrs	r2, r1
 8003188:	62da      	str	r2, [r3, #44]	; 0x2c
 800318a:	4b37      	ldr	r3, [pc, #220]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a3a      	ldr	r2, [pc, #232]	; (8003278 <HAL_RCC_OscConfig+0x630>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	431a      	orrs	r2, r3
 800319e:	4b32      	ldr	r3, [pc, #200]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031a0:	430a      	orrs	r2, r1
 80031a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b2f      	ldr	r3, [pc, #188]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031aa:	2180      	movs	r1, #128	; 0x80
 80031ac:	0449      	lsls	r1, r1, #17
 80031ae:	430a      	orrs	r2, r1
 80031b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fe fd5b 	bl	8001c6c <HAL_GetTick>
 80031b6:	0003      	movs	r3, r0
 80031b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe fd56 	bl	8001c6c <HAL_GetTick>
 80031c0:	0002      	movs	r2, r0
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e047      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031ce:	4b26      	ldr	r3, [pc, #152]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	049b      	lsls	r3, r3, #18
 80031d6:	4013      	ands	r3, r2
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x574>
 80031da:	e03f      	b.n	800325c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031dc:	4b22      	ldr	r3, [pc, #136]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 80031e2:	4924      	ldr	r1, [pc, #144]	; (8003274 <HAL_RCC_OscConfig+0x62c>)
 80031e4:	400a      	ands	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fd40 	bl	8001c6c <HAL_GetTick>
 80031ec:	0003      	movs	r3, r0
 80031ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fe fd3b 	bl	8001c6c <HAL_GetTick>
 80031f6:	0002      	movs	r2, r0
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e02c      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003204:	4b18      	ldr	r3, [pc, #96]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	2380      	movs	r3, #128	; 0x80
 800320a:	049b      	lsls	r3, r3, #18
 800320c:	4013      	ands	r3, r2
 800320e:	d1f0      	bne.n	80031f2 <HAL_RCC_OscConfig+0x5aa>
 8003210:	e024      	b.n	800325c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e01f      	b.n	800325e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800321e:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003224:	4b10      	ldr	r3, [pc, #64]	; (8003268 <HAL_RCC_OscConfig+0x620>)
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	025b      	lsls	r3, r3, #9
 8003230:	401a      	ands	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	429a      	cmp	r2, r3
 8003238:	d10e      	bne.n	8003258 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	220f      	movs	r2, #15
 800323e:	401a      	ands	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003244:	429a      	cmp	r2, r3
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	23f0      	movs	r3, #240	; 0xf0
 800324c:	039b      	lsls	r3, r3, #14
 800324e:	401a      	ands	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003254:	429a      	cmp	r2, r3
 8003256:	d001      	beq.n	800325c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b008      	add	sp, #32
 8003264:	bd80      	pop	{r7, pc}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	40021000 	.word	0x40021000
 800326c:	00001388 	.word	0x00001388
 8003270:	efffffff 	.word	0xefffffff
 8003274:	feffffff 	.word	0xfeffffff
 8003278:	ffc2ffff 	.word	0xffc2ffff

0800327c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b3      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003290:	4b5b      	ldr	r3, [pc, #364]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2201      	movs	r2, #1
 8003296:	4013      	ands	r3, r2
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	429a      	cmp	r2, r3
 800329c:	d911      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800329e:	4b58      	ldr	r3, [pc, #352]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2201      	movs	r2, #1
 80032a4:	4393      	bics	r3, r2
 80032a6:	0019      	movs	r1, r3
 80032a8:	4b55      	ldr	r3, [pc, #340]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b0:	4b53      	ldr	r3, [pc, #332]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2201      	movs	r2, #1
 80032b6:	4013      	ands	r3, r2
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d001      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e09a      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2202      	movs	r2, #2
 80032c8:	4013      	ands	r3, r2
 80032ca:	d015      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2204      	movs	r2, #4
 80032d2:	4013      	ands	r3, r2
 80032d4:	d006      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80032d6:	4b4b      	ldr	r3, [pc, #300]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80032dc:	21e0      	movs	r1, #224	; 0xe0
 80032de:	00c9      	lsls	r1, r1, #3
 80032e0:	430a      	orrs	r2, r1
 80032e2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032e4:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	22f0      	movs	r2, #240	; 0xf0
 80032ea:	4393      	bics	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	4b44      	ldr	r3, [pc, #272]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2201      	movs	r2, #1
 80032fe:	4013      	ands	r3, r2
 8003300:	d040      	beq.n	8003384 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	4b3e      	ldr	r3, [pc, #248]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	029b      	lsls	r3, r3, #10
 8003312:	4013      	ands	r3, r2
 8003314:	d114      	bne.n	8003340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e06e      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d107      	bne.n	8003332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003322:	4b38      	ldr	r3, [pc, #224]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	049b      	lsls	r3, r3, #18
 800332a:	4013      	ands	r3, r2
 800332c:	d108      	bne.n	8003340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e062      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003332:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2202      	movs	r2, #2
 8003338:	4013      	ands	r3, r2
 800333a:	d101      	bne.n	8003340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e05b      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003340:	4b30      	ldr	r3, [pc, #192]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2203      	movs	r2, #3
 8003346:	4393      	bics	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003354:	f7fe fc8a 	bl	8001c6c <HAL_GetTick>
 8003358:	0003      	movs	r3, r0
 800335a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335c:	e009      	b.n	8003372 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335e:	f7fe fc85 	bl	8001c6c <HAL_GetTick>
 8003362:	0002      	movs	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	4a27      	ldr	r2, [pc, #156]	; (8003408 <HAL_RCC_ClockConfig+0x18c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e042      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003372:	4b24      	ldr	r3, [pc, #144]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	220c      	movs	r2, #12
 8003378:	401a      	ands	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	429a      	cmp	r2, r3
 8003382:	d1ec      	bne.n	800335e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003384:	4b1e      	ldr	r3, [pc, #120]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2201      	movs	r2, #1
 800338a:	4013      	ands	r3, r2
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d211      	bcs.n	80033b6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003392:	4b1b      	ldr	r3, [pc, #108]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	4393      	bics	r3, r2
 800339a:	0019      	movs	r1, r3
 800339c:	4b18      	ldr	r3, [pc, #96]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a4:	4b16      	ldr	r3, [pc, #88]	; (8003400 <HAL_RCC_ClockConfig+0x184>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2201      	movs	r2, #1
 80033aa:	4013      	ands	r3, r2
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e020      	b.n	80033f8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2204      	movs	r2, #4
 80033bc:	4013      	ands	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80033c0:	4b10      	ldr	r3, [pc, #64]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	4a11      	ldr	r2, [pc, #68]	; (800340c <HAL_RCC_ClockConfig+0x190>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033d4:	f000 f820 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d8:	0001      	movs	r1, r0
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x188>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	220f      	movs	r2, #15
 80033e2:	4013      	ands	r3, r2
 80033e4:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <HAL_RCC_ClockConfig+0x194>)
 80033e6:	5cd3      	ldrb	r3, [r2, r3]
 80033e8:	000a      	movs	r2, r1
 80033ea:	40da      	lsrs	r2, r3
 80033ec:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x198>)
 80033ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80033f0:	2000      	movs	r0, #0
 80033f2:	f7fe fbf5 	bl	8001be0 <HAL_InitTick>
  
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	0018      	movs	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b004      	add	sp, #16
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40022000 	.word	0x40022000
 8003404:	40021000 	.word	0x40021000
 8003408:	00001388 	.word	0x00001388
 800340c:	fffff8ff 	.word	0xfffff8ff
 8003410:	08005384 	.word	0x08005384
 8003414:	2000001c 	.word	0x2000001c

08003418 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	2300      	movs	r3, #0
 800342c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003432:	4b20      	ldr	r3, [pc, #128]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	220c      	movs	r2, #12
 800343c:	4013      	ands	r3, r2
 800343e:	2b04      	cmp	r3, #4
 8003440:	d002      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x30>
 8003442:	2b08      	cmp	r3, #8
 8003444:	d003      	beq.n	800344e <HAL_RCC_GetSysClockFreq+0x36>
 8003446:	e02c      	b.n	80034a2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800344a:	613b      	str	r3, [r7, #16]
      break;
 800344c:	e02c      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	0c9b      	lsrs	r3, r3, #18
 8003452:	220f      	movs	r2, #15
 8003454:	4013      	ands	r3, r2
 8003456:	4a19      	ldr	r2, [pc, #100]	; (80034bc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003458:	5cd3      	ldrb	r3, [r2, r3]
 800345a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800345c:	4b15      	ldr	r3, [pc, #84]	; (80034b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	220f      	movs	r2, #15
 8003462:	4013      	ands	r3, r2
 8003464:	4a16      	ldr	r2, [pc, #88]	; (80034c0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	025b      	lsls	r3, r3, #9
 8003470:	4013      	ands	r3, r2
 8003472:	d009      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	4810      	ldr	r0, [pc, #64]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003478:	f7fc fe46 	bl	8000108 <__udivsi3>
 800347c:	0003      	movs	r3, r0
 800347e:	001a      	movs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4353      	muls	r3, r2
 8003484:	617b      	str	r3, [r7, #20]
 8003486:	e009      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	000a      	movs	r2, r1
 800348c:	0152      	lsls	r2, r2, #5
 800348e:	1a52      	subs	r2, r2, r1
 8003490:	0193      	lsls	r3, r2, #6
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	185b      	adds	r3, r3, r1
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	613b      	str	r3, [r7, #16]
      break;
 80034a0:	e002      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034a2:	4b05      	ldr	r3, [pc, #20]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034a4:	613b      	str	r3, [r7, #16]
      break;
 80034a6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80034a8:	693b      	ldr	r3, [r7, #16]
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b006      	add	sp, #24
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	40021000 	.word	0x40021000
 80034b8:	007a1200 	.word	0x007a1200
 80034bc:	0800539c 	.word	0x0800539c
 80034c0:	080053ac 	.word	0x080053ac

080034c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c8:	4b02      	ldr	r3, [pc, #8]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ca:	681b      	ldr	r3, [r3, #0]
}
 80034cc:	0018      	movs	r0, r3
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	2000001c 	.word	0x2000001c

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80034dc:	f7ff fff2 	bl	80034c4 <HAL_RCC_GetHCLKFreq>
 80034e0:	0001      	movs	r1, r0
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	2207      	movs	r2, #7
 80034ea:	4013      	ands	r3, r2
 80034ec:	4a04      	ldr	r2, [pc, #16]	; (8003500 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034ee:	5cd3      	ldrb	r3, [r2, r3]
 80034f0:	40d9      	lsrs	r1, r3
 80034f2:	000b      	movs	r3, r1
}    
 80034f4:	0018      	movs	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	40021000 	.word	0x40021000
 8003500:	08005394 	.word	0x08005394

08003504 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	025b      	lsls	r3, r3, #9
 800351c:	4013      	ands	r3, r2
 800351e:	d100      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003520:	e08e      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003522:	2017      	movs	r0, #23
 8003524:	183b      	adds	r3, r7, r0
 8003526:	2200      	movs	r2, #0
 8003528:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352a:	4b57      	ldr	r3, [pc, #348]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	055b      	lsls	r3, r3, #21
 8003532:	4013      	ands	r3, r2
 8003534:	d110      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003536:	4b54      	ldr	r3, [pc, #336]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	4b53      	ldr	r3, [pc, #332]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800353c:	2180      	movs	r1, #128	; 0x80
 800353e:	0549      	lsls	r1, r1, #21
 8003540:	430a      	orrs	r2, r1
 8003542:	61da      	str	r2, [r3, #28]
 8003544:	4b50      	ldr	r3, [pc, #320]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	2380      	movs	r3, #128	; 0x80
 800354a:	055b      	lsls	r3, r3, #21
 800354c:	4013      	ands	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]
 8003550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003552:	183b      	adds	r3, r7, r0
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	4b4c      	ldr	r3, [pc, #304]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	2380      	movs	r3, #128	; 0x80
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	4013      	ands	r3, r2
 8003562:	d11a      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003564:	4b49      	ldr	r3, [pc, #292]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b48      	ldr	r3, [pc, #288]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800356a:	2180      	movs	r1, #128	; 0x80
 800356c:	0049      	lsls	r1, r1, #1
 800356e:	430a      	orrs	r2, r1
 8003570:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003572:	f7fe fb7b 	bl	8001c6c <HAL_GetTick>
 8003576:	0003      	movs	r3, r0
 8003578:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357a:	e008      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357c:	f7fe fb76 	bl	8001c6c <HAL_GetTick>
 8003580:	0002      	movs	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e077      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b3f      	ldr	r3, [pc, #252]	; (800368c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	2380      	movs	r3, #128	; 0x80
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	4013      	ands	r3, r2
 8003598:	d0f0      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800359c:	6a1a      	ldr	r2, [r3, #32]
 800359e:	23c0      	movs	r3, #192	; 0xc0
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4013      	ands	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d034      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685a      	ldr	r2, [r3, #4]
 80035b0:	23c0      	movs	r3, #192	; 0xc0
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4013      	ands	r3, r2
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d02c      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035bc:	4b32      	ldr	r3, [pc, #200]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4a33      	ldr	r2, [pc, #204]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80035c2:	4013      	ands	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035c6:	4b30      	ldr	r3, [pc, #192]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	4b2f      	ldr	r3, [pc, #188]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035cc:	2180      	movs	r1, #128	; 0x80
 80035ce:	0249      	lsls	r1, r1, #9
 80035d0:	430a      	orrs	r2, r1
 80035d2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035d4:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035d6:	6a1a      	ldr	r2, [r3, #32]
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035da:	492e      	ldr	r1, [pc, #184]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80035dc:	400a      	ands	r2, r1
 80035de:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035e0:	4b29      	ldr	r3, [pc, #164]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	4013      	ands	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fe fb3d 	bl	8001c6c <HAL_GetTick>
 80035f2:	0003      	movs	r3, r0
 80035f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f6:	e009      	b.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f8:	f7fe fb38 	bl	8001c6c <HAL_GetTick>
 80035fc:	0002      	movs	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	4a25      	ldr	r2, [pc, #148]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d901      	bls.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e038      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360c:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	2202      	movs	r2, #2
 8003612:	4013      	ands	r3, r2
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003616:	4b1c      	ldr	r3, [pc, #112]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800361c:	4013      	ands	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	4b18      	ldr	r3, [pc, #96]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003626:	430a      	orrs	r2, r1
 8003628:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800362a:	2317      	movs	r3, #23
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d105      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003634:	4b14      	ldr	r3, [pc, #80]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003636:	69da      	ldr	r2, [r3, #28]
 8003638:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800363a:	4918      	ldr	r1, [pc, #96]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800363c:	400a      	ands	r2, r1
 800363e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2201      	movs	r2, #1
 8003646:	4013      	ands	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	2203      	movs	r2, #3
 8003650:	4393      	bics	r3, r2
 8003652:	0019      	movs	r1, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	4b0b      	ldr	r3, [pc, #44]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800365a:	430a      	orrs	r2, r1
 800365c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2220      	movs	r2, #32
 8003664:	4013      	ands	r3, r2
 8003666:	d009      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366c:	2210      	movs	r2, #16
 800366e:	4393      	bics	r3, r2
 8003670:	0019      	movs	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003678:	430a      	orrs	r2, r1
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b006      	add	sp, #24
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
 8003690:	fffffcff 	.word	0xfffffcff
 8003694:	fffeffff 	.word	0xfffeffff
 8003698:	00001388 	.word	0x00001388
 800369c:	efffffff 	.word	0xefffffff

080036a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e042      	b.n	8003738 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	223d      	movs	r2, #61	; 0x3d
 80036b6:	5c9b      	ldrb	r3, [r3, r2]
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d107      	bne.n	80036ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	223c      	movs	r2, #60	; 0x3c
 80036c2:	2100      	movs	r1, #0
 80036c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7fe f941 	bl	8001950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	223d      	movs	r2, #61	; 0x3d
 80036d2:	2102      	movs	r1, #2
 80036d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3304      	adds	r3, #4
 80036de:	0019      	movs	r1, r3
 80036e0:	0010      	movs	r0, r2
 80036e2:	f000 fa5b 	bl	8003b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2246      	movs	r2, #70	; 0x46
 80036ea:	2101      	movs	r1, #1
 80036ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	223e      	movs	r2, #62	; 0x3e
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	223f      	movs	r2, #63	; 0x3f
 80036fa:	2101      	movs	r1, #1
 80036fc:	5499      	strb	r1, [r3, r2]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2240      	movs	r2, #64	; 0x40
 8003702:	2101      	movs	r1, #1
 8003704:	5499      	strb	r1, [r3, r2]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2241      	movs	r2, #65	; 0x41
 800370a:	2101      	movs	r1, #1
 800370c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2242      	movs	r2, #66	; 0x42
 8003712:	2101      	movs	r1, #1
 8003714:	5499      	strb	r1, [r3, r2]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2243      	movs	r2, #67	; 0x43
 800371a:	2101      	movs	r1, #1
 800371c:	5499      	strb	r1, [r3, r2]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2244      	movs	r2, #68	; 0x44
 8003722:	2101      	movs	r1, #1
 8003724:	5499      	strb	r1, [r3, r2]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2245      	movs	r2, #69	; 0x45
 800372a:	2101      	movs	r1, #1
 800372c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	223d      	movs	r2, #61	; 0x3d
 8003732:	2101      	movs	r1, #1
 8003734:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	223d      	movs	r2, #61	; 0x3d
 800374c:	5c9b      	ldrb	r3, [r3, r2]
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d001      	beq.n	8003758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e036      	b.n	80037c6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	223d      	movs	r2, #61	; 0x3d
 800375c:	2102      	movs	r1, #2
 800375e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2101      	movs	r1, #1
 800376c:	430a      	orrs	r2, r1
 800376e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a16      	ldr	r2, [pc, #88]	; (80037d0 <HAL_TIM_Base_Start_IT+0x90>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00a      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x50>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	05db      	lsls	r3, r3, #23
 8003782:	429a      	cmp	r2, r3
 8003784:	d004      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x50>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a12      	ldr	r2, [pc, #72]	; (80037d4 <HAL_TIM_Base_Start_IT+0x94>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d111      	bne.n	80037b4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2207      	movs	r2, #7
 8003798:	4013      	ands	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d010      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2101      	movs	r1, #1
 80037ae:	430a      	orrs	r2, r1
 80037b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	e007      	b.n	80037c4 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2101      	movs	r1, #1
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	0018      	movs	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b004      	add	sp, #16
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	40012c00 	.word	0x40012c00
 80037d4:	40000400 	.word	0x40000400

080037d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2202      	movs	r2, #2
 80037f4:	4013      	ands	r3, r2
 80037f6:	d021      	beq.n	800383c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2202      	movs	r2, #2
 80037fc:	4013      	ands	r3, r2
 80037fe:	d01d      	beq.n	800383c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2203      	movs	r2, #3
 8003806:	4252      	negs	r2, r2
 8003808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2203      	movs	r2, #3
 8003818:	4013      	ands	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	0018      	movs	r0, r3
 8003820:	f000 f9a4 	bl	8003b6c <HAL_TIM_IC_CaptureCallback>
 8003824:	e007      	b.n	8003836 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0018      	movs	r0, r3
 800382a:	f000 f997 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	0018      	movs	r0, r3
 8003832:	f000 f9a3 	bl	8003b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2204      	movs	r2, #4
 8003840:	4013      	ands	r3, r2
 8003842:	d022      	beq.n	800388a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2204      	movs	r2, #4
 8003848:	4013      	ands	r3, r2
 800384a:	d01e      	beq.n	800388a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2205      	movs	r2, #5
 8003852:	4252      	negs	r2, r2
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2202      	movs	r2, #2
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	23c0      	movs	r3, #192	; 0xc0
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4013      	ands	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	0018      	movs	r0, r3
 800386e:	f000 f97d 	bl	8003b6c <HAL_TIM_IC_CaptureCallback>
 8003872:	e007      	b.n	8003884 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	0018      	movs	r0, r3
 8003878:	f000 f970 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	0018      	movs	r0, r3
 8003880:	f000 f97c 	bl	8003b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2208      	movs	r2, #8
 800388e:	4013      	ands	r3, r2
 8003890:	d021      	beq.n	80038d6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2208      	movs	r2, #8
 8003896:	4013      	ands	r3, r2
 8003898:	d01d      	beq.n	80038d6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2209      	movs	r2, #9
 80038a0:	4252      	negs	r2, r2
 80038a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2204      	movs	r2, #4
 80038a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	2203      	movs	r2, #3
 80038b2:	4013      	ands	r3, r2
 80038b4:	d004      	beq.n	80038c0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	0018      	movs	r0, r3
 80038ba:	f000 f957 	bl	8003b6c <HAL_TIM_IC_CaptureCallback>
 80038be:	e007      	b.n	80038d0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	0018      	movs	r0, r3
 80038c4:	f000 f94a 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 f956 	bl	8003b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2210      	movs	r2, #16
 80038da:	4013      	ands	r3, r2
 80038dc:	d022      	beq.n	8003924 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2210      	movs	r2, #16
 80038e2:	4013      	ands	r3, r2
 80038e4:	d01e      	beq.n	8003924 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2211      	movs	r2, #17
 80038ec:	4252      	negs	r2, r2
 80038ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2208      	movs	r2, #8
 80038f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	23c0      	movs	r3, #192	; 0xc0
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4013      	ands	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	0018      	movs	r0, r3
 8003908:	f000 f930 	bl	8003b6c <HAL_TIM_IC_CaptureCallback>
 800390c:	e007      	b.n	800391e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	0018      	movs	r0, r3
 8003912:	f000 f923 	bl	8003b5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	0018      	movs	r0, r3
 800391a:	f000 f92f 	bl	8003b7c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	2201      	movs	r2, #1
 8003928:	4013      	ands	r3, r2
 800392a:	d00c      	beq.n	8003946 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	4013      	ands	r3, r2
 8003932:	d008      	beq.n	8003946 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2202      	movs	r2, #2
 800393a:	4252      	negs	r2, r2
 800393c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0018      	movs	r0, r3
 8003942:	f7fe f903 	bl	8001b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2280      	movs	r2, #128	; 0x80
 800394a:	4013      	ands	r3, r2
 800394c:	d00c      	beq.n	8003968 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	4013      	ands	r3, r2
 8003954:	d008      	beq.n	8003968 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2281      	movs	r2, #129	; 0x81
 800395c:	4252      	negs	r2, r2
 800395e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	0018      	movs	r0, r3
 8003964:	f000 fa98 	bl	8003e98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2240      	movs	r2, #64	; 0x40
 800396c:	4013      	ands	r3, r2
 800396e:	d00c      	beq.n	800398a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	4013      	ands	r3, r2
 8003976:	d008      	beq.n	800398a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2241      	movs	r2, #65	; 0x41
 800397e:	4252      	negs	r2, r2
 8003980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	0018      	movs	r0, r3
 8003986:	f000 f901 	bl	8003b8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	2220      	movs	r2, #32
 800398e:	4013      	ands	r3, r2
 8003990:	d00c      	beq.n	80039ac <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2220      	movs	r2, #32
 8003996:	4013      	ands	r3, r2
 8003998:	d008      	beq.n	80039ac <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2221      	movs	r2, #33	; 0x21
 80039a0:	4252      	negs	r2, r2
 80039a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	0018      	movs	r0, r3
 80039a8:	f000 fa6e 	bl	8003e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ac:	46c0      	nop			; (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b004      	add	sp, #16
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	230f      	movs	r3, #15
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	223c      	movs	r2, #60	; 0x3c
 80039ca:	5c9b      	ldrb	r3, [r3, r2]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_TIM_ConfigClockSource+0x20>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e0bc      	b.n	8003b4e <HAL_TIM_ConfigClockSource+0x19a>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	223c      	movs	r2, #60	; 0x3c
 80039d8:	2101      	movs	r1, #1
 80039da:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	223d      	movs	r2, #61	; 0x3d
 80039e0:	2102      	movs	r1, #2
 80039e2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2277      	movs	r2, #119	; 0x77
 80039f0:	4393      	bics	r3, r2
 80039f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4a58      	ldr	r2, [pc, #352]	; (8003b58 <HAL_TIM_ConfigClockSource+0x1a4>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	0192      	lsls	r2, r2, #6
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d040      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0xde>
 8003a10:	2280      	movs	r2, #128	; 0x80
 8003a12:	0192      	lsls	r2, r2, #6
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d900      	bls.n	8003a1a <HAL_TIM_ConfigClockSource+0x66>
 8003a18:	e088      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
 8003a1a:	2280      	movs	r2, #128	; 0x80
 8003a1c:	0152      	lsls	r2, r2, #5
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d100      	bne.n	8003a24 <HAL_TIM_ConfigClockSource+0x70>
 8003a22:	e088      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x182>
 8003a24:	2280      	movs	r2, #128	; 0x80
 8003a26:	0152      	lsls	r2, r2, #5
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d900      	bls.n	8003a2e <HAL_TIM_ConfigClockSource+0x7a>
 8003a2c:	e07e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
 8003a2e:	2b70      	cmp	r3, #112	; 0x70
 8003a30:	d018      	beq.n	8003a64 <HAL_TIM_ConfigClockSource+0xb0>
 8003a32:	d900      	bls.n	8003a36 <HAL_TIM_ConfigClockSource+0x82>
 8003a34:	e07a      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
 8003a36:	2b60      	cmp	r3, #96	; 0x60
 8003a38:	d04f      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0x126>
 8003a3a:	d900      	bls.n	8003a3e <HAL_TIM_ConfigClockSource+0x8a>
 8003a3c:	e076      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
 8003a3e:	2b50      	cmp	r3, #80	; 0x50
 8003a40:	d03b      	beq.n	8003aba <HAL_TIM_ConfigClockSource+0x106>
 8003a42:	d900      	bls.n	8003a46 <HAL_TIM_ConfigClockSource+0x92>
 8003a44:	e072      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
 8003a46:	2b40      	cmp	r3, #64	; 0x40
 8003a48:	d057      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x146>
 8003a4a:	d900      	bls.n	8003a4e <HAL_TIM_ConfigClockSource+0x9a>
 8003a4c:	e06e      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
 8003a4e:	2b30      	cmp	r3, #48	; 0x30
 8003a50:	d063      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x166>
 8003a52:	d86b      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
 8003a54:	2b20      	cmp	r3, #32
 8003a56:	d060      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x166>
 8003a58:	d868      	bhi.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d05d      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x166>
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d05b      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x166>
 8003a62:	e063      	b.n	8003b2c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	6899      	ldr	r1, [r3, #8]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f000 f990 	bl	8003d98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2277      	movs	r2, #119	; 0x77
 8003a84:	4313      	orrs	r3, r2
 8003a86:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]
      break;
 8003a90:	e052      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	6899      	ldr	r1, [r3, #8]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f000 f979 	bl	8003d98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	01c9      	lsls	r1, r1, #7
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
      break;
 8003ab8:	e03e      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	6859      	ldr	r1, [r3, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	001a      	movs	r2, r3
 8003ac8:	f000 f8ec 	bl	8003ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2150      	movs	r1, #80	; 0x50
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f000 f946 	bl	8003d64 <TIM_ITRx_SetConfig>
      break;
 8003ad8:	e02e      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6859      	ldr	r1, [r3, #4]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	f000 f90a 	bl	8003d00 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2160      	movs	r1, #96	; 0x60
 8003af2:	0018      	movs	r0, r3
 8003af4:	f000 f936 	bl	8003d64 <TIM_ITRx_SetConfig>
      break;
 8003af8:	e01e      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	001a      	movs	r2, r3
 8003b08:	f000 f8cc 	bl	8003ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2140      	movs	r1, #64	; 0x40
 8003b12:	0018      	movs	r0, r3
 8003b14:	f000 f926 	bl	8003d64 <TIM_ITRx_SetConfig>
      break;
 8003b18:	e00e      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	0019      	movs	r1, r3
 8003b24:	0010      	movs	r0, r2
 8003b26:	f000 f91d 	bl	8003d64 <TIM_ITRx_SetConfig>
      break;
 8003b2a:	e005      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003b2c:	230f      	movs	r3, #15
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
      break;
 8003b34:	e000      	b.n	8003b38 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003b36:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	223d      	movs	r2, #61	; 0x3d
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	223c      	movs	r2, #60	; 0x3c
 8003b44:	2100      	movs	r1, #0
 8003b46:	5499      	strb	r1, [r3, r2]

  return status;
 8003b48:	230f      	movs	r3, #15
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	781b      	ldrb	r3, [r3, #0]
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b004      	add	sp, #16
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	ffff00ff 	.word	0xffff00ff

08003b5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b74:	46c0      	nop			; (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b002      	add	sp, #8
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b84:	46c0      	nop			; (mov r8, r8)
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b002      	add	sp, #8
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b002      	add	sp, #8
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a37      	ldr	r2, [pc, #220]	; (8003c8c <TIM_Base_SetConfig+0xf0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d008      	beq.n	8003bc6 <TIM_Base_SetConfig+0x2a>
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	05db      	lsls	r3, r3, #23
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d003      	beq.n	8003bc6 <TIM_Base_SetConfig+0x2a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a33      	ldr	r2, [pc, #204]	; (8003c90 <TIM_Base_SetConfig+0xf4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d108      	bne.n	8003bd8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2270      	movs	r2, #112	; 0x70
 8003bca:	4393      	bics	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a2c      	ldr	r2, [pc, #176]	; (8003c8c <TIM_Base_SetConfig+0xf0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d014      	beq.n	8003c0a <TIM_Base_SetConfig+0x6e>
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	2380      	movs	r3, #128	; 0x80
 8003be4:	05db      	lsls	r3, r3, #23
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d00f      	beq.n	8003c0a <TIM_Base_SetConfig+0x6e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <TIM_Base_SetConfig+0xf4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d00b      	beq.n	8003c0a <TIM_Base_SetConfig+0x6e>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a27      	ldr	r2, [pc, #156]	; (8003c94 <TIM_Base_SetConfig+0xf8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d007      	beq.n	8003c0a <TIM_Base_SetConfig+0x6e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <TIM_Base_SetConfig+0xfc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d003      	beq.n	8003c0a <TIM_Base_SetConfig+0x6e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a25      	ldr	r2, [pc, #148]	; (8003c9c <TIM_Base_SetConfig+0x100>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d108      	bne.n	8003c1c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4a24      	ldr	r2, [pc, #144]	; (8003ca0 <TIM_Base_SetConfig+0x104>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	4393      	bics	r3, r2
 8003c22:	001a      	movs	r2, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a11      	ldr	r2, [pc, #68]	; (8003c8c <TIM_Base_SetConfig+0xf0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <TIM_Base_SetConfig+0xbe>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <TIM_Base_SetConfig+0xfc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_Base_SetConfig+0xbe>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a11      	ldr	r2, [pc, #68]	; (8003c9c <TIM_Base_SetConfig+0x100>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d103      	bne.n	8003c62 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	691a      	ldr	r2, [r3, #16]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	4013      	ands	r3, r2
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d106      	bne.n	8003c82 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	001a      	movs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	611a      	str	r2, [r3, #16]
  }
}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b004      	add	sp, #16
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	40012c00 	.word	0x40012c00
 8003c90:	40000400 	.word	0x40000400
 8003c94:	40002000 	.word	0x40002000
 8003c98:	40014400 	.word	0x40014400
 8003c9c:	40014800 	.word	0x40014800
 8003ca0:	fffffcff 	.word	0xfffffcff

08003ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	4393      	bics	r3, r2
 8003cbe:	001a      	movs	r2, r3
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	22f0      	movs	r2, #240	; 0xf0
 8003cce:	4393      	bics	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	220a      	movs	r2, #10
 8003ce0:	4393      	bics	r3, r2
 8003ce2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	621a      	str	r2, [r3, #32]
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b006      	add	sp, #24
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	2210      	movs	r2, #16
 8003d18:	4393      	bics	r3, r2
 8003d1a:	001a      	movs	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <TIM_TI2_ConfigInputStage+0x60>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	031b      	lsls	r3, r3, #12
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	22a0      	movs	r2, #160	; 0xa0
 8003d3c:	4393      	bics	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	621a      	str	r2, [r3, #32]
}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b006      	add	sp, #24
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	ffff0fff 	.word	0xffff0fff

08003d64 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2270      	movs	r2, #112	; 0x70
 8003d78:	4393      	bics	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	2207      	movs	r2, #7
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	609a      	str	r2, [r3, #8]
}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b004      	add	sp, #16
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4a09      	ldr	r2, [pc, #36]	; (8003dd4 <TIM_ETR_SetConfig+0x3c>)
 8003db0:	4013      	ands	r3, r2
 8003db2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	021a      	lsls	r2, r3, #8
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b006      	add	sp, #24
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	ffff00ff 	.word	0xffff00ff

08003dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	223c      	movs	r2, #60	; 0x3c
 8003de6:	5c9b      	ldrb	r3, [r3, r2]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e042      	b.n	8003e76 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	223c      	movs	r2, #60	; 0x3c
 8003df4:	2101      	movs	r1, #1
 8003df6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	223d      	movs	r2, #61	; 0x3d
 8003dfc:	2102      	movs	r1, #2
 8003dfe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2270      	movs	r2, #112	; 0x70
 8003e14:	4393      	bics	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d00a      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	2380      	movs	r3, #128	; 0x80
 8003e3a:	05db      	lsls	r3, r3, #23
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d004      	beq.n	8003e4a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a0f      	ldr	r2, [pc, #60]	; (8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10c      	bne.n	8003e64 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2280      	movs	r2, #128	; 0x80
 8003e4e:	4393      	bics	r3, r2
 8003e50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	223d      	movs	r2, #61	; 0x3d
 8003e68:	2101      	movs	r1, #1
 8003e6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	223c      	movs	r2, #60	; 0x3c
 8003e70:	2100      	movs	r1, #0
 8003e72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	0018      	movs	r0, r3
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	b004      	add	sp, #16
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	40012c00 	.word	0x40012c00
 8003e84:	40000400 	.word	0x40000400

08003e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b002      	add	sp, #8
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ea0:	46c0      	nop			; (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b002      	add	sp, #8
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e044      	b.n	8003f44 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d107      	bne.n	8003ed2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2278      	movs	r2, #120	; 0x78
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f7fd fd63 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2224      	movs	r2, #36	; 0x24
 8003ed6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d003      	beq.n	8003ef8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f000 fca8 	bl	8004848 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	0018      	movs	r0, r3
 8003efc:	f000 fb7c 	bl	80045f8 <UART_SetConfig>
 8003f00:	0003      	movs	r3, r0
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e01c      	b.n	8003f44 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	490d      	ldr	r1, [pc, #52]	; (8003f4c <HAL_UART_Init+0xa4>)
 8003f16:	400a      	ands	r2, r1
 8003f18:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	212a      	movs	r1, #42	; 0x2a
 8003f26:	438a      	bics	r2, r1
 8003f28:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2101      	movs	r1, #1
 8003f36:	430a      	orrs	r2, r1
 8003f38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f000 fd37 	bl	80049b0 <UART_CheckIdleState>
 8003f42:	0003      	movs	r3, r0
}
 8003f44:	0018      	movs	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b002      	add	sp, #8
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	ffffb7ff 	.word	0xffffb7ff

08003f50 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b088      	sub	sp, #32
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	1dbb      	adds	r3, r7, #6
 8003f5c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	589b      	ldr	r3, [r3, r2]
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d145      	bne.n	8003ff4 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_UART_Receive_IT+0x26>
 8003f6e:	1dbb      	adds	r3, r7, #6
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e03d      	b.n	8003ff6 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	015b      	lsls	r3, r3, #5
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d109      	bne.n	8003f9a <HAL_UART_Receive_IT+0x4a>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d105      	bne.n	8003f9a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4013      	ands	r3, r2
 8003f94:	d001      	beq.n	8003f9a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e02d      	b.n	8003ff6 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	041b      	lsls	r3, r3, #16
 8003faa:	4013      	ands	r3, r2
 8003fac:	d019      	beq.n	8003fe2 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fae:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb2:	613b      	str	r3, [r7, #16]
  return(result);
 8003fb4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fb6:	61fb      	str	r3, [r7, #28]
 8003fb8:	2301      	movs	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f383 8810 	msr	PRIMASK, r3
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2180      	movs	r1, #128	; 0x80
 8003fd0:	04c9      	lsls	r1, r1, #19
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f383 8810 	msr	PRIMASK, r3
}
 8003fe0:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fe2:	1dbb      	adds	r3, r7, #6
 8003fe4:	881a      	ldrh	r2, [r3, #0]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	0018      	movs	r0, r3
 8003fec:	f000 fdf8 	bl	8004be0 <UART_Start_Receive_IT>
 8003ff0:	0003      	movs	r3, r0
 8003ff2:	e000      	b.n	8003ff6 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	b008      	add	sp, #32
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004000:	b590      	push	{r4, r7, lr}
 8004002:	b0ab      	sub	sp, #172	; 0xac
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	22a4      	movs	r2, #164	; 0xa4
 8004010:	18b9      	adds	r1, r7, r2
 8004012:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	20a0      	movs	r0, #160	; 0xa0
 800401c:	1839      	adds	r1, r7, r0
 800401e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	219c      	movs	r1, #156	; 0x9c
 8004028:	1879      	adds	r1, r7, r1
 800402a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800402c:	0011      	movs	r1, r2
 800402e:	18bb      	adds	r3, r7, r2
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a99      	ldr	r2, [pc, #612]	; (8004298 <HAL_UART_IRQHandler+0x298>)
 8004034:	4013      	ands	r3, r2
 8004036:	2298      	movs	r2, #152	; 0x98
 8004038:	18bc      	adds	r4, r7, r2
 800403a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800403c:	18bb      	adds	r3, r7, r2
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d114      	bne.n	800406e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004044:	187b      	adds	r3, r7, r1
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2220      	movs	r2, #32
 800404a:	4013      	ands	r3, r2
 800404c:	d00f      	beq.n	800406e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800404e:	183b      	adds	r3, r7, r0
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2220      	movs	r2, #32
 8004054:	4013      	ands	r3, r2
 8004056:	d00a      	beq.n	800406e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800405c:	2b00      	cmp	r3, #0
 800405e:	d100      	bne.n	8004062 <HAL_UART_IRQHandler+0x62>
 8004060:	e29e      	b.n	80045a0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	0010      	movs	r0, r2
 800406a:	4798      	blx	r3
      }
      return;
 800406c:	e298      	b.n	80045a0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800406e:	2398      	movs	r3, #152	; 0x98
 8004070:	18fb      	adds	r3, r7, r3
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d100      	bne.n	800407a <HAL_UART_IRQHandler+0x7a>
 8004078:	e114      	b.n	80042a4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800407a:	239c      	movs	r3, #156	; 0x9c
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	4013      	ands	r3, r2
 8004084:	d106      	bne.n	8004094 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004086:	23a0      	movs	r3, #160	; 0xa0
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a83      	ldr	r2, [pc, #524]	; (800429c <HAL_UART_IRQHandler+0x29c>)
 800408e:	4013      	ands	r3, r2
 8004090:	d100      	bne.n	8004094 <HAL_UART_IRQHandler+0x94>
 8004092:	e107      	b.n	80042a4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004094:	23a4      	movs	r3, #164	; 0xa4
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2201      	movs	r2, #1
 800409c:	4013      	ands	r3, r2
 800409e:	d012      	beq.n	80040c6 <HAL_UART_IRQHandler+0xc6>
 80040a0:	23a0      	movs	r3, #160	; 0xa0
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4013      	ands	r3, r2
 80040ac:	d00b      	beq.n	80040c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2284      	movs	r2, #132	; 0x84
 80040ba:	589b      	ldr	r3, [r3, r2]
 80040bc:	2201      	movs	r2, #1
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2184      	movs	r1, #132	; 0x84
 80040c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040c6:	23a4      	movs	r3, #164	; 0xa4
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2202      	movs	r2, #2
 80040ce:	4013      	ands	r3, r2
 80040d0:	d011      	beq.n	80040f6 <HAL_UART_IRQHandler+0xf6>
 80040d2:	239c      	movs	r3, #156	; 0x9c
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2201      	movs	r2, #1
 80040da:	4013      	ands	r3, r2
 80040dc:	d00b      	beq.n	80040f6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2202      	movs	r2, #2
 80040e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2284      	movs	r2, #132	; 0x84
 80040ea:	589b      	ldr	r3, [r3, r2]
 80040ec:	2204      	movs	r2, #4
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2184      	movs	r1, #132	; 0x84
 80040f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040f6:	23a4      	movs	r3, #164	; 0xa4
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2204      	movs	r2, #4
 80040fe:	4013      	ands	r3, r2
 8004100:	d011      	beq.n	8004126 <HAL_UART_IRQHandler+0x126>
 8004102:	239c      	movs	r3, #156	; 0x9c
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2201      	movs	r2, #1
 800410a:	4013      	ands	r3, r2
 800410c:	d00b      	beq.n	8004126 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2204      	movs	r2, #4
 8004114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2284      	movs	r2, #132	; 0x84
 800411a:	589b      	ldr	r3, [r3, r2]
 800411c:	2202      	movs	r2, #2
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2184      	movs	r1, #132	; 0x84
 8004124:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004126:	23a4      	movs	r3, #164	; 0xa4
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2208      	movs	r2, #8
 800412e:	4013      	ands	r3, r2
 8004130:	d017      	beq.n	8004162 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004132:	23a0      	movs	r3, #160	; 0xa0
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2220      	movs	r2, #32
 800413a:	4013      	ands	r3, r2
 800413c:	d105      	bne.n	800414a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800413e:	239c      	movs	r3, #156	; 0x9c
 8004140:	18fb      	adds	r3, r7, r3
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2201      	movs	r2, #1
 8004146:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004148:	d00b      	beq.n	8004162 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2208      	movs	r2, #8
 8004150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2284      	movs	r2, #132	; 0x84
 8004156:	589b      	ldr	r3, [r3, r2]
 8004158:	2208      	movs	r2, #8
 800415a:	431a      	orrs	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2184      	movs	r1, #132	; 0x84
 8004160:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004162:	23a4      	movs	r3, #164	; 0xa4
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	4013      	ands	r3, r2
 800416e:	d013      	beq.n	8004198 <HAL_UART_IRQHandler+0x198>
 8004170:	23a0      	movs	r3, #160	; 0xa0
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	2380      	movs	r3, #128	; 0x80
 8004178:	04db      	lsls	r3, r3, #19
 800417a:	4013      	ands	r3, r2
 800417c:	d00c      	beq.n	8004198 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2280      	movs	r2, #128	; 0x80
 8004184:	0112      	lsls	r2, r2, #4
 8004186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2284      	movs	r2, #132	; 0x84
 800418c:	589b      	ldr	r3, [r3, r2]
 800418e:	2220      	movs	r2, #32
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2184      	movs	r1, #132	; 0x84
 8004196:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2284      	movs	r2, #132	; 0x84
 800419c:	589b      	ldr	r3, [r3, r2]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d100      	bne.n	80041a4 <HAL_UART_IRQHandler+0x1a4>
 80041a2:	e1ff      	b.n	80045a4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041a4:	23a4      	movs	r3, #164	; 0xa4
 80041a6:	18fb      	adds	r3, r7, r3
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2220      	movs	r2, #32
 80041ac:	4013      	ands	r3, r2
 80041ae:	d00e      	beq.n	80041ce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041b0:	23a0      	movs	r3, #160	; 0xa0
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2220      	movs	r2, #32
 80041b8:	4013      	ands	r3, r2
 80041ba:	d008      	beq.n	80041ce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	0010      	movs	r0, r2
 80041cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2284      	movs	r2, #132	; 0x84
 80041d2:	589b      	ldr	r3, [r3, r2]
 80041d4:	2194      	movs	r1, #148	; 0x94
 80041d6:	187a      	adds	r2, r7, r1
 80041d8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	2240      	movs	r2, #64	; 0x40
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b40      	cmp	r3, #64	; 0x40
 80041e6:	d004      	beq.n	80041f2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041e8:	187b      	adds	r3, r7, r1
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2228      	movs	r2, #40	; 0x28
 80041ee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041f0:	d047      	beq.n	8004282 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0018      	movs	r0, r3
 80041f6:	f000 fda9 	bl	8004d4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2240      	movs	r2, #64	; 0x40
 8004202:	4013      	ands	r3, r2
 8004204:	2b40      	cmp	r3, #64	; 0x40
 8004206:	d137      	bne.n	8004278 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004208:	f3ef 8310 	mrs	r3, PRIMASK
 800420c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800420e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004210:	2090      	movs	r0, #144	; 0x90
 8004212:	183a      	adds	r2, r7, r0
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	2301      	movs	r3, #1
 8004218:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800421c:	f383 8810 	msr	PRIMASK, r3
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2140      	movs	r1, #64	; 0x40
 800422e:	438a      	bics	r2, r1
 8004230:	609a      	str	r2, [r3, #8]
 8004232:	183b      	adds	r3, r7, r0
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004244:	2b00      	cmp	r3, #0
 8004246:	d012      	beq.n	800426e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424c:	4a14      	ldr	r2, [pc, #80]	; (80042a0 <HAL_UART_IRQHandler+0x2a0>)
 800424e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	0018      	movs	r0, r3
 8004256:	f7fd fe4d 	bl	8001ef4 <HAL_DMA_Abort_IT>
 800425a:	1e03      	subs	r3, r0, #0
 800425c:	d01a      	beq.n	8004294 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004268:	0018      	movs	r0, r3
 800426a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800426c:	e012      	b.n	8004294 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	0018      	movs	r0, r3
 8004272:	f000 f9ad 	bl	80045d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004276:	e00d      	b.n	8004294 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	0018      	movs	r0, r3
 800427c:	f000 f9a8 	bl	80045d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	e008      	b.n	8004294 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	0018      	movs	r0, r3
 8004286:	f000 f9a3 	bl	80045d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2284      	movs	r2, #132	; 0x84
 800428e:	2100      	movs	r1, #0
 8004290:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004292:	e187      	b.n	80045a4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004294:	46c0      	nop			; (mov r8, r8)
    return;
 8004296:	e185      	b.n	80045a4 <HAL_UART_IRQHandler+0x5a4>
 8004298:	0000080f 	.word	0x0000080f
 800429c:	04000120 	.word	0x04000120
 80042a0:	08004e15 	.word	0x08004e15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d000      	beq.n	80042ae <HAL_UART_IRQHandler+0x2ae>
 80042ac:	e139      	b.n	8004522 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042ae:	23a4      	movs	r3, #164	; 0xa4
 80042b0:	18fb      	adds	r3, r7, r3
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2210      	movs	r2, #16
 80042b6:	4013      	ands	r3, r2
 80042b8:	d100      	bne.n	80042bc <HAL_UART_IRQHandler+0x2bc>
 80042ba:	e132      	b.n	8004522 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042bc:	23a0      	movs	r3, #160	; 0xa0
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2210      	movs	r2, #16
 80042c4:	4013      	ands	r3, r2
 80042c6:	d100      	bne.n	80042ca <HAL_UART_IRQHandler+0x2ca>
 80042c8:	e12b      	b.n	8004522 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2210      	movs	r2, #16
 80042d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2240      	movs	r2, #64	; 0x40
 80042da:	4013      	ands	r3, r2
 80042dc:	2b40      	cmp	r3, #64	; 0x40
 80042de:	d000      	beq.n	80042e2 <HAL_UART_IRQHandler+0x2e2>
 80042e0:	e09f      	b.n	8004422 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	217e      	movs	r1, #126	; 0x7e
 80042ec:	187b      	adds	r3, r7, r1
 80042ee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80042f0:	187b      	adds	r3, r7, r1
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d100      	bne.n	80042fa <HAL_UART_IRQHandler+0x2fa>
 80042f8:	e156      	b.n	80045a8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2258      	movs	r2, #88	; 0x58
 80042fe:	5a9b      	ldrh	r3, [r3, r2]
 8004300:	187a      	adds	r2, r7, r1
 8004302:	8812      	ldrh	r2, [r2, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d300      	bcc.n	800430a <HAL_UART_IRQHandler+0x30a>
 8004308:	e14e      	b.n	80045a8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	187a      	adds	r2, r7, r1
 800430e:	215a      	movs	r1, #90	; 0x5a
 8004310:	8812      	ldrh	r2, [r2, #0]
 8004312:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	2b20      	cmp	r3, #32
 800431c:	d06f      	beq.n	80043fe <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800431e:	f3ef 8310 	mrs	r3, PRIMASK
 8004322:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004326:	67bb      	str	r3, [r7, #120]	; 0x78
 8004328:	2301      	movs	r3, #1
 800432a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800432c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432e:	f383 8810 	msr	PRIMASK, r3
}
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	499e      	ldr	r1, [pc, #632]	; (80045b8 <HAL_UART_IRQHandler+0x5b8>)
 8004340:	400a      	ands	r2, r1
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004346:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434a:	f383 8810 	msr	PRIMASK, r3
}
 800434e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004350:	f3ef 8310 	mrs	r3, PRIMASK
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004358:	677b      	str	r3, [r7, #116]	; 0x74
 800435a:	2301      	movs	r3, #1
 800435c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800435e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004360:	f383 8810 	msr	PRIMASK, r3
}
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2101      	movs	r1, #1
 8004372:	438a      	bics	r2, r1
 8004374:	609a      	str	r2, [r3, #8]
 8004376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004378:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437c:	f383 8810 	msr	PRIMASK, r3
}
 8004380:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004382:	f3ef 8310 	mrs	r3, PRIMASK
 8004386:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004388:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	673b      	str	r3, [r7, #112]	; 0x70
 800438c:	2301      	movs	r3, #1
 800438e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004392:	f383 8810 	msr	PRIMASK, r3
}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2140      	movs	r1, #64	; 0x40
 80043a4:	438a      	bics	r2, r1
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043aa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ae:	f383 8810 	msr	PRIMASK, r3
}
 80043b2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2280      	movs	r2, #128	; 0x80
 80043b8:	2120      	movs	r1, #32
 80043ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c2:	f3ef 8310 	mrs	r3, PRIMASK
 80043c6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80043c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043cc:	2301      	movs	r3, #1
 80043ce:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d2:	f383 8810 	msr	PRIMASK, r3
}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2110      	movs	r1, #16
 80043e4:	438a      	bics	r2, r1
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ee:	f383 8810 	msr	PRIMASK, r3
}
 80043f2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f8:	0018      	movs	r0, r3
 80043fa:	f7fd fd43 	bl	8001e84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2202      	movs	r2, #2
 8004402:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2258      	movs	r2, #88	; 0x58
 8004408:	5a9a      	ldrh	r2, [r3, r2]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	215a      	movs	r1, #90	; 0x5a
 800440e:	5a5b      	ldrh	r3, [r3, r1]
 8004410:	b29b      	uxth	r3, r3
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	0011      	movs	r1, r2
 800441a:	0018      	movs	r0, r3
 800441c:	f000 f8e0 	bl	80045e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004420:	e0c2      	b.n	80045a8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2258      	movs	r2, #88	; 0x58
 8004426:	5a99      	ldrh	r1, [r3, r2]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	225a      	movs	r2, #90	; 0x5a
 800442c:	5a9b      	ldrh	r3, [r3, r2]
 800442e:	b29a      	uxth	r2, r3
 8004430:	208e      	movs	r0, #142	; 0x8e
 8004432:	183b      	adds	r3, r7, r0
 8004434:	1a8a      	subs	r2, r1, r2
 8004436:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	225a      	movs	r2, #90	; 0x5a
 800443c:	5a9b      	ldrh	r3, [r3, r2]
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	d100      	bne.n	8004446 <HAL_UART_IRQHandler+0x446>
 8004444:	e0b2      	b.n	80045ac <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004446:	183b      	adds	r3, r7, r0
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d100      	bne.n	8004450 <HAL_UART_IRQHandler+0x450>
 800444e:	e0ad      	b.n	80045ac <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004450:	f3ef 8310 	mrs	r3, PRIMASK
 8004454:	60fb      	str	r3, [r7, #12]
  return(result);
 8004456:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004458:	2488      	movs	r4, #136	; 0x88
 800445a:	193a      	adds	r2, r7, r4
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	2301      	movs	r3, #1
 8004460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	f383 8810 	msr	PRIMASK, r3
}
 8004468:	46c0      	nop			; (mov r8, r8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4951      	ldr	r1, [pc, #324]	; (80045bc <HAL_UART_IRQHandler+0x5bc>)
 8004476:	400a      	ands	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	193b      	adds	r3, r7, r4
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f383 8810 	msr	PRIMASK, r3
}
 8004486:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004488:	f3ef 8310 	mrs	r3, PRIMASK
 800448c:	61bb      	str	r3, [r7, #24]
  return(result);
 800448e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004490:	2484      	movs	r4, #132	; 0x84
 8004492:	193a      	adds	r2, r7, r4
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	2301      	movs	r3, #1
 8004498:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f383 8810 	msr	PRIMASK, r3
}
 80044a0:	46c0      	nop			; (mov r8, r8)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689a      	ldr	r2, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2101      	movs	r1, #1
 80044ae:	438a      	bics	r2, r1
 80044b0:	609a      	str	r2, [r3, #8]
 80044b2:	193b      	adds	r3, r7, r4
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	f383 8810 	msr	PRIMASK, r3
}
 80044be:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2280      	movs	r2, #128	; 0x80
 80044c4:	2120      	movs	r1, #32
 80044c6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d4:	f3ef 8310 	mrs	r3, PRIMASK
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044dc:	2480      	movs	r4, #128	; 0x80
 80044de:	193a      	adds	r2, r7, r4
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	2301      	movs	r3, #1
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e8:	f383 8810 	msr	PRIMASK, r3
}
 80044ec:	46c0      	nop			; (mov r8, r8)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2110      	movs	r1, #16
 80044fa:	438a      	bics	r2, r1
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	193b      	adds	r3, r7, r4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	f383 8810 	msr	PRIMASK, r3
}
 800450a:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004512:	183b      	adds	r3, r7, r0
 8004514:	881a      	ldrh	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	0011      	movs	r1, r2
 800451a:	0018      	movs	r0, r3
 800451c:	f000 f860 	bl	80045e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004520:	e044      	b.n	80045ac <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004522:	23a4      	movs	r3, #164	; 0xa4
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	2380      	movs	r3, #128	; 0x80
 800452a:	035b      	lsls	r3, r3, #13
 800452c:	4013      	ands	r3, r2
 800452e:	d010      	beq.n	8004552 <HAL_UART_IRQHandler+0x552>
 8004530:	239c      	movs	r3, #156	; 0x9c
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	2380      	movs	r3, #128	; 0x80
 8004538:	03db      	lsls	r3, r3, #15
 800453a:	4013      	ands	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2280      	movs	r2, #128	; 0x80
 8004544:	0352      	lsls	r2, r2, #13
 8004546:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f000 fe5c 	bl	8005208 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004550:	e02f      	b.n	80045b2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004552:	23a4      	movs	r3, #164	; 0xa4
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2280      	movs	r2, #128	; 0x80
 800455a:	4013      	ands	r3, r2
 800455c:	d00f      	beq.n	800457e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800455e:	23a0      	movs	r3, #160	; 0xa0
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2280      	movs	r2, #128	; 0x80
 8004566:	4013      	ands	r3, r2
 8004568:	d009      	beq.n	800457e <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01e      	beq.n	80045b0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	0010      	movs	r0, r2
 800457a:	4798      	blx	r3
    }
    return;
 800457c:	e018      	b.n	80045b0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800457e:	23a4      	movs	r3, #164	; 0xa4
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2240      	movs	r2, #64	; 0x40
 8004586:	4013      	ands	r3, r2
 8004588:	d013      	beq.n	80045b2 <HAL_UART_IRQHandler+0x5b2>
 800458a:	23a0      	movs	r3, #160	; 0xa0
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2240      	movs	r2, #64	; 0x40
 8004592:	4013      	ands	r3, r2
 8004594:	d00d      	beq.n	80045b2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	0018      	movs	r0, r3
 800459a:	f000 fc52 	bl	8004e42 <UART_EndTransmit_IT>
    return;
 800459e:	e008      	b.n	80045b2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80045a0:	46c0      	nop			; (mov r8, r8)
 80045a2:	e006      	b.n	80045b2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80045a4:	46c0      	nop			; (mov r8, r8)
 80045a6:	e004      	b.n	80045b2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80045a8:	46c0      	nop			; (mov r8, r8)
 80045aa:	e002      	b.n	80045b2 <HAL_UART_IRQHandler+0x5b2>
      return;
 80045ac:	46c0      	nop			; (mov r8, r8)
 80045ae:	e000      	b.n	80045b2 <HAL_UART_IRQHandler+0x5b2>
    return;
 80045b0:	46c0      	nop			; (mov r8, r8)
  }

}
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b02b      	add	sp, #172	; 0xac
 80045b6:	bd90      	pop	{r4, r7, pc}
 80045b8:	fffffeff 	.word	0xfffffeff
 80045bc:	fffffedf 	.word	0xfffffedf

080045c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b002      	add	sp, #8
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045d8:	46c0      	nop			; (mov r8, r8)
 80045da:	46bd      	mov	sp, r7
 80045dc:	b002      	add	sp, #8
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	000a      	movs	r2, r1
 80045ea:	1cbb      	adds	r3, r7, #2
 80045ec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b002      	add	sp, #8
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004600:	231e      	movs	r3, #30
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	431a      	orrs	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	4313      	orrs	r3, r2
 800461e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a83      	ldr	r2, [pc, #524]	; (8004834 <UART_SetConfig+0x23c>)
 8004628:	4013      	ands	r3, r2
 800462a:	0019      	movs	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	430a      	orrs	r2, r1
 8004634:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4a7e      	ldr	r2, [pc, #504]	; (8004838 <UART_SetConfig+0x240>)
 800463e:	4013      	ands	r3, r2
 8004640:	0019      	movs	r1, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	4a75      	ldr	r2, [pc, #468]	; (800483c <UART_SetConfig+0x244>)
 8004666:	4013      	ands	r3, r2
 8004668:	0019      	movs	r1, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	430a      	orrs	r2, r1
 8004672:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004674:	4b72      	ldr	r3, [pc, #456]	; (8004840 <UART_SetConfig+0x248>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	2203      	movs	r2, #3
 800467a:	4013      	ands	r3, r2
 800467c:	2b03      	cmp	r3, #3
 800467e:	d00d      	beq.n	800469c <UART_SetConfig+0xa4>
 8004680:	d81b      	bhi.n	80046ba <UART_SetConfig+0xc2>
 8004682:	2b02      	cmp	r3, #2
 8004684:	d014      	beq.n	80046b0 <UART_SetConfig+0xb8>
 8004686:	d818      	bhi.n	80046ba <UART_SetConfig+0xc2>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <UART_SetConfig+0x9a>
 800468c:	2b01      	cmp	r3, #1
 800468e:	d00a      	beq.n	80046a6 <UART_SetConfig+0xae>
 8004690:	e013      	b.n	80046ba <UART_SetConfig+0xc2>
 8004692:	231f      	movs	r3, #31
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e012      	b.n	80046c2 <UART_SetConfig+0xca>
 800469c:	231f      	movs	r3, #31
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	2202      	movs	r2, #2
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	e00d      	b.n	80046c2 <UART_SetConfig+0xca>
 80046a6:	231f      	movs	r3, #31
 80046a8:	18fb      	adds	r3, r7, r3
 80046aa:	2204      	movs	r2, #4
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	e008      	b.n	80046c2 <UART_SetConfig+0xca>
 80046b0:	231f      	movs	r3, #31
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	2208      	movs	r2, #8
 80046b6:	701a      	strb	r2, [r3, #0]
 80046b8:	e003      	b.n	80046c2 <UART_SetConfig+0xca>
 80046ba:	231f      	movs	r3, #31
 80046bc:	18fb      	adds	r3, r7, r3
 80046be:	2210      	movs	r2, #16
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69da      	ldr	r2, [r3, #28]
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d15c      	bne.n	800478a <UART_SetConfig+0x192>
  {
    switch (clocksource)
 80046d0:	231f      	movs	r3, #31
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d015      	beq.n	8004706 <UART_SetConfig+0x10e>
 80046da:	dc18      	bgt.n	800470e <UART_SetConfig+0x116>
 80046dc:	2b04      	cmp	r3, #4
 80046de:	d00d      	beq.n	80046fc <UART_SetConfig+0x104>
 80046e0:	dc15      	bgt.n	800470e <UART_SetConfig+0x116>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <UART_SetConfig+0xf4>
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d005      	beq.n	80046f6 <UART_SetConfig+0xfe>
 80046ea:	e010      	b.n	800470e <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fe fef4 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 80046f0:	0003      	movs	r3, r0
 80046f2:	61bb      	str	r3, [r7, #24]
        break;
 80046f4:	e012      	b.n	800471c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f6:	4b53      	ldr	r3, [pc, #332]	; (8004844 <UART_SetConfig+0x24c>)
 80046f8:	61bb      	str	r3, [r7, #24]
        break;
 80046fa:	e00f      	b.n	800471c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046fc:	f7fe fe8c 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 8004700:	0003      	movs	r3, r0
 8004702:	61bb      	str	r3, [r7, #24]
        break;
 8004704:	e00a      	b.n	800471c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	021b      	lsls	r3, r3, #8
 800470a:	61bb      	str	r3, [r7, #24]
        break;
 800470c:	e006      	b.n	800471c <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004712:	231e      	movs	r3, #30
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	2201      	movs	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
        break;
 800471a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d100      	bne.n	8004724 <UART_SetConfig+0x12c>
 8004722:	e07a      	b.n	800481a <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	005a      	lsls	r2, r3, #1
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	18d2      	adds	r2, r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	0019      	movs	r1, r3
 8004736:	0010      	movs	r0, r2
 8004738:	f7fb fce6 	bl	8000108 <__udivsi3>
 800473c:	0003      	movs	r3, r0
 800473e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b0f      	cmp	r3, #15
 8004744:	d91c      	bls.n	8004780 <UART_SetConfig+0x188>
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	2380      	movs	r3, #128	; 0x80
 800474a:	025b      	lsls	r3, r3, #9
 800474c:	429a      	cmp	r2, r3
 800474e:	d217      	bcs.n	8004780 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	b29a      	uxth	r2, r3
 8004754:	200e      	movs	r0, #14
 8004756:	183b      	adds	r3, r7, r0
 8004758:	210f      	movs	r1, #15
 800475a:	438a      	bics	r2, r1
 800475c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	085b      	lsrs	r3, r3, #1
 8004762:	b29b      	uxth	r3, r3
 8004764:	2207      	movs	r2, #7
 8004766:	4013      	ands	r3, r2
 8004768:	b299      	uxth	r1, r3
 800476a:	183b      	adds	r3, r7, r0
 800476c:	183a      	adds	r2, r7, r0
 800476e:	8812      	ldrh	r2, [r2, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	183a      	adds	r2, r7, r0
 800477a:	8812      	ldrh	r2, [r2, #0]
 800477c:	60da      	str	r2, [r3, #12]
 800477e:	e04c      	b.n	800481a <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8004780:	231e      	movs	r3, #30
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
 8004788:	e047      	b.n	800481a <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 800478a:	231f      	movs	r3, #31
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d015      	beq.n	80047c0 <UART_SetConfig+0x1c8>
 8004794:	dc18      	bgt.n	80047c8 <UART_SetConfig+0x1d0>
 8004796:	2b04      	cmp	r3, #4
 8004798:	d00d      	beq.n	80047b6 <UART_SetConfig+0x1be>
 800479a:	dc15      	bgt.n	80047c8 <UART_SetConfig+0x1d0>
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <UART_SetConfig+0x1ae>
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d005      	beq.n	80047b0 <UART_SetConfig+0x1b8>
 80047a4:	e010      	b.n	80047c8 <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a6:	f7fe fe97 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 80047aa:	0003      	movs	r3, r0
 80047ac:	61bb      	str	r3, [r7, #24]
        break;
 80047ae:	e012      	b.n	80047d6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b0:	4b24      	ldr	r3, [pc, #144]	; (8004844 <UART_SetConfig+0x24c>)
 80047b2:	61bb      	str	r3, [r7, #24]
        break;
 80047b4:	e00f      	b.n	80047d6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b6:	f7fe fe2f 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80047ba:	0003      	movs	r3, r0
 80047bc:	61bb      	str	r3, [r7, #24]
        break;
 80047be:	e00a      	b.n	80047d6 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	61bb      	str	r3, [r7, #24]
        break;
 80047c6:	e006      	b.n	80047d6 <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047cc:	231e      	movs	r3, #30
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
        break;
 80047d4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01e      	beq.n	800481a <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	085a      	lsrs	r2, r3, #1
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	18d2      	adds	r2, r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	0019      	movs	r1, r3
 80047ec:	0010      	movs	r0, r2
 80047ee:	f7fb fc8b 	bl	8000108 <__udivsi3>
 80047f2:	0003      	movs	r3, r0
 80047f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b0f      	cmp	r3, #15
 80047fa:	d90a      	bls.n	8004812 <UART_SetConfig+0x21a>
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	2380      	movs	r3, #128	; 0x80
 8004800:	025b      	lsls	r3, r3, #9
 8004802:	429a      	cmp	r2, r3
 8004804:	d205      	bcs.n	8004812 <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60da      	str	r2, [r3, #12]
 8004810:	e003      	b.n	800481a <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8004812:	231e      	movs	r3, #30
 8004814:	18fb      	adds	r3, r7, r3
 8004816:	2201      	movs	r2, #1
 8004818:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004826:	231e      	movs	r3, #30
 8004828:	18fb      	adds	r3, r7, r3
 800482a:	781b      	ldrb	r3, [r3, #0]
}
 800482c:	0018      	movs	r0, r3
 800482e:	46bd      	mov	sp, r7
 8004830:	b008      	add	sp, #32
 8004832:	bd80      	pop	{r7, pc}
 8004834:	ffff69f3 	.word	0xffff69f3
 8004838:	ffffcfff 	.word	0xffffcfff
 800483c:	fffff4ff 	.word	0xfffff4ff
 8004840:	40021000 	.word	0x40021000
 8004844:	007a1200 	.word	0x007a1200

08004848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	2208      	movs	r2, #8
 8004856:	4013      	ands	r3, r2
 8004858:	d00b      	beq.n	8004872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a4a      	ldr	r2, [pc, #296]	; (800498c <UART_AdvFeatureConfig+0x144>)
 8004862:	4013      	ands	r3, r2
 8004864:	0019      	movs	r1, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2201      	movs	r2, #1
 8004878:	4013      	ands	r3, r2
 800487a:	d00b      	beq.n	8004894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4a43      	ldr	r2, [pc, #268]	; (8004990 <UART_AdvFeatureConfig+0x148>)
 8004884:	4013      	ands	r3, r2
 8004886:	0019      	movs	r1, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	2202      	movs	r2, #2
 800489a:	4013      	ands	r3, r2
 800489c:	d00b      	beq.n	80048b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4a3b      	ldr	r2, [pc, #236]	; (8004994 <UART_AdvFeatureConfig+0x14c>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	0019      	movs	r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2204      	movs	r2, #4
 80048bc:	4013      	ands	r3, r2
 80048be:	d00b      	beq.n	80048d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	4a34      	ldr	r2, [pc, #208]	; (8004998 <UART_AdvFeatureConfig+0x150>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	0019      	movs	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	2210      	movs	r2, #16
 80048de:	4013      	ands	r3, r2
 80048e0:	d00b      	beq.n	80048fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4a2c      	ldr	r2, [pc, #176]	; (800499c <UART_AdvFeatureConfig+0x154>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	0019      	movs	r1, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	2220      	movs	r2, #32
 8004900:	4013      	ands	r3, r2
 8004902:	d00b      	beq.n	800491c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	4a25      	ldr	r2, [pc, #148]	; (80049a0 <UART_AdvFeatureConfig+0x158>)
 800490c:	4013      	ands	r3, r2
 800490e:	0019      	movs	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	2240      	movs	r2, #64	; 0x40
 8004922:	4013      	ands	r3, r2
 8004924:	d01d      	beq.n	8004962 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <UART_AdvFeatureConfig+0x15c>)
 800492e:	4013      	ands	r3, r2
 8004930:	0019      	movs	r1, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	035b      	lsls	r3, r3, #13
 8004946:	429a      	cmp	r2, r3
 8004948:	d10b      	bne.n	8004962 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <UART_AdvFeatureConfig+0x160>)
 8004952:	4013      	ands	r3, r2
 8004954:	0019      	movs	r1, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	430a      	orrs	r2, r1
 8004960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2280      	movs	r2, #128	; 0x80
 8004968:	4013      	ands	r3, r2
 800496a:	d00b      	beq.n	8004984 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <UART_AdvFeatureConfig+0x164>)
 8004974:	4013      	ands	r3, r2
 8004976:	0019      	movs	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	605a      	str	r2, [r3, #4]
  }
}
 8004984:	46c0      	nop			; (mov r8, r8)
 8004986:	46bd      	mov	sp, r7
 8004988:	b002      	add	sp, #8
 800498a:	bd80      	pop	{r7, pc}
 800498c:	ffff7fff 	.word	0xffff7fff
 8004990:	fffdffff 	.word	0xfffdffff
 8004994:	fffeffff 	.word	0xfffeffff
 8004998:	fffbffff 	.word	0xfffbffff
 800499c:	ffffefff 	.word	0xffffefff
 80049a0:	ffffdfff 	.word	0xffffdfff
 80049a4:	ffefffff 	.word	0xffefffff
 80049a8:	ff9fffff 	.word	0xff9fffff
 80049ac:	fff7ffff 	.word	0xfff7ffff

080049b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b092      	sub	sp, #72	; 0x48
 80049b4:	af02      	add	r7, sp, #8
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2284      	movs	r2, #132	; 0x84
 80049bc:	2100      	movs	r1, #0
 80049be:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c0:	f7fd f954 	bl	8001c6c <HAL_GetTick>
 80049c4:	0003      	movs	r3, r0
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2208      	movs	r2, #8
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d12c      	bne.n	8004a30 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d8:	2280      	movs	r2, #128	; 0x80
 80049da:	0391      	lsls	r1, r2, #14
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	4a46      	ldr	r2, [pc, #280]	; (8004af8 <UART_CheckIdleState+0x148>)
 80049e0:	9200      	str	r2, [sp, #0]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f000 f88c 	bl	8004b00 <UART_WaitOnFlagUntilTimeout>
 80049e8:	1e03      	subs	r3, r0, #0
 80049ea:	d021      	beq.n	8004a30 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ec:	f3ef 8310 	mrs	r3, PRIMASK
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80049f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80049f6:	2301      	movs	r3, #1
 80049f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fc:	f383 8810 	msr	PRIMASK, r3
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2180      	movs	r1, #128	; 0x80
 8004a0e:	438a      	bics	r2, r1
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	f383 8810 	msr	PRIMASK, r3
}
 8004a1c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2278      	movs	r2, #120	; 0x78
 8004a28:	2100      	movs	r1, #0
 8004a2a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e05f      	b.n	8004af0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2204      	movs	r2, #4
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d146      	bne.n	8004acc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a40:	2280      	movs	r2, #128	; 0x80
 8004a42:	03d1      	lsls	r1, r2, #15
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	4a2c      	ldr	r2, [pc, #176]	; (8004af8 <UART_CheckIdleState+0x148>)
 8004a48:	9200      	str	r2, [sp, #0]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f000 f858 	bl	8004b00 <UART_WaitOnFlagUntilTimeout>
 8004a50:	1e03      	subs	r3, r0, #0
 8004a52:	d03b      	beq.n	8004acc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a54:	f3ef 8310 	mrs	r3, PRIMASK
 8004a58:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a5e:	2301      	movs	r3, #1
 8004a60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f383 8810 	msr	PRIMASK, r3
}
 8004a68:	46c0      	nop			; (mov r8, r8)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4921      	ldr	r1, [pc, #132]	; (8004afc <UART_CheckIdleState+0x14c>)
 8004a76:	400a      	ands	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f383 8810 	msr	PRIMASK, r3
}
 8004a84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a86:	f3ef 8310 	mrs	r3, PRIMASK
 8004a8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a8c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8e:	633b      	str	r3, [r7, #48]	; 0x30
 8004a90:	2301      	movs	r3, #1
 8004a92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f383 8810 	msr	PRIMASK, r3
}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	438a      	bics	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	f383 8810 	msr	PRIMASK, r3
}
 8004ab6:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2280      	movs	r2, #128	; 0x80
 8004abc:	2120      	movs	r1, #32
 8004abe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2278      	movs	r2, #120	; 0x78
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e011      	b.n	8004af0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2280      	movs	r2, #128	; 0x80
 8004ad6:	2120      	movs	r1, #32
 8004ad8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2278      	movs	r2, #120	; 0x78
 8004aea:	2100      	movs	r1, #0
 8004aec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	0018      	movs	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b010      	add	sp, #64	; 0x40
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	01ffffff 	.word	0x01ffffff
 8004afc:	fffffedf 	.word	0xfffffedf

08004b00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	1dfb      	adds	r3, r7, #7
 8004b0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b10:	e051      	b.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	3301      	adds	r3, #1
 8004b16:	d04e      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b18:	f7fd f8a8 	bl	8001c6c <HAL_GetTick>
 8004b1c:	0002      	movs	r2, r0
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	69ba      	ldr	r2, [r7, #24]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d302      	bcc.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e051      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2204      	movs	r2, #4
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	d03b      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b80      	cmp	r3, #128	; 0x80
 8004b42:	d038      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d035      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	2208      	movs	r2, #8
 8004b52:	4013      	ands	r3, r2
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d111      	bne.n	8004b7c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f000 f8f2 	bl	8004d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2284      	movs	r2, #132	; 0x84
 8004b6c:	2108      	movs	r1, #8
 8004b6e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2278      	movs	r2, #120	; 0x78
 8004b74:	2100      	movs	r1, #0
 8004b76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e02c      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	69da      	ldr	r2, [r3, #28]
 8004b82:	2380      	movs	r3, #128	; 0x80
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	401a      	ands	r2, r3
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d112      	bne.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2280      	movs	r2, #128	; 0x80
 8004b96:	0112      	lsls	r2, r2, #4
 8004b98:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f000 f8d5 	bl	8004d4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2284      	movs	r2, #132	; 0x84
 8004ba6:	2120      	movs	r1, #32
 8004ba8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2278      	movs	r2, #120	; 0x78
 8004bae:	2100      	movs	r1, #0
 8004bb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e00f      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	425a      	negs	r2, r3
 8004bc6:	4153      	adcs	r3, r2
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	001a      	movs	r2, r3
 8004bcc:	1dfb      	adds	r3, r7, #7
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d09e      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b004      	add	sp, #16
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b090      	sub	sp, #64	; 0x40
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	1dbb      	adds	r3, r7, #6
 8004bec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1dba      	adds	r2, r7, #6
 8004bf8:	2158      	movs	r1, #88	; 0x58
 8004bfa:	8812      	ldrh	r2, [r2, #0]
 8004bfc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1dba      	adds	r2, r7, #6
 8004c02:	215a      	movs	r1, #90	; 0x5a
 8004c04:	8812      	ldrh	r2, [r2, #0]
 8004c06:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	2380      	movs	r3, #128	; 0x80
 8004c14:	015b      	lsls	r3, r3, #5
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d10d      	bne.n	8004c36 <UART_Start_Receive_IT+0x56>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <UART_Start_Receive_IT+0x4c>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	225c      	movs	r2, #92	; 0x5c
 8004c26:	4946      	ldr	r1, [pc, #280]	; (8004d40 <UART_Start_Receive_IT+0x160>)
 8004c28:	5299      	strh	r1, [r3, r2]
 8004c2a:	e01a      	b.n	8004c62 <UART_Start_Receive_IT+0x82>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	225c      	movs	r2, #92	; 0x5c
 8004c30:	21ff      	movs	r1, #255	; 0xff
 8004c32:	5299      	strh	r1, [r3, r2]
 8004c34:	e015      	b.n	8004c62 <UART_Start_Receive_IT+0x82>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10d      	bne.n	8004c5a <UART_Start_Receive_IT+0x7a>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d104      	bne.n	8004c50 <UART_Start_Receive_IT+0x70>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	225c      	movs	r2, #92	; 0x5c
 8004c4a:	21ff      	movs	r1, #255	; 0xff
 8004c4c:	5299      	strh	r1, [r3, r2]
 8004c4e:	e008      	b.n	8004c62 <UART_Start_Receive_IT+0x82>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	225c      	movs	r2, #92	; 0x5c
 8004c54:	217f      	movs	r1, #127	; 0x7f
 8004c56:	5299      	strh	r1, [r3, r2]
 8004c58:	e003      	b.n	8004c62 <UART_Start_Receive_IT+0x82>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	225c      	movs	r2, #92	; 0x5c
 8004c5e:	2100      	movs	r1, #0
 8004c60:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2284      	movs	r2, #132	; 0x84
 8004c66:	2100      	movs	r1, #0
 8004c68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2280      	movs	r2, #128	; 0x80
 8004c6e:	2122      	movs	r1, #34	; 0x22
 8004c70:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c72:	f3ef 8310 	mrs	r3, PRIMASK
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c82:	f383 8810 	msr	PRIMASK, r3
}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2101      	movs	r1, #1
 8004c94:	430a      	orrs	r2, r1
 8004c96:	609a      	str	r2, [r3, #8]
 8004c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	f383 8810 	msr	PRIMASK, r3
}
 8004ca2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	015b      	lsls	r3, r3, #5
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d107      	bne.n	8004cc0 <UART_Start_Receive_IT+0xe0>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d103      	bne.n	8004cc0 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a22      	ldr	r2, [pc, #136]	; (8004d44 <UART_Start_Receive_IT+0x164>)
 8004cbc:	669a      	str	r2, [r3, #104]	; 0x68
 8004cbe:	e002      	b.n	8004cc6 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <UART_Start_Receive_IT+0x168>)
 8004cc4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d019      	beq.n	8004d02 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cce:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd2:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cd4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	2301      	movs	r3, #1
 8004cda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	f383 8810 	msr	PRIMASK, r3
}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2190      	movs	r1, #144	; 0x90
 8004cf0:	0049      	lsls	r1, r1, #1
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	601a      	str	r2, [r3, #0]
 8004cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	f383 8810 	msr	PRIMASK, r3
}
 8004d00:	e018      	b.n	8004d34 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d02:	f3ef 8310 	mrs	r3, PRIMASK
 8004d06:	613b      	str	r3, [r7, #16]
  return(result);
 8004d08:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f383 8810 	msr	PRIMASK, r3
}
 8004d16:	46c0      	nop			; (mov r8, r8)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2120      	movs	r1, #32
 8004d24:	430a      	orrs	r2, r1
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	f383 8810 	msr	PRIMASK, r3
}
 8004d32:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	0018      	movs	r0, r3
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	b010      	add	sp, #64	; 0x40
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	000001ff 	.word	0x000001ff
 8004d44:	08005051 	.word	0x08005051
 8004d48:	08004e99 	.word	0x08004e99

08004d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08e      	sub	sp, #56	; 0x38
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d54:	f3ef 8310 	mrs	r3, PRIMASK
 8004d58:	617b      	str	r3, [r7, #20]
  return(result);
 8004d5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5e:	2301      	movs	r3, #1
 8004d60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	f383 8810 	msr	PRIMASK, r3
}
 8004d68:	46c0      	nop			; (mov r8, r8)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4926      	ldr	r1, [pc, #152]	; (8004e10 <UART_EndRxTransfer+0xc4>)
 8004d76:	400a      	ands	r2, r1
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f383 8810 	msr	PRIMASK, r3
}
 8004d84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d86:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8a:	623b      	str	r3, [r7, #32]
  return(result);
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d90:	2301      	movs	r3, #1
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d96:	f383 8810 	msr	PRIMASK, r3
}
 8004d9a:	46c0      	nop			; (mov r8, r8)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2101      	movs	r1, #1
 8004da8:	438a      	bics	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	f383 8810 	msr	PRIMASK, r3
}
 8004db6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d118      	bne.n	8004df2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dca:	2301      	movs	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f383 8810 	msr	PRIMASK, r3
}
 8004dd4:	46c0      	nop			; (mov r8, r8)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2110      	movs	r1, #16
 8004de2:	438a      	bics	r2, r1
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	f383 8810 	msr	PRIMASK, r3
}
 8004df0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2280      	movs	r2, #128	; 0x80
 8004df6:	2120      	movs	r1, #32
 8004df8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	b00e      	add	sp, #56	; 0x38
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	fffffedf 	.word	0xfffffedf

08004e14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	225a      	movs	r2, #90	; 0x5a
 8004e26:	2100      	movs	r1, #0
 8004e28:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2252      	movs	r2, #82	; 0x52
 8004e2e:	2100      	movs	r1, #0
 8004e30:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	0018      	movs	r0, r3
 8004e36:	f7ff fbcb 	bl	80045d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e3a:	46c0      	nop			; (mov r8, r8)
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b004      	add	sp, #16
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b086      	sub	sp, #24
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e50:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	2301      	movs	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f383 8810 	msr	PRIMASK, r3
}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2140      	movs	r1, #64	; 0x40
 8004e6c:	438a      	bics	r2, r1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f383 8810 	msr	PRIMASK, r3
}
 8004e7a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	f7ff fb98 	bl	80045c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e90:	46c0      	nop			; (mov r8, r8)
 8004e92:	46bd      	mov	sp, r7
 8004e94:	b006      	add	sp, #24
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b094      	sub	sp, #80	; 0x50
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ea0:	204e      	movs	r0, #78	; 0x4e
 8004ea2:	183b      	adds	r3, r7, r0
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	215c      	movs	r1, #92	; 0x5c
 8004ea8:	5a52      	ldrh	r2, [r2, r1]
 8004eaa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2280      	movs	r2, #128	; 0x80
 8004eb0:	589b      	ldr	r3, [r3, r2]
 8004eb2:	2b22      	cmp	r3, #34	; 0x22
 8004eb4:	d000      	beq.n	8004eb8 <UART_RxISR_8BIT+0x20>
 8004eb6:	e0ba      	b.n	800502e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	214c      	movs	r1, #76	; 0x4c
 8004ebe:	187b      	adds	r3, r7, r1
 8004ec0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004ec2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ec4:	187b      	adds	r3, r7, r1
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	183b      	adds	r3, r7, r0
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	b2d9      	uxtb	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	225a      	movs	r2, #90	; 0x5a
 8004ee8:	5a9b      	ldrh	r3, [r3, r2]
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b299      	uxth	r1, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	225a      	movs	r2, #90	; 0x5a
 8004ef4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	225a      	movs	r2, #90	; 0x5a
 8004efa:	5a9b      	ldrh	r3, [r3, r2]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d000      	beq.n	8004f04 <UART_RxISR_8BIT+0x6c>
 8004f02:	e09c      	b.n	800503e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f04:	f3ef 8310 	mrs	r3, PRIMASK
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f0e:	2301      	movs	r3, #1
 8004f10:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	f383 8810 	msr	PRIMASK, r3
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4948      	ldr	r1, [pc, #288]	; (8005048 <UART_RxISR_8BIT+0x1b0>)
 8004f26:	400a      	ands	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f30:	f383 8810 	msr	PRIMASK, r3
}
 8004f34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f36:	f3ef 8310 	mrs	r3, PRIMASK
 8004f3a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f40:	2301      	movs	r3, #1
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f46:	f383 8810 	msr	PRIMASK, r3
}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2101      	movs	r1, #1
 8004f58:	438a      	bics	r2, r1
 8004f5a:	609a      	str	r2, [r3, #8]
 8004f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f62:	f383 8810 	msr	PRIMASK, r3
}
 8004f66:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2280      	movs	r2, #128	; 0x80
 8004f6c:	2120      	movs	r1, #32
 8004f6e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	041b      	lsls	r3, r3, #16
 8004f86:	4013      	ands	r3, r2
 8004f88:	d018      	beq.n	8004fbc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004f8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f90:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f92:	643b      	str	r3, [r7, #64]	; 0x40
 8004f94:	2301      	movs	r3, #1
 8004f96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	f383 8810 	msr	PRIMASK, r3
}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4928      	ldr	r1, [pc, #160]	; (800504c <UART_RxISR_8BIT+0x1b4>)
 8004fac:	400a      	ands	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	f383 8810 	msr	PRIMASK, r3
}
 8004fba:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d12f      	bne.n	8005024 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fca:	f3ef 8310 	mrs	r3, PRIMASK
 8004fce:	60fb      	str	r3, [r7, #12]
  return(result);
 8004fd0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f383 8810 	msr	PRIMASK, r3
}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2110      	movs	r1, #16
 8004fec:	438a      	bics	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f383 8810 	msr	PRIMASK, r3
}
 8004ffa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	2210      	movs	r2, #16
 8005004:	4013      	ands	r3, r2
 8005006:	2b10      	cmp	r3, #16
 8005008:	d103      	bne.n	8005012 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2210      	movs	r2, #16
 8005010:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2258      	movs	r2, #88	; 0x58
 8005016:	5a9a      	ldrh	r2, [r3, r2]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	0011      	movs	r1, r2
 800501c:	0018      	movs	r0, r3
 800501e:	f7ff fadf 	bl	80045e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005022:	e00c      	b.n	800503e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	0018      	movs	r0, r3
 8005028:	f7fc fc02 	bl	8001830 <HAL_UART_RxCpltCallback>
}
 800502c:	e007      	b.n	800503e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	699a      	ldr	r2, [r3, #24]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2108      	movs	r1, #8
 800503a:	430a      	orrs	r2, r1
 800503c:	619a      	str	r2, [r3, #24]
}
 800503e:	46c0      	nop			; (mov r8, r8)
 8005040:	46bd      	mov	sp, r7
 8005042:	b014      	add	sp, #80	; 0x50
 8005044:	bd80      	pop	{r7, pc}
 8005046:	46c0      	nop			; (mov r8, r8)
 8005048:	fffffedf 	.word	0xfffffedf
 800504c:	fbffffff 	.word	0xfbffffff

08005050 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b094      	sub	sp, #80	; 0x50
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005058:	204e      	movs	r0, #78	; 0x4e
 800505a:	183b      	adds	r3, r7, r0
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	215c      	movs	r1, #92	; 0x5c
 8005060:	5a52      	ldrh	r2, [r2, r1]
 8005062:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2280      	movs	r2, #128	; 0x80
 8005068:	589b      	ldr	r3, [r3, r2]
 800506a:	2b22      	cmp	r3, #34	; 0x22
 800506c:	d000      	beq.n	8005070 <UART_RxISR_16BIT+0x20>
 800506e:	e0ba      	b.n	80051e6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	214c      	movs	r1, #76	; 0x4c
 8005076:	187b      	adds	r3, r7, r1
 8005078:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800507a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005080:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005082:	187b      	adds	r3, r7, r1
 8005084:	183a      	adds	r2, r7, r0
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	8812      	ldrh	r2, [r2, #0]
 800508a:	4013      	ands	r3, r2
 800508c:	b29a      	uxth	r2, r3
 800508e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005090:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005096:	1c9a      	adds	r2, r3, #2
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	225a      	movs	r2, #90	; 0x5a
 80050a0:	5a9b      	ldrh	r3, [r3, r2]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	3b01      	subs	r3, #1
 80050a6:	b299      	uxth	r1, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	225a      	movs	r2, #90	; 0x5a
 80050ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	225a      	movs	r2, #90	; 0x5a
 80050b2:	5a9b      	ldrh	r3, [r3, r2]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d000      	beq.n	80050bc <UART_RxISR_16BIT+0x6c>
 80050ba:	e09c      	b.n	80051f6 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050bc:	f3ef 8310 	mrs	r3, PRIMASK
 80050c0:	623b      	str	r3, [r7, #32]
  return(result);
 80050c2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050c4:	647b      	str	r3, [r7, #68]	; 0x44
 80050c6:	2301      	movs	r3, #1
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	f383 8810 	msr	PRIMASK, r3
}
 80050d0:	46c0      	nop			; (mov r8, r8)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4948      	ldr	r1, [pc, #288]	; (8005200 <UART_RxISR_16BIT+0x1b0>)
 80050de:	400a      	ands	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ee:	f3ef 8310 	mrs	r3, PRIMASK
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80050f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f6:	643b      	str	r3, [r7, #64]	; 0x40
 80050f8:	2301      	movs	r3, #1
 80050fa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fe:	f383 8810 	msr	PRIMASK, r3
}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2101      	movs	r1, #1
 8005110:	438a      	bics	r2, r1
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005116:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800511a:	f383 8810 	msr	PRIMASK, r3
}
 800511e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2280      	movs	r2, #128	; 0x80
 8005124:	2120      	movs	r1, #32
 8005126:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685a      	ldr	r2, [r3, #4]
 800513a:	2380      	movs	r3, #128	; 0x80
 800513c:	041b      	lsls	r3, r3, #16
 800513e:	4013      	ands	r3, r2
 8005140:	d018      	beq.n	8005174 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005142:	f3ef 8310 	mrs	r3, PRIMASK
 8005146:	617b      	str	r3, [r7, #20]
  return(result);
 8005148:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800514a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800514c:	2301      	movs	r3, #1
 800514e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f383 8810 	msr	PRIMASK, r3
}
 8005156:	46c0      	nop			; (mov r8, r8)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4928      	ldr	r1, [pc, #160]	; (8005204 <UART_RxISR_16BIT+0x1b4>)
 8005164:	400a      	ands	r2, r1
 8005166:	601a      	str	r2, [r3, #0]
 8005168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800516a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f383 8810 	msr	PRIMASK, r3
}
 8005172:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005178:	2b01      	cmp	r3, #1
 800517a:	d12f      	bne.n	80051dc <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005182:	f3ef 8310 	mrs	r3, PRIMASK
 8005186:	60bb      	str	r3, [r7, #8]
  return(result);
 8005188:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518a:	63bb      	str	r3, [r7, #56]	; 0x38
 800518c:	2301      	movs	r3, #1
 800518e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f383 8810 	msr	PRIMASK, r3
}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2110      	movs	r1, #16
 80051a4:	438a      	bics	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f383 8810 	msr	PRIMASK, r3
}
 80051b2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	2210      	movs	r2, #16
 80051bc:	4013      	ands	r3, r2
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d103      	bne.n	80051ca <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2210      	movs	r2, #16
 80051c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2258      	movs	r2, #88	; 0x58
 80051ce:	5a9a      	ldrh	r2, [r3, r2]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	0011      	movs	r1, r2
 80051d4:	0018      	movs	r0, r3
 80051d6:	f7ff fa03 	bl	80045e0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051da:	e00c      	b.n	80051f6 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	0018      	movs	r0, r3
 80051e0:	f7fc fb26 	bl	8001830 <HAL_UART_RxCpltCallback>
}
 80051e4:	e007      	b.n	80051f6 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2108      	movs	r1, #8
 80051f2:	430a      	orrs	r2, r1
 80051f4:	619a      	str	r2, [r3, #24]
}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b014      	add	sp, #80	; 0x50
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	fffffedf 	.word	0xfffffedf
 8005204:	fbffffff 	.word	0xfbffffff

08005208 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	46bd      	mov	sp, r7
 8005214:	b002      	add	sp, #8
 8005216:	bd80      	pop	{r7, pc}

08005218 <__libc_init_array>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	2600      	movs	r6, #0
 800521c:	4d0c      	ldr	r5, [pc, #48]	; (8005250 <__libc_init_array+0x38>)
 800521e:	4c0d      	ldr	r4, [pc, #52]	; (8005254 <__libc_init_array+0x3c>)
 8005220:	1b64      	subs	r4, r4, r5
 8005222:	10a4      	asrs	r4, r4, #2
 8005224:	42a6      	cmp	r6, r4
 8005226:	d109      	bne.n	800523c <__libc_init_array+0x24>
 8005228:	2600      	movs	r6, #0
 800522a:	f000 f821 	bl	8005270 <_init>
 800522e:	4d0a      	ldr	r5, [pc, #40]	; (8005258 <__libc_init_array+0x40>)
 8005230:	4c0a      	ldr	r4, [pc, #40]	; (800525c <__libc_init_array+0x44>)
 8005232:	1b64      	subs	r4, r4, r5
 8005234:	10a4      	asrs	r4, r4, #2
 8005236:	42a6      	cmp	r6, r4
 8005238:	d105      	bne.n	8005246 <__libc_init_array+0x2e>
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	00b3      	lsls	r3, r6, #2
 800523e:	58eb      	ldr	r3, [r5, r3]
 8005240:	4798      	blx	r3
 8005242:	3601      	adds	r6, #1
 8005244:	e7ee      	b.n	8005224 <__libc_init_array+0xc>
 8005246:	00b3      	lsls	r3, r6, #2
 8005248:	58eb      	ldr	r3, [r5, r3]
 800524a:	4798      	blx	r3
 800524c:	3601      	adds	r6, #1
 800524e:	e7f2      	b.n	8005236 <__libc_init_array+0x1e>
 8005250:	080053bc 	.word	0x080053bc
 8005254:	080053bc 	.word	0x080053bc
 8005258:	080053bc 	.word	0x080053bc
 800525c:	080053c0 	.word	0x080053c0

08005260 <memset>:
 8005260:	0003      	movs	r3, r0
 8005262:	1882      	adds	r2, r0, r2
 8005264:	4293      	cmp	r3, r2
 8005266:	d100      	bne.n	800526a <memset+0xa>
 8005268:	4770      	bx	lr
 800526a:	7019      	strb	r1, [r3, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	e7f9      	b.n	8005264 <memset+0x4>

08005270 <_init>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005276:	bc08      	pop	{r3}
 8005278:	469e      	mov	lr, r3
 800527a:	4770      	bx	lr

0800527c <_fini>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	46c0      	nop			; (mov r8, r8)
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr
