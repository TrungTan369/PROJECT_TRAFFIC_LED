
TRAFFIC_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08003abc  08003abc  00013abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bac  08003bac  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bac  08003bac  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bac  08003bac  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bb0  08003bb0  00013bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000003c  08003bf0  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003bf0  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d984  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247e  00000000  00000000  0002d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0002fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00030b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ae6  00000000  00000000  00031768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e1d  00000000  00000000  0004224e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000604b3  00000000  00000000  0005406b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b451e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da8  00000000  00000000  000b4574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003aa4 	.word	0x08003aa4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08003aa4 	.word	0x08003aa4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <getKeyinput>:
#include "button.h"


int buttonFlag[3] = {0,0,0};

void getKeyinput(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	//-----PROCESS BUTTON 1------------

	// BEGIN: timer_flag[1] == 1
	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == 0)){
 80003f8:	4b20      	ldr	r3, [pc, #128]	; (800047c <getKeyinput+0x88>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d110      	bne.n	8000422 <getKeyinput+0x2e>
 8000400:	2390      	movs	r3, #144	; 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0018      	movs	r0, r3
 8000408:	f001 fcf6 	bl	8001df8 <HAL_GPIO_ReadPin>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d108      	bne.n	8000422 <getKeyinput+0x2e>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		buttonFlag[0] = 1;
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <getKeyinput+0x8c>)
 8000412:	2201      	movs	r2, #1
 8000414:	601a      	str	r2, [r3, #0]
		setTimer(3, 300);  //Không đọc nút nhấn trong 200ms sau khi nhấn lần đầu tiên
 8000416:	2396      	movs	r3, #150	; 0x96
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	0019      	movs	r1, r3
 800041c:	2003      	movs	r0, #3
 800041e:	f001 f999 	bl	8001754 <setTimer>
	}
	// không đọc tiếp nút nhấn trong 200ms

	// ----PROCESS BUTTON 2-----------

	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)){
 8000422:	4b16      	ldr	r3, [pc, #88]	; (800047c <getKeyinput+0x88>)
 8000424:	68db      	ldr	r3, [r3, #12]
 8000426:	2b01      	cmp	r3, #1
 8000428:	d110      	bne.n	800044c <getKeyinput+0x58>
 800042a:	2390      	movs	r3, #144	; 0x90
 800042c:	05db      	lsls	r3, r3, #23
 800042e:	2108      	movs	r1, #8
 8000430:	0018      	movs	r0, r3
 8000432:	f001 fce1 	bl	8001df8 <HAL_GPIO_ReadPin>
 8000436:	1e03      	subs	r3, r0, #0
 8000438:	d108      	bne.n	800044c <getKeyinput+0x58>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		buttonFlag[1] = 1;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <getKeyinput+0x8c>)
 800043c:	2201      	movs	r2, #1
 800043e:	605a      	str	r2, [r3, #4]
		setTimer(3, 300);
 8000440:	2396      	movs	r3, #150	; 0x96
 8000442:	005b      	lsls	r3, r3, #1
 8000444:	0019      	movs	r1, r3
 8000446:	2003      	movs	r0, #3
 8000448:	f001 f984 	bl	8001754 <setTimer>
	}

	// ----- PROCESS BUTTON 3 -----------
	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == 0)){
 800044c:	4b0b      	ldr	r3, [pc, #44]	; (800047c <getKeyinput+0x88>)
 800044e:	68db      	ldr	r3, [r3, #12]
 8000450:	2b01      	cmp	r3, #1
 8000452:	d110      	bne.n	8000476 <getKeyinput+0x82>
 8000454:	2390      	movs	r3, #144	; 0x90
 8000456:	05db      	lsls	r3, r3, #23
 8000458:	2102      	movs	r1, #2
 800045a:	0018      	movs	r0, r3
 800045c:	f001 fccc 	bl	8001df8 <HAL_GPIO_ReadPin>
 8000460:	1e03      	subs	r3, r0, #0
 8000462:	d108      	bne.n	8000476 <getKeyinput+0x82>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		setTimer(3, 300);
 8000464:	2396      	movs	r3, #150	; 0x96
 8000466:	005b      	lsls	r3, r3, #1
 8000468:	0019      	movs	r1, r3
 800046a:	2003      	movs	r0, #3
 800046c:	f001 f972 	bl	8001754 <setTimer>
		buttonFlag[2] = 1;
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <getKeyinput+0x8c>)
 8000472:	2201      	movs	r2, #1
 8000474:	609a      	str	r2, [r3, #8]
	}

}
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000020 	.word	0x20000020
 8000480:	20000058 	.word	0x20000058

08000484 <isButtonPress>:
int isButtonPress(int i){
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <isButtonPress+0x2c>)
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	0092      	lsls	r2, r2, #2
 8000492:	58d3      	ldr	r3, [r2, r3]
 8000494:	2b01      	cmp	r3, #1
 8000496:	d106      	bne.n	80004a6 <isButtonPress+0x22>
		buttonFlag[i] = 0;
 8000498:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <isButtonPress+0x2c>)
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	0092      	lsls	r2, r2, #2
 800049e:	2100      	movs	r1, #0
 80004a0:	50d1      	str	r1, [r2, r3]
		return 1;
 80004a2:	2301      	movs	r3, #1
 80004a4:	e000      	b.n	80004a8 <isButtonPress+0x24>
	}
	return 0;
 80004a6:	2300      	movs	r3, #0
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b002      	add	sp, #8
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000058 	.word	0x20000058

080004b4 <fsm_auto_run>:
 *      Author: HOME
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	switch (status) {   // LINE 1
 80004b8:	4be3      	ldr	r3, [pc, #908]	; (8000848 <fsm_auto_run+0x394>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2b04      	cmp	r3, #4
 80004be:	d900      	bls.n	80004c2 <fsm_auto_run+0xe>
 80004c0:	e1be      	b.n	8000840 <fsm_auto_run+0x38c>
 80004c2:	009a      	lsls	r2, r3, #2
 80004c4:	4be1      	ldr	r3, [pc, #900]	; (800084c <fsm_auto_run+0x398>)
 80004c6:	18d3      	adds	r3, r2, r3
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	469f      	mov	pc, r3
		case auto_init:
			// ------- ALL LED OFF -------------
			single_LED_off();
 80004cc:	f000 fe84 	bl	80011d8 <single_LED_off>
			status = auto_red_green;
 80004d0:	4bdd      	ldr	r3, [pc, #884]	; (8000848 <fsm_auto_run+0x394>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	601a      	str	r2, [r3, #0]
			count0 = (time_red_green + time_red_yellow)/1000;
 80004d6:	4bde      	ldr	r3, [pc, #888]	; (8000850 <fsm_auto_run+0x39c>)
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	4bde      	ldr	r3, [pc, #888]	; (8000854 <fsm_auto_run+0x3a0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	18d3      	adds	r3, r2, r3
 80004e0:	22fa      	movs	r2, #250	; 0xfa
 80004e2:	0091      	lsls	r1, r2, #2
 80004e4:	0018      	movs	r0, r3
 80004e6:	f7ff fe99 	bl	800021c <__divsi3>
 80004ea:	0003      	movs	r3, r0
 80004ec:	001a      	movs	r2, r3
 80004ee:	4bda      	ldr	r3, [pc, #872]	; (8000858 <fsm_auto_run+0x3a4>)
 80004f0:	601a      	str	r2, [r3, #0]
			count1 = time_red_green/1000;
 80004f2:	4bd7      	ldr	r3, [pc, #860]	; (8000850 <fsm_auto_run+0x39c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	22fa      	movs	r2, #250	; 0xfa
 80004f8:	0091      	lsls	r1, r2, #2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f7ff fe8e 	bl	800021c <__divsi3>
 8000500:	0003      	movs	r3, r0
 8000502:	001a      	movs	r2, r3
 8000504:	4bd5      	ldr	r3, [pc, #852]	; (800085c <fsm_auto_run+0x3a8>)
 8000506:	601a      	str	r2, [r3, #0]
			setTimer(0, time_red_green);
 8000508:	4bd1      	ldr	r3, [pc, #836]	; (8000850 <fsm_auto_run+0x39c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	0019      	movs	r1, r3
 800050e:	2000      	movs	r0, #0
 8000510:	f001 f920 	bl	8001754 <setTimer>
			setTimer(1, 1000); // count 1s
 8000514:	23fa      	movs	r3, #250	; 0xfa
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	0019      	movs	r1, r3
 800051a:	2001      	movs	r0, #1
 800051c:	f001 f91a 	bl	8001754 <setTimer>
			setTimer(2, 20);  // scan led
 8000520:	2114      	movs	r1, #20
 8000522:	2002      	movs	r0, #2
 8000524:	f001 f916 	bl	8001754 <setTimer>
			lcd_goto_XY(1, 0);
 8000528:	2100      	movs	r1, #0
 800052a:	2001      	movs	r0, #1
 800052c:	f000 fc67 	bl	8000dfe <lcd_goto_XY>
			lcd_send_string("MODE: AUTO");
 8000530:	4bcb      	ldr	r3, [pc, #812]	; (8000860 <fsm_auto_run+0x3ac>)
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fc43 	bl	8000dbe <lcd_send_string>
			lcd_goto_XY(0, 0);
 8000538:	2100      	movs	r1, #0
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fc5f 	bl	8000dfe <lcd_goto_XY>
			lcd_send_string("PLEASE SLOW DOWN");
 8000540:	4bc8      	ldr	r3, [pc, #800]	; (8000864 <fsm_auto_run+0x3b0>)
 8000542:	0018      	movs	r0, r3
 8000544:	f000 fc3b 	bl	8000dbe <lcd_send_string>
			break;
 8000548:	e12c      	b.n	80007a4 <fsm_auto_run+0x2f0>
		case auto_red_green:
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET); // yellow 0 off
 800054a:	2390      	movs	r3, #144	; 0x90
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	2201      	movs	r2, #1
 8000550:	2110      	movs	r1, #16
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fc6d 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); // red 1 on
 8000558:	2390      	movs	r3, #144	; 0x90
 800055a:	05db      	lsls	r3, r3, #23
 800055c:	2201      	movs	r2, #1
 800055e:	2104      	movs	r1, #4
 8000560:	0018      	movs	r0, r3
 8000562:	f001 fc66 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET); // red0 on
 8000566:	2380      	movs	r3, #128	; 0x80
 8000568:	0159      	lsls	r1, r3, #5
 800056a:	2390      	movs	r3, #144	; 0x90
 800056c:	05db      	lsls	r3, r3, #23
 800056e:	2200      	movs	r2, #0
 8000570:	0018      	movs	r0, r3
 8000572:	f001 fc5e 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET); // green1 on
 8000576:	4bbc      	ldr	r3, [pc, #752]	; (8000868 <fsm_auto_run+0x3b4>)
 8000578:	2200      	movs	r2, #0
 800057a:	2110      	movs	r1, #16
 800057c:	0018      	movs	r0, r3
 800057e:	f001 fc58 	bl	8001e32 <HAL_GPIO_WritePin>
			if(timer_flag[0] == 1){
 8000582:	4bba      	ldr	r3, [pc, #744]	; (800086c <fsm_auto_run+0x3b8>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d11e      	bne.n	80005c8 <fsm_auto_run+0x114>
				status = auto_red_yellow;
 800058a:	4baf      	ldr	r3, [pc, #700]	; (8000848 <fsm_auto_run+0x394>)
 800058c:	2202      	movs	r2, #2
 800058e:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_yellow);
 8000590:	4bb0      	ldr	r3, [pc, #704]	; (8000854 <fsm_auto_run+0x3a0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	0019      	movs	r1, r3
 8000596:	2000      	movs	r0, #0
 8000598:	f001 f8dc 	bl	8001754 <setTimer>
				count0 = time_red_yellow/1000;;
 800059c:	4bad      	ldr	r3, [pc, #692]	; (8000854 <fsm_auto_run+0x3a0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	22fa      	movs	r2, #250	; 0xfa
 80005a2:	0091      	lsls	r1, r2, #2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f7ff fe39 	bl	800021c <__divsi3>
 80005aa:	0003      	movs	r3, r0
 80005ac:	001a      	movs	r2, r3
 80005ae:	4baa      	ldr	r3, [pc, #680]	; (8000858 <fsm_auto_run+0x3a4>)
 80005b0:	601a      	str	r2, [r3, #0]
				count1 = time_red_yellow/1000;
 80005b2:	4ba8      	ldr	r3, [pc, #672]	; (8000854 <fsm_auto_run+0x3a0>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	22fa      	movs	r2, #250	; 0xfa
 80005b8:	0091      	lsls	r1, r2, #2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f7ff fe2e 	bl	800021c <__divsi3>
 80005c0:	0003      	movs	r3, r0
 80005c2:	001a      	movs	r2, r3
 80005c4:	4ba5      	ldr	r3, [pc, #660]	; (800085c <fsm_auto_run+0x3a8>)
 80005c6:	601a      	str	r2, [r3, #0]
			}
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 80005c8:	2001      	movs	r0, #1
 80005ca:	f7ff ff5b 	bl	8000484 <isButtonPress>
 80005ce:	0003      	movs	r3, r0
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d000      	beq.n	80005d6 <fsm_auto_run+0x122>
 80005d4:	e0df      	b.n	8000796 <fsm_auto_run+0x2e2>
				status = manual_red_green;
 80005d6:	4b9c      	ldr	r3, [pc, #624]	; (8000848 <fsm_auto_run+0x394>)
 80005d8:	2205      	movs	r2, #5
 80005da:	601a      	str	r2, [r3, #0]
				Diable_Led();
 80005dc:	f000 fc38 	bl	8000e50 <Diable_Led>
				lcd_clear_display();// ----CLEAR LCD ----
 80005e0:	f000 fc02 	bl	8000de8 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 80005e4:	2100      	movs	r1, #0
 80005e6:	2001      	movs	r0, #1
 80005e8:	f000 fc09 	bl	8000dfe <lcd_goto_XY>
				lcd_send_string("MODE: MANUAL");
 80005ec:	4ba0      	ldr	r3, [pc, #640]	; (8000870 <fsm_auto_run+0x3bc>)
 80005ee:	0018      	movs	r0, r3
 80005f0:	f000 fbe5 	bl	8000dbe <lcd_send_string>
				lcd_goto_XY(0, 0);
 80005f4:	2100      	movs	r1, #0
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 fc01 	bl	8000dfe <lcd_goto_XY>
				lcd_send_string("WAIT LED TO GO");
 80005fc:	4b9d      	ldr	r3, [pc, #628]	; (8000874 <fsm_auto_run+0x3c0>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 fbdd 	bl	8000dbe <lcd_send_string>
				return;
 8000604:	e11d      	b.n	8000842 <fsm_auto_run+0x38e>
			}
			break;
		case auto_red_yellow:
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 off
 8000606:	4b98      	ldr	r3, [pc, #608]	; (8000868 <fsm_auto_run+0x3b4>)
 8000608:	2201      	movs	r2, #1
 800060a:	2110      	movs	r1, #16
 800060c:	0018      	movs	r0, r3
 800060e:	f001 fc10 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET); // yellow1 on
 8000612:	4b95      	ldr	r3, [pc, #596]	; (8000868 <fsm_auto_run+0x3b4>)
 8000614:	2200      	movs	r2, #0
 8000616:	2120      	movs	r1, #32
 8000618:	0018      	movs	r0, r3
 800061a:	f001 fc0a 	bl	8001e32 <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 800061e:	4b93      	ldr	r3, [pc, #588]	; (800086c <fsm_auto_run+0x3b8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d000      	beq.n	8000628 <fsm_auto_run+0x174>
 8000626:	e0b8      	b.n	800079a <fsm_auto_run+0x2e6>
				status = auto_green_red;
 8000628:	4b87      	ldr	r3, [pc, #540]	; (8000848 <fsm_auto_run+0x394>)
 800062a:	2203      	movs	r2, #3
 800062c:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green)/1000;
 800062e:	4b88      	ldr	r3, [pc, #544]	; (8000850 <fsm_auto_run+0x39c>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	22fa      	movs	r2, #250	; 0xfa
 8000634:	0091      	lsls	r1, r2, #2
 8000636:	0018      	movs	r0, r3
 8000638:	f7ff fdf0 	bl	800021c <__divsi3>
 800063c:	0003      	movs	r3, r0
 800063e:	001a      	movs	r2, r3
 8000640:	4b85      	ldr	r3, [pc, #532]	; (8000858 <fsm_auto_run+0x3a4>)
 8000642:	601a      	str	r2, [r3, #0]
				count1 = (time_red_green + time_red_yellow)/1000;
 8000644:	4b82      	ldr	r3, [pc, #520]	; (8000850 <fsm_auto_run+0x39c>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	4b82      	ldr	r3, [pc, #520]	; (8000854 <fsm_auto_run+0x3a0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	18d3      	adds	r3, r2, r3
 800064e:	22fa      	movs	r2, #250	; 0xfa
 8000650:	0091      	lsls	r1, r2, #2
 8000652:	0018      	movs	r0, r3
 8000654:	f7ff fde2 	bl	800021c <__divsi3>
 8000658:	0003      	movs	r3, r0
 800065a:	001a      	movs	r2, r3
 800065c:	4b7f      	ldr	r3, [pc, #508]	; (800085c <fsm_auto_run+0x3a8>)
 800065e:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000660:	4b7b      	ldr	r3, [pc, #492]	; (8000850 <fsm_auto_run+0x39c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	0019      	movs	r1, r3
 8000666:	2000      	movs	r0, #0
 8000668:	f001 f874 	bl	8001754 <setTimer>
			}
			break;
 800066c:	e095      	b.n	800079a <fsm_auto_run+0x2e6>
		case auto_green_red:
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red 0 off
 800066e:	2380      	movs	r3, #128	; 0x80
 8000670:	0159      	lsls	r1, r3, #5
 8000672:	2390      	movs	r3, #144	; 0x90
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2201      	movs	r2, #1
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fbda 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); // yellow 1 off
 800067e:	4b7a      	ldr	r3, [pc, #488]	; (8000868 <fsm_auto_run+0x3b4>)
 8000680:	2201      	movs	r2, #1
 8000682:	2120      	movs	r1, #32
 8000684:	0018      	movs	r0, r3
 8000686:	f001 fbd4 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET); // green 0 on
 800068a:	2380      	movs	r3, #128	; 0x80
 800068c:	0059      	lsls	r1, r3, #1
 800068e:	2390      	movs	r3, #144	; 0x90
 8000690:	05db      	lsls	r3, r3, #23
 8000692:	2200      	movs	r2, #0
 8000694:	0018      	movs	r0, r3
 8000696:	f001 fbcc 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 800069a:	2390      	movs	r3, #144	; 0x90
 800069c:	05db      	lsls	r3, r3, #23
 800069e:	2200      	movs	r2, #0
 80006a0:	2104      	movs	r1, #4
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 fbc5 	bl	8001e32 <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 80006a8:	4b70      	ldr	r3, [pc, #448]	; (800086c <fsm_auto_run+0x3b8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d11e      	bne.n	80006ee <fsm_auto_run+0x23a>
				status = auto_yellow_red;
 80006b0:	4b65      	ldr	r3, [pc, #404]	; (8000848 <fsm_auto_run+0x394>)
 80006b2:	2204      	movs	r2, #4
 80006b4:	601a      	str	r2, [r3, #0]
				count0 = time_red_yellow/1000;
 80006b6:	4b67      	ldr	r3, [pc, #412]	; (8000854 <fsm_auto_run+0x3a0>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	22fa      	movs	r2, #250	; 0xfa
 80006bc:	0091      	lsls	r1, r2, #2
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff fdac 	bl	800021c <__divsi3>
 80006c4:	0003      	movs	r3, r0
 80006c6:	001a      	movs	r2, r3
 80006c8:	4b63      	ldr	r3, [pc, #396]	; (8000858 <fsm_auto_run+0x3a4>)
 80006ca:	601a      	str	r2, [r3, #0]
				count1 = time_red_yellow/1000;;
 80006cc:	4b61      	ldr	r3, [pc, #388]	; (8000854 <fsm_auto_run+0x3a0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	22fa      	movs	r2, #250	; 0xfa
 80006d2:	0091      	lsls	r1, r2, #2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff fda1 	bl	800021c <__divsi3>
 80006da:	0003      	movs	r3, r0
 80006dc:	001a      	movs	r2, r3
 80006de:	4b5f      	ldr	r3, [pc, #380]	; (800085c <fsm_auto_run+0x3a8>)
 80006e0:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_yellow);
 80006e2:	4b5c      	ldr	r3, [pc, #368]	; (8000854 <fsm_auto_run+0x3a0>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	0019      	movs	r1, r3
 80006e8:	2000      	movs	r0, #0
 80006ea:	f001 f833 	bl	8001754 <setTimer>
			}
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 80006ee:	2001      	movs	r0, #1
 80006f0:	f7ff fec8 	bl	8000484 <isButtonPress>
 80006f4:	0003      	movs	r3, r0
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d151      	bne.n	800079e <fsm_auto_run+0x2ea>
				status = manual_green_red;
 80006fa:	4b53      	ldr	r3, [pc, #332]	; (8000848 <fsm_auto_run+0x394>)
 80006fc:	2206      	movs	r2, #6
 80006fe:	601a      	str	r2, [r3, #0]
				Diable_Led();
 8000700:	f000 fba6 	bl	8000e50 <Diable_Led>
				lcd_clear_display();// ----CLEAR LCD ----
 8000704:	f000 fb70 	bl	8000de8 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000708:	2100      	movs	r1, #0
 800070a:	2001      	movs	r0, #1
 800070c:	f000 fb77 	bl	8000dfe <lcd_goto_XY>
				lcd_send_string("MODE: MANUAL");
 8000710:	4b57      	ldr	r3, [pc, #348]	; (8000870 <fsm_auto_run+0x3bc>)
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fb53 	bl	8000dbe <lcd_send_string>
				lcd_goto_XY(0, 0);
 8000718:	2100      	movs	r1, #0
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fb6f 	bl	8000dfe <lcd_goto_XY>
				lcd_send_string("WAIT LED TO GO");
 8000720:	4b54      	ldr	r3, [pc, #336]	; (8000874 <fsm_auto_run+0x3c0>)
 8000722:	0018      	movs	r0, r3
 8000724:	f000 fb4b 	bl	8000dbe <lcd_send_string>
				return;
 8000728:	e08b      	b.n	8000842 <fsm_auto_run+0x38e>
			}
			break;
		case auto_yellow_red:
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 on
 800072a:	2390      	movs	r3, #144	; 0x90
 800072c:	05db      	lsls	r3, r3, #23
 800072e:	2200      	movs	r2, #0
 8000730:	2110      	movs	r1, #16
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fb7d 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET); // green 0 off
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	0059      	lsls	r1, r3, #1
 800073c:	2390      	movs	r3, #144	; 0x90
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	2201      	movs	r2, #1
 8000742:	0018      	movs	r0, r3
 8000744:	f001 fb75 	bl	8001e32 <HAL_GPIO_WritePin>
			if(timer_flag[0] == 1){
 8000748:	4b48      	ldr	r3, [pc, #288]	; (800086c <fsm_auto_run+0x3b8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d128      	bne.n	80007a2 <fsm_auto_run+0x2ee>
				status = auto_red_green;
 8000750:	4b3d      	ldr	r3, [pc, #244]	; (8000848 <fsm_auto_run+0x394>)
 8000752:	2201      	movs	r2, #1
 8000754:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 8000756:	4b3e      	ldr	r3, [pc, #248]	; (8000850 <fsm_auto_run+0x39c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b3e      	ldr	r3, [pc, #248]	; (8000854 <fsm_auto_run+0x3a0>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	18d3      	adds	r3, r2, r3
 8000760:	22fa      	movs	r2, #250	; 0xfa
 8000762:	0091      	lsls	r1, r2, #2
 8000764:	0018      	movs	r0, r3
 8000766:	f7ff fd59 	bl	800021c <__divsi3>
 800076a:	0003      	movs	r3, r0
 800076c:	001a      	movs	r2, r3
 800076e:	4b3a      	ldr	r3, [pc, #232]	; (8000858 <fsm_auto_run+0x3a4>)
 8000770:	601a      	str	r2, [r3, #0]
				count1 = time_red_green / 1000;
 8000772:	4b37      	ldr	r3, [pc, #220]	; (8000850 <fsm_auto_run+0x39c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	22fa      	movs	r2, #250	; 0xfa
 8000778:	0091      	lsls	r1, r2, #2
 800077a:	0018      	movs	r0, r3
 800077c:	f7ff fd4e 	bl	800021c <__divsi3>
 8000780:	0003      	movs	r3, r0
 8000782:	001a      	movs	r2, r3
 8000784:	4b35      	ldr	r3, [pc, #212]	; (800085c <fsm_auto_run+0x3a8>)
 8000786:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000788:	4b31      	ldr	r3, [pc, #196]	; (8000850 <fsm_auto_run+0x39c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	0019      	movs	r1, r3
 800078e:	2000      	movs	r0, #0
 8000790:	f000 ffe0 	bl	8001754 <setTimer>
			}
			break;
 8000794:	e005      	b.n	80007a2 <fsm_auto_run+0x2ee>
			break;
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	e004      	b.n	80007a4 <fsm_auto_run+0x2f0>
			break;
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	e002      	b.n	80007a4 <fsm_auto_run+0x2f0>
			break;
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	e000      	b.n	80007a4 <fsm_auto_run+0x2f0>
			break;
 80007a2:	46c0      	nop			; (mov r8, r8)
		default: // ----- MANUAL MODE & SETTING MODE ---------
			return;
	}
	updateClockBuffer(count0, count1);
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <fsm_auto_run+0x3a4>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b2c      	ldr	r3, [pc, #176]	; (800085c <fsm_auto_run+0x3a8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	0019      	movs	r1, r3
 80007ae:	0010      	movs	r0, r2
 80007b0:	f000 fce2 	bl	8001178 <updateClockBuffer>
	if(timer_flag[2] == 1){
 80007b4:	4b2d      	ldr	r3, [pc, #180]	; (800086c <fsm_auto_run+0x3b8>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d105      	bne.n	80007c8 <fsm_auto_run+0x314>
		setTimer(2, 20);
 80007bc:	2114      	movs	r1, #20
 80007be:	2002      	movs	r0, #2
 80007c0:	f000 ffc8 	bl	8001754 <setTimer>
		Scan7SEG();
 80007c4:	f000 fb68 	bl	8000e98 <Scan7SEG>
	}
	if(timer_flag[1] == 1){
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <fsm_auto_run+0x3b8>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d10f      	bne.n	80007f0 <fsm_auto_run+0x33c>
		setTimer(1, 1000);
 80007d0:	23fa      	movs	r3, #250	; 0xfa
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	0019      	movs	r1, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	f000 ffbc 	bl	8001754 <setTimer>
		count0 --; count1 --;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <fsm_auto_run+0x3a4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <fsm_auto_run+0x3a4>)
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <fsm_auto_run+0x3a8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	1e5a      	subs	r2, r3, #1
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <fsm_auto_run+0x3a8>)
 80007ee:	601a      	str	r2, [r3, #0]
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 80007f0:	2002      	movs	r0, #2
 80007f2:	f7ff fe47 	bl	8000484 <isButtonPress>
 80007f6:	0003      	movs	r3, r0
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d122      	bne.n	8000842 <fsm_auto_run+0x38e>
		time_red_yellow = 0;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <fsm_auto_run+0x3a0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <fsm_auto_run+0x39c>)
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
		single_LED_off();
 8000808:	f000 fce6 	bl	80011d8 <single_LED_off>
		status = set_green;
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <fsm_auto_run+0x394>)
 800080e:	2208      	movs	r2, #8
 8000810:	601a      	str	r2, [r3, #0]
		setTimer(0, 100);
 8000812:	2164      	movs	r1, #100	; 0x64
 8000814:	2000      	movs	r0, #0
 8000816:	f000 ff9d 	bl	8001754 <setTimer>
		lcd_clear_display(); // ----CLEAR LCD ----
 800081a:	f000 fae5 	bl	8000de8 <lcd_clear_display>
		lcd_goto_XY(1, 0);
 800081e:	2100      	movs	r1, #0
 8000820:	2001      	movs	r0, #1
 8000822:	f000 faec 	bl	8000dfe <lcd_goto_XY>
		lcd_send_string("MODE: SETTING");
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <fsm_auto_run+0x3c4>)
 8000828:	0018      	movs	r0, r3
 800082a:	f000 fac8 	bl	8000dbe <lcd_send_string>
		lcd_goto_XY(0, 0);
 800082e:	2100      	movs	r1, #0
 8000830:	2000      	movs	r0, #0
 8000832:	f000 fae4 	bl	8000dfe <lcd_goto_XY>
		lcd_send_string("INCREASE TIMELED");
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <fsm_auto_run+0x3c8>)
 8000838:	0018      	movs	r0, r3
 800083a:	f000 fac0 	bl	8000dbe <lcd_send_string>
 800083e:	e000      	b.n	8000842 <fsm_auto_run+0x38e>
			return;
 8000840:	46c0      	nop			; (mov r8, r8)
	}
}
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	20000068 	.word	0x20000068
 800084c:	08003b40 	.word	0x08003b40
 8000850:	20000014 	.word	0x20000014
 8000854:	20000018 	.word	0x20000018
 8000858:	2000006c 	.word	0x2000006c
 800085c:	20000070 	.word	0x20000070
 8000860:	08003abc 	.word	0x08003abc
 8000864:	08003ac8 	.word	0x08003ac8
 8000868:	48000400 	.word	0x48000400
 800086c:	20000020 	.word	0x20000020
 8000870:	08003adc 	.word	0x08003adc
 8000874:	08003aec 	.word	0x08003aec
 8000878:	08003afc 	.word	0x08003afc
 800087c:	08003b0c 	.word	0x08003b0c

08000880 <fsm_manual>:
 *      Author: Admin
 */

#include "fsm_manual.h"

void fsm_manual(){
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	switch (status) {
 8000884:	4b6e      	ldr	r3, [pc, #440]	; (8000a40 <fsm_manual+0x1c0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b05      	cmp	r3, #5
 800088a:	d002      	beq.n	8000892 <fsm_manual+0x12>
 800088c:	2b06      	cmp	r3, #6
 800088e:	d05e      	beq.n	800094e <fsm_manual+0xce>
				lcd_send_string("PLEASE SLOW DOWN");
				return;
			}
			break;
		default:
			return;
 8000890:	e0d4      	b.n	8000a3c <fsm_manual+0x1bc>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	0159      	lsls	r1, r3, #5
 8000896:	2390      	movs	r3, #144	; 0x90
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	2200      	movs	r2, #0
 800089c:	0018      	movs	r0, r3
 800089e:	f001 fac8 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80008a2:	4b68      	ldr	r3, [pc, #416]	; (8000a44 <fsm_manual+0x1c4>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	2110      	movs	r1, #16
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 fac2 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80008ae:	2390      	movs	r3, #144	; 0x90
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2201      	movs	r2, #1
 80008b4:	2104      	movs	r1, #4
 80008b6:	0018      	movs	r0, r3
 80008b8:	f001 fabb 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	0059      	lsls	r1, r3, #1
 80008c0:	2390      	movs	r3, #144	; 0x90
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	2201      	movs	r2, #1
 80008c6:	0018      	movs	r0, r3
 80008c8:	f001 fab3 	bl	8001e32 <HAL_GPIO_WritePin>
			if(isButtonPress(1) == 1){
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fdd9 	bl	8000484 <isButtonPress>
 80008d2:	0003      	movs	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d102      	bne.n	80008de <fsm_manual+0x5e>
				status = manual_green_red;
 80008d8:	4b59      	ldr	r3, [pc, #356]	; (8000a40 <fsm_manual+0x1c0>)
 80008da:	2206      	movs	r2, #6
 80008dc:	601a      	str	r2, [r3, #0]
			if(isButtonPress(0) == 1){
 80008de:	2000      	movs	r0, #0
 80008e0:	f7ff fdd0 	bl	8000484 <isButtonPress>
 80008e4:	0003      	movs	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d000      	beq.n	80008ec <fsm_manual+0x6c>
 80008ea:	e08d      	b.n	8000a08 <fsm_manual+0x188>
				status = auto_red_green;
 80008ec:	4b54      	ldr	r3, [pc, #336]	; (8000a40 <fsm_manual+0x1c0>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 80008f2:	4b55      	ldr	r3, [pc, #340]	; (8000a48 <fsm_manual+0x1c8>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	4b55      	ldr	r3, [pc, #340]	; (8000a4c <fsm_manual+0x1cc>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	18d3      	adds	r3, r2, r3
 80008fc:	22fa      	movs	r2, #250	; 0xfa
 80008fe:	0091      	lsls	r1, r2, #2
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff fc8b 	bl	800021c <__divsi3>
 8000906:	0003      	movs	r3, r0
 8000908:	001a      	movs	r2, r3
 800090a:	4b51      	ldr	r3, [pc, #324]	; (8000a50 <fsm_manual+0x1d0>)
 800090c:	601a      	str	r2, [r3, #0]
				count1 = time_red_green / 1000;
 800090e:	4b4e      	ldr	r3, [pc, #312]	; (8000a48 <fsm_manual+0x1c8>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	22fa      	movs	r2, #250	; 0xfa
 8000914:	0091      	lsls	r1, r2, #2
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff fc80 	bl	800021c <__divsi3>
 800091c:	0003      	movs	r3, r0
 800091e:	001a      	movs	r2, r3
 8000920:	4b4c      	ldr	r3, [pc, #304]	; (8000a54 <fsm_manual+0x1d4>)
 8000922:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000924:	4b48      	ldr	r3, [pc, #288]	; (8000a48 <fsm_manual+0x1c8>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	0019      	movs	r1, r3
 800092a:	2000      	movs	r0, #0
 800092c:	f000 ff12 	bl	8001754 <setTimer>
				lcd_clear_display();
 8000930:	f000 fa5a 	bl	8000de8 <lcd_clear_display>
				lcd_send_string("MODE: AUTO");
 8000934:	4b48      	ldr	r3, [pc, #288]	; (8000a58 <fsm_manual+0x1d8>)
 8000936:	0018      	movs	r0, r3
 8000938:	f000 fa41 	bl	8000dbe <lcd_send_string>
				lcd_goto_XY(0, 0);
 800093c:	2100      	movs	r1, #0
 800093e:	2000      	movs	r0, #0
 8000940:	f000 fa5d 	bl	8000dfe <lcd_goto_XY>
				lcd_send_string("PLEASE SLOW DOWN");
 8000944:	4b45      	ldr	r3, [pc, #276]	; (8000a5c <fsm_manual+0x1dc>)
 8000946:	0018      	movs	r0, r3
 8000948:	f000 fa39 	bl	8000dbe <lcd_send_string>
				return;
 800094c:	e076      	b.n	8000a3c <fsm_manual+0x1bc>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 800094e:	2390      	movs	r3, #144	; 0x90
 8000950:	05db      	lsls	r3, r3, #23
 8000952:	2200      	movs	r2, #0
 8000954:	2104      	movs	r1, #4
 8000956:	0018      	movs	r0, r3
 8000958:	f001 fa6b 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 800095c:	2380      	movs	r3, #128	; 0x80
 800095e:	0059      	lsls	r1, r3, #1
 8000960:	2390      	movs	r3, #144	; 0x90
 8000962:	05db      	lsls	r3, r3, #23
 8000964:	2200      	movs	r2, #0
 8000966:	0018      	movs	r0, r3
 8000968:	f001 fa63 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	0159      	lsls	r1, r3, #5
 8000970:	2390      	movs	r3, #144	; 0x90
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	2201      	movs	r2, #1
 8000976:	0018      	movs	r0, r3
 8000978:	f001 fa5b 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 800097c:	4b31      	ldr	r3, [pc, #196]	; (8000a44 <fsm_manual+0x1c4>)
 800097e:	2201      	movs	r2, #1
 8000980:	2110      	movs	r1, #16
 8000982:	0018      	movs	r0, r3
 8000984:	f001 fa55 	bl	8001e32 <HAL_GPIO_WritePin>
			if(isButtonPress(1) == 1){
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff fd7b 	bl	8000484 <isButtonPress>
 800098e:	0003      	movs	r3, r0
 8000990:	2b01      	cmp	r3, #1
 8000992:	d102      	bne.n	800099a <fsm_manual+0x11a>
				status = manual_red_green;
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <fsm_manual+0x1c0>)
 8000996:	2205      	movs	r2, #5
 8000998:	601a      	str	r2, [r3, #0]
			if(isButtonPress(0) == 1){
 800099a:	2000      	movs	r0, #0
 800099c:	f7ff fd72 	bl	8000484 <isButtonPress>
 80009a0:	0003      	movs	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d132      	bne.n	8000a0c <fsm_manual+0x18c>
				status = auto_green_red;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <fsm_manual+0x1c0>)
 80009a8:	2203      	movs	r2, #3
 80009aa:	601a      	str	r2, [r3, #0]
				count0 = time_red_green/1000;
 80009ac:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <fsm_manual+0x1c8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	22fa      	movs	r2, #250	; 0xfa
 80009b2:	0091      	lsls	r1, r2, #2
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff fc31 	bl	800021c <__divsi3>
 80009ba:	0003      	movs	r3, r0
 80009bc:	001a      	movs	r2, r3
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <fsm_manual+0x1d0>)
 80009c0:	601a      	str	r2, [r3, #0]
				count1 =   (time_red_green + time_red_yellow)/1000;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <fsm_manual+0x1c8>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <fsm_manual+0x1cc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	18d3      	adds	r3, r2, r3
 80009cc:	22fa      	movs	r2, #250	; 0xfa
 80009ce:	0091      	lsls	r1, r2, #2
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff fc23 	bl	800021c <__divsi3>
 80009d6:	0003      	movs	r3, r0
 80009d8:	001a      	movs	r2, r3
 80009da:	4b1e      	ldr	r3, [pc, #120]	; (8000a54 <fsm_manual+0x1d4>)
 80009dc:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <fsm_manual+0x1c8>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	0019      	movs	r1, r3
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 feb5 	bl	8001754 <setTimer>
				lcd_clear_display();
 80009ea:	f000 f9fd 	bl	8000de8 <lcd_clear_display>
				lcd_send_string("MODE: AUTO");
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <fsm_manual+0x1d8>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 f9e4 	bl	8000dbe <lcd_send_string>
				lcd_goto_XY(0, 0);
 80009f6:	2100      	movs	r1, #0
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 fa00 	bl	8000dfe <lcd_goto_XY>
				lcd_send_string("PLEASE SLOW DOWN");
 80009fe:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <fsm_manual+0x1dc>)
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 f9dc 	bl	8000dbe <lcd_send_string>
				return;
 8000a06:	e019      	b.n	8000a3c <fsm_manual+0x1bc>
			break;
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	e000      	b.n	8000a0e <fsm_manual+0x18e>
			break;
 8000a0c:	46c0      	nop			; (mov r8, r8)
	}

	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff fd38 	bl	8000484 <isButtonPress>
 8000a14:	0003      	movs	r3, r0
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d110      	bne.n	8000a3c <fsm_manual+0x1bc>
		setTimer(0, 100);
 8000a1a:	2164      	movs	r1, #100	; 0x64
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f000 fe99 	bl	8001754 <setTimer>
		single_LED_off();
 8000a22:	f000 fbd9 	bl	80011d8 <single_LED_off>
		status = set_green;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <fsm_manual+0x1c0>)
 8000a28:	2208      	movs	r2, #8
 8000a2a:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <fsm_manual+0x1c8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
		time_red_yellow = 0;
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <fsm_manual+0x1cc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
		lcd_clear_display(); // ----CLEAR LCD ----
 8000a38:	f000 f9d6 	bl	8000de8 <lcd_clear_display>
	}
}
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000068 	.word	0x20000068
 8000a44:	48000400 	.word	0x48000400
 8000a48:	20000014 	.word	0x20000014
 8000a4c:	20000018 	.word	0x20000018
 8000a50:	2000006c 	.word	0x2000006c
 8000a54:	20000070 	.word	0x20000070
 8000a58:	08003b20 	.word	0x08003b20
 8000a5c:	08003b2c 	.word	0x08003b2c

08000a60 <fsm_setting>:
#include "fsm_setting.h"

int increment[5] = {1000,2000,5000,10000,20000};
int i = 0;

void fsm_setting(){
 8000a60:	b5b0      	push	{r4, r5, r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	switch (status) {
 8000a64:	4b77      	ldr	r3, [pc, #476]	; (8000c44 <fsm_setting+0x1e4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b07      	cmp	r3, #7
 8000a6a:	d062      	beq.n	8000b32 <fsm_setting+0xd2>
 8000a6c:	2b08      	cmp	r3, #8
 8000a6e:	d000      	beq.n	8000a72 <fsm_setting+0x12>
 8000a70:	e0e4      	b.n	8000c3c <fsm_setting+0x1dc>
		case set_green:
			if(timer_flag[0] == 1){
 8000a72:	4b75      	ldr	r3, [pc, #468]	; (8000c48 <fsm_setting+0x1e8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d110      	bne.n	8000a9c <fsm_setting+0x3c>
				setTimer(0, 100);
 8000a7a:	2164      	movs	r1, #100	; 0x64
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f000 fe69 	bl	8001754 <setTimer>
				HAL_GPIO_TogglePin(G0_GPIO_Port, G0_Pin);
 8000a82:	2380      	movs	r3, #128	; 0x80
 8000a84:	005a      	lsls	r2, r3, #1
 8000a86:	2390      	movs	r3, #144	; 0x90
 8000a88:	05db      	lsls	r3, r3, #23
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 f9ed 	bl	8001e6c <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8000a92:	4b6e      	ldr	r3, [pc, #440]	; (8000c4c <fsm_setting+0x1ec>)
 8000a94:	2110      	movs	r1, #16
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 f9e8 	bl	8001e6c <HAL_GPIO_TogglePin>
			}
			if(isButtonPress(0) == 1){  // TIME INCREASE
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	f7ff fcf1 	bl	8000484 <isButtonPress>
 8000aa2:	0003      	movs	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d111      	bne.n	8000acc <fsm_setting+0x6c>
				time_red_green += increment[i];
 8000aa8:	4b69      	ldr	r3, [pc, #420]	; (8000c50 <fsm_setting+0x1f0>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b69      	ldr	r3, [pc, #420]	; (8000c54 <fsm_setting+0x1f4>)
 8000aae:	0092      	lsls	r2, r2, #2
 8000ab0:	58d2      	ldr	r2, [r2, r3]
 8000ab2:	4b69      	ldr	r3, [pc, #420]	; (8000c58 <fsm_setting+0x1f8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	18d2      	adds	r2, r2, r3
 8000ab8:	4b67      	ldr	r3, [pc, #412]	; (8000c58 <fsm_setting+0x1f8>)
 8000aba:	601a      	str	r2, [r3, #0]
				if(time_red_green > 98000){
 8000abc:	4b66      	ldr	r3, [pc, #408]	; (8000c58 <fsm_setting+0x1f8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a66      	ldr	r2, [pc, #408]	; (8000c5c <fsm_setting+0x1fc>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	dd02      	ble.n	8000acc <fsm_setting+0x6c>
					time_red_green = 0;
 8000ac6:	4b64      	ldr	r3, [pc, #400]	; (8000c58 <fsm_setting+0x1f8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButtonPress(2) == 1){
 8000acc:	2002      	movs	r0, #2
 8000ace:	f7ff fcd9 	bl	8000484 <isButtonPress>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d113      	bne.n	8000b00 <fsm_setting+0xa0>
				status = set_yellow;
 8000ad8:	4b5a      	ldr	r3, [pc, #360]	; (8000c44 <fsm_setting+0x1e4>)
 8000ada:	2207      	movs	r2, #7
 8000adc:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000ade:	2380      	movs	r3, #128	; 0x80
 8000ae0:	0059      	lsls	r1, r3, #1
 8000ae2:	2390      	movs	r3, #144	; 0x90
 8000ae4:	05db      	lsls	r3, r3, #23
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 f9a2 	bl	8001e32 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000aee:	4b57      	ldr	r3, [pc, #348]	; (8000c4c <fsm_setting+0x1ec>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	2110      	movs	r1, #16
 8000af4:	0018      	movs	r0, r3
 8000af6:	f001 f99c 	bl	8001e32 <HAL_GPIO_WritePin>
				i = 0;
 8000afa:	4b55      	ldr	r3, [pc, #340]	; (8000c50 <fsm_setting+0x1f0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
			}
			updateClockBuffer(time_red_green/1000, increment[i]/1000);
 8000b00:	4b55      	ldr	r3, [pc, #340]	; (8000c58 <fsm_setting+0x1f8>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	22fa      	movs	r2, #250	; 0xfa
 8000b06:	0091      	lsls	r1, r2, #2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fb87 	bl	800021c <__divsi3>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	001c      	movs	r4, r3
 8000b12:	4b4f      	ldr	r3, [pc, #316]	; (8000c50 <fsm_setting+0x1f0>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b4f      	ldr	r3, [pc, #316]	; (8000c54 <fsm_setting+0x1f4>)
 8000b18:	0092      	lsls	r2, r2, #2
 8000b1a:	58d3      	ldr	r3, [r2, r3]
 8000b1c:	22fa      	movs	r2, #250	; 0xfa
 8000b1e:	0091      	lsls	r1, r2, #2
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fb7b 	bl	800021c <__divsi3>
 8000b26:	0003      	movs	r3, r0
 8000b28:	0019      	movs	r1, r3
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	f000 fb24 	bl	8001178 <updateClockBuffer>
			break;
 8000b30:	e067      	b.n	8000c02 <fsm_setting+0x1a2>
		case set_yellow:
			if(timer_flag[0] == 1){
 8000b32:	4b45      	ldr	r3, [pc, #276]	; (8000c48 <fsm_setting+0x1e8>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d10e      	bne.n	8000b58 <fsm_setting+0xf8>
				setTimer(0, 100);
 8000b3a:	2164      	movs	r1, #100	; 0x64
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	f000 fe09 	bl	8001754 <setTimer>
				HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
 8000b42:	2390      	movs	r3, #144	; 0x90
 8000b44:	05db      	lsls	r3, r3, #23
 8000b46:	2110      	movs	r1, #16
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f001 f98f 	bl	8001e6c <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000b4e:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <fsm_setting+0x1ec>)
 8000b50:	2120      	movs	r1, #32
 8000b52:	0018      	movs	r0, r3
 8000b54:	f001 f98a 	bl	8001e6c <HAL_GPIO_TogglePin>
			}
			if(isButtonPress(0) == 1){
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f7ff fc93 	bl	8000484 <isButtonPress>
 8000b5e:	0003      	movs	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d109      	bne.n	8000b78 <fsm_setting+0x118>
				time_red_yellow += increment[i];
 8000b64:	4b3a      	ldr	r3, [pc, #232]	; (8000c50 <fsm_setting+0x1f0>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b3a      	ldr	r3, [pc, #232]	; (8000c54 <fsm_setting+0x1f4>)
 8000b6a:	0092      	lsls	r2, r2, #2
 8000b6c:	58d2      	ldr	r2, [r2, r3]
 8000b6e:	4b3c      	ldr	r3, [pc, #240]	; (8000c60 <fsm_setting+0x200>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	18d2      	adds	r2, r2, r3
 8000b74:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <fsm_setting+0x200>)
 8000b76:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPress(2) == 1){
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f7ff fc83 	bl	8000484 <isButtonPress>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d125      	bne.n	8000bd0 <fsm_setting+0x170>
				if( ( (time_red_yellow + time_red_green) >= 100000)  && (time_red_green == 0) ){
 8000b84:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <fsm_setting+0x200>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b33      	ldr	r3, [pc, #204]	; (8000c58 <fsm_setting+0x1f8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	18d3      	adds	r3, r2, r3
 8000b8e:	4a35      	ldr	r2, [pc, #212]	; (8000c64 <fsm_setting+0x204>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	dd17      	ble.n	8000bc4 <fsm_setting+0x164>
 8000b94:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <fsm_setting+0x1f8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d113      	bne.n	8000bc4 <fsm_setting+0x164>
					HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 8000b9c:	2390      	movs	r3, #144	; 0x90
 8000b9e:	05db      	lsls	r3, r3, #23
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2110      	movs	r1, #16
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 f944 	bl	8001e32 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8000baa:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <fsm_setting+0x1ec>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	2120      	movs	r1, #32
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 f93e 	bl	8001e32 <HAL_GPIO_WritePin>
					status = set_green;
 8000bb6:	4b23      	ldr	r3, [pc, #140]	; (8000c44 <fsm_setting+0x1e4>)
 8000bb8:	2208      	movs	r2, #8
 8000bba:	601a      	str	r2, [r3, #0]
					i = 0;
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <fsm_setting+0x1f0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	e005      	b.n	8000bd0 <fsm_setting+0x170>
				}
				else {
					status = auto_init;
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <fsm_setting+0x1e4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
					lcd_clear_display();
 8000bca:	f000 f90d 	bl	8000de8 <lcd_clear_display>
					return;
 8000bce:	e036      	b.n	8000c3e <fsm_setting+0x1de>
				}
			}
			updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 8000bd0:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <fsm_setting+0x200>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	22fa      	movs	r2, #250	; 0xfa
 8000bd6:	0091      	lsls	r1, r2, #2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f7ff fb1f 	bl	800021c <__divsi3>
 8000bde:	0003      	movs	r3, r0
 8000be0:	001c      	movs	r4, r3
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <fsm_setting+0x1f0>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <fsm_setting+0x1f4>)
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	58d3      	ldr	r3, [r2, r3]
 8000bec:	22fa      	movs	r2, #250	; 0xfa
 8000bee:	0091      	lsls	r1, r2, #2
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fb13 	bl	800021c <__divsi3>
 8000bf6:	0003      	movs	r3, r0
 8000bf8:	0019      	movs	r1, r3
 8000bfa:	0020      	movs	r0, r4
 8000bfc:	f000 fabc 	bl	8001178 <updateClockBuffer>
			break;
 8000c00:	46c0      	nop			; (mov r8, r8)
		default:
			return;
	}

	if(isButtonPress(1) == 1){
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff fc3e 	bl	8000484 <isButtonPress>
 8000c08:	0003      	movs	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d10b      	bne.n	8000c26 <fsm_setting+0x1c6>
		 ++i;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <fsm_setting+0x1f0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <fsm_setting+0x1f0>)
 8000c16:	601a      	str	r2, [r3, #0]
		 if(i >=5) i = 0;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <fsm_setting+0x1f0>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	dd02      	ble.n	8000c26 <fsm_setting+0x1c6>
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <fsm_setting+0x1f0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag[2] == 1){
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <fsm_setting+0x1e8>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d107      	bne.n	8000c3e <fsm_setting+0x1de>
		setTimer(2, 20);
 8000c2e:	2114      	movs	r1, #20
 8000c30:	2002      	movs	r0, #2
 8000c32:	f000 fd8f 	bl	8001754 <setTimer>
		Scan7SEG();
 8000c36:	f000 f92f 	bl	8000e98 <Scan7SEG>
 8000c3a:	e000      	b.n	8000c3e <fsm_setting+0x1de>
			return;
 8000c3c:	46c0      	nop			; (mov r8, r8)
	}

}
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bdb0      	pop	{r4, r5, r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	20000068 	.word	0x20000068
 8000c48:	20000020 	.word	0x20000020
 8000c4c:	48000400 	.word	0x48000400
 8000c50:	20000064 	.word	0x20000064
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000014 	.word	0x20000014
 8000c5c:	00017ed0 	.word	0x00017ed0
 8000c60:	20000018 	.word	0x20000018
 8000c64:	0001869f 	.word	0x0001869f

08000c68 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af02      	add	r7, sp, #8
 8000c6e:	0002      	movs	r2, r0
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c74:	200f      	movs	r0, #15
 8000c76:	183b      	adds	r3, r7, r0
 8000c78:	1dfa      	adds	r2, r7, #7
 8000c7a:	7812      	ldrb	r2, [r2, #0]
 8000c7c:	210f      	movs	r1, #15
 8000c7e:	438a      	bics	r2, r1
 8000c80:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	011a      	lsls	r2, r3, #4
 8000c88:	240e      	movs	r4, #14
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c8e:	183b      	adds	r3, r7, r0
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	220c      	movs	r2, #12
 8000c94:	4313      	orrs	r3, r2
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	2108      	movs	r1, #8
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c9e:	183b      	adds	r3, r7, r0
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	2208      	movs	r2, #8
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	220c      	movs	r2, #12
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cc8:	187a      	adds	r2, r7, r1
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <lcd_send_cmd+0x78>)
 8000ccc:	2364      	movs	r3, #100	; 0x64
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	214e      	movs	r1, #78	; 0x4e
 8000cd4:	f001 f98c 	bl	8001ff0 <HAL_I2C_Master_Transmit>
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b005      	add	sp, #20
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	2000009c 	.word	0x2000009c

08000ce4 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	0002      	movs	r2, r0
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000cf0:	200f      	movs	r0, #15
 8000cf2:	183b      	adds	r3, r7, r0
 8000cf4:	1dfa      	adds	r2, r7, #7
 8000cf6:	7812      	ldrb	r2, [r2, #0]
 8000cf8:	210f      	movs	r1, #15
 8000cfa:	438a      	bics	r2, r1
 8000cfc:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	011a      	lsls	r2, r3, #4
 8000d04:	240e      	movs	r4, #14
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000d0a:	183b      	adds	r3, r7, r0
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	220d      	movs	r2, #13
 8000d10:	4313      	orrs	r3, r2
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	2108      	movs	r1, #8
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000d1a:	183b      	adds	r3, r7, r0
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2209      	movs	r2, #9
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	220d      	movs	r2, #13
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	187b      	adds	r3, r7, r1
 8000d34:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	2209      	movs	r2, #9
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000d44:	187a      	adds	r2, r7, r1
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <lcd_send_data+0x78>)
 8000d48:	2364      	movs	r3, #100	; 0x64
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2304      	movs	r3, #4
 8000d4e:	214e      	movs	r1, #78	; 0x4e
 8000d50:	f001 f94e 	bl	8001ff0 <HAL_I2C_Master_Transmit>
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b005      	add	sp, #20
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	2000009c 	.word	0x2000009c

08000d60 <lcd_init>:

void lcd_init (void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000d64:	2033      	movs	r0, #51	; 0x33
 8000d66:	f7ff ff7f 	bl	8000c68 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000d6a:	2032      	movs	r0, #50	; 0x32
 8000d6c:	f7ff ff7c 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000d70:	2032      	movs	r0, #50	; 0x32
 8000d72:	f000 fdd7 	bl	8001924 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000d76:	2028      	movs	r0, #40	; 0x28
 8000d78:	f7ff ff76 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000d7c:	2032      	movs	r0, #50	; 0x32
 8000d7e:	f000 fdd1 	bl	8001924 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff ff70 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000d88:	2032      	movs	r0, #50	; 0x32
 8000d8a:	f000 fdcb 	bl	8001924 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000d8e:	2006      	movs	r0, #6
 8000d90:	f7ff ff6a 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000d94:	2032      	movs	r0, #50	; 0x32
 8000d96:	f000 fdc5 	bl	8001924 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000d9a:	200c      	movs	r0, #12
 8000d9c:	f7ff ff64 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000da0:	2032      	movs	r0, #50	; 0x32
 8000da2:	f000 fdbf 	bl	8001924 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000da6:	2002      	movs	r0, #2
 8000da8:	f7ff ff5e 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(50);
 8000dac:	2032      	movs	r0, #50	; 0x32
 8000dae:	f000 fdb9 	bl	8001924 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000db2:	2080      	movs	r0, #128	; 0x80
 8000db4:	f7ff ff58 	bl	8000c68 <lcd_send_cmd>
}
 8000db8:	46c0      	nop			; (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000dc6:	e006      	b.n	8000dd6 <lcd_send_string+0x18>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f7ff ff87 	bl	8000ce4 <lcd_send_data>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f4      	bne.n	8000dc8 <lcd_send_string+0xa>
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000dec:	2001      	movs	r0, #1
 8000dee:	f7ff ff3b 	bl	8000c68 <lcd_send_cmd>
	HAL_Delay(5);
 8000df2:	2005      	movs	r0, #5
 8000df4:	f000 fd96 	bl	8001924 <HAL_Delay>
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b084      	sub	sp, #16
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d10a      	bne.n	8000e24 <lcd_goto_XY+0x26>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	18d3      	adds	r3, r2, r3
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	18fb      	adds	r3, r7, r3
 8000e1e:	327f      	adds	r2, #127	; 0x7f
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	e00b      	b.n	8000e3c <lcd_goto_XY+0x3e>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	3340      	adds	r3, #64	; 0x40
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	2280      	movs	r2, #128	; 0x80
 8000e30:	4252      	negs	r2, r2
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b25a      	sxtb	r2, r3
 8000e36:	230f      	movs	r3, #15
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	701a      	strb	r2, [r3, #0]
	}
	lcd_send_cmd(pos_Addr);
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0018      	movs	r0, r3
 8000e44:	f7ff ff10 	bl	8000c68 <lcd_send_cmd>
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b004      	add	sp, #16
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <Diable_Led>:
 */
#include "led_display.h"

int led_buffer[4] = {0,0,0,0};
int led_index = 0;
void Diable_Led(){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000e54:	2390      	movs	r3, #144	; 0x90
 8000e56:	05db      	lsls	r3, r3, #23
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f000 ffe8 	bl	8001e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <Diable_Led+0x40>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	2102      	movs	r1, #2
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 ffe2 	bl	8001e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <Diable_Led+0x44>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	2108      	movs	r1, #8
 8000e74:	0018      	movs	r0, r3
 8000e76:	f000 ffdc 	bl	8001e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	0119      	lsls	r1, r3, #4
 8000e7e:	2390      	movs	r3, #144	; 0x90
 8000e80:	05db      	lsls	r3, r3, #23
 8000e82:	2200      	movs	r2, #0
 8000e84:	0018      	movs	r0, r3
 8000e86:	f000 ffd4 	bl	8001e32 <HAL_GPIO_WritePin>
}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	48001400 	.word	0x48001400
 8000e94:	48000400 	.word	0x48000400

08000e98 <Scan7SEG>:
void Scan7SEG(){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
	Diable_Led();
 8000e9c:	f7ff ffd8 	bl	8000e50 <Diable_Led>
	switch(led_index){
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <Scan7SEG+0xa8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d02d      	beq.n	8000f04 <Scan7SEG+0x6c>
 8000ea8:	dc3a      	bgt.n	8000f20 <Scan7SEG+0x88>
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d01e      	beq.n	8000eec <Scan7SEG+0x54>
 8000eae:	dc37      	bgt.n	8000f20 <Scan7SEG+0x88>
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <Scan7SEG+0x22>
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d00d      	beq.n	8000ed4 <Scan7SEG+0x3c>
		case 3:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
			display7SEG(led_buffer[3]);
			break;
		default:
			break;
 8000eb8:	e032      	b.n	8000f20 <Scan7SEG+0x88>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000eba:	2390      	movs	r3, #144	; 0x90
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 ffb5 	bl	8001e32 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <Scan7SEG+0xac>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f000 f83f 	bl	8000f50 <display7SEG>
			break;
 8000ed2:	e026      	b.n	8000f22 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <Scan7SEG+0xb0>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	2102      	movs	r1, #2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 ffa9 	bl	8001e32 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000ee0:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <Scan7SEG+0xac>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f000 f833 	bl	8000f50 <display7SEG>
			break;
 8000eea:	e01a      	b.n	8000f22 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <Scan7SEG+0xb4>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 ff9d 	bl	8001e32 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <Scan7SEG+0xac>)
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	0018      	movs	r0, r3
 8000efe:	f000 f827 	bl	8000f50 <display7SEG>
			break;
 8000f02:	e00e      	b.n	8000f22 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	0119      	lsls	r1, r3, #4
 8000f08:	2390      	movs	r3, #144	; 0x90
 8000f0a:	05db      	lsls	r3, r3, #23
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 ff8f 	bl	8001e32 <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000f14:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <Scan7SEG+0xac>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 f819 	bl	8000f50 <display7SEG>
			break;
 8000f1e:	e000      	b.n	8000f22 <Scan7SEG+0x8a>
			break;
 8000f20:	46c0      	nop			; (mov r8, r8)
	}
	if((++led_index) >= 4) led_index = 0;
 8000f22:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <Scan7SEG+0xa8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	1c5a      	adds	r2, r3, #1
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <Scan7SEG+0xa8>)
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <Scan7SEG+0xa8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	dd02      	ble.n	8000f3a <Scan7SEG+0xa2>
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <Scan7SEG+0xa8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000084 	.word	0x20000084
 8000f44:	20000074 	.word	0x20000074
 8000f48:	48001400 	.word	0x48001400
 8000f4c:	48000400 	.word	0x48000400

08000f50 <display7SEG>:
void display7SEG(int num){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b09      	cmp	r3, #9
 8000f5c:	d900      	bls.n	8000f60 <display7SEG+0x10>
 8000f5e:	e0ff      	b.n	8001160 <display7SEG+0x210>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	009a      	lsls	r2, r3, #2
 8000f64:	4b81      	ldr	r3, [pc, #516]	; (800116c <display7SEG+0x21c>)
 8000f66:	18d3      	adds	r3, r2, r3
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	469f      	mov	pc, r3
	switch(num){
		case 0:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000f6c:	4b80      	ldr	r3, [pc, #512]	; (8001170 <display7SEG+0x220>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2101      	movs	r1, #1
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 ff5d 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000f78:	4b7e      	ldr	r3, [pc, #504]	; (8001174 <display7SEG+0x224>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f000 ff57 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000f84:	4b7b      	ldr	r3, [pc, #492]	; (8001174 <display7SEG+0x224>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	2140      	movs	r1, #64	; 0x40
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f000 ff51 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000f90:	4b78      	ldr	r3, [pc, #480]	; (8001174 <display7SEG+0x224>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	2102      	movs	r1, #2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 ff4b 	bl	8001e32 <HAL_GPIO_WritePin>
			break;
 8000f9c:	e0e1      	b.n	8001162 <display7SEG+0x212>
		case 1:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000f9e:	4b74      	ldr	r3, [pc, #464]	; (8001170 <display7SEG+0x220>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f000 ff44 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000faa:	4b72      	ldr	r3, [pc, #456]	; (8001174 <display7SEG+0x224>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	2180      	movs	r1, #128	; 0x80
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f000 ff3e 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000fb6:	4b6f      	ldr	r3, [pc, #444]	; (8001174 <display7SEG+0x224>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2140      	movs	r1, #64	; 0x40
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f000 ff38 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000fc2:	4b6c      	ldr	r3, [pc, #432]	; (8001174 <display7SEG+0x224>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f000 ff32 	bl	8001e32 <HAL_GPIO_WritePin>
			break;
 8000fce:	e0c8      	b.n	8001162 <display7SEG+0x212>
		case 2:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000fd0:	4b67      	ldr	r3, [pc, #412]	; (8001170 <display7SEG+0x220>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 ff2b 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000fdc:	4b65      	ldr	r3, [pc, #404]	; (8001174 <display7SEG+0x224>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 ff25 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000fe8:	4b62      	ldr	r3, [pc, #392]	; (8001174 <display7SEG+0x224>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	2140      	movs	r1, #64	; 0x40
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 ff1f 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000ff4:	4b5f      	ldr	r3, [pc, #380]	; (8001174 <display7SEG+0x224>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 ff19 	bl	8001e32 <HAL_GPIO_WritePin>
			break;
 8001000:	e0af      	b.n	8001162 <display7SEG+0x212>
		case 3:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8001002:	4b5b      	ldr	r3, [pc, #364]	; (8001170 <display7SEG+0x220>)
 8001004:	2201      	movs	r2, #1
 8001006:	2101      	movs	r1, #1
 8001008:	0018      	movs	r0, r3
 800100a:	f000 ff12 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 800100e:	4b59      	ldr	r3, [pc, #356]	; (8001174 <display7SEG+0x224>)
 8001010:	2201      	movs	r2, #1
 8001012:	2180      	movs	r1, #128	; 0x80
 8001014:	0018      	movs	r0, r3
 8001016:	f000 ff0c 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 800101a:	4b56      	ldr	r3, [pc, #344]	; (8001174 <display7SEG+0x224>)
 800101c:	2200      	movs	r2, #0
 800101e:	2140      	movs	r1, #64	; 0x40
 8001020:	0018      	movs	r0, r3
 8001022:	f000 ff06 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8001026:	4b53      	ldr	r3, [pc, #332]	; (8001174 <display7SEG+0x224>)
 8001028:	2200      	movs	r2, #0
 800102a:	2102      	movs	r1, #2
 800102c:	0018      	movs	r0, r3
 800102e:	f000 ff00 	bl	8001e32 <HAL_GPIO_WritePin>
			break;
 8001032:	e096      	b.n	8001162 <display7SEG+0x212>
		case 4:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8001034:	4b4e      	ldr	r3, [pc, #312]	; (8001170 <display7SEG+0x220>)
 8001036:	2200      	movs	r2, #0
 8001038:	2101      	movs	r1, #1
 800103a:	0018      	movs	r0, r3
 800103c:	f000 fef9 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8001040:	4b4c      	ldr	r3, [pc, #304]	; (8001174 <display7SEG+0x224>)
 8001042:	2200      	movs	r2, #0
 8001044:	2180      	movs	r1, #128	; 0x80
 8001046:	0018      	movs	r0, r3
 8001048:	f000 fef3 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 800104c:	4b49      	ldr	r3, [pc, #292]	; (8001174 <display7SEG+0x224>)
 800104e:	2201      	movs	r2, #1
 8001050:	2140      	movs	r1, #64	; 0x40
 8001052:	0018      	movs	r0, r3
 8001054:	f000 feed 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8001058:	4b46      	ldr	r3, [pc, #280]	; (8001174 <display7SEG+0x224>)
 800105a:	2200      	movs	r2, #0
 800105c:	2102      	movs	r1, #2
 800105e:	0018      	movs	r0, r3
 8001060:	f000 fee7 	bl	8001e32 <HAL_GPIO_WritePin>
			break;
 8001064:	e07d      	b.n	8001162 <display7SEG+0x212>
		case 5:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8001066:	4b42      	ldr	r3, [pc, #264]	; (8001170 <display7SEG+0x220>)
 8001068:	2201      	movs	r2, #1
 800106a:	2101      	movs	r1, #1
 800106c:	0018      	movs	r0, r3
 800106e:	f000 fee0 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8001072:	4b40      	ldr	r3, [pc, #256]	; (8001174 <display7SEG+0x224>)
 8001074:	2200      	movs	r2, #0
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	0018      	movs	r0, r3
 800107a:	f000 feda 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 800107e:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <display7SEG+0x224>)
 8001080:	2201      	movs	r2, #1
 8001082:	2140      	movs	r1, #64	; 0x40
 8001084:	0018      	movs	r0, r3
 8001086:	f000 fed4 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 800108a:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <display7SEG+0x224>)
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	0018      	movs	r0, r3
 8001092:	f000 fece 	bl	8001e32 <HAL_GPIO_WritePin>
			break;
 8001096:	e064      	b.n	8001162 <display7SEG+0x212>
		case 6:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8001098:	4b35      	ldr	r3, [pc, #212]	; (8001170 <display7SEG+0x220>)
 800109a:	2200      	movs	r2, #0
 800109c:	2101      	movs	r1, #1
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 fec7 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 80010a4:	4b33      	ldr	r3, [pc, #204]	; (8001174 <display7SEG+0x224>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	2180      	movs	r1, #128	; 0x80
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 fec1 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 80010b0:	4b30      	ldr	r3, [pc, #192]	; (8001174 <display7SEG+0x224>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	0018      	movs	r0, r3
 80010b8:	f000 febb 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80010bc:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <display7SEG+0x224>)
 80010be:	2200      	movs	r2, #0
 80010c0:	2102      	movs	r1, #2
 80010c2:	0018      	movs	r0, r3
 80010c4:	f000 feb5 	bl	8001e32 <HAL_GPIO_WritePin>
			break;
 80010c8:	e04b      	b.n	8001162 <display7SEG+0x212>
		case 7:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 80010ca:	4b29      	ldr	r3, [pc, #164]	; (8001170 <display7SEG+0x220>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	2101      	movs	r1, #1
 80010d0:	0018      	movs	r0, r3
 80010d2:	f000 feae 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 80010d6:	4b27      	ldr	r3, [pc, #156]	; (8001174 <display7SEG+0x224>)
 80010d8:	2201      	movs	r2, #1
 80010da:	2180      	movs	r1, #128	; 0x80
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fea8 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 80010e2:	4b24      	ldr	r3, [pc, #144]	; (8001174 <display7SEG+0x224>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	2140      	movs	r1, #64	; 0x40
 80010e8:	0018      	movs	r0, r3
 80010ea:	f000 fea2 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <display7SEG+0x224>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	2102      	movs	r1, #2
 80010f4:	0018      	movs	r0, r3
 80010f6:	f000 fe9c 	bl	8001e32 <HAL_GPIO_WritePin>
			break;
 80010fa:	e032      	b.n	8001162 <display7SEG+0x212>
		case 8:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <display7SEG+0x220>)
 80010fe:	2200      	movs	r2, #0
 8001100:	2101      	movs	r1, #1
 8001102:	0018      	movs	r0, r3
 8001104:	f000 fe95 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <display7SEG+0x224>)
 800110a:	2200      	movs	r2, #0
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	0018      	movs	r0, r3
 8001110:	f000 fe8f 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <display7SEG+0x224>)
 8001116:	2200      	movs	r2, #0
 8001118:	2140      	movs	r1, #64	; 0x40
 800111a:	0018      	movs	r0, r3
 800111c:	f000 fe89 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <display7SEG+0x224>)
 8001122:	2201      	movs	r2, #1
 8001124:	2102      	movs	r1, #2
 8001126:	0018      	movs	r0, r3
 8001128:	f000 fe83 	bl	8001e32 <HAL_GPIO_WritePin>
			break;
 800112c:	e019      	b.n	8001162 <display7SEG+0x212>
		case 9:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <display7SEG+0x220>)
 8001130:	2201      	movs	r2, #1
 8001132:	2101      	movs	r1, #1
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fe7c 	bl	8001e32 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <display7SEG+0x224>)
 800113c:	2200      	movs	r2, #0
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	0018      	movs	r0, r3
 8001142:	f000 fe76 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <display7SEG+0x224>)
 8001148:	2200      	movs	r2, #0
 800114a:	2140      	movs	r1, #64	; 0x40
 800114c:	0018      	movs	r0, r3
 800114e:	f000 fe70 	bl	8001e32 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <display7SEG+0x224>)
 8001154:	2201      	movs	r2, #1
 8001156:	2102      	movs	r1, #2
 8001158:	0018      	movs	r0, r3
 800115a:	f000 fe6a 	bl	8001e32 <HAL_GPIO_WritePin>
			break;
 800115e:	e000      	b.n	8001162 <display7SEG+0x212>
		default:
			break;
 8001160:	46c0      	nop			; (mov r8, r8)
	}
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	b002      	add	sp, #8
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	08003b54 	.word	0x08003b54
 8001170:	48001400 	.word	0x48001400
 8001174:	48000400 	.word	0x48000400

08001178 <updateClockBuffer>:
void updateClockBuffer(int num1, int num2){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	210a      	movs	r1, #10
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff f848 	bl	800021c <__divsi3>
 800118c:	0003      	movs	r3, r0
 800118e:	001a      	movs	r2, r3
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <updateClockBuffer+0x5c>)
 8001192:	601a      	str	r2, [r3, #0]
	led_buffer[1] = num1 % 10;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	210a      	movs	r1, #10
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff f925 	bl	80003e8 <__aeabi_idivmod>
 800119e:	000b      	movs	r3, r1
 80011a0:	001a      	movs	r2, r3
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <updateClockBuffer+0x5c>)
 80011a4:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	210a      	movs	r1, #10
 80011aa:	0018      	movs	r0, r3
 80011ac:	f7ff f836 	bl	800021c <__divsi3>
 80011b0:	0003      	movs	r3, r0
 80011b2:	001a      	movs	r2, r3
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <updateClockBuffer+0x5c>)
 80011b6:	609a      	str	r2, [r3, #8]
	led_buffer[3] = num2 % 10;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	210a      	movs	r1, #10
 80011bc:	0018      	movs	r0, r3
 80011be:	f7ff f913 	bl	80003e8 <__aeabi_idivmod>
 80011c2:	000b      	movs	r3, r1
 80011c4:	001a      	movs	r2, r3
 80011c6:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <updateClockBuffer+0x5c>)
 80011c8:	60da      	str	r2, [r3, #12]
}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b002      	add	sp, #8
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	20000074 	.word	0x20000074

080011d8 <single_LED_off>:
void single_LED_off(){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	0159      	lsls	r1, r3, #5
 80011e0:	2390      	movs	r3, #144	; 0x90
 80011e2:	05db      	lsls	r3, r3, #23
 80011e4:	2201      	movs	r2, #1
 80011e6:	0018      	movs	r0, r3
 80011e8:	f000 fe23 	bl	8001e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 80011ec:	2390      	movs	r3, #144	; 0x90
 80011ee:	05db      	lsls	r3, r3, #23
 80011f0:	2201      	movs	r2, #1
 80011f2:	2110      	movs	r1, #16
 80011f4:	0018      	movs	r0, r3
 80011f6:	f000 fe1c 	bl	8001e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	0059      	lsls	r1, r3, #1
 80011fe:	2390      	movs	r3, #144	; 0x90
 8001200:	05db      	lsls	r3, r3, #23
 8001202:	2201      	movs	r2, #1
 8001204:	0018      	movs	r0, r3
 8001206:	f000 fe14 	bl	8001e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 800120a:	2390      	movs	r3, #144	; 0x90
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	2201      	movs	r2, #1
 8001210:	2104      	movs	r1, #4
 8001212:	0018      	movs	r0, r3
 8001214:	f000 fe0d 	bl	8001e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <single_LED_off+0x60>)
 800121a:	2201      	movs	r2, #1
 800121c:	2120      	movs	r1, #32
 800121e:	0018      	movs	r0, r3
 8001220:	f000 fe07 	bl	8001e32 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <single_LED_off+0x60>)
 8001226:	2201      	movs	r2, #1
 8001228:	2110      	movs	r1, #16
 800122a:	0018      	movs	r0, r3
 800122c:	f000 fe01 	bl	8001e32 <HAL_GPIO_WritePin>
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	48000400 	.word	0x48000400

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001240:	f000 fb0c 	bl	800185c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001244:	f000 f82e 	bl	80012a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001248:	f000 f918 	bl	800147c <MX_GPIO_Init>
  MX_TIM2_Init();
 800124c:	f000 f8c2 	bl	80013d4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001250:	f000 f880 	bl	8001354 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8001254:	4b10      	ldr	r3, [pc, #64]	; (8001298 <main+0x5c>)
 8001256:	0018      	movs	r0, r3
 8001258:	f002 f844 	bl	80032e4 <HAL_TIM_Base_Start_IT>
  lcd_init();
 800125c:	f7ff fd80 	bl	8000d60 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(4, 1000); // debug
 8001260:	23fa      	movs	r3, #250	; 0xfa
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	0019      	movs	r1, r3
 8001266:	2004      	movs	r0, #4
 8001268:	f000 fa74 	bl	8001754 <setTimer>
  while (1)
  {
	  fsm_auto_run();
 800126c:	f7ff f922 	bl	80004b4 <fsm_auto_run>
	  fsm_manual();
 8001270:	f7ff fb06 	bl	8000880 <fsm_manual>
	  fsm_setting();
 8001274:	f7ff fbf4 	bl	8000a60 <fsm_setting>
	if(timer_flag[4] == 1){  // debug
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <main+0x60>)
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d1f5      	bne.n	800126c <main+0x30>
		setTimer(4, 1000);
 8001280:	23fa      	movs	r3, #250	; 0xfa
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	0019      	movs	r1, r3
 8001286:	2004      	movs	r0, #4
 8001288:	f000 fa64 	bl	8001754 <setTimer>
		HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 800128c:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <main+0x64>)
 800128e:	2101      	movs	r1, #1
 8001290:	0018      	movs	r0, r3
 8001292:	f000 fdeb 	bl	8001e6c <HAL_GPIO_TogglePin>
	  fsm_auto_run();
 8001296:	e7e9      	b.n	800126c <main+0x30>
 8001298:	200000f0 	.word	0x200000f0
 800129c:	20000020 	.word	0x20000020
 80012a0:	48000400 	.word	0x48000400

080012a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b095      	sub	sp, #84	; 0x54
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	2420      	movs	r4, #32
 80012ac:	193b      	adds	r3, r7, r4
 80012ae:	0018      	movs	r0, r3
 80012b0:	2330      	movs	r3, #48	; 0x30
 80012b2:	001a      	movs	r2, r3
 80012b4:	2100      	movs	r1, #0
 80012b6:	f002 fbed 	bl	8003a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ba:	2310      	movs	r3, #16
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	0018      	movs	r0, r3
 80012c0:	2310      	movs	r3, #16
 80012c2:	001a      	movs	r2, r3
 80012c4:	2100      	movs	r1, #0
 80012c6:	f002 fbe5 	bl	8003a94 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012ca:	003b      	movs	r3, r7
 80012cc:	0018      	movs	r0, r3
 80012ce:	2310      	movs	r3, #16
 80012d0:	001a      	movs	r2, r3
 80012d2:	2100      	movs	r1, #0
 80012d4:	f002 fbde 	bl	8003a94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d8:	0021      	movs	r1, r4
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	2202      	movs	r2, #2
 80012de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	2201      	movs	r2, #1
 80012e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2210      	movs	r2, #16
 80012ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	0018      	movs	r0, r3
 80012f6:	f001 fa99 	bl	800282c <HAL_RCC_OscConfig>
 80012fa:	1e03      	subs	r3, r0, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80012fe:	f000 f963 	bl	80015c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001302:	2110      	movs	r1, #16
 8001304:	187b      	adds	r3, r7, r1
 8001306:	2207      	movs	r2, #7
 8001308:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800130a:	187b      	adds	r3, r7, r1
 800130c:	2200      	movs	r2, #0
 800130e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	187b      	adds	r3, r7, r1
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001316:	187b      	adds	r3, r7, r1
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800131c:	187b      	adds	r3, r7, r1
 800131e:	2100      	movs	r1, #0
 8001320:	0018      	movs	r0, r3
 8001322:	f001 fd9d 	bl	8002e60 <HAL_RCC_ClockConfig>
 8001326:	1e03      	subs	r3, r0, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800132a:	f000 f94d 	bl	80015c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800132e:	003b      	movs	r3, r7
 8001330:	2220      	movs	r2, #32
 8001332:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001334:	003b      	movs	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133a:	003b      	movs	r3, r7
 800133c:	0018      	movs	r0, r3
 800133e:	f001 feb3 	bl	80030a8 <HAL_RCCEx_PeriphCLKConfig>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001346:	f000 f93f 	bl	80015c8 <Error_Handler>
  }
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b015      	add	sp, #84	; 0x54
 8001350:	bd90      	pop	{r4, r7, pc}
	...

08001354 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <MX_I2C1_Init+0x74>)
 800135a:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <MX_I2C1_Init+0x78>)
 800135c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001360:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <MX_I2C1_Init+0x7c>)
 8001362:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_I2C1_Init+0x74>)
 800136c:	2201      	movs	r2, #1
 800136e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <MX_I2C1_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001382:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_I2C1_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800138e:	4b0e      	ldr	r3, [pc, #56]	; (80013c8 <MX_I2C1_Init+0x74>)
 8001390:	0018      	movs	r0, r3
 8001392:	f000 fd87 	bl	8001ea4 <HAL_I2C_Init>
 8001396:	1e03      	subs	r3, r0, #0
 8001398:	d001      	beq.n	800139e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800139a:	f000 f915 	bl	80015c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <MX_I2C1_Init+0x74>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	0018      	movs	r0, r3
 80013a4:	f001 f98c 	bl	80026c0 <HAL_I2CEx_ConfigAnalogFilter>
 80013a8:	1e03      	subs	r3, r0, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013ac:	f000 f90c 	bl	80015c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <MX_I2C1_Init+0x74>)
 80013b2:	2100      	movs	r1, #0
 80013b4:	0018      	movs	r0, r3
 80013b6:	f001 f9cf 	bl	8002758 <HAL_I2CEx_ConfigDigitalFilter>
 80013ba:	1e03      	subs	r3, r0, #0
 80013bc:	d001      	beq.n	80013c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013be:	f000 f903 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000009c 	.word	0x2000009c
 80013cc:	40005400 	.word	0x40005400
 80013d0:	2000090e 	.word	0x2000090e

080013d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	2308      	movs	r3, #8
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	0018      	movs	r0, r3
 80013e0:	2310      	movs	r3, #16
 80013e2:	001a      	movs	r2, r3
 80013e4:	2100      	movs	r1, #0
 80013e6:	f002 fb55 	bl	8003a94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ea:	003b      	movs	r3, r7
 80013ec:	0018      	movs	r0, r3
 80013ee:	2308      	movs	r3, #8
 80013f0:	001a      	movs	r2, r3
 80013f2:	2100      	movs	r1, #0
 80013f4:	f002 fb4e 	bl	8003a94 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f8:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <MX_TIM2_Init+0xa0>)
 80013fa:	2280      	movs	r2, #128	; 0x80
 80013fc:	05d2      	lsls	r2, r2, #23
 80013fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001400:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_TIM2_Init+0xa0>)
 8001402:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <MX_TIM2_Init+0xa4>)
 8001404:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <MX_TIM2_Init+0xa0>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MX_TIM2_Init+0xa0>)
 800140e:	2209      	movs	r2, #9
 8001410:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b18      	ldr	r3, [pc, #96]	; (8001474 <MX_TIM2_Init+0xa0>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b16      	ldr	r3, [pc, #88]	; (8001474 <MX_TIM2_Init+0xa0>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_TIM2_Init+0xa0>)
 8001420:	0018      	movs	r0, r3
 8001422:	f001 ff0f 	bl	8003244 <HAL_TIM_Base_Init>
 8001426:	1e03      	subs	r3, r0, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800142a:	f000 f8cd 	bl	80015c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142e:	2108      	movs	r1, #8
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	0152      	lsls	r2, r2, #5
 8001436:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001438:	187a      	adds	r2, r7, r1
 800143a:	4b0e      	ldr	r3, [pc, #56]	; (8001474 <MX_TIM2_Init+0xa0>)
 800143c:	0011      	movs	r1, r2
 800143e:	0018      	movs	r0, r3
 8001440:	f002 f88a 	bl	8003558 <HAL_TIM_ConfigClockSource>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d001      	beq.n	800144c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001448:	f000 f8be 	bl	80015c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144c:	003b      	movs	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	003b      	movs	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001458:	003a      	movs	r2, r7
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <MX_TIM2_Init+0xa0>)
 800145c:	0011      	movs	r1, r2
 800145e:	0018      	movs	r0, r3
 8001460:	f002 fa8c 	bl	800397c <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	1e03      	subs	r3, r0, #0
 8001466:	d001      	beq.n	800146c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001468:	f000 f8ae 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b006      	add	sp, #24
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200000f0 	.word	0x200000f0
 8001478:	00001f3f 	.word	0x00001f3f

0800147c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	240c      	movs	r4, #12
 8001484:	193b      	adds	r3, r7, r4
 8001486:	0018      	movs	r0, r3
 8001488:	2314      	movs	r3, #20
 800148a:	001a      	movs	r2, r3
 800148c:	2100      	movs	r1, #0
 800148e:	f002 fb01 	bl	8003a94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001492:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <MX_GPIO_Init+0x13c>)
 8001494:	695a      	ldr	r2, [r3, #20]
 8001496:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <MX_GPIO_Init+0x13c>)
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	03c9      	lsls	r1, r1, #15
 800149c:	430a      	orrs	r2, r1
 800149e:	615a      	str	r2, [r3, #20]
 80014a0:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <MX_GPIO_Init+0x13c>)
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	03db      	lsls	r3, r3, #15
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <MX_GPIO_Init+0x13c>)
 80014b0:	695a      	ldr	r2, [r3, #20]
 80014b2:	4b41      	ldr	r3, [pc, #260]	; (80015b8 <MX_GPIO_Init+0x13c>)
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	0289      	lsls	r1, r1, #10
 80014b8:	430a      	orrs	r2, r1
 80014ba:	615a      	str	r2, [r3, #20]
 80014bc:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <MX_GPIO_Init+0x13c>)
 80014be:	695a      	ldr	r2, [r3, #20]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	029b      	lsls	r3, r3, #10
 80014c4:	4013      	ands	r3, r2
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b3b      	ldr	r3, [pc, #236]	; (80015b8 <MX_GPIO_Init+0x13c>)
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <MX_GPIO_Init+0x13c>)
 80014d0:	2180      	movs	r1, #128	; 0x80
 80014d2:	02c9      	lsls	r1, r1, #11
 80014d4:	430a      	orrs	r2, r1
 80014d6:	615a      	str	r2, [r3, #20]
 80014d8:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <MX_GPIO_Init+0x13c>)
 80014da:	695a      	ldr	r2, [r3, #20]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	02db      	lsls	r3, r3, #11
 80014e0:	4013      	ands	r3, r2
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, A_Pin|EN1_Pin, GPIO_PIN_RESET);
 80014e6:	4b35      	ldr	r3, [pc, #212]	; (80015bc <MX_GPIO_Init+0x140>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	2103      	movs	r1, #3
 80014ec:	0018      	movs	r0, r3
 80014ee:	f000 fca0 	bl	8001e32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|R1_Pin|Y0_Pin|G0_Pin
 80014f2:	4933      	ldr	r1, [pc, #204]	; (80015c0 <MX_GPIO_Init+0x144>)
 80014f4:	2390      	movs	r3, #144	; 0x90
 80014f6:	05db      	lsls	r3, r3, #23
 80014f8:	2200      	movs	r2, #0
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 fc99 	bl	8001e32 <HAL_GPIO_WritePin>
                          |EN3_Pin|R0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DEBUG_Pin|D_Pin|EN2_Pin|G1_Pin
 8001500:	4b30      	ldr	r3, [pc, #192]	; (80015c4 <MX_GPIO_Init+0x148>)
 8001502:	2200      	movs	r2, #0
 8001504:	21fb      	movs	r1, #251	; 0xfb
 8001506:	0018      	movs	r0, r3
 8001508:	f000 fc93 	bl	8001e32 <HAL_GPIO_WritePin>
                          |Y1_Pin|C_Pin|B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A_Pin EN1_Pin */
  GPIO_InitStruct.Pin = A_Pin|EN1_Pin;
 800150c:	193b      	adds	r3, r7, r4
 800150e:	2203      	movs	r2, #3
 8001510:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	193b      	adds	r3, r7, r4
 8001514:	2201      	movs	r2, #1
 8001516:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	193b      	adds	r3, r7, r4
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	193b      	adds	r3, r7, r4
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001524:	193b      	adds	r3, r7, r4
 8001526:	4a25      	ldr	r2, [pc, #148]	; (80015bc <MX_GPIO_Init+0x140>)
 8001528:	0019      	movs	r1, r3
 800152a:	0010      	movs	r0, r2
 800152c:	f000 fafc 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin R1_Pin Y0_Pin G0_Pin
                           EN3_Pin R0_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|R1_Pin|Y0_Pin|G0_Pin
 8001530:	193b      	adds	r3, r7, r4
 8001532:	4a23      	ldr	r2, [pc, #140]	; (80015c0 <MX_GPIO_Init+0x144>)
 8001534:	601a      	str	r2, [r3, #0]
                          |EN3_Pin|R0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	193b      	adds	r3, r7, r4
 8001538:	2201      	movs	r2, #1
 800153a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	193b      	adds	r3, r7, r4
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	193b      	adds	r3, r7, r4
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	193a      	adds	r2, r7, r4
 800154a:	2390      	movs	r3, #144	; 0x90
 800154c:	05db      	lsls	r3, r3, #23
 800154e:	0011      	movs	r1, r2
 8001550:	0018      	movs	r0, r3
 8001552:	f000 fae9 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001556:	193b      	adds	r3, r7, r4
 8001558:	228a      	movs	r2, #138	; 0x8a
 800155a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	193b      	adds	r3, r7, r4
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	193b      	adds	r3, r7, r4
 8001564:	2201      	movs	r2, #1
 8001566:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	193a      	adds	r2, r7, r4
 800156a:	2390      	movs	r3, #144	; 0x90
 800156c:	05db      	lsls	r3, r3, #23
 800156e:	0011      	movs	r1, r2
 8001570:	0018      	movs	r0, r3
 8001572:	f000 fad9 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_DEBUG_Pin D_Pin EN2_Pin G1_Pin
                           Y1_Pin C_Pin B_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|D_Pin|EN2_Pin|G1_Pin
 8001576:	0021      	movs	r1, r4
 8001578:	187b      	adds	r3, r7, r1
 800157a:	22fb      	movs	r2, #251	; 0xfb
 800157c:	601a      	str	r2, [r3, #0]
                          |Y1_Pin|C_Pin|B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2201      	movs	r2, #1
 8001582:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	187b      	adds	r3, r7, r1
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <MX_GPIO_Init+0x148>)
 8001594:	0019      	movs	r1, r3
 8001596:	0010      	movs	r0, r2
 8001598:	f000 fac6 	bl	8001b28 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB6);
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	025b      	lsls	r3, r3, #9
 80015a0:	0018      	movs	r0, r3
 80015a2:	f001 f925 	bl	80027f0 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB7);
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	029b      	lsls	r3, r3, #10
 80015aa:	0018      	movs	r0, r3
 80015ac:	f001 f920 	bl	80027f0 <HAL_I2CEx_EnableFastModePlus>

}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b009      	add	sp, #36	; 0x24
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	48001400 	.word	0x48001400
 80015c0:	00001915 	.word	0x00001915
 80015c4:	48000400 	.word	0x48000400

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <Error_Handler+0x8>
	...

080015d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_MspInit+0x44>)
 80015dc:	699a      	ldr	r2, [r3, #24]
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_MspInit+0x44>)
 80015e0:	2101      	movs	r1, #1
 80015e2:	430a      	orrs	r2, r1
 80015e4:	619a      	str	r2, [r3, #24]
 80015e6:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <HAL_MspInit+0x44>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2201      	movs	r2, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_MspInit+0x44>)
 80015f4:	69da      	ldr	r2, [r3, #28]
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_MspInit+0x44>)
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	0549      	lsls	r1, r1, #21
 80015fc:	430a      	orrs	r2, r1
 80015fe:	61da      	str	r2, [r3, #28]
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_MspInit+0x44>)
 8001602:	69da      	ldr	r2, [r3, #28]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	055b      	lsls	r3, r3, #21
 8001608:	4013      	ands	r3, r2
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	40021000 	.word	0x40021000

0800161c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b08b      	sub	sp, #44	; 0x2c
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001624:	2414      	movs	r4, #20
 8001626:	193b      	adds	r3, r7, r4
 8001628:	0018      	movs	r0, r3
 800162a:	2314      	movs	r3, #20
 800162c:	001a      	movs	r2, r3
 800162e:	2100      	movs	r1, #0
 8001630:	f002 fa30 	bl	8003a94 <memset>
  if(hi2c->Instance==I2C1)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a1d      	ldr	r2, [pc, #116]	; (80016b0 <HAL_I2C_MspInit+0x94>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d133      	bne.n	80016a6 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163e:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_I2C_MspInit+0x98>)
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_I2C_MspInit+0x98>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0289      	lsls	r1, r1, #10
 8001648:	430a      	orrs	r2, r1
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_I2C_MspInit+0x98>)
 800164e:	695a      	ldr	r2, [r3, #20]
 8001650:	2380      	movs	r3, #128	; 0x80
 8001652:	029b      	lsls	r3, r3, #10
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800165a:	193b      	adds	r3, r7, r4
 800165c:	22c0      	movs	r2, #192	; 0xc0
 800165e:	00d2      	lsls	r2, r2, #3
 8001660:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001662:	0021      	movs	r1, r4
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2212      	movs	r2, #18
 8001668:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	187b      	adds	r3, r7, r1
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001670:	187b      	adds	r3, r7, r1
 8001672:	2203      	movs	r2, #3
 8001674:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2204      	movs	r2, #4
 800167a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	187a      	adds	r2, r7, r1
 800167e:	2390      	movs	r3, #144	; 0x90
 8001680:	05db      	lsls	r3, r3, #23
 8001682:	0011      	movs	r1, r2
 8001684:	0018      	movs	r0, r3
 8001686:	f000 fa4f 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_I2C_MspInit+0x98>)
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_I2C_MspInit+0x98>)
 8001690:	2180      	movs	r1, #128	; 0x80
 8001692:	0389      	lsls	r1, r1, #14
 8001694:	430a      	orrs	r2, r1
 8001696:	61da      	str	r2, [r3, #28]
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_I2C_MspInit+0x98>)
 800169a:	69da      	ldr	r2, [r3, #28]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	039b      	lsls	r3, r3, #14
 80016a0:	4013      	ands	r3, r2
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	46bd      	mov	sp, r7
 80016aa:	b00b      	add	sp, #44	; 0x2c
 80016ac:	bd90      	pop	{r4, r7, pc}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	40005400 	.word	0x40005400
 80016b4:	40021000 	.word	0x40021000

080016b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	05db      	lsls	r3, r3, #23
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d113      	bne.n	80016f4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_TIM_Base_MspInit+0x44>)
 80016ce:	69da      	ldr	r2, [r3, #28]
 80016d0:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_TIM_Base_MspInit+0x44>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	430a      	orrs	r2, r1
 80016d6:	61da      	str	r2, [r3, #28]
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_TIM_Base_MspInit+0x44>)
 80016da:	69db      	ldr	r3, [r3, #28]
 80016dc:	2201      	movs	r2, #1
 80016de:	4013      	ands	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2100      	movs	r1, #0
 80016e8:	200f      	movs	r0, #15
 80016ea:	f000 f9eb 	bl	8001ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f000 f9fd 	bl	8001aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b004      	add	sp, #16
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000

08001700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001704:	e7fe      	b.n	8001704 <NMI_Handler+0x4>

08001706 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170a:	e7fe      	b.n	800170a <HardFault_Handler+0x4>

0800170c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001710:	46c0      	nop			; (mov r8, r8)
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001724:	f000 f8e2 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <TIM2_IRQHandler+0x14>)
 8001736:	0018      	movs	r0, r3
 8001738:	f001 fe20 	bl	800337c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	200000f0 	.word	0x200000f0

08001748 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800174c:	46c0      	nop			; (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <setTimer>:
#include "timer.h"

int counter[5] = {0, 0, 0, 0, 0};
int timer_flag[5] = {0, 0, 0, 1, 0};// FLAG[3] = 1 TO CHECK BUTTON PRESS( GO TO FUNCTION getKeyinput())

void setTimer(int timer, int duration){
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
	counter[timer] = duration / 10;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	210a      	movs	r1, #10
 8001762:	0018      	movs	r0, r3
 8001764:	f7fe fd5a 	bl	800021c <__divsi3>
 8001768:	0003      	movs	r3, r0
 800176a:	0019      	movs	r1, r3
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <setTimer+0x34>)
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	0092      	lsls	r2, r2, #2
 8001772:	50d1      	str	r1, [r2, r3]
	timer_flag[timer] = 0;
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <setTimer+0x38>)
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	2100      	movs	r1, #0
 800177c:	50d1      	str	r1, [r2, r3]
}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	46bd      	mov	sp, r7
 8001782:	b002      	add	sp, #8
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	20000088 	.word	0x20000088
 800178c:	20000020 	.word	0x20000020

08001790 <timer_run>:
void timer_run(){
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++){ // 5 timer
 8001796:	2300      	movs	r3, #0
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	e01c      	b.n	80017d6 <timer_run+0x46>
		if(counter[i] > 0){
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <timer_run+0x58>)
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	58d3      	ldr	r3, [r2, r3]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	dd13      	ble.n	80017d0 <timer_run+0x40>
			counter[i]--;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <timer_run+0x58>)
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	58d3      	ldr	r3, [r2, r3]
 80017b0:	1e59      	subs	r1, r3, #1
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <timer_run+0x58>)
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	50d1      	str	r1, [r2, r3]
			if(counter[i] <= 0)
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <timer_run+0x58>)
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	0092      	lsls	r2, r2, #2
 80017c0:	58d3      	ldr	r3, [r2, r3]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	dc04      	bgt.n	80017d0 <timer_run+0x40>
				timer_flag[i] = 1;
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <timer_run+0x5c>)
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	2101      	movs	r1, #1
 80017ce:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++){ // 5 timer
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3301      	adds	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b04      	cmp	r3, #4
 80017da:	dddf      	ble.n	800179c <timer_run+0xc>
		}
	}
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	20000088 	.word	0x20000088
 80017ec:	20000020 	.word	0x20000020

080017f0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){ // 10ms each time run
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	getKeyinput();
 80017f8:	f7fe fdfc 	bl	80003f4 <getKeyinput>
	timer_run();
 80017fc:	f7ff ffc8 	bl	8001790 <timer_run>
}
 8001800:	46c0      	nop			; (mov r8, r8)
 8001802:	46bd      	mov	sp, r7
 8001804:	b002      	add	sp, #8
 8001806:	bd80      	pop	{r7, pc}

08001808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800180a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800180c:	f7ff ff9c 	bl	8001748 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <LoopForever+0x6>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	; (8001848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <LoopForever+0xe>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	; (8001854 <LoopForever+0x16>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001836:	f002 f909 	bl	8003a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183a:	f7ff fcff 	bl	800123c <main>

0800183e <LoopForever>:

LoopForever:
    b LoopForever
 800183e:	e7fe      	b.n	800183e <LoopForever>
  ldr   r0, =_estack
 8001840:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 800184c:	08003bb4 	.word	0x08003bb4
  ldr r2, =_sbss
 8001850:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001854:	2000013c 	.word	0x2000013c

08001858 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_IRQHandler>
	...

0800185c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <HAL_Init+0x24>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <HAL_Init+0x24>)
 8001866:	2110      	movs	r1, #16
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800186c:	2000      	movs	r0, #0
 800186e:	f000 f809 	bl	8001884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001872:	f7ff feaf 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	0018      	movs	r0, r3
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	40022000 	.word	0x40022000

08001884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_InitTick+0x5c>)
 800188e:	681c      	ldr	r4, [r3, #0]
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <HAL_InitTick+0x60>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	0019      	movs	r1, r3
 8001896:	23fa      	movs	r3, #250	; 0xfa
 8001898:	0098      	lsls	r0, r3, #2
 800189a:	f7fe fc35 	bl	8000108 <__udivsi3>
 800189e:	0003      	movs	r3, r0
 80018a0:	0019      	movs	r1, r3
 80018a2:	0020      	movs	r0, r4
 80018a4:	f7fe fc30 	bl	8000108 <__udivsi3>
 80018a8:	0003      	movs	r3, r0
 80018aa:	0018      	movs	r0, r3
 80018ac:	f000 f92f 	bl	8001b0e <HAL_SYSTICK_Config>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e00f      	b.n	80018d8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b03      	cmp	r3, #3
 80018bc:	d80b      	bhi.n	80018d6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	2301      	movs	r3, #1
 80018c2:	425b      	negs	r3, r3
 80018c4:	2200      	movs	r2, #0
 80018c6:	0018      	movs	r0, r3
 80018c8:	f000 f8fc 	bl	8001ac4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_InitTick+0x64>)
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b003      	add	sp, #12
 80018de:	bd90      	pop	{r4, r7, pc}
 80018e0:	2000001c 	.word	0x2000001c
 80018e4:	20000038 	.word	0x20000038
 80018e8:	20000034 	.word	0x20000034

080018ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_IncTick+0x1c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	001a      	movs	r2, r3
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <HAL_IncTick+0x20>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	18d2      	adds	r2, r2, r3
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_IncTick+0x20>)
 80018fe:	601a      	str	r2, [r3, #0]
}
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	20000038 	.word	0x20000038
 800190c:	20000138 	.word	0x20000138

08001910 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b02      	ldr	r3, [pc, #8]	; (8001920 <HAL_GetTick+0x10>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	20000138 	.word	0x20000138

08001924 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800192c:	f7ff fff0 	bl	8001910 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	3301      	adds	r3, #1
 800193c:	d005      	beq.n	800194a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <HAL_Delay+0x44>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	001a      	movs	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	189b      	adds	r3, r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	f7ff ffe0 	bl	8001910 <HAL_GetTick>
 8001950:	0002      	movs	r2, r0
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	429a      	cmp	r2, r3
 800195a:	d8f7      	bhi.n	800194c <HAL_Delay+0x28>
  {
  }
}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	b004      	add	sp, #16
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	20000038 	.word	0x20000038

0800196c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	0002      	movs	r2, r0
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001978:	1dfb      	adds	r3, r7, #7
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b7f      	cmp	r3, #127	; 0x7f
 800197e:	d809      	bhi.n	8001994 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001980:	1dfb      	adds	r3, r7, #7
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	001a      	movs	r2, r3
 8001986:	231f      	movs	r3, #31
 8001988:	401a      	ands	r2, r3
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_EnableIRQ+0x30>)
 800198c:	2101      	movs	r1, #1
 800198e:	4091      	lsls	r1, r2
 8001990:	000a      	movs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
  }
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b002      	add	sp, #8
 800199a:	bd80      	pop	{r7, pc}
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b590      	push	{r4, r7, lr}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	0002      	movs	r2, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	1dfb      	adds	r3, r7, #7
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b7f      	cmp	r3, #127	; 0x7f
 80019b4:	d828      	bhi.n	8001a08 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b6:	4a2f      	ldr	r2, [pc, #188]	; (8001a74 <__NVIC_SetPriority+0xd4>)
 80019b8:	1dfb      	adds	r3, r7, #7
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	089b      	lsrs	r3, r3, #2
 80019c0:	33c0      	adds	r3, #192	; 0xc0
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	589b      	ldr	r3, [r3, r2]
 80019c6:	1dfa      	adds	r2, r7, #7
 80019c8:	7812      	ldrb	r2, [r2, #0]
 80019ca:	0011      	movs	r1, r2
 80019cc:	2203      	movs	r2, #3
 80019ce:	400a      	ands	r2, r1
 80019d0:	00d2      	lsls	r2, r2, #3
 80019d2:	21ff      	movs	r1, #255	; 0xff
 80019d4:	4091      	lsls	r1, r2
 80019d6:	000a      	movs	r2, r1
 80019d8:	43d2      	mvns	r2, r2
 80019da:	401a      	ands	r2, r3
 80019dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	22ff      	movs	r2, #255	; 0xff
 80019e4:	401a      	ands	r2, r3
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	0018      	movs	r0, r3
 80019ec:	2303      	movs	r3, #3
 80019ee:	4003      	ands	r3, r0
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f4:	481f      	ldr	r0, [pc, #124]	; (8001a74 <__NVIC_SetPriority+0xd4>)
 80019f6:	1dfb      	adds	r3, r7, #7
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	430a      	orrs	r2, r1
 8001a00:	33c0      	adds	r3, #192	; 0xc0
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a06:	e031      	b.n	8001a6c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a08:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <__NVIC_SetPriority+0xd8>)
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	0019      	movs	r1, r3
 8001a10:	230f      	movs	r3, #15
 8001a12:	400b      	ands	r3, r1
 8001a14:	3b08      	subs	r3, #8
 8001a16:	089b      	lsrs	r3, r3, #2
 8001a18:	3306      	adds	r3, #6
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	18d3      	adds	r3, r2, r3
 8001a1e:	3304      	adds	r3, #4
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	1dfa      	adds	r2, r7, #7
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	0011      	movs	r1, r2
 8001a28:	2203      	movs	r2, #3
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	00d2      	lsls	r2, r2, #3
 8001a2e:	21ff      	movs	r1, #255	; 0xff
 8001a30:	4091      	lsls	r1, r2
 8001a32:	000a      	movs	r2, r1
 8001a34:	43d2      	mvns	r2, r2
 8001a36:	401a      	ands	r2, r3
 8001a38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	019b      	lsls	r3, r3, #6
 8001a3e:	22ff      	movs	r2, #255	; 0xff
 8001a40:	401a      	ands	r2, r3
 8001a42:	1dfb      	adds	r3, r7, #7
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	0018      	movs	r0, r3
 8001a48:	2303      	movs	r3, #3
 8001a4a:	4003      	ands	r3, r0
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a50:	4809      	ldr	r0, [pc, #36]	; (8001a78 <__NVIC_SetPriority+0xd8>)
 8001a52:	1dfb      	adds	r3, r7, #7
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	001c      	movs	r4, r3
 8001a58:	230f      	movs	r3, #15
 8001a5a:	4023      	ands	r3, r4
 8001a5c:	3b08      	subs	r3, #8
 8001a5e:	089b      	lsrs	r3, r3, #2
 8001a60:	430a      	orrs	r2, r1
 8001a62:	3306      	adds	r3, #6
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	18c3      	adds	r3, r0, r3
 8001a68:	3304      	adds	r3, #4
 8001a6a:	601a      	str	r2, [r3, #0]
}
 8001a6c:	46c0      	nop			; (mov r8, r8)
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b003      	add	sp, #12
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	1e5a      	subs	r2, r3, #1
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	045b      	lsls	r3, r3, #17
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d301      	bcc.n	8001a94 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a90:	2301      	movs	r3, #1
 8001a92:	e010      	b.n	8001ab6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a94:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <SysTick_Config+0x44>)
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	3a01      	subs	r2, #1
 8001a9a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	425b      	negs	r3, r3
 8001aa0:	2103      	movs	r1, #3
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f7ff ff7c 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <SysTick_Config+0x44>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <SysTick_Config+0x44>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b002      	add	sp, #8
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	210f      	movs	r1, #15
 8001ad0:	187b      	adds	r3, r7, r1
 8001ad2:	1c02      	adds	r2, r0, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b25b      	sxtb	r3, r3
 8001ade:	0011      	movs	r1, r2
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b004      	add	sp, #16
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	0002      	movs	r2, r0
 8001af6:	1dfb      	adds	r3, r7, #7
 8001af8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001afa:	1dfb      	adds	r3, r7, #7
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b25b      	sxtb	r3, r3
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7ff ff33 	bl	800196c <__NVIC_EnableIRQ>
}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b002      	add	sp, #8
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7ff ffaf 	bl	8001a7c <SysTick_Config>
 8001b1e:	0003      	movs	r3, r0
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b36:	e149      	b.n	8001dcc <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4091      	lsls	r1, r2
 8001b42:	000a      	movs	r2, r1
 8001b44:	4013      	ands	r3, r2
 8001b46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d100      	bne.n	8001b50 <HAL_GPIO_Init+0x28>
 8001b4e:	e13a      	b.n	8001dc6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2203      	movs	r2, #3
 8001b56:	4013      	ands	r3, r2
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d005      	beq.n	8001b68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2203      	movs	r2, #3
 8001b62:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d130      	bne.n	8001bca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	409a      	lsls	r2, r3
 8001b76:	0013      	movs	r3, r2
 8001b78:	43da      	mvns	r2, r3
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	0013      	movs	r3, r2
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	0013      	movs	r3, r2
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	0013      	movs	r3, r2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2203      	movs	r2, #3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d017      	beq.n	8001c06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	2203      	movs	r2, #3
 8001be2:	409a      	lsls	r2, r3
 8001be4:	0013      	movs	r3, r2
 8001be6:	43da      	mvns	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d123      	bne.n	8001c5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	08da      	lsrs	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3208      	adds	r2, #8
 8001c1a:	0092      	lsls	r2, r2, #2
 8001c1c:	58d3      	ldr	r3, [r2, r3]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2207      	movs	r2, #7
 8001c24:	4013      	ands	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	220f      	movs	r2, #15
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	691a      	ldr	r2, [r3, #16]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2107      	movs	r1, #7
 8001c3e:	400b      	ands	r3, r1
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	409a      	lsls	r2, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	08da      	lsrs	r2, r3, #3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3208      	adds	r2, #8
 8001c54:	0092      	lsls	r2, r2, #2
 8001c56:	6939      	ldr	r1, [r7, #16]
 8001c58:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	2203      	movs	r2, #3
 8001c66:	409a      	lsls	r2, r3
 8001c68:	0013      	movs	r3, r2
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2203      	movs	r2, #3
 8001c78:	401a      	ands	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	23c0      	movs	r3, #192	; 0xc0
 8001c94:	029b      	lsls	r3, r3, #10
 8001c96:	4013      	ands	r3, r2
 8001c98:	d100      	bne.n	8001c9c <HAL_GPIO_Init+0x174>
 8001c9a:	e094      	b.n	8001dc6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9c:	4b51      	ldr	r3, [pc, #324]	; (8001de4 <HAL_GPIO_Init+0x2bc>)
 8001c9e:	699a      	ldr	r2, [r3, #24]
 8001ca0:	4b50      	ldr	r3, [pc, #320]	; (8001de4 <HAL_GPIO_Init+0x2bc>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	619a      	str	r2, [r3, #24]
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <HAL_GPIO_Init+0x2bc>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cb4:	4a4c      	ldr	r2, [pc, #304]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	589b      	ldr	r3, [r3, r2]
 8001cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	0013      	movs	r3, r2
 8001cd0:	43da      	mvns	r2, r3
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	2390      	movs	r3, #144	; 0x90
 8001cdc:	05db      	lsls	r3, r3, #23
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x1d6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a41      	ldr	r2, [pc, #260]	; (8001dec <HAL_GPIO_Init+0x2c4>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x1d2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a40      	ldr	r2, [pc, #256]	; (8001df0 <HAL_GPIO_Init+0x2c8>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x1ce>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e004      	b.n	8001d00 <HAL_GPIO_Init+0x1d8>
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	e002      	b.n	8001d00 <HAL_GPIO_Init+0x1d8>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e000      	b.n	8001d00 <HAL_GPIO_Init+0x1d8>
 8001cfe:	2300      	movs	r3, #0
 8001d00:	697a      	ldr	r2, [r7, #20]
 8001d02:	2103      	movs	r1, #3
 8001d04:	400a      	ands	r2, r1
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	4093      	lsls	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d10:	4935      	ldr	r1, [pc, #212]	; (8001de8 <HAL_GPIO_Init+0x2c0>)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d1e:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_GPIO_Init+0x2cc>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	43da      	mvns	r2, r3
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	035b      	lsls	r3, r3, #13
 8001d36:	4013      	ands	r3, r2
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d42:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <HAL_GPIO_Init+0x2cc>)
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d48:	4b2a      	ldr	r3, [pc, #168]	; (8001df4 <HAL_GPIO_Init+0x2cc>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	43da      	mvns	r2, r3
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	4013      	ands	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	039b      	lsls	r3, r3, #14
 8001d60:	4013      	ands	r3, r2
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d6c:	4b21      	ldr	r3, [pc, #132]	; (8001df4 <HAL_GPIO_Init+0x2cc>)
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_GPIO_Init+0x2cc>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	029b      	lsls	r3, r3, #10
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d96:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_GPIO_Init+0x2cc>)
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001d9c:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_GPIO_Init+0x2cc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43da      	mvns	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	025b      	lsls	r3, r3, #9
 8001db4:	4013      	ands	r3, r2
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_GPIO_Init+0x2cc>)
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	40da      	lsrs	r2, r3
 8001dd4:	1e13      	subs	r3, r2, #0
 8001dd6:	d000      	beq.n	8001dda <HAL_GPIO_Init+0x2b2>
 8001dd8:	e6ae      	b.n	8001b38 <HAL_GPIO_Init+0x10>
  } 
}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b006      	add	sp, #24
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010000 	.word	0x40010000
 8001dec:	48000400 	.word	0x48000400
 8001df0:	48000800 	.word	0x48000800
 8001df4:	40010400 	.word	0x40010400

08001df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	000a      	movs	r2, r1
 8001e02:	1cbb      	adds	r3, r7, #2
 8001e04:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	1cba      	adds	r2, r7, #2
 8001e0c:	8812      	ldrh	r2, [r2, #0]
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d004      	beq.n	8001e1c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001e12:	230f      	movs	r3, #15
 8001e14:	18fb      	adds	r3, r7, r3
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	e003      	b.n	8001e24 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001e24:	230f      	movs	r3, #15
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	781b      	ldrb	r3, [r3, #0]
  }
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b004      	add	sp, #16
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	0008      	movs	r0, r1
 8001e3c:	0011      	movs	r1, r2
 8001e3e:	1cbb      	adds	r3, r7, #2
 8001e40:	1c02      	adds	r2, r0, #0
 8001e42:	801a      	strh	r2, [r3, #0]
 8001e44:	1c7b      	adds	r3, r7, #1
 8001e46:	1c0a      	adds	r2, r1, #0
 8001e48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e4a:	1c7b      	adds	r3, r7, #1
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e52:	1cbb      	adds	r3, r7, #2
 8001e54:	881a      	ldrh	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e5a:	e003      	b.n	8001e64 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e5c:	1cbb      	adds	r3, r7, #2
 8001e5e:	881a      	ldrh	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e64:	46c0      	nop			; (mov r8, r8)
 8001e66:	46bd      	mov	sp, r7
 8001e68:	b002      	add	sp, #8
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	000a      	movs	r2, r1
 8001e76:	1cbb      	adds	r3, r7, #2
 8001e78:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e80:	1cbb      	adds	r3, r7, #2
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4013      	ands	r3, r2
 8001e88:	041a      	lsls	r2, r3, #16
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	1cb9      	adds	r1, r7, #2
 8001e90:	8809      	ldrh	r1, [r1, #0]
 8001e92:	400b      	ands	r3, r1
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b004      	add	sp, #16
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e08f      	b.n	8001fd6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2241      	movs	r2, #65	; 0x41
 8001eba:	5c9b      	ldrb	r3, [r3, r2]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d107      	bne.n	8001ed2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2240      	movs	r2, #64	; 0x40
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7ff fba5 	bl	800161c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2241      	movs	r2, #65	; 0x41
 8001ed6:	2124      	movs	r1, #36	; 0x24
 8001ed8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	438a      	bics	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	493b      	ldr	r1, [pc, #236]	; (8001fe0 <HAL_I2C_Init+0x13c>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4938      	ldr	r1, [pc, #224]	; (8001fe4 <HAL_I2C_Init+0x140>)
 8001f04:	400a      	ands	r2, r1
 8001f06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d108      	bne.n	8001f22 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	0209      	lsls	r1, r1, #8
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	e007      	b.n	8001f32 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2184      	movs	r1, #132	; 0x84
 8001f2c:	0209      	lsls	r1, r1, #8
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d109      	bne.n	8001f4e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	0109      	lsls	r1, r1, #4
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	605a      	str	r2, [r3, #4]
 8001f4c:	e007      	b.n	8001f5e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4923      	ldr	r1, [pc, #140]	; (8001fe8 <HAL_I2C_Init+0x144>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4920      	ldr	r1, [pc, #128]	; (8001fec <HAL_I2C_Init+0x148>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	491a      	ldr	r1, [pc, #104]	; (8001fe4 <HAL_I2C_Init+0x140>)
 8001f7a:	400a      	ands	r2, r1
 8001f7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691a      	ldr	r2, [r3, #16]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69d9      	ldr	r1, [r3, #28]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1a      	ldr	r2, [r3, #32]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2241      	movs	r2, #65	; 0x41
 8001fc2:	2120      	movs	r1, #32
 8001fc4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2242      	movs	r2, #66	; 0x42
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	f0ffffff 	.word	0xf0ffffff
 8001fe4:	ffff7fff 	.word	0xffff7fff
 8001fe8:	fffff7ff 	.word	0xfffff7ff
 8001fec:	02008000 	.word	0x02008000

08001ff0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b089      	sub	sp, #36	; 0x24
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	0008      	movs	r0, r1
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	230a      	movs	r3, #10
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	1c02      	adds	r2, r0, #0
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	2308      	movs	r3, #8
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	1c0a      	adds	r2, r1, #0
 800200c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2241      	movs	r2, #65	; 0x41
 8002012:	5c9b      	ldrb	r3, [r3, r2]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b20      	cmp	r3, #32
 8002018:	d000      	beq.n	800201c <HAL_I2C_Master_Transmit+0x2c>
 800201a:	e10a      	b.n	8002232 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2240      	movs	r2, #64	; 0x40
 8002020:	5c9b      	ldrb	r3, [r3, r2]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_I2C_Master_Transmit+0x3a>
 8002026:	2302      	movs	r3, #2
 8002028:	e104      	b.n	8002234 <HAL_I2C_Master_Transmit+0x244>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2240      	movs	r2, #64	; 0x40
 800202e:	2101      	movs	r1, #1
 8002030:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002032:	f7ff fc6d 	bl	8001910 <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	0219      	lsls	r1, r3, #8
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2319      	movs	r3, #25
 8002046:	2201      	movs	r2, #1
 8002048:	f000 f91e 	bl	8002288 <I2C_WaitOnFlagUntilTimeout>
 800204c:	1e03      	subs	r3, r0, #0
 800204e:	d001      	beq.n	8002054 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0ef      	b.n	8002234 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2241      	movs	r2, #65	; 0x41
 8002058:	2121      	movs	r1, #33	; 0x21
 800205a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2242      	movs	r2, #66	; 0x42
 8002060:	2110      	movs	r1, #16
 8002062:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2208      	movs	r2, #8
 8002074:	18ba      	adds	r2, r7, r2
 8002076:	8812      	ldrh	r2, [r2, #0]
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002084:	b29b      	uxth	r3, r3
 8002086:	2bff      	cmp	r3, #255	; 0xff
 8002088:	d906      	bls.n	8002098 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	22ff      	movs	r2, #255	; 0xff
 800208e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	045b      	lsls	r3, r3, #17
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e007      	b.n	80020a8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29a      	uxth	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80020a2:	2380      	movs	r3, #128	; 0x80
 80020a4:	049b      	lsls	r3, r3, #18
 80020a6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d027      	beq.n	8002100 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b4:	781a      	ldrb	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	3301      	adds	r3, #1
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	697c      	ldr	r4, [r7, #20]
 80020ec:	230a      	movs	r3, #10
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	8819      	ldrh	r1, [r3, #0]
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	4b51      	ldr	r3, [pc, #324]	; (800223c <HAL_I2C_Master_Transmit+0x24c>)
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	0023      	movs	r3, r4
 80020fa:	f000 faa7 	bl	800264c <I2C_TransferConfig>
 80020fe:	e06f      	b.n	80021e0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002104:	b2da      	uxtb	r2, r3
 8002106:	697c      	ldr	r4, [r7, #20]
 8002108:	230a      	movs	r3, #10
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	8819      	ldrh	r1, [r3, #0]
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	4b4a      	ldr	r3, [pc, #296]	; (800223c <HAL_I2C_Master_Transmit+0x24c>)
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	0023      	movs	r3, r4
 8002116:	f000 fa99 	bl	800264c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800211a:	e061      	b.n	80021e0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	0018      	movs	r0, r3
 8002124:	f000 f908 	bl	8002338 <I2C_WaitOnTXISFlagUntilTimeout>
 8002128:	1e03      	subs	r3, r0, #0
 800212a:	d001      	beq.n	8002130 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e081      	b.n	8002234 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214a:	b29b      	uxth	r3, r3
 800214c:	3b01      	subs	r3, #1
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d03a      	beq.n	80021e0 <HAL_I2C_Master_Transmit+0x1f0>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	2b00      	cmp	r3, #0
 8002170:	d136      	bne.n	80021e0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002172:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	0013      	movs	r3, r2
 800217c:	2200      	movs	r2, #0
 800217e:	2180      	movs	r1, #128	; 0x80
 8002180:	f000 f882 	bl	8002288 <I2C_WaitOnFlagUntilTimeout>
 8002184:	1e03      	subs	r3, r0, #0
 8002186:	d001      	beq.n	800218c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e053      	b.n	8002234 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	2bff      	cmp	r3, #255	; 0xff
 8002194:	d911      	bls.n	80021ba <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	22ff      	movs	r2, #255	; 0xff
 800219a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	045c      	lsls	r4, r3, #17
 80021a6:	230a      	movs	r3, #10
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	8819      	ldrh	r1, [r3, #0]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	2300      	movs	r3, #0
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	0023      	movs	r3, r4
 80021b4:	f000 fa4a 	bl	800264c <I2C_TransferConfig>
 80021b8:	e012      	b.n	80021e0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	049c      	lsls	r4, r3, #18
 80021ce:	230a      	movs	r3, #10
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	8819      	ldrh	r1, [r3, #0]
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	2300      	movs	r3, #0
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	0023      	movs	r3, r4
 80021dc:	f000 fa36 	bl	800264c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d198      	bne.n	800211c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f000 f8e7 	bl	80023c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021f6:	1e03      	subs	r3, r0, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e01a      	b.n	8002234 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2220      	movs	r2, #32
 8002204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	490b      	ldr	r1, [pc, #44]	; (8002240 <HAL_I2C_Master_Transmit+0x250>)
 8002212:	400a      	ands	r2, r1
 8002214:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2241      	movs	r2, #65	; 0x41
 800221a:	2120      	movs	r1, #32
 800221c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2242      	movs	r2, #66	; 0x42
 8002222:	2100      	movs	r1, #0
 8002224:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2240      	movs	r2, #64	; 0x40
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800222e:	2300      	movs	r3, #0
 8002230:	e000      	b.n	8002234 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002232:	2302      	movs	r3, #2
  }
}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	b007      	add	sp, #28
 800223a:	bd90      	pop	{r4, r7, pc}
 800223c:	80002000 	.word	0x80002000
 8002240:	fe00e800 	.word	0xfe00e800

08002244 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d103      	bne.n	8002262 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2200      	movs	r2, #0
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	2201      	movs	r2, #1
 800226a:	4013      	ands	r3, r2
 800226c:	2b01      	cmp	r3, #1
 800226e:	d007      	beq.n	8002280 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2101      	movs	r1, #1
 800227c:	430a      	orrs	r2, r1
 800227e:	619a      	str	r2, [r3, #24]
  }
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	b002      	add	sp, #8
 8002286:	bd80      	pop	{r7, pc}

08002288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	1dfb      	adds	r3, r7, #7
 8002296:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002298:	e03a      	b.n	8002310 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	6839      	ldr	r1, [r7, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f000 f8d3 	bl	800244c <I2C_IsErrorOccurred>
 80022a6:	1e03      	subs	r3, r0, #0
 80022a8:	d001      	beq.n	80022ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e040      	b.n	8002330 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	d02d      	beq.n	8002310 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022b4:	f7ff fb2c 	bl	8001910 <HAL_GetTick>
 80022b8:	0002      	movs	r2, r0
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	683a      	ldr	r2, [r7, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d302      	bcc.n	80022ca <I2C_WaitOnFlagUntilTimeout+0x42>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d122      	bne.n	8002310 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	4013      	ands	r3, r2
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	425a      	negs	r2, r3
 80022da:	4153      	adcs	r3, r2
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	001a      	movs	r2, r3
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d113      	bne.n	8002310 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	2220      	movs	r2, #32
 80022ee:	431a      	orrs	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2241      	movs	r2, #65	; 0x41
 80022f8:	2120      	movs	r1, #32
 80022fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2242      	movs	r2, #66	; 0x42
 8002300:	2100      	movs	r1, #0
 8002302:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	2100      	movs	r1, #0
 800230a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e00f      	b.n	8002330 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4013      	ands	r3, r2
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	425a      	negs	r2, r3
 8002320:	4153      	adcs	r3, r2
 8002322:	b2db      	uxtb	r3, r3
 8002324:	001a      	movs	r2, r3
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d0b5      	beq.n	800229a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b004      	add	sp, #16
 8002336:	bd80      	pop	{r7, pc}

08002338 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002344:	e032      	b.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f87d 	bl	800244c <I2C_IsErrorOccurred>
 8002352:	1e03      	subs	r3, r0, #0
 8002354:	d001      	beq.n	800235a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e030      	b.n	80023bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3301      	adds	r3, #1
 800235e:	d025      	beq.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002360:	f7ff fad6 	bl	8001910 <HAL_GetTick>
 8002364:	0002      	movs	r2, r0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	d302      	bcc.n	8002376 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11a      	bne.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2202      	movs	r2, #2
 800237e:	4013      	ands	r3, r2
 8002380:	2b02      	cmp	r3, #2
 8002382:	d013      	beq.n	80023ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	2220      	movs	r2, #32
 800238a:	431a      	orrs	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2241      	movs	r2, #65	; 0x41
 8002394:	2120      	movs	r1, #32
 8002396:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2242      	movs	r2, #66	; 0x42
 800239c:	2100      	movs	r1, #0
 800239e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2240      	movs	r2, #64	; 0x40
 80023a4:	2100      	movs	r1, #0
 80023a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e007      	b.n	80023bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	2202      	movs	r2, #2
 80023b4:	4013      	ands	r3, r2
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d1c5      	bne.n	8002346 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	b004      	add	sp, #16
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023d0:	e02f      	b.n	8002432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 f837 	bl	800244c <I2C_IsErrorOccurred>
 80023de:	1e03      	subs	r3, r0, #0
 80023e0:	d001      	beq.n	80023e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e02d      	b.n	8002442 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e6:	f7ff fa93 	bl	8001910 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d11a      	bne.n	8002432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2220      	movs	r2, #32
 8002404:	4013      	ands	r3, r2
 8002406:	2b20      	cmp	r3, #32
 8002408:	d013      	beq.n	8002432 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	2220      	movs	r2, #32
 8002410:	431a      	orrs	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2241      	movs	r2, #65	; 0x41
 800241a:	2120      	movs	r1, #32
 800241c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2242      	movs	r2, #66	; 0x42
 8002422:	2100      	movs	r1, #0
 8002424:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2240      	movs	r2, #64	; 0x40
 800242a:	2100      	movs	r1, #0
 800242c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e007      	b.n	8002442 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	2220      	movs	r2, #32
 800243a:	4013      	ands	r3, r2
 800243c:	2b20      	cmp	r3, #32
 800243e:	d1c8      	bne.n	80023d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	0018      	movs	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	b004      	add	sp, #16
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800244c:	b590      	push	{r4, r7, lr}
 800244e:	b08b      	sub	sp, #44	; 0x2c
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002458:	2327      	movs	r3, #39	; 0x27
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2210      	movs	r2, #16
 8002474:	4013      	ands	r3, r2
 8002476:	d100      	bne.n	800247a <I2C_IsErrorOccurred+0x2e>
 8002478:	e082      	b.n	8002580 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2210      	movs	r2, #16
 8002480:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002482:	e060      	b.n	8002546 <I2C_IsErrorOccurred+0xfa>
 8002484:	2427      	movs	r4, #39	; 0x27
 8002486:	193b      	adds	r3, r7, r4
 8002488:	193a      	adds	r2, r7, r4
 800248a:	7812      	ldrb	r2, [r2, #0]
 800248c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	3301      	adds	r3, #1
 8002492:	d058      	beq.n	8002546 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002494:	f7ff fa3c 	bl	8001910 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d306      	bcc.n	80024b2 <I2C_IsErrorOccurred+0x66>
 80024a4:	193b      	adds	r3, r7, r4
 80024a6:	193a      	adds	r2, r7, r4
 80024a8:	7812      	ldrb	r2, [r2, #0]
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d149      	bne.n	8002546 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	01db      	lsls	r3, r3, #7
 80024bc:	4013      	ands	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80024c0:	2013      	movs	r0, #19
 80024c2:	183b      	adds	r3, r7, r0
 80024c4:	68fa      	ldr	r2, [r7, #12]
 80024c6:	2142      	movs	r1, #66	; 0x42
 80024c8:	5c52      	ldrb	r2, [r2, r1]
 80024ca:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	021b      	lsls	r3, r3, #8
 80024d6:	401a      	ands	r2, r3
 80024d8:	2380      	movs	r3, #128	; 0x80
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	429a      	cmp	r2, r3
 80024de:	d126      	bne.n	800252e <I2C_IsErrorOccurred+0xe2>
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	01db      	lsls	r3, r3, #7
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d021      	beq.n	800252e <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80024ea:	183b      	adds	r3, r7, r0
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d01d      	beq.n	800252e <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	01c9      	lsls	r1, r1, #7
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002504:	f7ff fa04 	bl	8001910 <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800250c:	e00f      	b.n	800252e <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800250e:	f7ff f9ff 	bl	8001910 <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b19      	cmp	r3, #25
 800251a:	d908      	bls.n	800252e <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	2220      	movs	r2, #32
 8002520:	4313      	orrs	r3, r2
 8002522:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002524:	2327      	movs	r3, #39	; 0x27
 8002526:	18fb      	adds	r3, r7, r3
 8002528:	2201      	movs	r2, #1
 800252a:	701a      	strb	r2, [r3, #0]

              break;
 800252c:	e00b      	b.n	8002546 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	2220      	movs	r2, #32
 8002536:	4013      	ands	r3, r2
 8002538:	2127      	movs	r1, #39	; 0x27
 800253a:	187a      	adds	r2, r7, r1
 800253c:	1879      	adds	r1, r7, r1
 800253e:	7809      	ldrb	r1, [r1, #0]
 8002540:	7011      	strb	r1, [r2, #0]
 8002542:	2b20      	cmp	r3, #32
 8002544:	d1e3      	bne.n	800250e <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	2220      	movs	r2, #32
 800254e:	4013      	ands	r3, r2
 8002550:	2b20      	cmp	r3, #32
 8002552:	d004      	beq.n	800255e <I2C_IsErrorOccurred+0x112>
 8002554:	2327      	movs	r3, #39	; 0x27
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d092      	beq.n	8002484 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800255e:	2327      	movs	r3, #39	; 0x27
 8002560:	18fb      	adds	r3, r7, r3
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d103      	bne.n	8002570 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2220      	movs	r2, #32
 800256e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	2204      	movs	r2, #4
 8002574:	4313      	orrs	r3, r2
 8002576:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002578:	2327      	movs	r3, #39	; 0x27
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4013      	ands	r3, r2
 8002590:	d00c      	beq.n	80025ac <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	2201      	movs	r2, #1
 8002596:	4313      	orrs	r3, r2
 8002598:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	0052      	lsls	r2, r2, #1
 80025a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025a4:	2327      	movs	r3, #39	; 0x27
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	2201      	movs	r2, #1
 80025aa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4013      	ands	r3, r2
 80025b4:	d00c      	beq.n	80025d0 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	2208      	movs	r2, #8
 80025ba:	4313      	orrs	r3, r2
 80025bc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	00d2      	lsls	r2, r2, #3
 80025c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025c8:	2327      	movs	r3, #39	; 0x27
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4013      	ands	r3, r2
 80025d8:	d00c      	beq.n	80025f4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80025da:	6a3b      	ldr	r3, [r7, #32]
 80025dc:	2202      	movs	r2, #2
 80025de:	4313      	orrs	r3, r2
 80025e0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80025ec:	2327      	movs	r3, #39	; 0x27
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80025f4:	2327      	movs	r3, #39	; 0x27
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01d      	beq.n	800263a <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff fe1f 	bl	8002244 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	490d      	ldr	r1, [pc, #52]	; (8002648 <I2C_IsErrorOccurred+0x1fc>)
 8002612:	400a      	ands	r2, r1
 8002614:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	431a      	orrs	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2241      	movs	r2, #65	; 0x41
 8002626:	2120      	movs	r1, #32
 8002628:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2242      	movs	r2, #66	; 0x42
 800262e:	2100      	movs	r1, #0
 8002630:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2240      	movs	r2, #64	; 0x40
 8002636:	2100      	movs	r1, #0
 8002638:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800263a:	2327      	movs	r3, #39	; 0x27
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	781b      	ldrb	r3, [r3, #0]
}
 8002640:	0018      	movs	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	b00b      	add	sp, #44	; 0x2c
 8002646:	bd90      	pop	{r4, r7, pc}
 8002648:	fe00e800 	.word	0xfe00e800

0800264c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800264c:	b590      	push	{r4, r7, lr}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	0008      	movs	r0, r1
 8002656:	0011      	movs	r1, r2
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	240a      	movs	r4, #10
 800265c:	193b      	adds	r3, r7, r4
 800265e:	1c02      	adds	r2, r0, #0
 8002660:	801a      	strh	r2, [r3, #0]
 8002662:	2009      	movs	r0, #9
 8002664:	183b      	adds	r3, r7, r0
 8002666:	1c0a      	adds	r2, r1, #0
 8002668:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800266a:	193b      	adds	r3, r7, r4
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	059b      	lsls	r3, r3, #22
 8002670:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002672:	183b      	adds	r3, r7, r0
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	0419      	lsls	r1, r3, #16
 8002678:	23ff      	movs	r3, #255	; 0xff
 800267a:	041b      	lsls	r3, r3, #16
 800267c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800267e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002686:	4313      	orrs	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002696:	0d51      	lsrs	r1, r2, #21
 8002698:	2280      	movs	r2, #128	; 0x80
 800269a:	00d2      	lsls	r2, r2, #3
 800269c:	400a      	ands	r2, r1
 800269e:	4907      	ldr	r1, [pc, #28]	; (80026bc <I2C_TransferConfig+0x70>)
 80026a0:	430a      	orrs	r2, r1
 80026a2:	43d2      	mvns	r2, r2
 80026a4:	401a      	ands	r2, r3
 80026a6:	0011      	movs	r1, r2
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b007      	add	sp, #28
 80026b8:	bd90      	pop	{r4, r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	03ff63ff 	.word	0x03ff63ff

080026c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2241      	movs	r2, #65	; 0x41
 80026ce:	5c9b      	ldrb	r3, [r3, r2]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d138      	bne.n	8002748 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2240      	movs	r2, #64	; 0x40
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e032      	b.n	800274a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2240      	movs	r2, #64	; 0x40
 80026e8:	2101      	movs	r1, #1
 80026ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2241      	movs	r2, #65	; 0x41
 80026f0:	2124      	movs	r1, #36	; 0x24
 80026f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2101      	movs	r1, #1
 8002700:	438a      	bics	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4911      	ldr	r1, [pc, #68]	; (8002754 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002710:	400a      	ands	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6819      	ldr	r1, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2101      	movs	r1, #1
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2241      	movs	r2, #65	; 0x41
 8002738:	2120      	movs	r1, #32
 800273a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	2100      	movs	r1, #0
 8002742:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	ffffefff 	.word	0xffffefff

08002758 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2241      	movs	r2, #65	; 0x41
 8002766:	5c9b      	ldrb	r3, [r3, r2]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b20      	cmp	r3, #32
 800276c:	d139      	bne.n	80027e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2240      	movs	r2, #64	; 0x40
 8002772:	5c9b      	ldrb	r3, [r3, r2]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002778:	2302      	movs	r3, #2
 800277a:	e033      	b.n	80027e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2240      	movs	r2, #64	; 0x40
 8002780:	2101      	movs	r1, #1
 8002782:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2241      	movs	r2, #65	; 0x41
 8002788:	2124      	movs	r1, #36	; 0x24
 800278a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2101      	movs	r1, #1
 8002798:	438a      	bics	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	4a11      	ldr	r2, [pc, #68]	; (80027ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68fa      	ldr	r2, [r7, #12]
 80027bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2101      	movs	r1, #1
 80027ca:	430a      	orrs	r2, r1
 80027cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2241      	movs	r2, #65	; 0x41
 80027d2:	2120      	movs	r1, #32
 80027d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2240      	movs	r2, #64	; 0x40
 80027da:	2100      	movs	r1, #0
 80027dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
  }
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b004      	add	sp, #16
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	fffff0ff 	.word	0xfffff0ff

080027f0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_I2CEx_EnableFastModePlus+0x34>)
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_I2CEx_EnableFastModePlus+0x34>)
 80027fe:	2101      	movs	r1, #1
 8002800:	430a      	orrs	r2, r1
 8002802:	619a      	str	r2, [r3, #24]
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	2201      	movs	r2, #1
 800280a:	4013      	ands	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002810:	4b05      	ldr	r3, [pc, #20]	; (8002828 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002812:	6819      	ldr	r1, [r3, #0]
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]
}
 800281c:	46c0      	nop			; (mov r8, r8)
 800281e:	46bd      	mov	sp, r7
 8002820:	b004      	add	sp, #16
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	40010000 	.word	0x40010000

0800282c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d101      	bne.n	800283e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e301      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	4013      	ands	r3, r2
 8002846:	d100      	bne.n	800284a <HAL_RCC_OscConfig+0x1e>
 8002848:	e08d      	b.n	8002966 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800284a:	4bc3      	ldr	r3, [pc, #780]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	220c      	movs	r2, #12
 8002850:	4013      	ands	r3, r2
 8002852:	2b04      	cmp	r3, #4
 8002854:	d00e      	beq.n	8002874 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002856:	4bc0      	ldr	r3, [pc, #768]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	220c      	movs	r2, #12
 800285c:	4013      	ands	r3, r2
 800285e:	2b08      	cmp	r3, #8
 8002860:	d116      	bne.n	8002890 <HAL_RCC_OscConfig+0x64>
 8002862:	4bbd      	ldr	r3, [pc, #756]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	2380      	movs	r3, #128	; 0x80
 8002868:	025b      	lsls	r3, r3, #9
 800286a:	401a      	ands	r2, r3
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	025b      	lsls	r3, r3, #9
 8002870:	429a      	cmp	r2, r3
 8002872:	d10d      	bne.n	8002890 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	4bb8      	ldr	r3, [pc, #736]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	029b      	lsls	r3, r3, #10
 800287c:	4013      	ands	r3, r2
 800287e:	d100      	bne.n	8002882 <HAL_RCC_OscConfig+0x56>
 8002880:	e070      	b.n	8002964 <HAL_RCC_OscConfig+0x138>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d000      	beq.n	800288c <HAL_RCC_OscConfig+0x60>
 800288a:	e06b      	b.n	8002964 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e2d8      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_OscConfig+0x7c>
 8002898:	4baf      	ldr	r3, [pc, #700]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4bae      	ldr	r3, [pc, #696]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	0249      	lsls	r1, r1, #9
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	e02f      	b.n	8002908 <HAL_RCC_OscConfig+0xdc>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10c      	bne.n	80028ca <HAL_RCC_OscConfig+0x9e>
 80028b0:	4ba9      	ldr	r3, [pc, #676]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4ba8      	ldr	r3, [pc, #672]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028b6:	49a9      	ldr	r1, [pc, #676]	; (8002b5c <HAL_RCC_OscConfig+0x330>)
 80028b8:	400a      	ands	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	4ba6      	ldr	r3, [pc, #664]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4ba5      	ldr	r3, [pc, #660]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028c2:	49a7      	ldr	r1, [pc, #668]	; (8002b60 <HAL_RCC_OscConfig+0x334>)
 80028c4:	400a      	ands	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e01e      	b.n	8002908 <HAL_RCC_OscConfig+0xdc>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b05      	cmp	r3, #5
 80028d0:	d10e      	bne.n	80028f0 <HAL_RCC_OscConfig+0xc4>
 80028d2:	4ba1      	ldr	r3, [pc, #644]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	4ba0      	ldr	r3, [pc, #640]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028d8:	2180      	movs	r1, #128	; 0x80
 80028da:	02c9      	lsls	r1, r1, #11
 80028dc:	430a      	orrs	r2, r1
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	4b9d      	ldr	r3, [pc, #628]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b9c      	ldr	r3, [pc, #624]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028e6:	2180      	movs	r1, #128	; 0x80
 80028e8:	0249      	lsls	r1, r1, #9
 80028ea:	430a      	orrs	r2, r1
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e00b      	b.n	8002908 <HAL_RCC_OscConfig+0xdc>
 80028f0:	4b99      	ldr	r3, [pc, #612]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b98      	ldr	r3, [pc, #608]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028f6:	4999      	ldr	r1, [pc, #612]	; (8002b5c <HAL_RCC_OscConfig+0x330>)
 80028f8:	400a      	ands	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	4b96      	ldr	r3, [pc, #600]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b95      	ldr	r3, [pc, #596]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002902:	4997      	ldr	r1, [pc, #604]	; (8002b60 <HAL_RCC_OscConfig+0x334>)
 8002904:	400a      	ands	r2, r1
 8002906:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d014      	beq.n	800293a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002910:	f7fe fffe 	bl	8001910 <HAL_GetTick>
 8002914:	0003      	movs	r3, r0
 8002916:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800291a:	f7fe fff9 	bl	8001910 <HAL_GetTick>
 800291e:	0002      	movs	r2, r0
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b64      	cmp	r3, #100	; 0x64
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e28a      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292c:	4b8a      	ldr	r3, [pc, #552]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	029b      	lsls	r3, r3, #10
 8002934:	4013      	ands	r3, r2
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0xee>
 8002938:	e015      	b.n	8002966 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293a:	f7fe ffe9 	bl	8001910 <HAL_GetTick>
 800293e:	0003      	movs	r3, r0
 8002940:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002944:	f7fe ffe4 	bl	8001910 <HAL_GetTick>
 8002948:	0002      	movs	r2, r0
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b64      	cmp	r3, #100	; 0x64
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e275      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	4b80      	ldr	r3, [pc, #512]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	029b      	lsls	r3, r3, #10
 800295e:	4013      	ands	r3, r2
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x118>
 8002962:	e000      	b.n	8002966 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002964:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	4013      	ands	r3, r2
 800296e:	d100      	bne.n	8002972 <HAL_RCC_OscConfig+0x146>
 8002970:	e069      	b.n	8002a46 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002972:	4b79      	ldr	r3, [pc, #484]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	220c      	movs	r2, #12
 8002978:	4013      	ands	r3, r2
 800297a:	d00b      	beq.n	8002994 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800297c:	4b76      	ldr	r3, [pc, #472]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	220c      	movs	r2, #12
 8002982:	4013      	ands	r3, r2
 8002984:	2b08      	cmp	r3, #8
 8002986:	d11c      	bne.n	80029c2 <HAL_RCC_OscConfig+0x196>
 8002988:	4b73      	ldr	r3, [pc, #460]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	025b      	lsls	r3, r3, #9
 8002990:	4013      	ands	r3, r2
 8002992:	d116      	bne.n	80029c2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002994:	4b70      	ldr	r3, [pc, #448]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d005      	beq.n	80029aa <HAL_RCC_OscConfig+0x17e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d001      	beq.n	80029aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e24b      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029aa:	4b6b      	ldr	r3, [pc, #428]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	22f8      	movs	r2, #248	; 0xf8
 80029b0:	4393      	bics	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	00da      	lsls	r2, r3, #3
 80029ba:	4b67      	ldr	r3, [pc, #412]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029bc:	430a      	orrs	r2, r1
 80029be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c0:	e041      	b.n	8002a46 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d024      	beq.n	8002a14 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029ca:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	4b62      	ldr	r3, [pc, #392]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029d0:	2101      	movs	r1, #1
 80029d2:	430a      	orrs	r2, r1
 80029d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7fe ff9b 	bl	8001910 <HAL_GetTick>
 80029da:	0003      	movs	r3, r0
 80029dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e0:	f7fe ff96 	bl	8001910 <HAL_GetTick>
 80029e4:	0002      	movs	r2, r0
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e227      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2202      	movs	r2, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	d0f1      	beq.n	80029e0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fc:	4b56      	ldr	r3, [pc, #344]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	22f8      	movs	r2, #248	; 0xf8
 8002a02:	4393      	bics	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00da      	lsls	r2, r3, #3
 8002a0c:	4b52      	ldr	r3, [pc, #328]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	e018      	b.n	8002a46 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a14:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	4b4f      	ldr	r3, [pc, #316]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	438a      	bics	r2, r1
 8002a1e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a20:	f7fe ff76 	bl	8001910 <HAL_GetTick>
 8002a24:	0003      	movs	r3, r0
 8002a26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7fe ff71 	bl	8001910 <HAL_GetTick>
 8002a2e:	0002      	movs	r2, r0
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e202      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3c:	4b46      	ldr	r3, [pc, #280]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2202      	movs	r2, #2
 8002a42:	4013      	ands	r3, r2
 8002a44:	d1f1      	bne.n	8002a2a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d036      	beq.n	8002abe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d019      	beq.n	8002a8c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a58:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5c:	4b3e      	ldr	r3, [pc, #248]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	430a      	orrs	r2, r1
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a64:	f7fe ff54 	bl	8001910 <HAL_GetTick>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe ff4f 	bl	8001910 <HAL_GetTick>
 8002a72:	0002      	movs	r2, r0
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e1e0      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a80:	4b35      	ldr	r3, [pc, #212]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	2202      	movs	r2, #2
 8002a86:	4013      	ands	r3, r2
 8002a88:	d0f1      	beq.n	8002a6e <HAL_RCC_OscConfig+0x242>
 8002a8a:	e018      	b.n	8002abe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8c:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a90:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002a92:	2101      	movs	r1, #1
 8002a94:	438a      	bics	r2, r1
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a98:	f7fe ff3a 	bl	8001910 <HAL_GetTick>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa2:	f7fe ff35 	bl	8001910 <HAL_GetTick>
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e1c6      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab4:	4b28      	ldr	r3, [pc, #160]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	2202      	movs	r2, #2
 8002aba:	4013      	ands	r3, r2
 8002abc:	d1f1      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d100      	bne.n	8002aca <HAL_RCC_OscConfig+0x29e>
 8002ac8:	e0b4      	b.n	8002c34 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aca:	201f      	movs	r0, #31
 8002acc:	183b      	adds	r3, r7, r0
 8002ace:	2200      	movs	r2, #0
 8002ad0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	055b      	lsls	r3, r3, #21
 8002ada:	4013      	ands	r3, r2
 8002adc:	d110      	bne.n	8002b00 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	0549      	lsls	r1, r1, #21
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	61da      	str	r2, [r3, #28]
 8002aec:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	055b      	lsls	r3, r3, #21
 8002af4:	4013      	ands	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002afa:	183b      	adds	r3, r7, r0
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_RCC_OscConfig+0x338>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	2380      	movs	r3, #128	; 0x80
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4013      	ands	r3, r2
 8002b0a:	d11a      	bne.n	8002b42 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0c:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_RCC_OscConfig+0x338>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_RCC_OscConfig+0x338>)
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	0049      	lsls	r1, r1, #1
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b1a:	f7fe fef9 	bl	8001910 <HAL_GetTick>
 8002b1e:	0003      	movs	r3, r0
 8002b20:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b24:	f7fe fef4 	bl	8001910 <HAL_GetTick>
 8002b28:	0002      	movs	r2, r0
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b64      	cmp	r3, #100	; 0x64
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e185      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_OscConfig+0x338>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d10e      	bne.n	8002b68 <HAL_RCC_OscConfig+0x33c>
 8002b4a:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002b4c:	6a1a      	ldr	r2, [r3, #32]
 8002b4e:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <HAL_RCC_OscConfig+0x32c>)
 8002b50:	2101      	movs	r1, #1
 8002b52:	430a      	orrs	r2, r1
 8002b54:	621a      	str	r2, [r3, #32]
 8002b56:	e035      	b.n	8002bc4 <HAL_RCC_OscConfig+0x398>
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	fffeffff 	.word	0xfffeffff
 8002b60:	fffbffff 	.word	0xfffbffff
 8002b64:	40007000 	.word	0x40007000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x35e>
 8002b70:	4bb6      	ldr	r3, [pc, #728]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	4bb5      	ldr	r3, [pc, #724]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	438a      	bics	r2, r1
 8002b7a:	621a      	str	r2, [r3, #32]
 8002b7c:	4bb3      	ldr	r3, [pc, #716]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002b7e:	6a1a      	ldr	r2, [r3, #32]
 8002b80:	4bb2      	ldr	r3, [pc, #712]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002b82:	2104      	movs	r1, #4
 8002b84:	438a      	bics	r2, r1
 8002b86:	621a      	str	r2, [r3, #32]
 8002b88:	e01c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x398>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x380>
 8002b92:	4bae      	ldr	r3, [pc, #696]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	4bad      	ldr	r3, [pc, #692]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002b98:	2104      	movs	r1, #4
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	621a      	str	r2, [r3, #32]
 8002b9e:	4bab      	ldr	r3, [pc, #684]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	4baa      	ldr	r3, [pc, #680]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	621a      	str	r2, [r3, #32]
 8002baa:	e00b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x398>
 8002bac:	4ba7      	ldr	r3, [pc, #668]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002bae:	6a1a      	ldr	r2, [r3, #32]
 8002bb0:	4ba6      	ldr	r3, [pc, #664]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	621a      	str	r2, [r3, #32]
 8002bb8:	4ba4      	ldr	r3, [pc, #656]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	4ba3      	ldr	r3, [pc, #652]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002bbe:	2104      	movs	r1, #4
 8002bc0:	438a      	bics	r2, r1
 8002bc2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d014      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fea0 	bl	8001910 <HAL_GetTick>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd4:	e009      	b.n	8002bea <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fe fe9b 	bl	8001910 <HAL_GetTick>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	4a9b      	ldr	r2, [pc, #620]	; (8002e50 <HAL_RCC_OscConfig+0x624>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e12b      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	4b98      	ldr	r3, [pc, #608]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x3aa>
 8002bf4:	e013      	b.n	8002c1e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fe8b 	bl	8001910 <HAL_GetTick>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfe:	e009      	b.n	8002c14 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c00:	f7fe fe86 	bl	8001910 <HAL_GetTick>
 8002c04:	0002      	movs	r2, r0
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	4a91      	ldr	r2, [pc, #580]	; (8002e50 <HAL_RCC_OscConfig+0x624>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e116      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	4b8d      	ldr	r3, [pc, #564]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c1e:	231f      	movs	r3, #31
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c28:	4b88      	ldr	r3, [pc, #544]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	4b87      	ldr	r3, [pc, #540]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002c2e:	4989      	ldr	r1, [pc, #548]	; (8002e54 <HAL_RCC_OscConfig+0x628>)
 8002c30:	400a      	ands	r2, r1
 8002c32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d12a      	bne.n	8002c9c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c46:	4b81      	ldr	r3, [pc, #516]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4a:	4b80      	ldr	r3, [pc, #512]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c52:	4b7e      	ldr	r3, [pc, #504]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c56:	4b7d      	ldr	r3, [pc, #500]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002c58:	2101      	movs	r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fe57 	bl	8001910 <HAL_GetTick>
 8002c62:	0003      	movs	r3, r0
 8002c64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c68:	f7fe fe52 	bl	8001910 <HAL_GetTick>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e0e3      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c7a:	4b74      	ldr	r3, [pc, #464]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	2202      	movs	r2, #2
 8002c80:	4013      	ands	r3, r2
 8002c82:	d0f1      	beq.n	8002c68 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c84:	4b71      	ldr	r3, [pc, #452]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c88:	22f8      	movs	r2, #248	; 0xf8
 8002c8a:	4393      	bics	r3, r2
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	00da      	lsls	r2, r3, #3
 8002c94:	4b6d      	ldr	r3, [pc, #436]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002c96:	430a      	orrs	r2, r1
 8002c98:	635a      	str	r2, [r3, #52]	; 0x34
 8002c9a:	e034      	b.n	8002d06 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	3305      	adds	r3, #5
 8002ca2:	d111      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ca4:	4b69      	ldr	r3, [pc, #420]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca8:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002caa:	2104      	movs	r1, #4
 8002cac:	438a      	bics	r2, r1
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cb0:	4b66      	ldr	r3, [pc, #408]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	22f8      	movs	r2, #248	; 0xf8
 8002cb6:	4393      	bics	r3, r2
 8002cb8:	0019      	movs	r1, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	00da      	lsls	r2, r3, #3
 8002cc0:	4b62      	ldr	r3, [pc, #392]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc6:	e01e      	b.n	8002d06 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cc8:	4b60      	ldr	r3, [pc, #384]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ccc:	4b5f      	ldr	r3, [pc, #380]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002cce:	2104      	movs	r1, #4
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002cd4:	4b5d      	ldr	r3, [pc, #372]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd8:	4b5c      	ldr	r3, [pc, #368]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002cda:	2101      	movs	r1, #1
 8002cdc:	438a      	bics	r2, r1
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce0:	f7fe fe16 	bl	8001910 <HAL_GetTick>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cea:	f7fe fe11 	bl	8001910 <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0a2      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cfc:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	2202      	movs	r2, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d1f1      	bne.n	8002cea <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d100      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4e4>
 8002d0e:	e097      	b.n	8002e40 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d10:	4b4e      	ldr	r3, [pc, #312]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	220c      	movs	r2, #12
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d100      	bne.n	8002d1e <HAL_RCC_OscConfig+0x4f2>
 8002d1c:	e06b      	b.n	8002df6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d14c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d26:	4b49      	ldr	r3, [pc, #292]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b48      	ldr	r3, [pc, #288]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002d2c:	494a      	ldr	r1, [pc, #296]	; (8002e58 <HAL_RCC_OscConfig+0x62c>)
 8002d2e:	400a      	ands	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe fded 	bl	8001910 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe fde8 	bl	8001910 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e079      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	2380      	movs	r3, #128	; 0x80
 8002d54:	049b      	lsls	r3, r3, #18
 8002d56:	4013      	ands	r3, r2
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d5a:	4b3c      	ldr	r3, [pc, #240]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	220f      	movs	r2, #15
 8002d60:	4393      	bics	r3, r2
 8002d62:	0019      	movs	r1, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d68:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d6e:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4a3a      	ldr	r2, [pc, #232]	; (8002e5c <HAL_RCC_OscConfig+0x630>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	0019      	movs	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	431a      	orrs	r2, r3
 8002d82:	4b32      	ldr	r3, [pc, #200]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d88:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002d8e:	2180      	movs	r1, #128	; 0x80
 8002d90:	0449      	lsls	r1, r1, #17
 8002d92:	430a      	orrs	r2, r1
 8002d94:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fe fdbb 	bl	8001910 <HAL_GetTick>
 8002d9a:	0003      	movs	r3, r0
 8002d9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da0:	f7fe fdb6 	bl	8001910 <HAL_GetTick>
 8002da4:	0002      	movs	r2, r0
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e047      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002db2:	4b26      	ldr	r3, [pc, #152]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	049b      	lsls	r3, r3, #18
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x574>
 8002dbe:	e03f      	b.n	8002e40 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc0:	4b22      	ldr	r3, [pc, #136]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002dc6:	4924      	ldr	r1, [pc, #144]	; (8002e58 <HAL_RCC_OscConfig+0x62c>)
 8002dc8:	400a      	ands	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7fe fda0 	bl	8001910 <HAL_GetTick>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7fe fd9b 	bl	8001910 <HAL_GetTick>
 8002dda:	0002      	movs	r2, r0
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e02c      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de8:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	049b      	lsls	r3, r3, #18
 8002df0:	4013      	ands	r3, r2
 8002df2:	d1f0      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x5aa>
 8002df4:	e024      	b.n	8002e40 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e01f      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <HAL_RCC_OscConfig+0x620>)
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	025b      	lsls	r3, r3, #9
 8002e14:	401a      	ands	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d10e      	bne.n	8002e3c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	220f      	movs	r2, #15
 8002e22:	401a      	ands	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d107      	bne.n	8002e3c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	23f0      	movs	r3, #240	; 0xf0
 8002e30:	039b      	lsls	r3, r3, #14
 8002e32:	401a      	ands	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e000      	b.n	8002e42 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b008      	add	sp, #32
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	00001388 	.word	0x00001388
 8002e54:	efffffff 	.word	0xefffffff
 8002e58:	feffffff 	.word	0xfeffffff
 8002e5c:	ffc2ffff 	.word	0xffc2ffff

08002e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b3      	b.n	8002fdc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e74:	4b5b      	ldr	r3, [pc, #364]	; (8002fe4 <HAL_RCC_ClockConfig+0x184>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d911      	bls.n	8002ea6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	4b58      	ldr	r3, [pc, #352]	; (8002fe4 <HAL_RCC_ClockConfig+0x184>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	4393      	bics	r3, r2
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	4b55      	ldr	r3, [pc, #340]	; (8002fe4 <HAL_RCC_ClockConfig+0x184>)
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e94:	4b53      	ldr	r3, [pc, #332]	; (8002fe4 <HAL_RCC_ClockConfig+0x184>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e09a      	b.n	8002fdc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	4013      	ands	r3, r2
 8002eae:	d015      	beq.n	8002edc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d006      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002eba:	4b4b      	ldr	r3, [pc, #300]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	4b4a      	ldr	r3, [pc, #296]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002ec0:	21e0      	movs	r1, #224	; 0xe0
 8002ec2:	00c9      	lsls	r1, r1, #3
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec8:	4b47      	ldr	r3, [pc, #284]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	22f0      	movs	r2, #240	; 0xf0
 8002ece:	4393      	bics	r3, r2
 8002ed0:	0019      	movs	r1, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	4b44      	ldr	r3, [pc, #272]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	d040      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d107      	bne.n	8002efe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b3e      	ldr	r3, [pc, #248]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	2380      	movs	r3, #128	; 0x80
 8002ef4:	029b      	lsls	r3, r3, #10
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d114      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e06e      	b.n	8002fdc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	4b38      	ldr	r3, [pc, #224]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	049b      	lsls	r3, r3, #18
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d108      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e062      	b.n	8002fdc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e05b      	b.n	8002fdc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f24:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2203      	movs	r2, #3
 8002f2a:	4393      	bics	r3, r2
 8002f2c:	0019      	movs	r1, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f38:	f7fe fcea 	bl	8001910 <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f40:	e009      	b.n	8002f56 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f42:	f7fe fce5 	bl	8001910 <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	4a27      	ldr	r2, [pc, #156]	; (8002fec <HAL_RCC_ClockConfig+0x18c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e042      	b.n	8002fdc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1ec      	bne.n	8002f42 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b1e      	ldr	r3, [pc, #120]	; (8002fe4 <HAL_RCC_ClockConfig+0x184>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	4013      	ands	r3, r2
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d211      	bcs.n	8002f9a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <HAL_RCC_ClockConfig+0x184>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	4393      	bics	r3, r2
 8002f7e:	0019      	movs	r1, r3
 8002f80:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <HAL_RCC_ClockConfig+0x184>)
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_RCC_ClockConfig+0x184>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	4013      	ands	r3, r2
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d001      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e020      	b.n	8002fdc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002fa4:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a11      	ldr	r2, [pc, #68]	; (8002ff0 <HAL_RCC_ClockConfig+0x190>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	0019      	movs	r1, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002fb8:	f000 f820 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002fbc:	0001      	movs	r1, r0
 8002fbe:	4b0a      	ldr	r3, [pc, #40]	; (8002fe8 <HAL_RCC_ClockConfig+0x188>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	220f      	movs	r2, #15
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x194>)
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	000a      	movs	r2, r1
 8002fce:	40da      	lsrs	r2, r3
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x198>)
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fe fc55 	bl	8001884 <HAL_InitTick>
  
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	0018      	movs	r0, r3
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b004      	add	sp, #16
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40022000 	.word	0x40022000
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	00001388 	.word	0x00001388
 8002ff0:	fffff8ff 	.word	0xfffff8ff
 8002ff4:	08003b7c 	.word	0x08003b7c
 8002ff8:	2000001c 	.word	0x2000001c

08002ffc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	2300      	movs	r3, #0
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003016:	4b20      	ldr	r3, [pc, #128]	; (8003098 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	220c      	movs	r2, #12
 8003020:	4013      	ands	r3, r2
 8003022:	2b04      	cmp	r3, #4
 8003024:	d002      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x30>
 8003026:	2b08      	cmp	r3, #8
 8003028:	d003      	beq.n	8003032 <HAL_RCC_GetSysClockFreq+0x36>
 800302a:	e02c      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_GetSysClockFreq+0xa0>)
 800302e:	613b      	str	r3, [r7, #16]
      break;
 8003030:	e02c      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	0c9b      	lsrs	r3, r3, #18
 8003036:	220f      	movs	r2, #15
 8003038:	4013      	ands	r3, r2
 800303a:	4a19      	ldr	r2, [pc, #100]	; (80030a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800303c:	5cd3      	ldrb	r3, [r2, r3]
 800303e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003040:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	220f      	movs	r2, #15
 8003046:	4013      	ands	r3, r2
 8003048:	4a16      	ldr	r2, [pc, #88]	; (80030a4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800304a:	5cd3      	ldrb	r3, [r2, r3]
 800304c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	025b      	lsls	r3, r3, #9
 8003054:	4013      	ands	r3, r2
 8003056:	d009      	beq.n	800306c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003058:	68b9      	ldr	r1, [r7, #8]
 800305a:	4810      	ldr	r0, [pc, #64]	; (800309c <HAL_RCC_GetSysClockFreq+0xa0>)
 800305c:	f7fd f854 	bl	8000108 <__udivsi3>
 8003060:	0003      	movs	r3, r0
 8003062:	001a      	movs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4353      	muls	r3, r2
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e009      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	000a      	movs	r2, r1
 8003070:	0152      	lsls	r2, r2, #5
 8003072:	1a52      	subs	r2, r2, r1
 8003074:	0193      	lsls	r3, r2, #6
 8003076:	1a9b      	subs	r3, r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	185b      	adds	r3, r3, r1
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	613b      	str	r3, [r7, #16]
      break;
 8003084:	e002      	b.n	800308c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003088:	613b      	str	r3, [r7, #16]
      break;
 800308a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800308c:	693b      	ldr	r3, [r7, #16]
}
 800308e:	0018      	movs	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	b006      	add	sp, #24
 8003094:	bd80      	pop	{r7, pc}
 8003096:	46c0      	nop			; (mov r8, r8)
 8003098:	40021000 	.word	0x40021000
 800309c:	007a1200 	.word	0x007a1200
 80030a0:	08003b8c 	.word	0x08003b8c
 80030a4:	08003b9c 	.word	0x08003b9c

080030a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	2380      	movs	r3, #128	; 0x80
 80030be:	025b      	lsls	r3, r3, #9
 80030c0:	4013      	ands	r3, r2
 80030c2:	d100      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80030c4:	e08e      	b.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80030c6:	2017      	movs	r0, #23
 80030c8:	183b      	adds	r3, r7, r0
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ce:	4b57      	ldr	r3, [pc, #348]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	055b      	lsls	r3, r3, #21
 80030d6:	4013      	ands	r3, r2
 80030d8:	d110      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030da:	4b54      	ldr	r3, [pc, #336]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030dc:	69da      	ldr	r2, [r3, #28]
 80030de:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	0549      	lsls	r1, r1, #21
 80030e4:	430a      	orrs	r2, r1
 80030e6:	61da      	str	r2, [r3, #28]
 80030e8:	4b50      	ldr	r3, [pc, #320]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	055b      	lsls	r3, r3, #21
 80030f0:	4013      	ands	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030f6:	183b      	adds	r3, r7, r0
 80030f8:	2201      	movs	r2, #1
 80030fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	2380      	movs	r3, #128	; 0x80
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4013      	ands	r3, r2
 8003106:	d11a      	bne.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003108:	4b49      	ldr	r3, [pc, #292]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	4b48      	ldr	r3, [pc, #288]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800310e:	2180      	movs	r1, #128	; 0x80
 8003110:	0049      	lsls	r1, r1, #1
 8003112:	430a      	orrs	r2, r1
 8003114:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003116:	f7fe fbfb 	bl	8001910 <HAL_GetTick>
 800311a:	0003      	movs	r3, r0
 800311c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	e008      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003120:	f7fe fbf6 	bl	8001910 <HAL_GetTick>
 8003124:	0002      	movs	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e077      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003132:	4b3f      	ldr	r3, [pc, #252]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	2380      	movs	r3, #128	; 0x80
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4013      	ands	r3, r2
 800313c:	d0f0      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003140:	6a1a      	ldr	r2, [r3, #32]
 8003142:	23c0      	movs	r3, #192	; 0xc0
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4013      	ands	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d034      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	23c0      	movs	r3, #192	; 0xc0
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4013      	ands	r3, r2
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	429a      	cmp	r2, r3
 800315e:	d02c      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003160:	4b32      	ldr	r3, [pc, #200]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003162:	6a1b      	ldr	r3, [r3, #32]
 8003164:	4a33      	ldr	r2, [pc, #204]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003166:	4013      	ands	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800316a:	4b30      	ldr	r3, [pc, #192]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800316c:	6a1a      	ldr	r2, [r3, #32]
 800316e:	4b2f      	ldr	r3, [pc, #188]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003170:	2180      	movs	r1, #128	; 0x80
 8003172:	0249      	lsls	r1, r1, #9
 8003174:	430a      	orrs	r2, r1
 8003176:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003178:	4b2c      	ldr	r3, [pc, #176]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800317e:	492e      	ldr	r1, [pc, #184]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003180:	400a      	ands	r2, r1
 8003182:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003184:	4b29      	ldr	r3, [pc, #164]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003192:	f7fe fbbd 	bl	8001910 <HAL_GetTick>
 8003196:	0003      	movs	r3, r0
 8003198:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319a:	e009      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319c:	f7fe fbb8 	bl	8001910 <HAL_GetTick>
 80031a0:	0002      	movs	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	4a25      	ldr	r2, [pc, #148]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e038      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	4b1e      	ldr	r3, [pc, #120]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	2202      	movs	r2, #2
 80031b6:	4013      	ands	r3, r2
 80031b8:	d0f0      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ba:	4b1c      	ldr	r3, [pc, #112]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4a1d      	ldr	r2, [pc, #116]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031ca:	430a      	orrs	r2, r1
 80031cc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031ce:	2317      	movs	r3, #23
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d105      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031da:	69da      	ldr	r2, [r3, #28]
 80031dc:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031de:	4918      	ldr	r1, [pc, #96]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80031e0:	400a      	ands	r2, r1
 80031e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2201      	movs	r2, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	d009      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	2203      	movs	r2, #3
 80031f4:	4393      	bics	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80031fe:	430a      	orrs	r2, r1
 8003200:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2220      	movs	r2, #32
 8003208:	4013      	ands	r3, r2
 800320a:	d009      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	2210      	movs	r2, #16
 8003212:	4393      	bics	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	4b04      	ldr	r3, [pc, #16]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800321c:	430a      	orrs	r2, r1
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	0018      	movs	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	b006      	add	sp, #24
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40021000 	.word	0x40021000
 8003230:	40007000 	.word	0x40007000
 8003234:	fffffcff 	.word	0xfffffcff
 8003238:	fffeffff 	.word	0xfffeffff
 800323c:	00001388 	.word	0x00001388
 8003240:	efffffff 	.word	0xefffffff

08003244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e042      	b.n	80032dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	223d      	movs	r2, #61	; 0x3d
 800325a:	5c9b      	ldrb	r3, [r3, r2]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	223c      	movs	r2, #60	; 0x3c
 8003266:	2100      	movs	r1, #0
 8003268:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	0018      	movs	r0, r3
 800326e:	f7fe fa23 	bl	80016b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	223d      	movs	r2, #61	; 0x3d
 8003276:	2102      	movs	r1, #2
 8003278:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3304      	adds	r3, #4
 8003282:	0019      	movs	r1, r3
 8003284:	0010      	movs	r0, r2
 8003286:	f000 fa5b 	bl	8003740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2246      	movs	r2, #70	; 0x46
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	223e      	movs	r2, #62	; 0x3e
 8003296:	2101      	movs	r1, #1
 8003298:	5499      	strb	r1, [r3, r2]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	223f      	movs	r2, #63	; 0x3f
 800329e:	2101      	movs	r1, #1
 80032a0:	5499      	strb	r1, [r3, r2]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2240      	movs	r2, #64	; 0x40
 80032a6:	2101      	movs	r1, #1
 80032a8:	5499      	strb	r1, [r3, r2]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2241      	movs	r2, #65	; 0x41
 80032ae:	2101      	movs	r1, #1
 80032b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2242      	movs	r2, #66	; 0x42
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2243      	movs	r2, #67	; 0x43
 80032be:	2101      	movs	r1, #1
 80032c0:	5499      	strb	r1, [r3, r2]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2244      	movs	r2, #68	; 0x44
 80032c6:	2101      	movs	r1, #1
 80032c8:	5499      	strb	r1, [r3, r2]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2245      	movs	r2, #69	; 0x45
 80032ce:	2101      	movs	r1, #1
 80032d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	223d      	movs	r2, #61	; 0x3d
 80032d6:	2101      	movs	r1, #1
 80032d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	0018      	movs	r0, r3
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	223d      	movs	r2, #61	; 0x3d
 80032f0:	5c9b      	ldrb	r3, [r3, r2]
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d001      	beq.n	80032fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e036      	b.n	800336a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	223d      	movs	r2, #61	; 0x3d
 8003300:	2102      	movs	r1, #2
 8003302:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2101      	movs	r1, #1
 8003310:	430a      	orrs	r2, r1
 8003312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_TIM_Base_Start_IT+0x90>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d00a      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x50>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	2380      	movs	r3, #128	; 0x80
 8003324:	05db      	lsls	r3, r3, #23
 8003326:	429a      	cmp	r2, r3
 8003328:	d004      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0x50>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a12      	ldr	r2, [pc, #72]	; (8003378 <HAL_TIM_Base_Start_IT+0x94>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d111      	bne.n	8003358 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2207      	movs	r2, #7
 800333c:	4013      	ands	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b06      	cmp	r3, #6
 8003344:	d010      	beq.n	8003368 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2101      	movs	r1, #1
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003356:	e007      	b.n	8003368 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2101      	movs	r1, #1
 8003364:	430a      	orrs	r2, r1
 8003366:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	0018      	movs	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	b004      	add	sp, #16
 8003370:	bd80      	pop	{r7, pc}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	40012c00 	.word	0x40012c00
 8003378:	40000400 	.word	0x40000400

0800337c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2202      	movs	r2, #2
 8003398:	4013      	ands	r3, r2
 800339a:	d021      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2202      	movs	r2, #2
 80033a0:	4013      	ands	r3, r2
 80033a2:	d01d      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2203      	movs	r2, #3
 80033aa:	4252      	negs	r2, r2
 80033ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	2203      	movs	r2, #3
 80033bc:	4013      	ands	r3, r2
 80033be:	d004      	beq.n	80033ca <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 f9a4 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 80033c8:	e007      	b.n	80033da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 f997 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 f9a3 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2204      	movs	r2, #4
 80033e4:	4013      	ands	r3, r2
 80033e6:	d022      	beq.n	800342e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2204      	movs	r2, #4
 80033ec:	4013      	ands	r3, r2
 80033ee:	d01e      	beq.n	800342e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2205      	movs	r2, #5
 80033f6:	4252      	negs	r2, r2
 80033f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2202      	movs	r2, #2
 80033fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4013      	ands	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0018      	movs	r0, r3
 8003412:	f000 f97d 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 8003416:	e007      	b.n	8003428 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	0018      	movs	r0, r3
 800341c:	f000 f970 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	0018      	movs	r0, r3
 8003424:	f000 f97c 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	2208      	movs	r2, #8
 8003432:	4013      	ands	r3, r2
 8003434:	d021      	beq.n	800347a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2208      	movs	r2, #8
 800343a:	4013      	ands	r3, r2
 800343c:	d01d      	beq.n	800347a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2209      	movs	r2, #9
 8003444:	4252      	negs	r2, r2
 8003446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2204      	movs	r2, #4
 800344c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	2203      	movs	r2, #3
 8003456:	4013      	ands	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	0018      	movs	r0, r3
 800345e:	f000 f957 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 8003462:	e007      	b.n	8003474 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	0018      	movs	r0, r3
 8003468:	f000 f94a 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	0018      	movs	r0, r3
 8003470:	f000 f956 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2210      	movs	r2, #16
 800347e:	4013      	ands	r3, r2
 8003480:	d022      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2210      	movs	r2, #16
 8003486:	4013      	ands	r3, r2
 8003488:	d01e      	beq.n	80034c8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2211      	movs	r2, #17
 8003490:	4252      	negs	r2, r2
 8003492:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2208      	movs	r2, #8
 8003498:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	23c0      	movs	r3, #192	; 0xc0
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4013      	ands	r3, r2
 80034a6:	d004      	beq.n	80034b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f000 f930 	bl	8003710 <HAL_TIM_IC_CaptureCallback>
 80034b0:	e007      	b.n	80034c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	0018      	movs	r0, r3
 80034b6:	f000 f923 	bl	8003700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	0018      	movs	r0, r3
 80034be:	f000 f92f 	bl	8003720 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	2201      	movs	r2, #1
 80034cc:	4013      	ands	r3, r2
 80034ce:	d00c      	beq.n	80034ea <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	4013      	ands	r3, r2
 80034d6:	d008      	beq.n	80034ea <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2202      	movs	r2, #2
 80034de:	4252      	negs	r2, r2
 80034e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	0018      	movs	r0, r3
 80034e6:	f7fe f983 	bl	80017f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2280      	movs	r2, #128	; 0x80
 80034ee:	4013      	ands	r3, r2
 80034f0:	d00c      	beq.n	800350c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2280      	movs	r2, #128	; 0x80
 80034f6:	4013      	ands	r3, r2
 80034f8:	d008      	beq.n	800350c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2281      	movs	r2, #129	; 0x81
 8003500:	4252      	negs	r2, r2
 8003502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	0018      	movs	r0, r3
 8003508:	f000 fa98 	bl	8003a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2240      	movs	r2, #64	; 0x40
 8003510:	4013      	ands	r3, r2
 8003512:	d00c      	beq.n	800352e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2240      	movs	r2, #64	; 0x40
 8003518:	4013      	ands	r3, r2
 800351a:	d008      	beq.n	800352e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2241      	movs	r2, #65	; 0x41
 8003522:	4252      	negs	r2, r2
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	0018      	movs	r0, r3
 800352a:	f000 f901 	bl	8003730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2220      	movs	r2, #32
 8003532:	4013      	ands	r3, r2
 8003534:	d00c      	beq.n	8003550 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2220      	movs	r2, #32
 800353a:	4013      	ands	r3, r2
 800353c:	d008      	beq.n	8003550 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2221      	movs	r2, #33	; 0x21
 8003544:	4252      	negs	r2, r2
 8003546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	0018      	movs	r0, r3
 800354c:	f000 fa6e 	bl	8003a2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003550:	46c0      	nop			; (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	b004      	add	sp, #16
 8003556:	bd80      	pop	{r7, pc}

08003558 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003562:	230f      	movs	r3, #15
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2200      	movs	r2, #0
 8003568:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	223c      	movs	r2, #60	; 0x3c
 800356e:	5c9b      	ldrb	r3, [r3, r2]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIM_ConfigClockSource+0x20>
 8003574:	2302      	movs	r3, #2
 8003576:	e0bc      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x19a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	223c      	movs	r2, #60	; 0x3c
 800357c:	2101      	movs	r1, #1
 800357e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	223d      	movs	r2, #61	; 0x3d
 8003584:	2102      	movs	r1, #2
 8003586:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2277      	movs	r2, #119	; 0x77
 8003594:	4393      	bics	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_TIM_ConfigClockSource+0x1a4>)
 800359c:	4013      	ands	r3, r2
 800359e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	0192      	lsls	r2, r2, #6
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d040      	beq.n	8003636 <HAL_TIM_ConfigClockSource+0xde>
 80035b4:	2280      	movs	r2, #128	; 0x80
 80035b6:	0192      	lsls	r2, r2, #6
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d900      	bls.n	80035be <HAL_TIM_ConfigClockSource+0x66>
 80035bc:	e088      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	0152      	lsls	r2, r2, #5
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d100      	bne.n	80035c8 <HAL_TIM_ConfigClockSource+0x70>
 80035c6:	e088      	b.n	80036da <HAL_TIM_ConfigClockSource+0x182>
 80035c8:	2280      	movs	r2, #128	; 0x80
 80035ca:	0152      	lsls	r2, r2, #5
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d900      	bls.n	80035d2 <HAL_TIM_ConfigClockSource+0x7a>
 80035d0:	e07e      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035d2:	2b70      	cmp	r3, #112	; 0x70
 80035d4:	d018      	beq.n	8003608 <HAL_TIM_ConfigClockSource+0xb0>
 80035d6:	d900      	bls.n	80035da <HAL_TIM_ConfigClockSource+0x82>
 80035d8:	e07a      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035da:	2b60      	cmp	r3, #96	; 0x60
 80035dc:	d04f      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x126>
 80035de:	d900      	bls.n	80035e2 <HAL_TIM_ConfigClockSource+0x8a>
 80035e0:	e076      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035e2:	2b50      	cmp	r3, #80	; 0x50
 80035e4:	d03b      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x106>
 80035e6:	d900      	bls.n	80035ea <HAL_TIM_ConfigClockSource+0x92>
 80035e8:	e072      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d057      	beq.n	800369e <HAL_TIM_ConfigClockSource+0x146>
 80035ee:	d900      	bls.n	80035f2 <HAL_TIM_ConfigClockSource+0x9a>
 80035f0:	e06e      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035f2:	2b30      	cmp	r3, #48	; 0x30
 80035f4:	d063      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x166>
 80035f6:	d86b      	bhi.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035f8:	2b20      	cmp	r3, #32
 80035fa:	d060      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x166>
 80035fc:	d868      	bhi.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d05d      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x166>
 8003602:	2b10      	cmp	r3, #16
 8003604:	d05b      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x166>
 8003606:	e063      	b.n	80036d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	6899      	ldr	r1, [r3, #8]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f000 f990 	bl	800393c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	2277      	movs	r2, #119	; 0x77
 8003628:	4313      	orrs	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	609a      	str	r2, [r3, #8]
      break;
 8003634:	e052      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	6899      	ldr	r1, [r3, #8]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f000 f979 	bl	800393c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2180      	movs	r1, #128	; 0x80
 8003656:	01c9      	lsls	r1, r1, #7
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
      break;
 800365c:	e03e      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6859      	ldr	r1, [r3, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	001a      	movs	r2, r3
 800366c:	f000 f8ec 	bl	8003848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2150      	movs	r1, #80	; 0x50
 8003676:	0018      	movs	r0, r3
 8003678:	f000 f946 	bl	8003908 <TIM_ITRx_SetConfig>
      break;
 800367c:	e02e      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	001a      	movs	r2, r3
 800368c:	f000 f90a 	bl	80038a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2160      	movs	r1, #96	; 0x60
 8003696:	0018      	movs	r0, r3
 8003698:	f000 f936 	bl	8003908 <TIM_ITRx_SetConfig>
      break;
 800369c:	e01e      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	001a      	movs	r2, r3
 80036ac:	f000 f8cc 	bl	8003848 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2140      	movs	r1, #64	; 0x40
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 f926 	bl	8003908 <TIM_ITRx_SetConfig>
      break;
 80036bc:	e00e      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	0019      	movs	r1, r3
 80036c8:	0010      	movs	r0, r2
 80036ca:	f000 f91d 	bl	8003908 <TIM_ITRx_SetConfig>
      break;
 80036ce:	e005      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80036d0:	230f      	movs	r3, #15
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
      break;
 80036d8:	e000      	b.n	80036dc <HAL_TIM_ConfigClockSource+0x184>
      break;
 80036da:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	223d      	movs	r2, #61	; 0x3d
 80036e0:	2101      	movs	r1, #1
 80036e2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	223c      	movs	r2, #60	; 0x3c
 80036e8:	2100      	movs	r1, #0
 80036ea:	5499      	strb	r1, [r3, r2]

  return status;
 80036ec:	230f      	movs	r3, #15
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	781b      	ldrb	r3, [r3, #0]
}
 80036f2:	0018      	movs	r0, r3
 80036f4:	46bd      	mov	sp, r7
 80036f6:	b004      	add	sp, #16
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	ffff00ff 	.word	0xffff00ff

08003700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003718:	46c0      	nop			; (mov r8, r8)
 800371a:	46bd      	mov	sp, r7
 800371c:	b002      	add	sp, #8
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003738:	46c0      	nop			; (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b002      	add	sp, #8
 800373e:	bd80      	pop	{r7, pc}

08003740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a37      	ldr	r2, [pc, #220]	; (8003830 <TIM_Base_SetConfig+0xf0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d008      	beq.n	800376a <TIM_Base_SetConfig+0x2a>
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	05db      	lsls	r3, r3, #23
 800375e:	429a      	cmp	r2, r3
 8003760:	d003      	beq.n	800376a <TIM_Base_SetConfig+0x2a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a33      	ldr	r2, [pc, #204]	; (8003834 <TIM_Base_SetConfig+0xf4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d108      	bne.n	800377c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2270      	movs	r2, #112	; 0x70
 800376e:	4393      	bics	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4313      	orrs	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a2c      	ldr	r2, [pc, #176]	; (8003830 <TIM_Base_SetConfig+0xf0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d014      	beq.n	80037ae <TIM_Base_SetConfig+0x6e>
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	05db      	lsls	r3, r3, #23
 800378a:	429a      	cmp	r2, r3
 800378c:	d00f      	beq.n	80037ae <TIM_Base_SetConfig+0x6e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a28      	ldr	r2, [pc, #160]	; (8003834 <TIM_Base_SetConfig+0xf4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_Base_SetConfig+0x6e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a27      	ldr	r2, [pc, #156]	; (8003838 <TIM_Base_SetConfig+0xf8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <TIM_Base_SetConfig+0x6e>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a26      	ldr	r2, [pc, #152]	; (800383c <TIM_Base_SetConfig+0xfc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_Base_SetConfig+0x6e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a25      	ldr	r2, [pc, #148]	; (8003840 <TIM_Base_SetConfig+0x100>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d108      	bne.n	80037c0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4a24      	ldr	r2, [pc, #144]	; (8003844 <TIM_Base_SetConfig+0x104>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2280      	movs	r2, #128	; 0x80
 80037c4:	4393      	bics	r3, r2
 80037c6:	001a      	movs	r2, r3
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a11      	ldr	r2, [pc, #68]	; (8003830 <TIM_Base_SetConfig+0xf0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d007      	beq.n	80037fe <TIM_Base_SetConfig+0xbe>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a12      	ldr	r2, [pc, #72]	; (800383c <TIM_Base_SetConfig+0xfc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d003      	beq.n	80037fe <TIM_Base_SetConfig+0xbe>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a11      	ldr	r2, [pc, #68]	; (8003840 <TIM_Base_SetConfig+0x100>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d103      	bne.n	8003806 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	2201      	movs	r2, #1
 8003812:	4013      	ands	r3, r2
 8003814:	2b01      	cmp	r3, #1
 8003816:	d106      	bne.n	8003826 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2201      	movs	r2, #1
 800381e:	4393      	bics	r3, r2
 8003820:	001a      	movs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	611a      	str	r2, [r3, #16]
  }
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b004      	add	sp, #16
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	40012c00 	.word	0x40012c00
 8003834:	40000400 	.word	0x40000400
 8003838:	40002000 	.word	0x40002000
 800383c:	40014400 	.word	0x40014400
 8003840:	40014800 	.word	0x40014800
 8003844:	fffffcff 	.word	0xfffffcff

08003848 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	2201      	movs	r2, #1
 8003860:	4393      	bics	r3, r2
 8003862:	001a      	movs	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	22f0      	movs	r2, #240	; 0xf0
 8003872:	4393      	bics	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	011b      	lsls	r3, r3, #4
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	220a      	movs	r2, #10
 8003884:	4393      	bics	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	621a      	str	r2, [r3, #32]
}
 800389c:	46c0      	nop			; (mov r8, r8)
 800389e:	46bd      	mov	sp, r7
 80038a0:	b006      	add	sp, #24
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	2210      	movs	r2, #16
 80038bc:	4393      	bics	r3, r2
 80038be:	001a      	movs	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4a0d      	ldr	r2, [pc, #52]	; (8003904 <TIM_TI2_ConfigInputStage+0x60>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	031b      	lsls	r3, r3, #12
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	22a0      	movs	r2, #160	; 0xa0
 80038e0:	4393      	bics	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b006      	add	sp, #24
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	ffff0fff 	.word	0xffff0fff

08003908 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2270      	movs	r2, #112	; 0x70
 800391c:	4393      	bics	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	2207      	movs	r2, #7
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	609a      	str	r2, [r3, #8]
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b004      	add	sp, #16
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	4a09      	ldr	r2, [pc, #36]	; (8003978 <TIM_ETR_SetConfig+0x3c>)
 8003954:	4013      	ands	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	021a      	lsls	r2, r3, #8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	431a      	orrs	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4313      	orrs	r3, r2
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	609a      	str	r2, [r3, #8]
}
 8003970:	46c0      	nop			; (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	b006      	add	sp, #24
 8003976:	bd80      	pop	{r7, pc}
 8003978:	ffff00ff 	.word	0xffff00ff

0800397c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	223c      	movs	r2, #60	; 0x3c
 800398a:	5c9b      	ldrb	r3, [r3, r2]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d101      	bne.n	8003994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003990:	2302      	movs	r3, #2
 8003992:	e042      	b.n	8003a1a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	223c      	movs	r2, #60	; 0x3c
 8003998:	2101      	movs	r1, #1
 800399a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	223d      	movs	r2, #61	; 0x3d
 80039a0:	2102      	movs	r1, #2
 80039a2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2270      	movs	r2, #112	; 0x70
 80039b8:	4393      	bics	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00a      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	05db      	lsls	r3, r3, #23
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d004      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a0f      	ldr	r2, [pc, #60]	; (8003a28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d10c      	bne.n	8003a08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2280      	movs	r2, #128	; 0x80
 80039f2:	4393      	bics	r3, r2
 80039f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	223d      	movs	r2, #61	; 0x3d
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	223c      	movs	r2, #60	; 0x3c
 8003a14:	2100      	movs	r1, #0
 8003a16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b004      	add	sp, #16
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	46c0      	nop			; (mov r8, r8)
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40000400 	.word	0x40000400

08003a2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a44:	46c0      	nop			; (mov r8, r8)
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b002      	add	sp, #8
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <__libc_init_array>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	2600      	movs	r6, #0
 8003a50:	4d0c      	ldr	r5, [pc, #48]	; (8003a84 <__libc_init_array+0x38>)
 8003a52:	4c0d      	ldr	r4, [pc, #52]	; (8003a88 <__libc_init_array+0x3c>)
 8003a54:	1b64      	subs	r4, r4, r5
 8003a56:	10a4      	asrs	r4, r4, #2
 8003a58:	42a6      	cmp	r6, r4
 8003a5a:	d109      	bne.n	8003a70 <__libc_init_array+0x24>
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	f000 f821 	bl	8003aa4 <_init>
 8003a62:	4d0a      	ldr	r5, [pc, #40]	; (8003a8c <__libc_init_array+0x40>)
 8003a64:	4c0a      	ldr	r4, [pc, #40]	; (8003a90 <__libc_init_array+0x44>)
 8003a66:	1b64      	subs	r4, r4, r5
 8003a68:	10a4      	asrs	r4, r4, #2
 8003a6a:	42a6      	cmp	r6, r4
 8003a6c:	d105      	bne.n	8003a7a <__libc_init_array+0x2e>
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	00b3      	lsls	r3, r6, #2
 8003a72:	58eb      	ldr	r3, [r5, r3]
 8003a74:	4798      	blx	r3
 8003a76:	3601      	adds	r6, #1
 8003a78:	e7ee      	b.n	8003a58 <__libc_init_array+0xc>
 8003a7a:	00b3      	lsls	r3, r6, #2
 8003a7c:	58eb      	ldr	r3, [r5, r3]
 8003a7e:	4798      	blx	r3
 8003a80:	3601      	adds	r6, #1
 8003a82:	e7f2      	b.n	8003a6a <__libc_init_array+0x1e>
 8003a84:	08003bac 	.word	0x08003bac
 8003a88:	08003bac 	.word	0x08003bac
 8003a8c:	08003bac 	.word	0x08003bac
 8003a90:	08003bb0 	.word	0x08003bb0

08003a94 <memset>:
 8003a94:	0003      	movs	r3, r0
 8003a96:	1882      	adds	r2, r0, r2
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d100      	bne.n	8003a9e <memset+0xa>
 8003a9c:	4770      	bx	lr
 8003a9e:	7019      	strb	r1, [r3, #0]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	e7f9      	b.n	8003a98 <memset+0x4>

08003aa4 <_init>:
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aaa:	bc08      	pop	{r3}
 8003aac:	469e      	mov	lr, r3
 8003aae:	4770      	bx	lr

08003ab0 <_fini>:
 8003ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ab6:	bc08      	pop	{r3}
 8003ab8:	469e      	mov	lr, r3
 8003aba:	4770      	bx	lr
