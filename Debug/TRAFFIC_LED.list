
TRAFFIC_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003964  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003a24  08003a24  00013a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b08  08003b08  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08003b08  08003b08  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b08  08003b08  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b0c  08003b0c  00013b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08003b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000003c  08003b4c  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08003b4c  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d984  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247e  00000000  00000000  0002d9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d30  00000000  00000000  0002fe68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00030b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ae6  00000000  00000000  00031768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e0b  00000000  00000000  0004224e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000604b3  00000000  00000000  00054059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b450c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da8  00000000  00000000  000b4560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a0c 	.word	0x08003a0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08003a0c 	.word	0x08003a0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <getKeyinput>:
#include "button.h"


int buttonFlag[3] = {0,0,0};

void getKeyinput(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	//-----PROCESS BUTTON 1------------

	// BEGIN: timer_flag[1] == 1
	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == 0)){
 80003f8:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <getKeyinput+0x7c>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d10e      	bne.n	800041e <getKeyinput+0x2a>
 8000400:	2390      	movs	r3, #144	; 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0018      	movs	r0, r3
 8000408:	f001 fcaa 	bl	8001d60 <HAL_GPIO_ReadPin>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d106      	bne.n	800041e <getKeyinput+0x2a>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		buttonFlag[0] = 1;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <getKeyinput+0x80>)
 8000412:	2201      	movs	r2, #1
 8000414:	601a      	str	r2, [r3, #0]
		setTimer(3, 200);  //Không đọc nút nhấn trong 200ms sau khi nhấn lần đầu tiên
 8000416:	21c8      	movs	r1, #200	; 0xc8
 8000418:	2003      	movs	r0, #3
 800041a:	f001 f94f 	bl	80016bc <setTimer>
	}
	// không đọc tiếp nút nhấn trong 200ms

	// ----PROCESS BUTTON 2-----------

	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)){
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <getKeyinput+0x7c>)
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d10e      	bne.n	8000444 <getKeyinput+0x50>
 8000426:	2390      	movs	r3, #144	; 0x90
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2108      	movs	r1, #8
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fc97 	bl	8001d60 <HAL_GPIO_ReadPin>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d106      	bne.n	8000444 <getKeyinput+0x50>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		buttonFlag[1] = 1;
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <getKeyinput+0x80>)
 8000438:	2201      	movs	r2, #1
 800043a:	605a      	str	r2, [r3, #4]
		setTimer(3, 200);
 800043c:	21c8      	movs	r1, #200	; 0xc8
 800043e:	2003      	movs	r0, #3
 8000440:	f001 f93c 	bl	80016bc <setTimer>
	}

	// ----- PROCESS BUTTON 3 -----------
	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == 0)){
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <getKeyinput+0x7c>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d10e      	bne.n	800046a <getKeyinput+0x76>
 800044c:	2390      	movs	r3, #144	; 0x90
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	2102      	movs	r1, #2
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fc84 	bl	8001d60 <HAL_GPIO_ReadPin>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d106      	bne.n	800046a <getKeyinput+0x76>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		setTimer(3, 200);
 800045c:	21c8      	movs	r1, #200	; 0xc8
 800045e:	2003      	movs	r0, #3
 8000460:	f001 f92c 	bl	80016bc <setTimer>
		buttonFlag[2] = 1;
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <getKeyinput+0x80>)
 8000466:	2201      	movs	r2, #1
 8000468:	609a      	str	r2, [r3, #8]
	}

}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000020 	.word	0x20000020
 8000474:	20000058 	.word	0x20000058

08000478 <isButtonPress>:
int isButtonPress(int i){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <isButtonPress+0x2c>)
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	0092      	lsls	r2, r2, #2
 8000486:	58d3      	ldr	r3, [r2, r3]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d106      	bne.n	800049a <isButtonPress+0x22>
		buttonFlag[i] = 0;
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <isButtonPress+0x2c>)
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	0092      	lsls	r2, r2, #2
 8000492:	2100      	movs	r1, #0
 8000494:	50d1      	str	r1, [r2, r3]
		return 1;
 8000496:	2301      	movs	r3, #1
 8000498:	e000      	b.n	800049c <isButtonPress+0x24>
	}
	return 0;
 800049a:	2300      	movs	r3, #0
}
 800049c:	0018      	movs	r0, r3
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000058 	.word	0x20000058

080004a8 <fsm_auto_run>:
 *      Author: HOME
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	switch (status) {   // LINE 1
 80004ac:	4bc8      	ldr	r3, [pc, #800]	; (80007d0 <fsm_auto_run+0x328>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	d900      	bls.n	80004b6 <fsm_auto_run+0xe>
 80004b4:	e188      	b.n	80007c8 <fsm_auto_run+0x320>
 80004b6:	009a      	lsls	r2, r3, #2
 80004b8:	4bc6      	ldr	r3, [pc, #792]	; (80007d4 <fsm_auto_run+0x32c>)
 80004ba:	18d3      	adds	r3, r2, r3
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	469f      	mov	pc, r3
		case auto_init:
			// ------- ALL LED OFF -------------
			single_LED_off();
 80004c0:	f000 fe3e 	bl	8001140 <single_LED_off>
			status = auto_red_green;
 80004c4:	4bc2      	ldr	r3, [pc, #776]	; (80007d0 <fsm_auto_run+0x328>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
			count0 = (time_red_green + time_red_yellow)/1000;
 80004ca:	4bc3      	ldr	r3, [pc, #780]	; (80007d8 <fsm_auto_run+0x330>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	4bc3      	ldr	r3, [pc, #780]	; (80007dc <fsm_auto_run+0x334>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	18d3      	adds	r3, r2, r3
 80004d4:	22fa      	movs	r2, #250	; 0xfa
 80004d6:	0091      	lsls	r1, r2, #2
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff fe9f 	bl	800021c <__divsi3>
 80004de:	0003      	movs	r3, r0
 80004e0:	001a      	movs	r2, r3
 80004e2:	4bbf      	ldr	r3, [pc, #764]	; (80007e0 <fsm_auto_run+0x338>)
 80004e4:	601a      	str	r2, [r3, #0]
			count1 = time_red_green/1000;
 80004e6:	4bbc      	ldr	r3, [pc, #752]	; (80007d8 <fsm_auto_run+0x330>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	22fa      	movs	r2, #250	; 0xfa
 80004ec:	0091      	lsls	r1, r2, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff fe94 	bl	800021c <__divsi3>
 80004f4:	0003      	movs	r3, r0
 80004f6:	001a      	movs	r2, r3
 80004f8:	4bba      	ldr	r3, [pc, #744]	; (80007e4 <fsm_auto_run+0x33c>)
 80004fa:	601a      	str	r2, [r3, #0]
			setTimer(0, time_red_green);
 80004fc:	4bb6      	ldr	r3, [pc, #728]	; (80007d8 <fsm_auto_run+0x330>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	0019      	movs	r1, r3
 8000502:	2000      	movs	r0, #0
 8000504:	f001 f8da 	bl	80016bc <setTimer>
			setTimer(1, 1000); // count 1s
 8000508:	23fa      	movs	r3, #250	; 0xfa
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	0019      	movs	r1, r3
 800050e:	2001      	movs	r0, #1
 8000510:	f001 f8d4 	bl	80016bc <setTimer>
			setTimer(2, 20);  // scan led
 8000514:	2114      	movs	r1, #20
 8000516:	2002      	movs	r0, #2
 8000518:	f001 f8d0 	bl	80016bc <setTimer>
			break;
 800051c:	e108      	b.n	8000730 <fsm_auto_run+0x288>
		case auto_red_green:
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET); // yellow 0 off
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	2201      	movs	r2, #1
 8000524:	2110      	movs	r1, #16
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fc37 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); // red 1 on
 800052c:	2390      	movs	r3, #144	; 0x90
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	2201      	movs	r2, #1
 8000532:	2104      	movs	r1, #4
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fc30 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET); // red0 on
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	0159      	lsls	r1, r3, #5
 800053e:	2390      	movs	r3, #144	; 0x90
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	2200      	movs	r2, #0
 8000544:	0018      	movs	r0, r3
 8000546:	f001 fc28 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET); // green1 on
 800054a:	4ba7      	ldr	r3, [pc, #668]	; (80007e8 <fsm_auto_run+0x340>)
 800054c:	2200      	movs	r2, #0
 800054e:	2110      	movs	r1, #16
 8000550:	0018      	movs	r0, r3
 8000552:	f001 fc22 	bl	8001d9a <HAL_GPIO_WritePin>
			if(timer_flag[0] == 1){
 8000556:	4ba5      	ldr	r3, [pc, #660]	; (80007ec <fsm_auto_run+0x344>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d11e      	bne.n	800059c <fsm_auto_run+0xf4>
				status = auto_red_yellow;
 800055e:	4b9c      	ldr	r3, [pc, #624]	; (80007d0 <fsm_auto_run+0x328>)
 8000560:	2202      	movs	r2, #2
 8000562:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_yellow);
 8000564:	4b9d      	ldr	r3, [pc, #628]	; (80007dc <fsm_auto_run+0x334>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	0019      	movs	r1, r3
 800056a:	2000      	movs	r0, #0
 800056c:	f001 f8a6 	bl	80016bc <setTimer>
				count0 = time_red_yellow/1000;;
 8000570:	4b9a      	ldr	r3, [pc, #616]	; (80007dc <fsm_auto_run+0x334>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	22fa      	movs	r2, #250	; 0xfa
 8000576:	0091      	lsls	r1, r2, #2
 8000578:	0018      	movs	r0, r3
 800057a:	f7ff fe4f 	bl	800021c <__divsi3>
 800057e:	0003      	movs	r3, r0
 8000580:	001a      	movs	r2, r3
 8000582:	4b97      	ldr	r3, [pc, #604]	; (80007e0 <fsm_auto_run+0x338>)
 8000584:	601a      	str	r2, [r3, #0]
				count1 = time_red_yellow/1000;
 8000586:	4b95      	ldr	r3, [pc, #596]	; (80007dc <fsm_auto_run+0x334>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	22fa      	movs	r2, #250	; 0xfa
 800058c:	0091      	lsls	r1, r2, #2
 800058e:	0018      	movs	r0, r3
 8000590:	f7ff fe44 	bl	800021c <__divsi3>
 8000594:	0003      	movs	r3, r0
 8000596:	001a      	movs	r2, r3
 8000598:	4b92      	ldr	r3, [pc, #584]	; (80007e4 <fsm_auto_run+0x33c>)
 800059a:	601a      	str	r2, [r3, #0]
			}
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff ff6b 	bl	8000478 <isButtonPress>
 80005a2:	0003      	movs	r3, r0
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d000      	beq.n	80005aa <fsm_auto_run+0x102>
 80005a8:	e0bb      	b.n	8000722 <fsm_auto_run+0x27a>
				status = manual_red_green;
 80005aa:	4b89      	ldr	r3, [pc, #548]	; (80007d0 <fsm_auto_run+0x328>)
 80005ac:	2205      	movs	r2, #5
 80005ae:	601a      	str	r2, [r3, #0]
				Diable_Led();
 80005b0:	f000 fc02 	bl	8000db8 <Diable_Led>
				//lcd_clear_display();// ----CLEAR LCD ----
				return;
 80005b4:	e109      	b.n	80007ca <fsm_auto_run+0x322>
			}
			break;
		case auto_red_yellow:
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 off
 80005b6:	4b8c      	ldr	r3, [pc, #560]	; (80007e8 <fsm_auto_run+0x340>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	2110      	movs	r1, #16
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fbec 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET); // yellow1 on
 80005c2:	4b89      	ldr	r3, [pc, #548]	; (80007e8 <fsm_auto_run+0x340>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	2120      	movs	r1, #32
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fbe6 	bl	8001d9a <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 80005ce:	4b87      	ldr	r3, [pc, #540]	; (80007ec <fsm_auto_run+0x344>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d000      	beq.n	80005d8 <fsm_auto_run+0x130>
 80005d6:	e0a6      	b.n	8000726 <fsm_auto_run+0x27e>
				status = auto_green_red;
 80005d8:	4b7d      	ldr	r3, [pc, #500]	; (80007d0 <fsm_auto_run+0x328>)
 80005da:	2203      	movs	r2, #3
 80005dc:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green)/1000;
 80005de:	4b7e      	ldr	r3, [pc, #504]	; (80007d8 <fsm_auto_run+0x330>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	22fa      	movs	r2, #250	; 0xfa
 80005e4:	0091      	lsls	r1, r2, #2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff fe18 	bl	800021c <__divsi3>
 80005ec:	0003      	movs	r3, r0
 80005ee:	001a      	movs	r2, r3
 80005f0:	4b7b      	ldr	r3, [pc, #492]	; (80007e0 <fsm_auto_run+0x338>)
 80005f2:	601a      	str	r2, [r3, #0]
				count1 = (time_red_green + time_red_yellow)/1000;
 80005f4:	4b78      	ldr	r3, [pc, #480]	; (80007d8 <fsm_auto_run+0x330>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b78      	ldr	r3, [pc, #480]	; (80007dc <fsm_auto_run+0x334>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	18d3      	adds	r3, r2, r3
 80005fe:	22fa      	movs	r2, #250	; 0xfa
 8000600:	0091      	lsls	r1, r2, #2
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff fe0a 	bl	800021c <__divsi3>
 8000608:	0003      	movs	r3, r0
 800060a:	001a      	movs	r2, r3
 800060c:	4b75      	ldr	r3, [pc, #468]	; (80007e4 <fsm_auto_run+0x33c>)
 800060e:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000610:	4b71      	ldr	r3, [pc, #452]	; (80007d8 <fsm_auto_run+0x330>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	0019      	movs	r1, r3
 8000616:	2000      	movs	r0, #0
 8000618:	f001 f850 	bl	80016bc <setTimer>
			}
			break;
 800061c:	e083      	b.n	8000726 <fsm_auto_run+0x27e>
		case auto_green_red:
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red 0 off
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	0159      	lsls	r1, r3, #5
 8000622:	2390      	movs	r3, #144	; 0x90
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2201      	movs	r2, #1
 8000628:	0018      	movs	r0, r3
 800062a:	f001 fbb6 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); // yellow 1 off
 800062e:	4b6e      	ldr	r3, [pc, #440]	; (80007e8 <fsm_auto_run+0x340>)
 8000630:	2201      	movs	r2, #1
 8000632:	2120      	movs	r1, #32
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fbb0 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET); // green 0 on
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	0059      	lsls	r1, r3, #1
 800063e:	2390      	movs	r3, #144	; 0x90
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	2200      	movs	r2, #0
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fba8 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 800064a:	2390      	movs	r3, #144	; 0x90
 800064c:	05db      	lsls	r3, r3, #23
 800064e:	2200      	movs	r2, #0
 8000650:	2104      	movs	r1, #4
 8000652:	0018      	movs	r0, r3
 8000654:	f001 fba1 	bl	8001d9a <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 8000658:	4b64      	ldr	r3, [pc, #400]	; (80007ec <fsm_auto_run+0x344>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11e      	bne.n	800069e <fsm_auto_run+0x1f6>
				status = auto_yellow_red;
 8000660:	4b5b      	ldr	r3, [pc, #364]	; (80007d0 <fsm_auto_run+0x328>)
 8000662:	2204      	movs	r2, #4
 8000664:	601a      	str	r2, [r3, #0]
				count0 = time_red_yellow/1000;
 8000666:	4b5d      	ldr	r3, [pc, #372]	; (80007dc <fsm_auto_run+0x334>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	22fa      	movs	r2, #250	; 0xfa
 800066c:	0091      	lsls	r1, r2, #2
 800066e:	0018      	movs	r0, r3
 8000670:	f7ff fdd4 	bl	800021c <__divsi3>
 8000674:	0003      	movs	r3, r0
 8000676:	001a      	movs	r2, r3
 8000678:	4b59      	ldr	r3, [pc, #356]	; (80007e0 <fsm_auto_run+0x338>)
 800067a:	601a      	str	r2, [r3, #0]
				count1 = time_red_yellow/1000;;
 800067c:	4b57      	ldr	r3, [pc, #348]	; (80007dc <fsm_auto_run+0x334>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	22fa      	movs	r2, #250	; 0xfa
 8000682:	0091      	lsls	r1, r2, #2
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff fdc9 	bl	800021c <__divsi3>
 800068a:	0003      	movs	r3, r0
 800068c:	001a      	movs	r2, r3
 800068e:	4b55      	ldr	r3, [pc, #340]	; (80007e4 <fsm_auto_run+0x33c>)
 8000690:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_yellow);
 8000692:	4b52      	ldr	r3, [pc, #328]	; (80007dc <fsm_auto_run+0x334>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	0019      	movs	r1, r3
 8000698:	2000      	movs	r0, #0
 800069a:	f001 f80f 	bl	80016bc <setTimer>
			}
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff feea 	bl	8000478 <isButtonPress>
 80006a4:	0003      	movs	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d13f      	bne.n	800072a <fsm_auto_run+0x282>
				status = manual_green_red;
 80006aa:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <fsm_auto_run+0x328>)
 80006ac:	2206      	movs	r2, #6
 80006ae:	601a      	str	r2, [r3, #0]
				Diable_Led();
 80006b0:	f000 fb82 	bl	8000db8 <Diable_Led>
				//lcd_clear_display();// ----CLEAR LCD ----
				return;
 80006b4:	e089      	b.n	80007ca <fsm_auto_run+0x322>
			}
			break;
		case auto_yellow_red:
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 on
 80006b6:	2390      	movs	r3, #144	; 0x90
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 fb6b 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET); // green 0 off
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	0059      	lsls	r1, r3, #1
 80006c8:	2390      	movs	r3, #144	; 0x90
 80006ca:	05db      	lsls	r3, r3, #23
 80006cc:	2201      	movs	r2, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fb63 	bl	8001d9a <HAL_GPIO_WritePin>
			if(timer_flag[0] == 1){
 80006d4:	4b45      	ldr	r3, [pc, #276]	; (80007ec <fsm_auto_run+0x344>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d128      	bne.n	800072e <fsm_auto_run+0x286>
				status = auto_red_green;
 80006dc:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <fsm_auto_run+0x328>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 80006e2:	4b3d      	ldr	r3, [pc, #244]	; (80007d8 <fsm_auto_run+0x330>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b3d      	ldr	r3, [pc, #244]	; (80007dc <fsm_auto_run+0x334>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	18d3      	adds	r3, r2, r3
 80006ec:	22fa      	movs	r2, #250	; 0xfa
 80006ee:	0091      	lsls	r1, r2, #2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff fd93 	bl	800021c <__divsi3>
 80006f6:	0003      	movs	r3, r0
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b39      	ldr	r3, [pc, #228]	; (80007e0 <fsm_auto_run+0x338>)
 80006fc:	601a      	str	r2, [r3, #0]
				count1 = time_red_green / 1000;
 80006fe:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <fsm_auto_run+0x330>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	22fa      	movs	r2, #250	; 0xfa
 8000704:	0091      	lsls	r1, r2, #2
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff fd88 	bl	800021c <__divsi3>
 800070c:	0003      	movs	r3, r0
 800070e:	001a      	movs	r2, r3
 8000710:	4b34      	ldr	r3, [pc, #208]	; (80007e4 <fsm_auto_run+0x33c>)
 8000712:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000714:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <fsm_auto_run+0x330>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	0019      	movs	r1, r3
 800071a:	2000      	movs	r0, #0
 800071c:	f000 ffce 	bl	80016bc <setTimer>
			}
			break;
 8000720:	e005      	b.n	800072e <fsm_auto_run+0x286>
			break;
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	e004      	b.n	8000730 <fsm_auto_run+0x288>
			break;
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	e002      	b.n	8000730 <fsm_auto_run+0x288>
			break;
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	e000      	b.n	8000730 <fsm_auto_run+0x288>
			break;
 800072e:	46c0      	nop			; (mov r8, r8)
		default: // ----- MANUAL MODE & SETTING MODE ---------
			return;
	}

	lcd_goto_XY(1, 0);
 8000730:	2100      	movs	r1, #0
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fb16 	bl	8000d64 <lcd_goto_XY>
	lcd_send_string("MODE: AUTO      ");
 8000738:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <fsm_auto_run+0x348>)
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fafd 	bl	8000d3a <lcd_send_string>
	lcd_goto_XY(0, 0);
 8000740:	2100      	movs	r1, #0
 8000742:	2000      	movs	r0, #0
 8000744:	f000 fb0e 	bl	8000d64 <lcd_goto_XY>
	lcd_send_string("PLEASE SLOW DOWN");
 8000748:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <fsm_auto_run+0x34c>)
 800074a:	0018      	movs	r0, r3
 800074c:	f000 faf5 	bl	8000d3a <lcd_send_string>

	updateClockBuffer(count0, count1);
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <fsm_auto_run+0x338>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <fsm_auto_run+0x33c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f000 fcc0 	bl	80010e0 <updateClockBuffer>
	if(timer_flag[2] == 1){
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <fsm_auto_run+0x344>)
 8000762:	689b      	ldr	r3, [r3, #8]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d105      	bne.n	8000774 <fsm_auto_run+0x2cc>
		setTimer(2, 20);
 8000768:	2114      	movs	r1, #20
 800076a:	2002      	movs	r0, #2
 800076c:	f000 ffa6 	bl	80016bc <setTimer>
		Scan7SEG();
 8000770:	f000 fb46 	bl	8000e00 <Scan7SEG>
	}
	if(timer_flag[1] == 1){
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <fsm_auto_run+0x344>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d10f      	bne.n	800079c <fsm_auto_run+0x2f4>
		setTimer(1, 1000);
 800077c:	23fa      	movs	r3, #250	; 0xfa
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	0019      	movs	r1, r3
 8000782:	2001      	movs	r0, #1
 8000784:	f000 ff9a 	bl	80016bc <setTimer>
		count0 --; count1 --;
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <fsm_auto_run+0x338>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	1e5a      	subs	r2, r3, #1
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <fsm_auto_run+0x338>)
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <fsm_auto_run+0x33c>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	1e5a      	subs	r2, r3, #1
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <fsm_auto_run+0x33c>)
 800079a:	601a      	str	r2, [r3, #0]
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 800079c:	2002      	movs	r0, #2
 800079e:	f7ff fe6b 	bl	8000478 <isButtonPress>
 80007a2:	0003      	movs	r3, r0
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d110      	bne.n	80007ca <fsm_auto_run+0x322>
		time_red_yellow = 0;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <fsm_auto_run+0x334>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 80007ae:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <fsm_auto_run+0x330>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
		single_LED_off();
 80007b4:	f000 fcc4 	bl	8001140 <single_LED_off>
		status = set_green;
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <fsm_auto_run+0x328>)
 80007ba:	2208      	movs	r2, #8
 80007bc:	601a      	str	r2, [r3, #0]
		setTimer(0, 100);
 80007be:	2164      	movs	r1, #100	; 0x64
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 ff7b 	bl	80016bc <setTimer>
		//lcd_clear_display(); // ----CLEAR LCD ----
		return;
 80007c6:	e000      	b.n	80007ca <fsm_auto_run+0x322>
			return;
 80007c8:	46c0      	nop			; (mov r8, r8)
	}
}
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	20000068 	.word	0x20000068
 80007d4:	08003a9c 	.word	0x08003a9c
 80007d8:	20000014 	.word	0x20000014
 80007dc:	20000018 	.word	0x20000018
 80007e0:	2000006c 	.word	0x2000006c
 80007e4:	20000070 	.word	0x20000070
 80007e8:	48000400 	.word	0x48000400
 80007ec:	20000020 	.word	0x20000020
 80007f0:	08003a24 	.word	0x08003a24
 80007f4:	08003a38 	.word	0x08003a38

080007f8 <fsm_manual>:
 *      Author: Admin
 */

#include "fsm_manual.h"

void fsm_manual(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	switch (status) {
 80007fc:	4b67      	ldr	r3, [pc, #412]	; (800099c <fsm_manual+0x1a4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b05      	cmp	r3, #5
 8000802:	d002      	beq.n	800080a <fsm_manual+0x12>
 8000804:	2b06      	cmp	r3, #6
 8000806:	d04f      	beq.n	80008a8 <fsm_manual+0xb0>
				setTimer(0, time_red_green);

			}
			break;
		default:
			return;
 8000808:	e0c5      	b.n	8000996 <fsm_manual+0x19e>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	0159      	lsls	r1, r3, #5
 800080e:	2390      	movs	r3, #144	; 0x90
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	2200      	movs	r2, #0
 8000814:	0018      	movs	r0, r3
 8000816:	f001 fac0 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 800081a:	4b61      	ldr	r3, [pc, #388]	; (80009a0 <fsm_manual+0x1a8>)
 800081c:	2200      	movs	r2, #0
 800081e:	2110      	movs	r1, #16
 8000820:	0018      	movs	r0, r3
 8000822:	f001 faba 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000826:	2390      	movs	r3, #144	; 0x90
 8000828:	05db      	lsls	r3, r3, #23
 800082a:	2201      	movs	r2, #1
 800082c:	2104      	movs	r1, #4
 800082e:	0018      	movs	r0, r3
 8000830:	f001 fab3 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	0059      	lsls	r1, r3, #1
 8000838:	2390      	movs	r3, #144	; 0x90
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	2201      	movs	r2, #1
 800083e:	0018      	movs	r0, r3
 8000840:	f001 faab 	bl	8001d9a <HAL_GPIO_WritePin>
			if(isButtonPress(1) == 1){
 8000844:	2001      	movs	r0, #1
 8000846:	f7ff fe17 	bl	8000478 <isButtonPress>
 800084a:	0003      	movs	r3, r0
 800084c:	2b01      	cmp	r3, #1
 800084e:	d102      	bne.n	8000856 <fsm_manual+0x5e>
				status = manual_green_red;
 8000850:	4b52      	ldr	r3, [pc, #328]	; (800099c <fsm_manual+0x1a4>)
 8000852:	2206      	movs	r2, #6
 8000854:	601a      	str	r2, [r3, #0]
			if(isButtonPress(0) == 1){
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fe0e 	bl	8000478 <isButtonPress>
 800085c:	0003      	movs	r3, r0
 800085e:	2b01      	cmp	r3, #1
 8000860:	d171      	bne.n	8000946 <fsm_manual+0x14e>
				status = auto_red_green;
 8000862:	4b4e      	ldr	r3, [pc, #312]	; (800099c <fsm_manual+0x1a4>)
 8000864:	2201      	movs	r2, #1
 8000866:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 8000868:	4b4e      	ldr	r3, [pc, #312]	; (80009a4 <fsm_manual+0x1ac>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b4e      	ldr	r3, [pc, #312]	; (80009a8 <fsm_manual+0x1b0>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	18d3      	adds	r3, r2, r3
 8000872:	22fa      	movs	r2, #250	; 0xfa
 8000874:	0091      	lsls	r1, r2, #2
 8000876:	0018      	movs	r0, r3
 8000878:	f7ff fcd0 	bl	800021c <__divsi3>
 800087c:	0003      	movs	r3, r0
 800087e:	001a      	movs	r2, r3
 8000880:	4b4a      	ldr	r3, [pc, #296]	; (80009ac <fsm_manual+0x1b4>)
 8000882:	601a      	str	r2, [r3, #0]
				count1 = time_red_green / 1000;
 8000884:	4b47      	ldr	r3, [pc, #284]	; (80009a4 <fsm_manual+0x1ac>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	22fa      	movs	r2, #250	; 0xfa
 800088a:	0091      	lsls	r1, r2, #2
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff fcc5 	bl	800021c <__divsi3>
 8000892:	0003      	movs	r3, r0
 8000894:	001a      	movs	r2, r3
 8000896:	4b46      	ldr	r3, [pc, #280]	; (80009b0 <fsm_manual+0x1b8>)
 8000898:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 800089a:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <fsm_manual+0x1ac>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	0019      	movs	r1, r3
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 ff0b 	bl	80016bc <setTimer>
			break;
 80008a6:	e04e      	b.n	8000946 <fsm_manual+0x14e>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 80008a8:	2390      	movs	r3, #144	; 0x90
 80008aa:	05db      	lsls	r3, r3, #23
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 fa72 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	0059      	lsls	r1, r3, #1
 80008ba:	2390      	movs	r3, #144	; 0x90
 80008bc:	05db      	lsls	r3, r3, #23
 80008be:	2200      	movs	r2, #0
 80008c0:	0018      	movs	r0, r3
 80008c2:	f001 fa6a 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 80008c6:	2380      	movs	r3, #128	; 0x80
 80008c8:	0159      	lsls	r1, r3, #5
 80008ca:	2390      	movs	r3, #144	; 0x90
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	2201      	movs	r2, #1
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 fa62 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80008d6:	4b32      	ldr	r3, [pc, #200]	; (80009a0 <fsm_manual+0x1a8>)
 80008d8:	2201      	movs	r2, #1
 80008da:	2110      	movs	r1, #16
 80008dc:	0018      	movs	r0, r3
 80008de:	f001 fa5c 	bl	8001d9a <HAL_GPIO_WritePin>
			if(isButtonPress(1) == 1){
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff fdc8 	bl	8000478 <isButtonPress>
 80008e8:	0003      	movs	r3, r0
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d102      	bne.n	80008f4 <fsm_manual+0xfc>
				status = manual_red_green;
 80008ee:	4b2b      	ldr	r3, [pc, #172]	; (800099c <fsm_manual+0x1a4>)
 80008f0:	2205      	movs	r2, #5
 80008f2:	601a      	str	r2, [r3, #0]
			if(isButtonPress(0) == 1){
 80008f4:	2000      	movs	r0, #0
 80008f6:	f7ff fdbf 	bl	8000478 <isButtonPress>
 80008fa:	0003      	movs	r3, r0
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d124      	bne.n	800094a <fsm_manual+0x152>
				status = auto_green_red;
 8000900:	4b26      	ldr	r3, [pc, #152]	; (800099c <fsm_manual+0x1a4>)
 8000902:	2203      	movs	r2, #3
 8000904:	601a      	str	r2, [r3, #0]
				count0 = time_red_green/1000;
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <fsm_manual+0x1ac>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	22fa      	movs	r2, #250	; 0xfa
 800090c:	0091      	lsls	r1, r2, #2
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff fc84 	bl	800021c <__divsi3>
 8000914:	0003      	movs	r3, r0
 8000916:	001a      	movs	r2, r3
 8000918:	4b24      	ldr	r3, [pc, #144]	; (80009ac <fsm_manual+0x1b4>)
 800091a:	601a      	str	r2, [r3, #0]
				count1 =   (time_red_green + time_red_yellow)/1000;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <fsm_manual+0x1ac>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <fsm_manual+0x1b0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	18d3      	adds	r3, r2, r3
 8000926:	22fa      	movs	r2, #250	; 0xfa
 8000928:	0091      	lsls	r1, r2, #2
 800092a:	0018      	movs	r0, r3
 800092c:	f7ff fc76 	bl	800021c <__divsi3>
 8000930:	0003      	movs	r3, r0
 8000932:	001a      	movs	r2, r3
 8000934:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <fsm_manual+0x1b8>)
 8000936:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000938:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <fsm_manual+0x1ac>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	0019      	movs	r1, r3
 800093e:	2000      	movs	r0, #0
 8000940:	f000 febc 	bl	80016bc <setTimer>
			break;
 8000944:	e001      	b.n	800094a <fsm_manual+0x152>
			break;
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	e000      	b.n	800094c <fsm_manual+0x154>
			break;
 800094a:	46c0      	nop			; (mov r8, r8)
	}

	lcd_goto_XY(1, 0);
 800094c:	2100      	movs	r1, #0
 800094e:	2001      	movs	r0, #1
 8000950:	f000 fa08 	bl	8000d64 <lcd_goto_XY>
	lcd_send_string("MODE: MANUAL    ");
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <fsm_manual+0x1bc>)
 8000956:	0018      	movs	r0, r3
 8000958:	f000 f9ef 	bl	8000d3a <lcd_send_string>
	lcd_goto_XY(0, 0);
 800095c:	2100      	movs	r1, #0
 800095e:	2000      	movs	r0, #0
 8000960:	f000 fa00 	bl	8000d64 <lcd_goto_XY>
	lcd_send_string("WAIT LED TO GO  ");
 8000964:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <fsm_manual+0x1c0>)
 8000966:	0018      	movs	r0, r3
 8000968:	f000 f9e7 	bl	8000d3a <lcd_send_string>

	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 800096c:	2002      	movs	r0, #2
 800096e:	f7ff fd83 	bl	8000478 <isButtonPress>
 8000972:	0003      	movs	r3, r0
 8000974:	2b01      	cmp	r3, #1
 8000976:	d10e      	bne.n	8000996 <fsm_manual+0x19e>
		setTimer(0, 100);
 8000978:	2164      	movs	r1, #100	; 0x64
 800097a:	2000      	movs	r0, #0
 800097c:	f000 fe9e 	bl	80016bc <setTimer>
		single_LED_off();
 8000980:	f000 fbde 	bl	8001140 <single_LED_off>
		status = set_green;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <fsm_manual+0x1a4>)
 8000986:	2208      	movs	r2, #8
 8000988:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <fsm_manual+0x1ac>)
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
		time_red_yellow = 0;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <fsm_manual+0x1b0>)
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
		//lcd_clear_display(); // ----CLEAR LCD ----
	}
}
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	20000068 	.word	0x20000068
 80009a0:	48000400 	.word	0x48000400
 80009a4:	20000014 	.word	0x20000014
 80009a8:	20000018 	.word	0x20000018
 80009ac:	2000006c 	.word	0x2000006c
 80009b0:	20000070 	.word	0x20000070
 80009b4:	08003a4c 	.word	0x08003a4c
 80009b8:	08003a60 	.word	0x08003a60

080009bc <fsm_setting>:
#include "fsm_setting.h"

int increment[5] = {1000,2000,5000,10000,20000};
int i = 0;

void fsm_setting(){
 80009bc:	b5b0      	push	{r4, r5, r7, lr}
 80009be:	af00      	add	r7, sp, #0
	switch (status) {
 80009c0:	4b7d      	ldr	r3, [pc, #500]	; (8000bb8 <fsm_setting+0x1fc>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	d062      	beq.n	8000a8e <fsm_setting+0xd2>
 80009c8:	2b08      	cmp	r3, #8
 80009ca:	d000      	beq.n	80009ce <fsm_setting+0x12>
 80009cc:	e0f1      	b.n	8000bb2 <fsm_setting+0x1f6>
		case set_green:
			if(timer_flag[0] == 1){
 80009ce:	4b7b      	ldr	r3, [pc, #492]	; (8000bbc <fsm_setting+0x200>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d110      	bne.n	80009f8 <fsm_setting+0x3c>
				setTimer(0, 100);
 80009d6:	2164      	movs	r1, #100	; 0x64
 80009d8:	2000      	movs	r0, #0
 80009da:	f000 fe6f 	bl	80016bc <setTimer>
				HAL_GPIO_TogglePin(G0_GPIO_Port, G0_Pin);
 80009de:	2380      	movs	r3, #128	; 0x80
 80009e0:	005a      	lsls	r2, r3, #1
 80009e2:	2390      	movs	r3, #144	; 0x90
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	0011      	movs	r1, r2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 f9f3 	bl	8001dd4 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 80009ee:	4b74      	ldr	r3, [pc, #464]	; (8000bc0 <fsm_setting+0x204>)
 80009f0:	2110      	movs	r1, #16
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 f9ee 	bl	8001dd4 <HAL_GPIO_TogglePin>
			}
			if(isButtonPress(0) == 1){  // TIME INCREASE
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff fd3d 	bl	8000478 <isButtonPress>
 80009fe:	0003      	movs	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d111      	bne.n	8000a28 <fsm_setting+0x6c>
				time_red_green += increment[i];
 8000a04:	4b6f      	ldr	r3, [pc, #444]	; (8000bc4 <fsm_setting+0x208>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b6f      	ldr	r3, [pc, #444]	; (8000bc8 <fsm_setting+0x20c>)
 8000a0a:	0092      	lsls	r2, r2, #2
 8000a0c:	58d2      	ldr	r2, [r2, r3]
 8000a0e:	4b6f      	ldr	r3, [pc, #444]	; (8000bcc <fsm_setting+0x210>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	18d2      	adds	r2, r2, r3
 8000a14:	4b6d      	ldr	r3, [pc, #436]	; (8000bcc <fsm_setting+0x210>)
 8000a16:	601a      	str	r2, [r3, #0]
				if(time_red_green > 98000){
 8000a18:	4b6c      	ldr	r3, [pc, #432]	; (8000bcc <fsm_setting+0x210>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a6c      	ldr	r2, [pc, #432]	; (8000bd0 <fsm_setting+0x214>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	dd02      	ble.n	8000a28 <fsm_setting+0x6c>
					time_red_green = 0;
 8000a22:	4b6a      	ldr	r3, [pc, #424]	; (8000bcc <fsm_setting+0x210>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButtonPress(2) == 1){
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f7ff fd25 	bl	8000478 <isButtonPress>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d113      	bne.n	8000a5c <fsm_setting+0xa0>
				status = set_yellow;
 8000a34:	4b60      	ldr	r3, [pc, #384]	; (8000bb8 <fsm_setting+0x1fc>)
 8000a36:	2207      	movs	r2, #7
 8000a38:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000a3a:	2380      	movs	r3, #128	; 0x80
 8000a3c:	0059      	lsls	r1, r3, #1
 8000a3e:	2390      	movs	r3, #144	; 0x90
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	2201      	movs	r2, #1
 8000a44:	0018      	movs	r0, r3
 8000a46:	f001 f9a8 	bl	8001d9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000a4a:	4b5d      	ldr	r3, [pc, #372]	; (8000bc0 <fsm_setting+0x204>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2110      	movs	r1, #16
 8000a50:	0018      	movs	r0, r3
 8000a52:	f001 f9a2 	bl	8001d9a <HAL_GPIO_WritePin>
				i = 0;
 8000a56:	4b5b      	ldr	r3, [pc, #364]	; (8000bc4 <fsm_setting+0x208>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
			}
			updateClockBuffer(time_red_green/1000, increment[i]/1000);
 8000a5c:	4b5b      	ldr	r3, [pc, #364]	; (8000bcc <fsm_setting+0x210>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	22fa      	movs	r2, #250	; 0xfa
 8000a62:	0091      	lsls	r1, r2, #2
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff fbd9 	bl	800021c <__divsi3>
 8000a6a:	0003      	movs	r3, r0
 8000a6c:	001c      	movs	r4, r3
 8000a6e:	4b55      	ldr	r3, [pc, #340]	; (8000bc4 <fsm_setting+0x208>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4b55      	ldr	r3, [pc, #340]	; (8000bc8 <fsm_setting+0x20c>)
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	58d3      	ldr	r3, [r2, r3]
 8000a78:	22fa      	movs	r2, #250	; 0xfa
 8000a7a:	0091      	lsls	r1, r2, #2
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fbcd 	bl	800021c <__divsi3>
 8000a82:	0003      	movs	r3, r0
 8000a84:	0019      	movs	r1, r3
 8000a86:	0020      	movs	r0, r4
 8000a88:	f000 fb2a 	bl	80010e0 <updateClockBuffer>
			break;
 8000a8c:	e064      	b.n	8000b58 <fsm_setting+0x19c>
		case set_yellow:
			if(timer_flag[0] == 1){
 8000a8e:	4b4b      	ldr	r3, [pc, #300]	; (8000bbc <fsm_setting+0x200>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d10e      	bne.n	8000ab4 <fsm_setting+0xf8>
				setTimer(0, 100);
 8000a96:	2164      	movs	r1, #100	; 0x64
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f000 fe0f 	bl	80016bc <setTimer>
				HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
 8000a9e:	2390      	movs	r3, #144	; 0x90
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 f995 	bl	8001dd4 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000aaa:	4b45      	ldr	r3, [pc, #276]	; (8000bc0 <fsm_setting+0x204>)
 8000aac:	2120      	movs	r1, #32
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f001 f990 	bl	8001dd4 <HAL_GPIO_TogglePin>
			}
			if(isButtonPress(0) == 1){
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff fcdf 	bl	8000478 <isButtonPress>
 8000aba:	0003      	movs	r3, r0
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d109      	bne.n	8000ad4 <fsm_setting+0x118>
				time_red_yellow += increment[i];
 8000ac0:	4b40      	ldr	r3, [pc, #256]	; (8000bc4 <fsm_setting+0x208>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b40      	ldr	r3, [pc, #256]	; (8000bc8 <fsm_setting+0x20c>)
 8000ac6:	0092      	lsls	r2, r2, #2
 8000ac8:	58d2      	ldr	r2, [r2, r3]
 8000aca:	4b42      	ldr	r3, [pc, #264]	; (8000bd4 <fsm_setting+0x218>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	18d2      	adds	r2, r2, r3
 8000ad0:	4b40      	ldr	r3, [pc, #256]	; (8000bd4 <fsm_setting+0x218>)
 8000ad2:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPress(2) == 1){
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f7ff fccf 	bl	8000478 <isButtonPress>
 8000ada:	0003      	movs	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d122      	bne.n	8000b26 <fsm_setting+0x16a>
				if((time_red_yellow + time_red_green) >= 100000  && time_red_green == 0 ){
 8000ae0:	4b3c      	ldr	r3, [pc, #240]	; (8000bd4 <fsm_setting+0x218>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b39      	ldr	r3, [pc, #228]	; (8000bcc <fsm_setting+0x210>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	18d3      	adds	r3, r2, r3
 8000aea:	4a3b      	ldr	r2, [pc, #236]	; (8000bd8 <fsm_setting+0x21c>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	dd17      	ble.n	8000b20 <fsm_setting+0x164>
 8000af0:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <fsm_setting+0x210>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d113      	bne.n	8000b20 <fsm_setting+0x164>
					HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 8000af8:	2390      	movs	r3, #144	; 0x90
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	2201      	movs	r2, #1
 8000afe:	2110      	movs	r1, #16
 8000b00:	0018      	movs	r0, r3
 8000b02:	f001 f94a 	bl	8001d9a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8000b06:	4b2e      	ldr	r3, [pc, #184]	; (8000bc0 <fsm_setting+0x204>)
 8000b08:	2201      	movs	r2, #1
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 f944 	bl	8001d9a <HAL_GPIO_WritePin>
					status = set_green;
 8000b12:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <fsm_setting+0x1fc>)
 8000b14:	2208      	movs	r2, #8
 8000b16:	601a      	str	r2, [r3, #0]
					i = 0;
 8000b18:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <fsm_setting+0x208>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	e002      	b.n	8000b26 <fsm_setting+0x16a>
				}
				else {
					status = auto_init;
 8000b20:	4b25      	ldr	r3, [pc, #148]	; (8000bb8 <fsm_setting+0x1fc>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
					//lcd_clear_display();
				}
			}
			updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <fsm_setting+0x218>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	22fa      	movs	r2, #250	; 0xfa
 8000b2c:	0091      	lsls	r1, r2, #2
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fb74 	bl	800021c <__divsi3>
 8000b34:	0003      	movs	r3, r0
 8000b36:	001c      	movs	r4, r3
 8000b38:	4b22      	ldr	r3, [pc, #136]	; (8000bc4 <fsm_setting+0x208>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <fsm_setting+0x20c>)
 8000b3e:	0092      	lsls	r2, r2, #2
 8000b40:	58d3      	ldr	r3, [r2, r3]
 8000b42:	22fa      	movs	r2, #250	; 0xfa
 8000b44:	0091      	lsls	r1, r2, #2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fb68 	bl	800021c <__divsi3>
 8000b4c:	0003      	movs	r3, r0
 8000b4e:	0019      	movs	r1, r3
 8000b50:	0020      	movs	r0, r4
 8000b52:	f000 fac5 	bl	80010e0 <updateClockBuffer>
			break;
 8000b56:	46c0      	nop			; (mov r8, r8)
		default:
			return;
	}
	lcd_goto_XY(1, 0);
 8000b58:	2100      	movs	r1, #0
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	f000 f902 	bl	8000d64 <lcd_goto_XY>
	lcd_send_string("MODE: SETTING   ");
 8000b60:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <fsm_setting+0x220>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 f8e9 	bl	8000d3a <lcd_send_string>
	lcd_goto_XY(0, 0);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f8fa 	bl	8000d64 <lcd_goto_XY>
	lcd_send_string("SHE BLOCKED ME:(");
 8000b70:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <fsm_setting+0x224>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f000 f8e1 	bl	8000d3a <lcd_send_string>
	if(isButtonPress(1) == 1){
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f7ff fc7d 	bl	8000478 <isButtonPress>
 8000b7e:	0003      	movs	r3, r0
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d10b      	bne.n	8000b9c <fsm_setting+0x1e0>
		 ++i;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <fsm_setting+0x208>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	1c5a      	adds	r2, r3, #1
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <fsm_setting+0x208>)
 8000b8c:	601a      	str	r2, [r3, #0]
		 if(i >=5) i = 0;
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <fsm_setting+0x208>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	dd02      	ble.n	8000b9c <fsm_setting+0x1e0>
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <fsm_setting+0x208>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag[2] == 1){
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <fsm_setting+0x200>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d107      	bne.n	8000bb4 <fsm_setting+0x1f8>
		setTimer(2, 20);
 8000ba4:	2114      	movs	r1, #20
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f000 fd88 	bl	80016bc <setTimer>
		Scan7SEG();
 8000bac:	f000 f928 	bl	8000e00 <Scan7SEG>
 8000bb0:	e000      	b.n	8000bb4 <fsm_setting+0x1f8>
			return;
 8000bb2:	46c0      	nop			; (mov r8, r8)
	}

}
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bb8:	20000068 	.word	0x20000068
 8000bbc:	20000020 	.word	0x20000020
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	20000064 	.word	0x20000064
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000014 	.word	0x20000014
 8000bd0:	00017ed0 	.word	0x00017ed0
 8000bd4:	20000018 	.word	0x20000018
 8000bd8:	0001869f 	.word	0x0001869f
 8000bdc:	08003a74 	.word	0x08003a74
 8000be0:	08003a88 	.word	0x08003a88

08000be4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000be4:	b590      	push	{r4, r7, lr}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	0002      	movs	r2, r0
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000bf0:	200f      	movs	r0, #15
 8000bf2:	183b      	adds	r3, r7, r0
 8000bf4:	1dfa      	adds	r2, r7, #7
 8000bf6:	7812      	ldrb	r2, [r2, #0]
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	438a      	bics	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	011a      	lsls	r2, r3, #4
 8000c04:	240e      	movs	r4, #14
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c0a:	183b      	adds	r3, r7, r0
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	220c      	movs	r2, #12
 8000c10:	4313      	orrs	r3, r2
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	2108      	movs	r1, #8
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c1a:	183b      	adds	r3, r7, r0
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2208      	movs	r2, #8
 8000c20:	4313      	orrs	r3, r2
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	220c      	movs	r2, #12
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	187b      	adds	r3, r7, r1
 8000c34:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2208      	movs	r2, #8
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000c44:	187a      	adds	r2, r7, r1
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <lcd_send_cmd+0x78>)
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	214e      	movs	r1, #78	; 0x4e
 8000c50:	f001 f982 	bl	8001f58 <HAL_I2C_Master_Transmit>
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b005      	add	sp, #20
 8000c5a:	bd90      	pop	{r4, r7, pc}
 8000c5c:	2000009c 	.word	0x2000009c

08000c60 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b087      	sub	sp, #28
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	0002      	movs	r2, r0
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c6c:	200f      	movs	r0, #15
 8000c6e:	183b      	adds	r3, r7, r0
 8000c70:	1dfa      	adds	r2, r7, #7
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	210f      	movs	r1, #15
 8000c76:	438a      	bics	r2, r1
 8000c78:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	011a      	lsls	r2, r3, #4
 8000c80:	240e      	movs	r4, #14
 8000c82:	193b      	adds	r3, r7, r4
 8000c84:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c86:	183b      	adds	r3, r7, r0
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	220d      	movs	r2, #13
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	2108      	movs	r1, #8
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c96:	183b      	adds	r3, r7, r0
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2209      	movs	r2, #9
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	220d      	movs	r2, #13
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2209      	movs	r2, #9
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	187b      	adds	r3, r7, r1
 8000cbe:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000cc0:	187a      	adds	r2, r7, r1
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <lcd_send_data+0x78>)
 8000cc4:	2364      	movs	r3, #100	; 0x64
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2304      	movs	r3, #4
 8000cca:	214e      	movs	r1, #78	; 0x4e
 8000ccc:	f001 f944 	bl	8001f58 <HAL_I2C_Master_Transmit>
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b005      	add	sp, #20
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	2000009c 	.word	0x2000009c

08000cdc <lcd_init>:

void lcd_init (void) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000ce0:	2033      	movs	r0, #51	; 0x33
 8000ce2:	f7ff ff7f 	bl	8000be4 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000ce6:	2032      	movs	r0, #50	; 0x32
 8000ce8:	f7ff ff7c 	bl	8000be4 <lcd_send_cmd>
	HAL_Delay(50);
 8000cec:	2032      	movs	r0, #50	; 0x32
 8000cee:	f000 fdcd 	bl	800188c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000cf2:	2028      	movs	r0, #40	; 0x28
 8000cf4:	f7ff ff76 	bl	8000be4 <lcd_send_cmd>
	HAL_Delay(50);
 8000cf8:	2032      	movs	r0, #50	; 0x32
 8000cfa:	f000 fdc7 	bl	800188c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff ff70 	bl	8000be4 <lcd_send_cmd>
	HAL_Delay(50);
 8000d04:	2032      	movs	r0, #50	; 0x32
 8000d06:	f000 fdc1 	bl	800188c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000d0a:	2006      	movs	r0, #6
 8000d0c:	f7ff ff6a 	bl	8000be4 <lcd_send_cmd>
	HAL_Delay(50);
 8000d10:	2032      	movs	r0, #50	; 0x32
 8000d12:	f000 fdbb 	bl	800188c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 8000d16:	200c      	movs	r0, #12
 8000d18:	f7ff ff64 	bl	8000be4 <lcd_send_cmd>
	HAL_Delay(50);
 8000d1c:	2032      	movs	r0, #50	; 0x32
 8000d1e:	f000 fdb5 	bl	800188c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000d22:	2002      	movs	r0, #2
 8000d24:	f7ff ff5e 	bl	8000be4 <lcd_send_cmd>
	HAL_Delay(50);
 8000d28:	2032      	movs	r0, #50	; 0x32
 8000d2a:	f000 fdaf 	bl	800188c <HAL_Delay>
	lcd_send_cmd (0x80);
 8000d2e:	2080      	movs	r0, #128	; 0x80
 8000d30:	f7ff ff58 	bl	8000be4 <lcd_send_cmd>
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000d42:	e006      	b.n	8000d52 <lcd_send_string+0x18>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff ff87 	bl	8000c60 <lcd_send_data>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f4      	bne.n	8000d44 <lcd_send_string+0xa>
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d10a      	bne.n	8000d8a <lcd_goto_XY+0x26>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	18d3      	adds	r3, r2, r3
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	230f      	movs	r3, #15
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	327f      	adds	r2, #127	; 0x7f
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e00b      	b.n	8000da2 <lcd_goto_XY+0x3e>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	3340      	adds	r3, #64	; 0x40
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	b25b      	sxtb	r3, r3
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	4252      	negs	r2, r2
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	b25a      	sxtb	r2, r3
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	701a      	strb	r2, [r3, #0]
	}
	lcd_send_cmd(pos_Addr);
 8000da2:	230f      	movs	r3, #15
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	0018      	movs	r0, r3
 8000daa:	f7ff ff1b 	bl	8000be4 <lcd_send_cmd>
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b004      	add	sp, #16
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <Diable_Led>:
 */
#include "led_display.h"

int led_buffer[4] = {0,0,0,0};
int led_index = 0;
void Diable_Led(){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000dbc:	2390      	movs	r3, #144	; 0x90
 8000dbe:	05db      	lsls	r3, r3, #23
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 ffe8 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000dca:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <Diable_Led+0x40>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2102      	movs	r1, #2
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 ffe2 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <Diable_Led+0x44>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 ffdc 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	0119      	lsls	r1, r3, #4
 8000de6:	2390      	movs	r3, #144	; 0x90
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	2200      	movs	r2, #0
 8000dec:	0018      	movs	r0, r3
 8000dee:	f000 ffd4 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	48001400 	.word	0x48001400
 8000dfc:	48000400 	.word	0x48000400

08000e00 <Scan7SEG>:
void Scan7SEG(){
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
	Diable_Led();
 8000e04:	f7ff ffd8 	bl	8000db8 <Diable_Led>
	switch(led_index){
 8000e08:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <Scan7SEG+0xa8>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d02d      	beq.n	8000e6c <Scan7SEG+0x6c>
 8000e10:	dc3a      	bgt.n	8000e88 <Scan7SEG+0x88>
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d01e      	beq.n	8000e54 <Scan7SEG+0x54>
 8000e16:	dc37      	bgt.n	8000e88 <Scan7SEG+0x88>
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <Scan7SEG+0x22>
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d00d      	beq.n	8000e3c <Scan7SEG+0x3c>
		case 3:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
			display7SEG(led_buffer[3]);
			break;
		default:
			break;
 8000e20:	e032      	b.n	8000e88 <Scan7SEG+0x88>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000e22:	2390      	movs	r3, #144	; 0x90
 8000e24:	05db      	lsls	r3, r3, #23
 8000e26:	2201      	movs	r2, #1
 8000e28:	2101      	movs	r1, #1
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	f000 ffb5 	bl	8001d9a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000e30:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <Scan7SEG+0xac>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	0018      	movs	r0, r3
 8000e36:	f000 f83f 	bl	8000eb8 <display7SEG>
			break;
 8000e3a:	e026      	b.n	8000e8a <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <Scan7SEG+0xb0>)
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2102      	movs	r1, #2
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 ffa9 	bl	8001d9a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <Scan7SEG+0xac>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f000 f833 	bl	8000eb8 <display7SEG>
			break;
 8000e52:	e01a      	b.n	8000e8a <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <Scan7SEG+0xb4>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	2108      	movs	r1, #8
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f000 ff9d 	bl	8001d9a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <Scan7SEG+0xac>)
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 f827 	bl	8000eb8 <display7SEG>
			break;
 8000e6a:	e00e      	b.n	8000e8a <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	0119      	lsls	r1, r3, #4
 8000e70:	2390      	movs	r3, #144	; 0x90
 8000e72:	05db      	lsls	r3, r3, #23
 8000e74:	2201      	movs	r2, #1
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 ff8f 	bl	8001d9a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <Scan7SEG+0xac>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 f819 	bl	8000eb8 <display7SEG>
			break;
 8000e86:	e000      	b.n	8000e8a <Scan7SEG+0x8a>
			break;
 8000e88:	46c0      	nop			; (mov r8, r8)
	}
	if((++led_index) >= 4) led_index = 0;
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <Scan7SEG+0xa8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <Scan7SEG+0xa8>)
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <Scan7SEG+0xa8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	dd02      	ble.n	8000ea2 <Scan7SEG+0xa2>
 8000e9c:	4b02      	ldr	r3, [pc, #8]	; (8000ea8 <Scan7SEG+0xa8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000084 	.word	0x20000084
 8000eac:	20000074 	.word	0x20000074
 8000eb0:	48001400 	.word	0x48001400
 8000eb4:	48000400 	.word	0x48000400

08000eb8 <display7SEG>:
void display7SEG(int num){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b09      	cmp	r3, #9
 8000ec4:	d900      	bls.n	8000ec8 <display7SEG+0x10>
 8000ec6:	e0ff      	b.n	80010c8 <display7SEG+0x210>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	009a      	lsls	r2, r3, #2
 8000ecc:	4b81      	ldr	r3, [pc, #516]	; (80010d4 <display7SEG+0x21c>)
 8000ece:	18d3      	adds	r3, r2, r3
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	469f      	mov	pc, r3
	switch(num){
		case 0:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000ed4:	4b80      	ldr	r3, [pc, #512]	; (80010d8 <display7SEG+0x220>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2101      	movs	r1, #1
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 ff5d 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000ee0:	4b7e      	ldr	r3, [pc, #504]	; (80010dc <display7SEG+0x224>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 ff57 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000eec:	4b7b      	ldr	r3, [pc, #492]	; (80010dc <display7SEG+0x224>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2140      	movs	r1, #64	; 0x40
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 ff51 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000ef8:	4b78      	ldr	r3, [pc, #480]	; (80010dc <display7SEG+0x224>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	2102      	movs	r1, #2
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 ff4b 	bl	8001d9a <HAL_GPIO_WritePin>
			break;
 8000f04:	e0e1      	b.n	80010ca <display7SEG+0x212>
		case 1:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000f06:	4b74      	ldr	r3, [pc, #464]	; (80010d8 <display7SEG+0x220>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f000 ff44 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000f12:	4b72      	ldr	r3, [pc, #456]	; (80010dc <display7SEG+0x224>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 ff3e 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000f1e:	4b6f      	ldr	r3, [pc, #444]	; (80010dc <display7SEG+0x224>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	0018      	movs	r0, r3
 8000f26:	f000 ff38 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000f2a:	4b6c      	ldr	r3, [pc, #432]	; (80010dc <display7SEG+0x224>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2102      	movs	r1, #2
 8000f30:	0018      	movs	r0, r3
 8000f32:	f000 ff32 	bl	8001d9a <HAL_GPIO_WritePin>
			break;
 8000f36:	e0c8      	b.n	80010ca <display7SEG+0x212>
		case 2:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000f38:	4b67      	ldr	r3, [pc, #412]	; (80010d8 <display7SEG+0x220>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 ff2b 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000f44:	4b65      	ldr	r3, [pc, #404]	; (80010dc <display7SEG+0x224>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 ff25 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000f50:	4b62      	ldr	r3, [pc, #392]	; (80010dc <display7SEG+0x224>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	0018      	movs	r0, r3
 8000f58:	f000 ff1f 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000f5c:	4b5f      	ldr	r3, [pc, #380]	; (80010dc <display7SEG+0x224>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2102      	movs	r1, #2
 8000f62:	0018      	movs	r0, r3
 8000f64:	f000 ff19 	bl	8001d9a <HAL_GPIO_WritePin>
			break;
 8000f68:	e0af      	b.n	80010ca <display7SEG+0x212>
		case 3:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000f6a:	4b5b      	ldr	r3, [pc, #364]	; (80010d8 <display7SEG+0x220>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2101      	movs	r1, #1
 8000f70:	0018      	movs	r0, r3
 8000f72:	f000 ff12 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000f76:	4b59      	ldr	r3, [pc, #356]	; (80010dc <display7SEG+0x224>)
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2180      	movs	r1, #128	; 0x80
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f000 ff0c 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000f82:	4b56      	ldr	r3, [pc, #344]	; (80010dc <display7SEG+0x224>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	2140      	movs	r1, #64	; 0x40
 8000f88:	0018      	movs	r0, r3
 8000f8a:	f000 ff06 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000f8e:	4b53      	ldr	r3, [pc, #332]	; (80010dc <display7SEG+0x224>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	2102      	movs	r1, #2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 ff00 	bl	8001d9a <HAL_GPIO_WritePin>
			break;
 8000f9a:	e096      	b.n	80010ca <display7SEG+0x212>
		case 4:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000f9c:	4b4e      	ldr	r3, [pc, #312]	; (80010d8 <display7SEG+0x220>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 fef9 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000fa8:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <display7SEG+0x224>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f000 fef3 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8000fb4:	4b49      	ldr	r3, [pc, #292]	; (80010dc <display7SEG+0x224>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2140      	movs	r1, #64	; 0x40
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 feed 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000fc0:	4b46      	ldr	r3, [pc, #280]	; (80010dc <display7SEG+0x224>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f000 fee7 	bl	8001d9a <HAL_GPIO_WritePin>
			break;
 8000fcc:	e07d      	b.n	80010ca <display7SEG+0x212>
		case 5:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000fce:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <display7SEG+0x220>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f000 fee0 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000fda:	4b40      	ldr	r3, [pc, #256]	; (80010dc <display7SEG+0x224>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2180      	movs	r1, #128	; 0x80
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 feda 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <display7SEG+0x224>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2140      	movs	r1, #64	; 0x40
 8000fec:	0018      	movs	r0, r3
 8000fee:	f000 fed4 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <display7SEG+0x224>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f000 fece 	bl	8001d9a <HAL_GPIO_WritePin>
			break;
 8000ffe:	e064      	b.n	80010ca <display7SEG+0x212>
		case 6:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <display7SEG+0x220>)
 8001002:	2200      	movs	r2, #0
 8001004:	2101      	movs	r1, #1
 8001006:	0018      	movs	r0, r3
 8001008:	f000 fec7 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 800100c:	4b33      	ldr	r3, [pc, #204]	; (80010dc <display7SEG+0x224>)
 800100e:	2201      	movs	r2, #1
 8001010:	2180      	movs	r1, #128	; 0x80
 8001012:	0018      	movs	r0, r3
 8001014:	f000 fec1 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8001018:	4b30      	ldr	r3, [pc, #192]	; (80010dc <display7SEG+0x224>)
 800101a:	2201      	movs	r2, #1
 800101c:	2140      	movs	r1, #64	; 0x40
 800101e:	0018      	movs	r0, r3
 8001020:	f000 febb 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8001024:	4b2d      	ldr	r3, [pc, #180]	; (80010dc <display7SEG+0x224>)
 8001026:	2200      	movs	r2, #0
 8001028:	2102      	movs	r1, #2
 800102a:	0018      	movs	r0, r3
 800102c:	f000 feb5 	bl	8001d9a <HAL_GPIO_WritePin>
			break;
 8001030:	e04b      	b.n	80010ca <display7SEG+0x212>
		case 7:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <display7SEG+0x220>)
 8001034:	2201      	movs	r2, #1
 8001036:	2101      	movs	r1, #1
 8001038:	0018      	movs	r0, r3
 800103a:	f000 feae 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 800103e:	4b27      	ldr	r3, [pc, #156]	; (80010dc <display7SEG+0x224>)
 8001040:	2201      	movs	r2, #1
 8001042:	2180      	movs	r1, #128	; 0x80
 8001044:	0018      	movs	r0, r3
 8001046:	f000 fea8 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 800104a:	4b24      	ldr	r3, [pc, #144]	; (80010dc <display7SEG+0x224>)
 800104c:	2201      	movs	r2, #1
 800104e:	2140      	movs	r1, #64	; 0x40
 8001050:	0018      	movs	r0, r3
 8001052:	f000 fea2 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8001056:	4b21      	ldr	r3, [pc, #132]	; (80010dc <display7SEG+0x224>)
 8001058:	2200      	movs	r2, #0
 800105a:	2102      	movs	r1, #2
 800105c:	0018      	movs	r0, r3
 800105e:	f000 fe9c 	bl	8001d9a <HAL_GPIO_WritePin>
			break;
 8001062:	e032      	b.n	80010ca <display7SEG+0x212>
		case 8:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <display7SEG+0x220>)
 8001066:	2200      	movs	r2, #0
 8001068:	2101      	movs	r1, #1
 800106a:	0018      	movs	r0, r3
 800106c:	f000 fe95 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <display7SEG+0x224>)
 8001072:	2200      	movs	r2, #0
 8001074:	2180      	movs	r1, #128	; 0x80
 8001076:	0018      	movs	r0, r3
 8001078:	f000 fe8f 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <display7SEG+0x224>)
 800107e:	2200      	movs	r2, #0
 8001080:	2140      	movs	r1, #64	; 0x40
 8001082:	0018      	movs	r0, r3
 8001084:	f000 fe89 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <display7SEG+0x224>)
 800108a:	2201      	movs	r2, #1
 800108c:	2102      	movs	r1, #2
 800108e:	0018      	movs	r0, r3
 8001090:	f000 fe83 	bl	8001d9a <HAL_GPIO_WritePin>
			break;
 8001094:	e019      	b.n	80010ca <display7SEG+0x212>
		case 9:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <display7SEG+0x220>)
 8001098:	2201      	movs	r2, #1
 800109a:	2101      	movs	r1, #1
 800109c:	0018      	movs	r0, r3
 800109e:	f000 fe7c 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <display7SEG+0x224>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	2180      	movs	r1, #128	; 0x80
 80010a8:	0018      	movs	r0, r3
 80010aa:	f000 fe76 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <display7SEG+0x224>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	2140      	movs	r1, #64	; 0x40
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fe70 	bl	8001d9a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <display7SEG+0x224>)
 80010bc:	2201      	movs	r2, #1
 80010be:	2102      	movs	r1, #2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 fe6a 	bl	8001d9a <HAL_GPIO_WritePin>
			break;
 80010c6:	e000      	b.n	80010ca <display7SEG+0x212>
		default:
			break;
 80010c8:	46c0      	nop			; (mov r8, r8)
	}
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	08003ab0 	.word	0x08003ab0
 80010d8:	48001400 	.word	0x48001400
 80010dc:	48000400 	.word	0x48000400

080010e0 <updateClockBuffer>:
void updateClockBuffer(int num1, int num2){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	210a      	movs	r1, #10
 80010ee:	0018      	movs	r0, r3
 80010f0:	f7ff f894 	bl	800021c <__divsi3>
 80010f4:	0003      	movs	r3, r0
 80010f6:	001a      	movs	r2, r3
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <updateClockBuffer+0x5c>)
 80010fa:	601a      	str	r2, [r3, #0]
	led_buffer[1] = num1 % 10;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	210a      	movs	r1, #10
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff f971 	bl	80003e8 <__aeabi_idivmod>
 8001106:	000b      	movs	r3, r1
 8001108:	001a      	movs	r2, r3
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <updateClockBuffer+0x5c>)
 800110c:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	210a      	movs	r1, #10
 8001112:	0018      	movs	r0, r3
 8001114:	f7ff f882 	bl	800021c <__divsi3>
 8001118:	0003      	movs	r3, r0
 800111a:	001a      	movs	r2, r3
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <updateClockBuffer+0x5c>)
 800111e:	609a      	str	r2, [r3, #8]
	led_buffer[3] = num2 % 10;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	210a      	movs	r1, #10
 8001124:	0018      	movs	r0, r3
 8001126:	f7ff f95f 	bl	80003e8 <__aeabi_idivmod>
 800112a:	000b      	movs	r3, r1
 800112c:	001a      	movs	r2, r3
 800112e:	4b03      	ldr	r3, [pc, #12]	; (800113c <updateClockBuffer+0x5c>)
 8001130:	60da      	str	r2, [r3, #12]
}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	20000074 	.word	0x20000074

08001140 <single_LED_off>:
void single_LED_off(){
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	0159      	lsls	r1, r3, #5
 8001148:	2390      	movs	r3, #144	; 0x90
 800114a:	05db      	lsls	r3, r3, #23
 800114c:	2201      	movs	r2, #1
 800114e:	0018      	movs	r0, r3
 8001150:	f000 fe23 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 8001154:	2390      	movs	r3, #144	; 0x90
 8001156:	05db      	lsls	r3, r3, #23
 8001158:	2201      	movs	r2, #1
 800115a:	2110      	movs	r1, #16
 800115c:	0018      	movs	r0, r3
 800115e:	f000 fe1c 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	0059      	lsls	r1, r3, #1
 8001166:	2390      	movs	r3, #144	; 0x90
 8001168:	05db      	lsls	r3, r3, #23
 800116a:	2201      	movs	r2, #1
 800116c:	0018      	movs	r0, r3
 800116e:	f000 fe14 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8001172:	2390      	movs	r3, #144	; 0x90
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	2201      	movs	r2, #1
 8001178:	2104      	movs	r1, #4
 800117a:	0018      	movs	r0, r3
 800117c:	f000 fe0d 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <single_LED_off+0x60>)
 8001182:	2201      	movs	r2, #1
 8001184:	2120      	movs	r1, #32
 8001186:	0018      	movs	r0, r3
 8001188:	f000 fe07 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <single_LED_off+0x60>)
 800118e:	2201      	movs	r2, #1
 8001190:	2110      	movs	r1, #16
 8001192:	0018      	movs	r0, r3
 8001194:	f000 fe01 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	48000400 	.word	0x48000400

080011a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011a8:	f000 fb0c 	bl	80017c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ac:	f000 f82e 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b0:	f000 f918 	bl	80013e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011b4:	f000 f8c2 	bl	800133c <MX_TIM2_Init>
  MX_I2C1_Init();
 80011b8:	f000 f880 	bl	80012bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80011bc:	4b10      	ldr	r3, [pc, #64]	; (8001200 <main+0x5c>)
 80011be:	0018      	movs	r0, r3
 80011c0:	f002 f844 	bl	800324c <HAL_TIM_Base_Start_IT>
  lcd_init();
 80011c4:	f7ff fd8a 	bl	8000cdc <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(4, 1000); // debug
 80011c8:	23fa      	movs	r3, #250	; 0xfa
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	0019      	movs	r1, r3
 80011ce:	2004      	movs	r0, #4
 80011d0:	f000 fa74 	bl	80016bc <setTimer>
  while (1)
  {
	  fsm_auto_run();
 80011d4:	f7ff f968 	bl	80004a8 <fsm_auto_run>
	  fsm_manual();
 80011d8:	f7ff fb0e 	bl	80007f8 <fsm_manual>
	  fsm_setting();
 80011dc:	f7ff fbee 	bl	80009bc <fsm_setting>
	if(timer_flag[4] == 1){  // debug
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <main+0x60>)
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d1f5      	bne.n	80011d4 <main+0x30>
		setTimer(4, 1000);
 80011e8:	23fa      	movs	r3, #250	; 0xfa
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	0019      	movs	r1, r3
 80011ee:	2004      	movs	r0, #4
 80011f0:	f000 fa64 	bl	80016bc <setTimer>
		HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 80011f4:	4b04      	ldr	r3, [pc, #16]	; (8001208 <main+0x64>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	0018      	movs	r0, r3
 80011fa:	f000 fdeb 	bl	8001dd4 <HAL_GPIO_TogglePin>
	  fsm_auto_run();
 80011fe:	e7e9      	b.n	80011d4 <main+0x30>
 8001200:	200000f0 	.word	0x200000f0
 8001204:	20000020 	.word	0x20000020
 8001208:	48000400 	.word	0x48000400

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b590      	push	{r4, r7, lr}
 800120e:	b095      	sub	sp, #84	; 0x54
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	2420      	movs	r4, #32
 8001214:	193b      	adds	r3, r7, r4
 8001216:	0018      	movs	r0, r3
 8001218:	2330      	movs	r3, #48	; 0x30
 800121a:	001a      	movs	r2, r3
 800121c:	2100      	movs	r1, #0
 800121e:	f002 fbed 	bl	80039fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001222:	2310      	movs	r3, #16
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	0018      	movs	r0, r3
 8001228:	2310      	movs	r3, #16
 800122a:	001a      	movs	r2, r3
 800122c:	2100      	movs	r1, #0
 800122e:	f002 fbe5 	bl	80039fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001232:	003b      	movs	r3, r7
 8001234:	0018      	movs	r0, r3
 8001236:	2310      	movs	r3, #16
 8001238:	001a      	movs	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	f002 fbde 	bl	80039fc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001240:	0021      	movs	r1, r4
 8001242:	187b      	adds	r3, r7, r1
 8001244:	2202      	movs	r2, #2
 8001246:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001248:	187b      	adds	r3, r7, r1
 800124a:	2201      	movs	r2, #1
 800124c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	2210      	movs	r2, #16
 8001252:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001254:	187b      	adds	r3, r7, r1
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	187b      	adds	r3, r7, r1
 800125c:	0018      	movs	r0, r3
 800125e:	f001 fa99 	bl	8002794 <HAL_RCC_OscConfig>
 8001262:	1e03      	subs	r3, r0, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001266:	f000 f963 	bl	8001530 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126a:	2110      	movs	r1, #16
 800126c:	187b      	adds	r3, r7, r1
 800126e:	2207      	movs	r2, #7
 8001270:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001272:	187b      	adds	r3, r7, r1
 8001274:	2200      	movs	r2, #0
 8001276:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001278:	187b      	adds	r3, r7, r1
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127e:	187b      	adds	r3, r7, r1
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001284:	187b      	adds	r3, r7, r1
 8001286:	2100      	movs	r1, #0
 8001288:	0018      	movs	r0, r3
 800128a:	f001 fd9d 	bl	8002dc8 <HAL_RCC_ClockConfig>
 800128e:	1e03      	subs	r3, r0, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001292:	f000 f94d 	bl	8001530 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001296:	003b      	movs	r3, r7
 8001298:	2220      	movs	r2, #32
 800129a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800129c:	003b      	movs	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a2:	003b      	movs	r3, r7
 80012a4:	0018      	movs	r0, r3
 80012a6:	f001 feb3 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 80012aa:	1e03      	subs	r3, r0, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012ae:	f000 f93f 	bl	8001530 <Error_Handler>
  }
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46bd      	mov	sp, r7
 80012b6:	b015      	add	sp, #84	; 0x54
 80012b8:	bd90      	pop	{r4, r7, pc}
	...

080012bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <MX_I2C1_Init+0x74>)
 80012c2:	4a1c      	ldr	r2, [pc, #112]	; (8001334 <MX_I2C1_Init+0x78>)
 80012c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80012c6:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_I2C1_Init+0x74>)
 80012c8:	4a1b      	ldr	r2, [pc, #108]	; (8001338 <MX_I2C1_Init+0x7c>)
 80012ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012cc:	4b18      	ldr	r3, [pc, #96]	; (8001330 <MX_I2C1_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_I2C1_Init+0x74>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_I2C1_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012de:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_I2C1_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_I2C1_Init+0x74>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_I2C1_Init+0x74>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_I2C1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_I2C1_Init+0x74>)
 80012f8:	0018      	movs	r0, r3
 80012fa:	f000 fd87 	bl	8001e0c <HAL_I2C_Init>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d001      	beq.n	8001306 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001302:	f000 f915 	bl	8001530 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_I2C1_Init+0x74>)
 8001308:	2100      	movs	r1, #0
 800130a:	0018      	movs	r0, r3
 800130c:	f001 f98c 	bl	8002628 <HAL_I2CEx_ConfigAnalogFilter>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001314:	f000 f90c 	bl	8001530 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <MX_I2C1_Init+0x74>)
 800131a:	2100      	movs	r1, #0
 800131c:	0018      	movs	r0, r3
 800131e:	f001 f9cf 	bl	80026c0 <HAL_I2CEx_ConfigDigitalFilter>
 8001322:	1e03      	subs	r3, r0, #0
 8001324:	d001      	beq.n	800132a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001326:	f000 f903 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	2000009c 	.word	0x2000009c
 8001334:	40005400 	.word	0x40005400
 8001338:	2000090e 	.word	0x2000090e

0800133c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	2308      	movs	r3, #8
 8001344:	18fb      	adds	r3, r7, r3
 8001346:	0018      	movs	r0, r3
 8001348:	2310      	movs	r3, #16
 800134a:	001a      	movs	r2, r3
 800134c:	2100      	movs	r1, #0
 800134e:	f002 fb55 	bl	80039fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001352:	003b      	movs	r3, r7
 8001354:	0018      	movs	r0, r3
 8001356:	2308      	movs	r3, #8
 8001358:	001a      	movs	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	f002 fb4e 	bl	80039fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <MX_TIM2_Init+0xa0>)
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	05d2      	lsls	r2, r2, #23
 8001366:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_TIM2_Init+0xa0>)
 800136a:	4a1d      	ldr	r2, [pc, #116]	; (80013e0 <MX_TIM2_Init+0xa4>)
 800136c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <MX_TIM2_Init+0xa0>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_TIM2_Init+0xa0>)
 8001376:	2209      	movs	r2, #9
 8001378:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b18      	ldr	r3, [pc, #96]	; (80013dc <MX_TIM2_Init+0xa0>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_TIM2_Init+0xa0>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_TIM2_Init+0xa0>)
 8001388:	0018      	movs	r0, r3
 800138a:	f001 ff0f 	bl	80031ac <HAL_TIM_Base_Init>
 800138e:	1e03      	subs	r3, r0, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001392:	f000 f8cd 	bl	8001530 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	2108      	movs	r1, #8
 8001398:	187b      	adds	r3, r7, r1
 800139a:	2280      	movs	r2, #128	; 0x80
 800139c:	0152      	lsls	r2, r2, #5
 800139e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a0:	187a      	adds	r2, r7, r1
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_TIM2_Init+0xa0>)
 80013a4:	0011      	movs	r1, r2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f002 f88a 	bl	80034c0 <HAL_TIM_ConfigClockSource>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013b0:	f000 f8be 	bl	8001530 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b4:	003b      	movs	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	003b      	movs	r3, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c0:	003a      	movs	r2, r7
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_TIM2_Init+0xa0>)
 80013c4:	0011      	movs	r1, r2
 80013c6:	0018      	movs	r0, r3
 80013c8:	f002 fa8c 	bl	80038e4 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	1e03      	subs	r3, r0, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80013d0:	f000 f8ae 	bl	8001530 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013d4:	46c0      	nop			; (mov r8, r8)
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b006      	add	sp, #24
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200000f0 	.word	0x200000f0
 80013e0:	00001f3f 	.word	0x00001f3f

080013e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	240c      	movs	r4, #12
 80013ec:	193b      	adds	r3, r7, r4
 80013ee:	0018      	movs	r0, r3
 80013f0:	2314      	movs	r3, #20
 80013f2:	001a      	movs	r2, r3
 80013f4:	2100      	movs	r1, #0
 80013f6:	f002 fb01 	bl	80039fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fa:	4b49      	ldr	r3, [pc, #292]	; (8001520 <MX_GPIO_Init+0x13c>)
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	4b48      	ldr	r3, [pc, #288]	; (8001520 <MX_GPIO_Init+0x13c>)
 8001400:	2180      	movs	r1, #128	; 0x80
 8001402:	03c9      	lsls	r1, r1, #15
 8001404:	430a      	orrs	r2, r1
 8001406:	615a      	str	r2, [r3, #20]
 8001408:	4b45      	ldr	r3, [pc, #276]	; (8001520 <MX_GPIO_Init+0x13c>)
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	2380      	movs	r3, #128	; 0x80
 800140e:	03db      	lsls	r3, r3, #15
 8001410:	4013      	ands	r3, r2
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <MX_GPIO_Init+0x13c>)
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	4b41      	ldr	r3, [pc, #260]	; (8001520 <MX_GPIO_Init+0x13c>)
 800141c:	2180      	movs	r1, #128	; 0x80
 800141e:	0289      	lsls	r1, r1, #10
 8001420:	430a      	orrs	r2, r1
 8001422:	615a      	str	r2, [r3, #20]
 8001424:	4b3e      	ldr	r3, [pc, #248]	; (8001520 <MX_GPIO_Init+0x13c>)
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	029b      	lsls	r3, r3, #10
 800142c:	4013      	ands	r3, r2
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <MX_GPIO_Init+0x13c>)
 8001434:	695a      	ldr	r2, [r3, #20]
 8001436:	4b3a      	ldr	r3, [pc, #232]	; (8001520 <MX_GPIO_Init+0x13c>)
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	02c9      	lsls	r1, r1, #11
 800143c:	430a      	orrs	r2, r1
 800143e:	615a      	str	r2, [r3, #20]
 8001440:	4b37      	ldr	r3, [pc, #220]	; (8001520 <MX_GPIO_Init+0x13c>)
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	02db      	lsls	r3, r3, #11
 8001448:	4013      	ands	r3, r2
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, A_Pin|EN1_Pin, GPIO_PIN_RESET);
 800144e:	4b35      	ldr	r3, [pc, #212]	; (8001524 <MX_GPIO_Init+0x140>)
 8001450:	2200      	movs	r2, #0
 8001452:	2103      	movs	r1, #3
 8001454:	0018      	movs	r0, r3
 8001456:	f000 fca0 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|R1_Pin|Y0_Pin|G0_Pin
 800145a:	4933      	ldr	r1, [pc, #204]	; (8001528 <MX_GPIO_Init+0x144>)
 800145c:	2390      	movs	r3, #144	; 0x90
 800145e:	05db      	lsls	r3, r3, #23
 8001460:	2200      	movs	r2, #0
 8001462:	0018      	movs	r0, r3
 8001464:	f000 fc99 	bl	8001d9a <HAL_GPIO_WritePin>
                          |EN3_Pin|R0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DEBUG_Pin|D_Pin|EN2_Pin|G1_Pin
 8001468:	4b30      	ldr	r3, [pc, #192]	; (800152c <MX_GPIO_Init+0x148>)
 800146a:	2200      	movs	r2, #0
 800146c:	21fb      	movs	r1, #251	; 0xfb
 800146e:	0018      	movs	r0, r3
 8001470:	f000 fc93 	bl	8001d9a <HAL_GPIO_WritePin>
                          |Y1_Pin|C_Pin|B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A_Pin EN1_Pin */
  GPIO_InitStruct.Pin = A_Pin|EN1_Pin;
 8001474:	193b      	adds	r3, r7, r4
 8001476:	2203      	movs	r2, #3
 8001478:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147a:	193b      	adds	r3, r7, r4
 800147c:	2201      	movs	r2, #1
 800147e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	193b      	adds	r3, r7, r4
 8001482:	2200      	movs	r2, #0
 8001484:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001486:	193b      	adds	r3, r7, r4
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800148c:	193b      	adds	r3, r7, r4
 800148e:	4a25      	ldr	r2, [pc, #148]	; (8001524 <MX_GPIO_Init+0x140>)
 8001490:	0019      	movs	r1, r3
 8001492:	0010      	movs	r0, r2
 8001494:	f000 fafc 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin R1_Pin Y0_Pin G0_Pin
                           EN3_Pin R0_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|R1_Pin|Y0_Pin|G0_Pin
 8001498:	193b      	adds	r3, r7, r4
 800149a:	4a23      	ldr	r2, [pc, #140]	; (8001528 <MX_GPIO_Init+0x144>)
 800149c:	601a      	str	r2, [r3, #0]
                          |EN3_Pin|R0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149e:	193b      	adds	r3, r7, r4
 80014a0:	2201      	movs	r2, #1
 80014a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	193b      	adds	r3, r7, r4
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	193a      	adds	r2, r7, r4
 80014b2:	2390      	movs	r3, #144	; 0x90
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	0011      	movs	r1, r2
 80014b8:	0018      	movs	r0, r3
 80014ba:	f000 fae9 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
 80014be:	193b      	adds	r3, r7, r4
 80014c0:	228a      	movs	r2, #138	; 0x8a
 80014c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014c4:	193b      	adds	r3, r7, r4
 80014c6:	2200      	movs	r2, #0
 80014c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ca:	193b      	adds	r3, r7, r4
 80014cc:	2201      	movs	r2, #1
 80014ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d0:	193a      	adds	r2, r7, r4
 80014d2:	2390      	movs	r3, #144	; 0x90
 80014d4:	05db      	lsls	r3, r3, #23
 80014d6:	0011      	movs	r1, r2
 80014d8:	0018      	movs	r0, r3
 80014da:	f000 fad9 	bl	8001a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_DEBUG_Pin D_Pin EN2_Pin G1_Pin
                           Y1_Pin C_Pin B_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|D_Pin|EN2_Pin|G1_Pin
 80014de:	0021      	movs	r1, r4
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	22fb      	movs	r2, #251	; 0xfb
 80014e4:	601a      	str	r2, [r3, #0]
                          |Y1_Pin|C_Pin|B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2201      	movs	r2, #1
 80014ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	187b      	adds	r3, r7, r1
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	4a0c      	ldr	r2, [pc, #48]	; (800152c <MX_GPIO_Init+0x148>)
 80014fc:	0019      	movs	r1, r3
 80014fe:	0010      	movs	r0, r2
 8001500:	f000 fac6 	bl	8001a90 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB6);
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	025b      	lsls	r3, r3, #9
 8001508:	0018      	movs	r0, r3
 800150a:	f001 f925 	bl	8002758 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB7);
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	029b      	lsls	r3, r3, #10
 8001512:	0018      	movs	r0, r3
 8001514:	f001 f920 	bl	8002758 <HAL_I2CEx_EnableFastModePlus>

}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b009      	add	sp, #36	; 0x24
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	48001400 	.word	0x48001400
 8001528:	00001915 	.word	0x00001915
 800152c:	48000400 	.word	0x48000400

08001530 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001534:	b672      	cpsid	i
}
 8001536:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001538:	e7fe      	b.n	8001538 <Error_Handler+0x8>
	...

0800153c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_MspInit+0x44>)
 8001544:	699a      	ldr	r2, [r3, #24]
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_MspInit+0x44>)
 8001548:	2101      	movs	r1, #1
 800154a:	430a      	orrs	r2, r1
 800154c:	619a      	str	r2, [r3, #24]
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_MspInit+0x44>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	2201      	movs	r2, #1
 8001554:	4013      	ands	r3, r2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_MspInit+0x44>)
 800155c:	69da      	ldr	r2, [r3, #28]
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_MspInit+0x44>)
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	0549      	lsls	r1, r1, #21
 8001564:	430a      	orrs	r2, r1
 8001566:	61da      	str	r2, [r3, #28]
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_MspInit+0x44>)
 800156a:	69da      	ldr	r2, [r3, #28]
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	055b      	lsls	r3, r3, #21
 8001570:	4013      	ands	r3, r2
 8001572:	603b      	str	r3, [r7, #0]
 8001574:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	40021000 	.word	0x40021000

08001584 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b08b      	sub	sp, #44	; 0x2c
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	2414      	movs	r4, #20
 800158e:	193b      	adds	r3, r7, r4
 8001590:	0018      	movs	r0, r3
 8001592:	2314      	movs	r3, #20
 8001594:	001a      	movs	r2, r3
 8001596:	2100      	movs	r1, #0
 8001598:	f002 fa30 	bl	80039fc <memset>
  if(hi2c->Instance==I2C1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <HAL_I2C_MspInit+0x94>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d133      	bne.n	800160e <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_I2C_MspInit+0x98>)
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_I2C_MspInit+0x98>)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	0289      	lsls	r1, r1, #10
 80015b0:	430a      	orrs	r2, r1
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_I2C_MspInit+0x98>)
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80015c2:	193b      	adds	r3, r7, r4
 80015c4:	22c0      	movs	r2, #192	; 0xc0
 80015c6:	00d2      	lsls	r2, r2, #3
 80015c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ca:	0021      	movs	r1, r4
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2212      	movs	r2, #18
 80015d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	2203      	movs	r2, #3
 80015dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015de:	187b      	adds	r3, r7, r1
 80015e0:	2204      	movs	r2, #4
 80015e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e4:	187a      	adds	r2, r7, r1
 80015e6:	2390      	movs	r3, #144	; 0x90
 80015e8:	05db      	lsls	r3, r3, #23
 80015ea:	0011      	movs	r1, r2
 80015ec:	0018      	movs	r0, r3
 80015ee:	f000 fa4f 	bl	8001a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_I2C_MspInit+0x98>)
 80015f4:	69da      	ldr	r2, [r3, #28]
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_I2C_MspInit+0x98>)
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	0389      	lsls	r1, r1, #14
 80015fc:	430a      	orrs	r2, r1
 80015fe:	61da      	str	r2, [r3, #28]
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_I2C_MspInit+0x98>)
 8001602:	69da      	ldr	r2, [r3, #28]
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	039b      	lsls	r3, r3, #14
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b00b      	add	sp, #44	; 0x2c
 8001614:	bd90      	pop	{r4, r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	40005400 	.word	0x40005400
 800161c:	40021000 	.word	0x40021000

08001620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	05db      	lsls	r3, r3, #23
 8001630:	429a      	cmp	r2, r3
 8001632:	d113      	bne.n	800165c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001634:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <HAL_TIM_Base_MspInit+0x44>)
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_TIM_Base_MspInit+0x44>)
 800163a:	2101      	movs	r1, #1
 800163c:	430a      	orrs	r2, r1
 800163e:	61da      	str	r2, [r3, #28]
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_TIM_Base_MspInit+0x44>)
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	2201      	movs	r2, #1
 8001646:	4013      	ands	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2100      	movs	r1, #0
 8001650:	200f      	movs	r0, #15
 8001652:	f000 f9eb 	bl	8001a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001656:	200f      	movs	r0, #15
 8001658:	f000 f9fd 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800165c:	46c0      	nop			; (mov r8, r8)
 800165e:	46bd      	mov	sp, r7
 8001660:	b004      	add	sp, #16
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800168c:	f000 f8e2 	bl	8001854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <TIM2_IRQHandler+0x14>)
 800169e:	0018      	movs	r0, r3
 80016a0:	f001 fe20 	bl	80032e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80016a4:	46c0      	nop			; (mov r8, r8)
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	46c0      	nop			; (mov r8, r8)
 80016ac:	200000f0 	.word	0x200000f0

080016b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <setTimer>:
#include "timer.h"

int counter[5] = {0, 0, 0, 0, 0};
int timer_flag[5] = {0, 0, 0, 1, 0};// FLAG[3] = 1 TO CHECK BUTTON PRESS( GO TO FUNCTION getKeyinput())

void setTimer(int timer, int duration){
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	counter[timer] = duration / 10;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	210a      	movs	r1, #10
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7fe fda6 	bl	800021c <__divsi3>
 80016d0:	0003      	movs	r3, r0
 80016d2:	0019      	movs	r1, r3
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <setTimer+0x34>)
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	0092      	lsls	r2, r2, #2
 80016da:	50d1      	str	r1, [r2, r3]
	timer_flag[timer] = 0;
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <setTimer+0x38>)
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	0092      	lsls	r2, r2, #2
 80016e2:	2100      	movs	r1, #0
 80016e4:	50d1      	str	r1, [r2, r3]
}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	46bd      	mov	sp, r7
 80016ea:	b002      	add	sp, #8
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	20000088 	.word	0x20000088
 80016f4:	20000020 	.word	0x20000020

080016f8 <timer_run>:
void timer_run(){
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
	for(int i = 0; i < 5; i++){ // 5 timer
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	e01c      	b.n	800173e <timer_run+0x46>
		if(counter[i] > 0){
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <timer_run+0x58>)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	0092      	lsls	r2, r2, #2
 800170a:	58d3      	ldr	r3, [r2, r3]
 800170c:	2b00      	cmp	r3, #0
 800170e:	dd13      	ble.n	8001738 <timer_run+0x40>
			counter[i]--;
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <timer_run+0x58>)
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	58d3      	ldr	r3, [r2, r3]
 8001718:	1e59      	subs	r1, r3, #1
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <timer_run+0x58>)
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	0092      	lsls	r2, r2, #2
 8001720:	50d1      	str	r1, [r2, r3]
			if(counter[i] <= 0)
 8001722:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <timer_run+0x58>)
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	0092      	lsls	r2, r2, #2
 8001728:	58d3      	ldr	r3, [r2, r3]
 800172a:	2b00      	cmp	r3, #0
 800172c:	dc04      	bgt.n	8001738 <timer_run+0x40>
				timer_flag[i] = 1;
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <timer_run+0x5c>)
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	2101      	movs	r1, #1
 8001736:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 5; i++){ // 5 timer
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3301      	adds	r3, #1
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b04      	cmp	r3, #4
 8001742:	dddf      	ble.n	8001704 <timer_run+0xc>
		}
	}
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	46bd      	mov	sp, r7
 800174a:	b002      	add	sp, #8
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	20000088 	.word	0x20000088
 8001754:	20000020 	.word	0x20000020

08001758 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	getKeyinput();
 8001760:	f7fe fe48 	bl	80003f4 <getKeyinput>
	timer_run();
 8001764:	f7ff ffc8 	bl	80016f8 <timer_run>
}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b002      	add	sp, #8
 800176e:	bd80      	pop	{r7, pc}

08001770 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001770:	480d      	ldr	r0, [pc, #52]	; (80017a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001772:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001774:	f7ff ff9c 	bl	80016b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001778:	480c      	ldr	r0, [pc, #48]	; (80017ac <LoopForever+0x6>)
  ldr r1, =_edata
 800177a:	490d      	ldr	r1, [pc, #52]	; (80017b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800177c:	4a0d      	ldr	r2, [pc, #52]	; (80017b4 <LoopForever+0xe>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001780:	e002      	b.n	8001788 <LoopCopyDataInit>

08001782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001786:	3304      	adds	r3, #4

08001788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800178a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800178c:	d3f9      	bcc.n	8001782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001790:	4c0a      	ldr	r4, [pc, #40]	; (80017bc <LoopForever+0x16>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001794:	e001      	b.n	800179a <LoopFillZerobss>

08001796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001798:	3204      	adds	r2, #4

0800179a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800179a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800179c:	d3fb      	bcc.n	8001796 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800179e:	f002 f909 	bl	80039b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017a2:	f7ff fcff 	bl	80011a4 <main>

080017a6 <LoopForever>:

LoopForever:
    b LoopForever
 80017a6:	e7fe      	b.n	80017a6 <LoopForever>
  ldr   r0, =_estack
 80017a8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80017ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b0:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80017b4:	08003b10 	.word	0x08003b10
  ldr r2, =_sbss
 80017b8:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80017bc:	2000013c 	.word	0x2000013c

080017c0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017c0:	e7fe      	b.n	80017c0 <ADC1_IRQHandler>
	...

080017c4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_Init+0x24>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_Init+0x24>)
 80017ce:	2110      	movs	r1, #16
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80017d4:	2000      	movs	r0, #0
 80017d6:	f000 f809 	bl	80017ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017da:	f7ff feaf 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	0018      	movs	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	40022000 	.word	0x40022000

080017ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ec:	b590      	push	{r4, r7, lr}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_InitTick+0x5c>)
 80017f6:	681c      	ldr	r4, [r3, #0]
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_InitTick+0x60>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	0019      	movs	r1, r3
 80017fe:	23fa      	movs	r3, #250	; 0xfa
 8001800:	0098      	lsls	r0, r3, #2
 8001802:	f7fe fc81 	bl	8000108 <__udivsi3>
 8001806:	0003      	movs	r3, r0
 8001808:	0019      	movs	r1, r3
 800180a:	0020      	movs	r0, r4
 800180c:	f7fe fc7c 	bl	8000108 <__udivsi3>
 8001810:	0003      	movs	r3, r0
 8001812:	0018      	movs	r0, r3
 8001814:	f000 f92f 	bl	8001a76 <HAL_SYSTICK_Config>
 8001818:	1e03      	subs	r3, r0, #0
 800181a:	d001      	beq.n	8001820 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e00f      	b.n	8001840 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d80b      	bhi.n	800183e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	2301      	movs	r3, #1
 800182a:	425b      	negs	r3, r3
 800182c:	2200      	movs	r2, #0
 800182e:	0018      	movs	r0, r3
 8001830:	f000 f8fc 	bl	8001a2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_InitTick+0x64>)
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e000      	b.n	8001840 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b003      	add	sp, #12
 8001846:	bd90      	pop	{r4, r7, pc}
 8001848:	2000001c 	.word	0x2000001c
 800184c:	20000038 	.word	0x20000038
 8001850:	20000034 	.word	0x20000034

08001854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_IncTick+0x1c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	001a      	movs	r2, r3
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_IncTick+0x20>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	18d2      	adds	r2, r2, r3
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_IncTick+0x20>)
 8001866:	601a      	str	r2, [r3, #0]
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	20000038 	.word	0x20000038
 8001874:	20000138 	.word	0x20000138

08001878 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;
 800187c:	4b02      	ldr	r3, [pc, #8]	; (8001888 <HAL_GetTick+0x10>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	20000138 	.word	0x20000138

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff fff0 	bl	8001878 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3301      	adds	r3, #1
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	001a      	movs	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	189b      	adds	r3, r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	f7ff ffe0 	bl	8001878 <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	46c0      	nop			; (mov r8, r8)
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b004      	add	sp, #16
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	20000038 	.word	0x20000038

080018d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	0002      	movs	r2, r0
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b7f      	cmp	r3, #127	; 0x7f
 80018e6:	d809      	bhi.n	80018fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	001a      	movs	r2, r3
 80018ee:	231f      	movs	r3, #31
 80018f0:	401a      	ands	r2, r3
 80018f2:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_EnableIRQ+0x30>)
 80018f4:	2101      	movs	r1, #1
 80018f6:	4091      	lsls	r1, r2
 80018f8:	000a      	movs	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
  }
}
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b002      	add	sp, #8
 8001902:	bd80      	pop	{r7, pc}
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	0002      	movs	r2, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001916:	1dfb      	adds	r3, r7, #7
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b7f      	cmp	r3, #127	; 0x7f
 800191c:	d828      	bhi.n	8001970 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800191e:	4a2f      	ldr	r2, [pc, #188]	; (80019dc <__NVIC_SetPriority+0xd4>)
 8001920:	1dfb      	adds	r3, r7, #7
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b25b      	sxtb	r3, r3
 8001926:	089b      	lsrs	r3, r3, #2
 8001928:	33c0      	adds	r3, #192	; 0xc0
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	589b      	ldr	r3, [r3, r2]
 800192e:	1dfa      	adds	r2, r7, #7
 8001930:	7812      	ldrb	r2, [r2, #0]
 8001932:	0011      	movs	r1, r2
 8001934:	2203      	movs	r2, #3
 8001936:	400a      	ands	r2, r1
 8001938:	00d2      	lsls	r2, r2, #3
 800193a:	21ff      	movs	r1, #255	; 0xff
 800193c:	4091      	lsls	r1, r2
 800193e:	000a      	movs	r2, r1
 8001940:	43d2      	mvns	r2, r2
 8001942:	401a      	ands	r2, r3
 8001944:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	019b      	lsls	r3, r3, #6
 800194a:	22ff      	movs	r2, #255	; 0xff
 800194c:	401a      	ands	r2, r3
 800194e:	1dfb      	adds	r3, r7, #7
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	0018      	movs	r0, r3
 8001954:	2303      	movs	r3, #3
 8001956:	4003      	ands	r3, r0
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800195c:	481f      	ldr	r0, [pc, #124]	; (80019dc <__NVIC_SetPriority+0xd4>)
 800195e:	1dfb      	adds	r3, r7, #7
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	430a      	orrs	r2, r1
 8001968:	33c0      	adds	r3, #192	; 0xc0
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800196e:	e031      	b.n	80019d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001970:	4a1b      	ldr	r2, [pc, #108]	; (80019e0 <__NVIC_SetPriority+0xd8>)
 8001972:	1dfb      	adds	r3, r7, #7
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	0019      	movs	r1, r3
 8001978:	230f      	movs	r3, #15
 800197a:	400b      	ands	r3, r1
 800197c:	3b08      	subs	r3, #8
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3306      	adds	r3, #6
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	18d3      	adds	r3, r2, r3
 8001986:	3304      	adds	r3, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	1dfa      	adds	r2, r7, #7
 800198c:	7812      	ldrb	r2, [r2, #0]
 800198e:	0011      	movs	r1, r2
 8001990:	2203      	movs	r2, #3
 8001992:	400a      	ands	r2, r1
 8001994:	00d2      	lsls	r2, r2, #3
 8001996:	21ff      	movs	r1, #255	; 0xff
 8001998:	4091      	lsls	r1, r2
 800199a:	000a      	movs	r2, r1
 800199c:	43d2      	mvns	r2, r2
 800199e:	401a      	ands	r2, r3
 80019a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	22ff      	movs	r2, #255	; 0xff
 80019a8:	401a      	ands	r2, r3
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	0018      	movs	r0, r3
 80019b0:	2303      	movs	r3, #3
 80019b2:	4003      	ands	r3, r0
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019b8:	4809      	ldr	r0, [pc, #36]	; (80019e0 <__NVIC_SetPriority+0xd8>)
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	001c      	movs	r4, r3
 80019c0:	230f      	movs	r3, #15
 80019c2:	4023      	ands	r3, r4
 80019c4:	3b08      	subs	r3, #8
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	430a      	orrs	r2, r1
 80019ca:	3306      	adds	r3, #6
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	18c3      	adds	r3, r0, r3
 80019d0:	3304      	adds	r3, #4
 80019d2:	601a      	str	r2, [r3, #0]
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b003      	add	sp, #12
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	e000e100 	.word	0xe000e100
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	1e5a      	subs	r2, r3, #1
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	045b      	lsls	r3, r3, #17
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d301      	bcc.n	80019fc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f8:	2301      	movs	r3, #1
 80019fa:	e010      	b.n	8001a1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <SysTick_Config+0x44>)
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	3a01      	subs	r2, #1
 8001a02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a04:	2301      	movs	r3, #1
 8001a06:	425b      	negs	r3, r3
 8001a08:	2103      	movs	r1, #3
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7ff ff7c 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x44>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x44>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60b9      	str	r1, [r7, #8]
 8001a34:	607a      	str	r2, [r7, #4]
 8001a36:	210f      	movs	r1, #15
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	1c02      	adds	r2, r0, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	0011      	movs	r1, r2
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b004      	add	sp, #16
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a62:	1dfb      	adds	r3, r7, #7
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff ff33 	bl	80018d4 <__NVIC_EnableIRQ>
}
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	46bd      	mov	sp, r7
 8001a72:	b002      	add	sp, #8
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7ff ffaf 	bl	80019e4 <SysTick_Config>
 8001a86:	0003      	movs	r3, r0
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a9e:	e149      	b.n	8001d34 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4091      	lsls	r1, r2
 8001aaa:	000a      	movs	r2, r1
 8001aac:	4013      	ands	r3, r2
 8001aae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d100      	bne.n	8001ab8 <HAL_GPIO_Init+0x28>
 8001ab6:	e13a      	b.n	8001d2e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2203      	movs	r2, #3
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d005      	beq.n	8001ad0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d130      	bne.n	8001b32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	2203      	movs	r2, #3
 8001adc:	409a      	lsls	r2, r3
 8001ade:	0013      	movs	r3, r2
 8001ae0:	43da      	mvns	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	409a      	lsls	r2, r3
 8001af2:	0013      	movs	r3, r2
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b06:	2201      	movs	r2, #1
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	43da      	mvns	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4013      	ands	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	091b      	lsrs	r3, r3, #4
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
 8001b24:	0013      	movs	r3, r2
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2203      	movs	r2, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d017      	beq.n	8001b6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	2203      	movs	r2, #3
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	43da      	mvns	r2, r3
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	0013      	movs	r3, r2
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	2203      	movs	r2, #3
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d123      	bne.n	8001bc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	08da      	lsrs	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3208      	adds	r2, #8
 8001b82:	0092      	lsls	r2, r2, #2
 8001b84:	58d3      	ldr	r3, [r2, r3]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	409a      	lsls	r2, r3
 8001b94:	0013      	movs	r3, r2
 8001b96:	43da      	mvns	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	691a      	ldr	r2, [r3, #16]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2107      	movs	r1, #7
 8001ba6:	400b      	ands	r3, r1
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	409a      	lsls	r2, r3
 8001bac:	0013      	movs	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	08da      	lsrs	r2, r3, #3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3208      	adds	r2, #8
 8001bbc:	0092      	lsls	r2, r2, #2
 8001bbe:	6939      	ldr	r1, [r7, #16]
 8001bc0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	2203      	movs	r2, #3
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	0013      	movs	r3, r2
 8001bd2:	43da      	mvns	r2, r3
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2203      	movs	r2, #3
 8001be0:	401a      	ands	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	409a      	lsls	r2, r3
 8001be8:	0013      	movs	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	23c0      	movs	r3, #192	; 0xc0
 8001bfc:	029b      	lsls	r3, r3, #10
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d100      	bne.n	8001c04 <HAL_GPIO_Init+0x174>
 8001c02:	e094      	b.n	8001d2e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c04:	4b51      	ldr	r3, [pc, #324]	; (8001d4c <HAL_GPIO_Init+0x2bc>)
 8001c06:	699a      	ldr	r2, [r3, #24]
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_GPIO_Init+0x2bc>)
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	619a      	str	r2, [r3, #24]
 8001c10:	4b4e      	ldr	r3, [pc, #312]	; (8001d4c <HAL_GPIO_Init+0x2bc>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4013      	ands	r3, r2
 8001c18:	60bb      	str	r3, [r7, #8]
 8001c1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <HAL_GPIO_Init+0x2c0>)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	589b      	ldr	r3, [r3, r2]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	4013      	ands	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	220f      	movs	r2, #15
 8001c34:	409a      	lsls	r2, r3
 8001c36:	0013      	movs	r3, r2
 8001c38:	43da      	mvns	r2, r3
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	2390      	movs	r3, #144	; 0x90
 8001c44:	05db      	lsls	r3, r3, #23
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d00d      	beq.n	8001c66 <HAL_GPIO_Init+0x1d6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a41      	ldr	r2, [pc, #260]	; (8001d54 <HAL_GPIO_Init+0x2c4>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <HAL_GPIO_Init+0x1d2>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a40      	ldr	r2, [pc, #256]	; (8001d58 <HAL_GPIO_Init+0x2c8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d101      	bne.n	8001c5e <HAL_GPIO_Init+0x1ce>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e004      	b.n	8001c68 <HAL_GPIO_Init+0x1d8>
 8001c5e:	2305      	movs	r3, #5
 8001c60:	e002      	b.n	8001c68 <HAL_GPIO_Init+0x1d8>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_GPIO_Init+0x1d8>
 8001c66:	2300      	movs	r3, #0
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	2103      	movs	r1, #3
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	0092      	lsls	r2, r2, #2
 8001c70:	4093      	lsls	r3, r2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c78:	4935      	ldr	r1, [pc, #212]	; (8001d50 <HAL_GPIO_Init+0x2c0>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c86:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	035b      	lsls	r3, r3, #13
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001caa:	4b2c      	ldr	r3, [pc, #176]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43da      	mvns	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	2380      	movs	r3, #128	; 0x80
 8001cc6:	039b      	lsls	r3, r3, #14
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001cda:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	029b      	lsls	r3, r3, #10
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001d04:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	025b      	lsls	r3, r3, #9
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <HAL_GPIO_Init+0x2cc>)
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	40da      	lsrs	r2, r3
 8001d3c:	1e13      	subs	r3, r2, #0
 8001d3e:	d000      	beq.n	8001d42 <HAL_GPIO_Init+0x2b2>
 8001d40:	e6ae      	b.n	8001aa0 <HAL_GPIO_Init+0x10>
  } 
}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46c0      	nop			; (mov r8, r8)
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b006      	add	sp, #24
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010000 	.word	0x40010000
 8001d54:	48000400 	.word	0x48000400
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	40010400 	.word	0x40010400

08001d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	000a      	movs	r2, r1
 8001d6a:	1cbb      	adds	r3, r7, #2
 8001d6c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	1cba      	adds	r2, r7, #2
 8001d74:	8812      	ldrh	r2, [r2, #0]
 8001d76:	4013      	ands	r3, r2
 8001d78:	d004      	beq.n	8001d84 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001d7a:	230f      	movs	r3, #15
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e003      	b.n	8001d8c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d84:	230f      	movs	r3, #15
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001d8c:	230f      	movs	r3, #15
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	781b      	ldrb	r3, [r3, #0]
  }
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b004      	add	sp, #16
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	0008      	movs	r0, r1
 8001da4:	0011      	movs	r1, r2
 8001da6:	1cbb      	adds	r3, r7, #2
 8001da8:	1c02      	adds	r2, r0, #0
 8001daa:	801a      	strh	r2, [r3, #0]
 8001dac:	1c7b      	adds	r3, r7, #1
 8001dae:	1c0a      	adds	r2, r1, #0
 8001db0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db2:	1c7b      	adds	r3, r7, #1
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dba:	1cbb      	adds	r3, r7, #2
 8001dbc:	881a      	ldrh	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dc2:	e003      	b.n	8001dcc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dc4:	1cbb      	adds	r3, r7, #2
 8001dc6:	881a      	ldrh	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b002      	add	sp, #8
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	000a      	movs	r2, r1
 8001dde:	1cbb      	adds	r3, r7, #2
 8001de0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695b      	ldr	r3, [r3, #20]
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de8:	1cbb      	adds	r3, r7, #2
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4013      	ands	r3, r2
 8001df0:	041a      	lsls	r2, r3, #16
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	1cb9      	adds	r1, r7, #2
 8001df8:	8809      	ldrh	r1, [r1, #0]
 8001dfa:	400b      	ands	r3, r1
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
}
 8001e02:	46c0      	nop			; (mov r8, r8)
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b004      	add	sp, #16
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e08f      	b.n	8001f3e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2241      	movs	r2, #65	; 0x41
 8001e22:	5c9b      	ldrb	r3, [r3, r2]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d107      	bne.n	8001e3a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2240      	movs	r2, #64	; 0x40
 8001e2e:	2100      	movs	r1, #0
 8001e30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff fba5 	bl	8001584 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2241      	movs	r2, #65	; 0x41
 8001e3e:	2124      	movs	r1, #36	; 0x24
 8001e40:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	438a      	bics	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	493b      	ldr	r1, [pc, #236]	; (8001f48 <HAL_I2C_Init+0x13c>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4938      	ldr	r1, [pc, #224]	; (8001f4c <HAL_I2C_Init+0x140>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d108      	bne.n	8001e8a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0209      	lsls	r1, r1, #8
 8001e84:	430a      	orrs	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e007      	b.n	8001e9a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2184      	movs	r1, #132	; 0x84
 8001e94:	0209      	lsls	r1, r1, #8
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d109      	bne.n	8001eb6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2180      	movs	r1, #128	; 0x80
 8001eae:	0109      	lsls	r1, r1, #4
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	e007      	b.n	8001ec6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4923      	ldr	r1, [pc, #140]	; (8001f50 <HAL_I2C_Init+0x144>)
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4920      	ldr	r1, [pc, #128]	; (8001f54 <HAL_I2C_Init+0x148>)
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	491a      	ldr	r1, [pc, #104]	; (8001f4c <HAL_I2C_Init+0x140>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	430a      	orrs	r2, r1
 8001efe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69d9      	ldr	r1, [r3, #28]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2241      	movs	r2, #65	; 0x41
 8001f2a:	2120      	movs	r1, #32
 8001f2c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2242      	movs	r2, #66	; 0x42
 8001f38:	2100      	movs	r1, #0
 8001f3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			; (mov r8, r8)
 8001f48:	f0ffffff 	.word	0xf0ffffff
 8001f4c:	ffff7fff 	.word	0xffff7fff
 8001f50:	fffff7ff 	.word	0xfffff7ff
 8001f54:	02008000 	.word	0x02008000

08001f58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	0008      	movs	r0, r1
 8001f62:	607a      	str	r2, [r7, #4]
 8001f64:	0019      	movs	r1, r3
 8001f66:	230a      	movs	r3, #10
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	1c02      	adds	r2, r0, #0
 8001f6c:	801a      	strh	r2, [r3, #0]
 8001f6e:	2308      	movs	r3, #8
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	1c0a      	adds	r2, r1, #0
 8001f74:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2241      	movs	r2, #65	; 0x41
 8001f7a:	5c9b      	ldrb	r3, [r3, r2]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b20      	cmp	r3, #32
 8001f80:	d000      	beq.n	8001f84 <HAL_I2C_Master_Transmit+0x2c>
 8001f82:	e10a      	b.n	800219a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	5c9b      	ldrb	r3, [r3, r2]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_I2C_Master_Transmit+0x3a>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e104      	b.n	800219c <HAL_I2C_Master_Transmit+0x244>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2240      	movs	r2, #64	; 0x40
 8001f96:	2101      	movs	r1, #1
 8001f98:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f9a:	f7ff fc6d 	bl	8001878 <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fa2:	2380      	movs	r3, #128	; 0x80
 8001fa4:	0219      	lsls	r1, r3, #8
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2319      	movs	r3, #25
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f000 f91e 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 8001fb4:	1e03      	subs	r3, r0, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0ef      	b.n	800219c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2241      	movs	r2, #65	; 0x41
 8001fc0:	2121      	movs	r1, #33	; 0x21
 8001fc2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2242      	movs	r2, #66	; 0x42
 8001fc8:	2110      	movs	r1, #16
 8001fca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2208      	movs	r2, #8
 8001fdc:	18ba      	adds	r2, r7, r2
 8001fde:	8812      	ldrh	r2, [r2, #0]
 8001fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2bff      	cmp	r3, #255	; 0xff
 8001ff0:	d906      	bls.n	8002000 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	22ff      	movs	r2, #255	; 0xff
 8001ff6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	045b      	lsls	r3, r3, #17
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	e007      	b.n	8002010 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002004:	b29a      	uxth	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	049b      	lsls	r3, r3, #18
 800200e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	2b00      	cmp	r3, #0
 8002016:	d027      	beq.n	8002068 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800204c:	b2db      	uxtb	r3, r3
 800204e:	3301      	adds	r3, #1
 8002050:	b2da      	uxtb	r2, r3
 8002052:	697c      	ldr	r4, [r7, #20]
 8002054:	230a      	movs	r3, #10
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	8819      	ldrh	r1, [r3, #0]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_I2C_Master_Transmit+0x24c>)
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	0023      	movs	r3, r4
 8002062:	f000 faa7 	bl	80025b4 <I2C_TransferConfig>
 8002066:	e06f      	b.n	8002148 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206c:	b2da      	uxtb	r2, r3
 800206e:	697c      	ldr	r4, [r7, #20]
 8002070:	230a      	movs	r3, #10
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	8819      	ldrh	r1, [r3, #0]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_I2C_Master_Transmit+0x24c>)
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	0023      	movs	r3, r4
 800207e:	f000 fa99 	bl	80025b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002082:	e061      	b.n	8002148 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	0018      	movs	r0, r3
 800208c:	f000 f908 	bl	80022a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002090:	1e03      	subs	r3, r0, #0
 8002092:	d001      	beq.n	8002098 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e081      	b.n	800219c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d03a      	beq.n	8002148 <HAL_I2C_Master_Transmit+0x1f0>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d136      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020dc:	68f8      	ldr	r0, [r7, #12]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	0013      	movs	r3, r2
 80020e4:	2200      	movs	r2, #0
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	f000 f882 	bl	80021f0 <I2C_WaitOnFlagUntilTimeout>
 80020ec:	1e03      	subs	r3, r0, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e053      	b.n	800219c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	2bff      	cmp	r3, #255	; 0xff
 80020fc:	d911      	bls.n	8002122 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	22ff      	movs	r2, #255	; 0xff
 8002102:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002108:	b2da      	uxtb	r2, r3
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	045c      	lsls	r4, r3, #17
 800210e:	230a      	movs	r3, #10
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	8819      	ldrh	r1, [r3, #0]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	2300      	movs	r3, #0
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	0023      	movs	r3, r4
 800211c:	f000 fa4a 	bl	80025b4 <I2C_TransferConfig>
 8002120:	e012      	b.n	8002148 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	b2da      	uxtb	r2, r3
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	049c      	lsls	r4, r3, #18
 8002136:	230a      	movs	r3, #10
 8002138:	18fb      	adds	r3, r7, r3
 800213a:	8819      	ldrh	r1, [r3, #0]
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	2300      	movs	r3, #0
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	0023      	movs	r3, r4
 8002144:	f000 fa36 	bl	80025b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d198      	bne.n	8002084 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f8e7 	bl	800232c <I2C_WaitOnSTOPFlagUntilTimeout>
 800215e:	1e03      	subs	r3, r0, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e01a      	b.n	800219c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2220      	movs	r2, #32
 800216c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	490b      	ldr	r1, [pc, #44]	; (80021a8 <HAL_I2C_Master_Transmit+0x250>)
 800217a:	400a      	ands	r2, r1
 800217c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2241      	movs	r2, #65	; 0x41
 8002182:	2120      	movs	r1, #32
 8002184:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2242      	movs	r2, #66	; 0x42
 800218a:	2100      	movs	r1, #0
 800218c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2240      	movs	r2, #64	; 0x40
 8002192:	2100      	movs	r1, #0
 8002194:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e000      	b.n	800219c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800219a:	2302      	movs	r3, #2
  }
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b007      	add	sp, #28
 80021a2:	bd90      	pop	{r4, r7, pc}
 80021a4:	80002000 	.word	0x80002000
 80021a8:	fe00e800 	.word	0xfe00e800

080021ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2202      	movs	r2, #2
 80021bc:	4013      	ands	r3, r2
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d103      	bne.n	80021ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2201      	movs	r2, #1
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d007      	beq.n	80021e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699a      	ldr	r2, [r3, #24]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2101      	movs	r1, #1
 80021e4:	430a      	orrs	r2, r1
 80021e6:	619a      	str	r2, [r3, #24]
  }
}
 80021e8:	46c0      	nop			; (mov r8, r8)
 80021ea:	46bd      	mov	sp, r7
 80021ec:	b002      	add	sp, #8
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	603b      	str	r3, [r7, #0]
 80021fc:	1dfb      	adds	r3, r7, #7
 80021fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002200:	e03a      	b.n	8002278 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	0018      	movs	r0, r3
 800220a:	f000 f8d3 	bl	80023b4 <I2C_IsErrorOccurred>
 800220e:	1e03      	subs	r3, r0, #0
 8002210:	d001      	beq.n	8002216 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e040      	b.n	8002298 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	d02d      	beq.n	8002278 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221c:	f7ff fb2c 	bl	8001878 <HAL_GetTick>
 8002220:	0002      	movs	r2, r0
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d302      	bcc.n	8002232 <I2C_WaitOnFlagUntilTimeout+0x42>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d122      	bne.n	8002278 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	4013      	ands	r3, r2
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	425a      	negs	r2, r3
 8002242:	4153      	adcs	r3, r2
 8002244:	b2db      	uxtb	r3, r3
 8002246:	001a      	movs	r2, r3
 8002248:	1dfb      	adds	r3, r7, #7
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d113      	bne.n	8002278 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002254:	2220      	movs	r2, #32
 8002256:	431a      	orrs	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2241      	movs	r2, #65	; 0x41
 8002260:	2120      	movs	r1, #32
 8002262:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2242      	movs	r2, #66	; 0x42
 8002268:	2100      	movs	r1, #0
 800226a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2240      	movs	r2, #64	; 0x40
 8002270:	2100      	movs	r1, #0
 8002272:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e00f      	b.n	8002298 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	4013      	ands	r3, r2
 8002282:	68ba      	ldr	r2, [r7, #8]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	425a      	negs	r2, r3
 8002288:	4153      	adcs	r3, r2
 800228a:	b2db      	uxtb	r3, r3
 800228c:	001a      	movs	r2, r3
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d0b5      	beq.n	8002202 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	0018      	movs	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	b004      	add	sp, #16
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022ac:	e032      	b.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68b9      	ldr	r1, [r7, #8]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f000 f87d 	bl	80023b4 <I2C_IsErrorOccurred>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d001      	beq.n	80022c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e030      	b.n	8002324 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3301      	adds	r3, #1
 80022c6:	d025      	beq.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c8:	f7ff fad6 	bl	8001878 <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d302      	bcc.n	80022de <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d11a      	bne.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2202      	movs	r2, #2
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d013      	beq.n	8002314 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	2220      	movs	r2, #32
 80022f2:	431a      	orrs	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2241      	movs	r2, #65	; 0x41
 80022fc:	2120      	movs	r1, #32
 80022fe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2242      	movs	r2, #66	; 0x42
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2240      	movs	r2, #64	; 0x40
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e007      	b.n	8002324 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2202      	movs	r2, #2
 800231c:	4013      	ands	r3, r2
 800231e:	2b02      	cmp	r3, #2
 8002320:	d1c5      	bne.n	80022ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b004      	add	sp, #16
 800232a:	bd80      	pop	{r7, pc}

0800232c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002338:	e02f      	b.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	68b9      	ldr	r1, [r7, #8]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	0018      	movs	r0, r3
 8002342:	f000 f837 	bl	80023b4 <I2C_IsErrorOccurred>
 8002346:	1e03      	subs	r3, r0, #0
 8002348:	d001      	beq.n	800234e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e02d      	b.n	80023aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800234e:	f7ff fa93 	bl	8001878 <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	429a      	cmp	r2, r3
 800235c:	d302      	bcc.n	8002364 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11a      	bne.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2220      	movs	r2, #32
 800236c:	4013      	ands	r3, r2
 800236e:	2b20      	cmp	r3, #32
 8002370:	d013      	beq.n	800239a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	2220      	movs	r2, #32
 8002378:	431a      	orrs	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2241      	movs	r2, #65	; 0x41
 8002382:	2120      	movs	r1, #32
 8002384:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2242      	movs	r2, #66	; 0x42
 800238a:	2100      	movs	r1, #0
 800238c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2240      	movs	r2, #64	; 0x40
 8002392:	2100      	movs	r1, #0
 8002394:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e007      	b.n	80023aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2220      	movs	r2, #32
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b20      	cmp	r3, #32
 80023a6:	d1c8      	bne.n	800233a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b004      	add	sp, #16
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b08b      	sub	sp, #44	; 0x2c
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c0:	2327      	movs	r3, #39	; 0x27
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2210      	movs	r2, #16
 80023dc:	4013      	ands	r3, r2
 80023de:	d100      	bne.n	80023e2 <I2C_IsErrorOccurred+0x2e>
 80023e0:	e082      	b.n	80024e8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2210      	movs	r2, #16
 80023e8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023ea:	e060      	b.n	80024ae <I2C_IsErrorOccurred+0xfa>
 80023ec:	2427      	movs	r4, #39	; 0x27
 80023ee:	193b      	adds	r3, r7, r4
 80023f0:	193a      	adds	r2, r7, r4
 80023f2:	7812      	ldrb	r2, [r2, #0]
 80023f4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	3301      	adds	r3, #1
 80023fa:	d058      	beq.n	80024ae <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023fc:	f7ff fa3c 	bl	8001878 <HAL_GetTick>
 8002400:	0002      	movs	r2, r0
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	429a      	cmp	r2, r3
 800240a:	d306      	bcc.n	800241a <I2C_IsErrorOccurred+0x66>
 800240c:	193b      	adds	r3, r7, r4
 800240e:	193a      	adds	r2, r7, r4
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d149      	bne.n	80024ae <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	01db      	lsls	r3, r3, #7
 8002424:	4013      	ands	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002428:	2013      	movs	r0, #19
 800242a:	183b      	adds	r3, r7, r0
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	2142      	movs	r1, #66	; 0x42
 8002430:	5c52      	ldrb	r2, [r2, r1]
 8002432:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	401a      	ands	r2, r3
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	021b      	lsls	r3, r3, #8
 8002444:	429a      	cmp	r2, r3
 8002446:	d126      	bne.n	8002496 <I2C_IsErrorOccurred+0xe2>
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	2380      	movs	r3, #128	; 0x80
 800244c:	01db      	lsls	r3, r3, #7
 800244e:	429a      	cmp	r2, r3
 8002450:	d021      	beq.n	8002496 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002452:	183b      	adds	r3, r7, r0
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b20      	cmp	r3, #32
 8002458:	d01d      	beq.n	8002496 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2180      	movs	r1, #128	; 0x80
 8002466:	01c9      	lsls	r1, r1, #7
 8002468:	430a      	orrs	r2, r1
 800246a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800246c:	f7ff fa04 	bl	8001878 <HAL_GetTick>
 8002470:	0003      	movs	r3, r0
 8002472:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002474:	e00f      	b.n	8002496 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002476:	f7ff f9ff 	bl	8001878 <HAL_GetTick>
 800247a:	0002      	movs	r2, r0
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b19      	cmp	r3, #25
 8002482:	d908      	bls.n	8002496 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	2220      	movs	r2, #32
 8002488:	4313      	orrs	r3, r2
 800248a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800248c:	2327      	movs	r3, #39	; 0x27
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]

              break;
 8002494:	e00b      	b.n	80024ae <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2220      	movs	r2, #32
 800249e:	4013      	ands	r3, r2
 80024a0:	2127      	movs	r1, #39	; 0x27
 80024a2:	187a      	adds	r2, r7, r1
 80024a4:	1879      	adds	r1, r7, r1
 80024a6:	7809      	ldrb	r1, [r1, #0]
 80024a8:	7011      	strb	r1, [r2, #0]
 80024aa:	2b20      	cmp	r3, #32
 80024ac:	d1e3      	bne.n	8002476 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2220      	movs	r2, #32
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b20      	cmp	r3, #32
 80024ba:	d004      	beq.n	80024c6 <I2C_IsErrorOccurred+0x112>
 80024bc:	2327      	movs	r3, #39	; 0x27
 80024be:	18fb      	adds	r3, r7, r3
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d092      	beq.n	80023ec <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80024c6:	2327      	movs	r3, #39	; 0x27
 80024c8:	18fb      	adds	r3, r7, r3
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2220      	movs	r2, #32
 80024d6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80024d8:	6a3b      	ldr	r3, [r7, #32]
 80024da:	2204      	movs	r2, #4
 80024dc:	4313      	orrs	r3, r2
 80024de:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80024e0:	2327      	movs	r3, #39	; 0x27
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4013      	ands	r3, r2
 80024f8:	d00c      	beq.n	8002514 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	2201      	movs	r2, #1
 80024fe:	4313      	orrs	r3, r2
 8002500:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2280      	movs	r2, #128	; 0x80
 8002508:	0052      	lsls	r2, r2, #1
 800250a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800250c:	2327      	movs	r3, #39	; 0x27
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	2201      	movs	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4013      	ands	r3, r2
 800251c:	d00c      	beq.n	8002538 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	2208      	movs	r2, #8
 8002522:	4313      	orrs	r3, r2
 8002524:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2280      	movs	r2, #128	; 0x80
 800252c:	00d2      	lsls	r2, r2, #3
 800252e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002530:	2327      	movs	r3, #39	; 0x27
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4013      	ands	r3, r2
 8002540:	d00c      	beq.n	800255c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	2202      	movs	r2, #2
 8002546:	4313      	orrs	r3, r2
 8002548:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	0092      	lsls	r2, r2, #2
 8002552:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002554:	2327      	movs	r3, #39	; 0x27
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2201      	movs	r2, #1
 800255a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800255c:	2327      	movs	r3, #39	; 0x27
 800255e:	18fb      	adds	r3, r7, r3
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01d      	beq.n	80025a2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	0018      	movs	r0, r3
 800256a:	f7ff fe1f 	bl	80021ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	490d      	ldr	r1, [pc, #52]	; (80025b0 <I2C_IsErrorOccurred+0x1fc>)
 800257a:	400a      	ands	r2, r1
 800257c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002582:	6a3b      	ldr	r3, [r7, #32]
 8002584:	431a      	orrs	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2241      	movs	r2, #65	; 0x41
 800258e:	2120      	movs	r1, #32
 8002590:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2242      	movs	r2, #66	; 0x42
 8002596:	2100      	movs	r1, #0
 8002598:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2240      	movs	r2, #64	; 0x40
 800259e:	2100      	movs	r1, #0
 80025a0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80025a2:	2327      	movs	r3, #39	; 0x27
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	781b      	ldrb	r3, [r3, #0]
}
 80025a8:	0018      	movs	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	b00b      	add	sp, #44	; 0x2c
 80025ae:	bd90      	pop	{r4, r7, pc}
 80025b0:	fe00e800 	.word	0xfe00e800

080025b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	0008      	movs	r0, r1
 80025be:	0011      	movs	r1, r2
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	240a      	movs	r4, #10
 80025c4:	193b      	adds	r3, r7, r4
 80025c6:	1c02      	adds	r2, r0, #0
 80025c8:	801a      	strh	r2, [r3, #0]
 80025ca:	2009      	movs	r0, #9
 80025cc:	183b      	adds	r3, r7, r0
 80025ce:	1c0a      	adds	r2, r1, #0
 80025d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025d2:	193b      	adds	r3, r7, r4
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	059b      	lsls	r3, r3, #22
 80025d8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025da:	183b      	adds	r3, r7, r0
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	0419      	lsls	r1, r3, #16
 80025e0:	23ff      	movs	r3, #255	; 0xff
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025e6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ee:	4313      	orrs	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	085b      	lsrs	r3, r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025fe:	0d51      	lsrs	r1, r2, #21
 8002600:	2280      	movs	r2, #128	; 0x80
 8002602:	00d2      	lsls	r2, r2, #3
 8002604:	400a      	ands	r2, r1
 8002606:	4907      	ldr	r1, [pc, #28]	; (8002624 <I2C_TransferConfig+0x70>)
 8002608:	430a      	orrs	r2, r1
 800260a:	43d2      	mvns	r2, r2
 800260c:	401a      	ands	r2, r3
 800260e:	0011      	movs	r1, r2
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	46bd      	mov	sp, r7
 800261e:	b007      	add	sp, #28
 8002620:	bd90      	pop	{r4, r7, pc}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	03ff63ff 	.word	0x03ff63ff

08002628 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2241      	movs	r2, #65	; 0x41
 8002636:	5c9b      	ldrb	r3, [r3, r2]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b20      	cmp	r3, #32
 800263c:	d138      	bne.n	80026b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2240      	movs	r2, #64	; 0x40
 8002642:	5c9b      	ldrb	r3, [r3, r2]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002648:	2302      	movs	r3, #2
 800264a:	e032      	b.n	80026b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2240      	movs	r2, #64	; 0x40
 8002650:	2101      	movs	r1, #1
 8002652:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2241      	movs	r2, #65	; 0x41
 8002658:	2124      	movs	r1, #36	; 0x24
 800265a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2101      	movs	r1, #1
 8002668:	438a      	bics	r2, r1
 800266a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4911      	ldr	r1, [pc, #68]	; (80026bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002678:	400a      	ands	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6819      	ldr	r1, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	430a      	orrs	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2101      	movs	r1, #1
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2241      	movs	r2, #65	; 0x41
 80026a0:	2120      	movs	r1, #32
 80026a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2240      	movs	r2, #64	; 0x40
 80026a8:	2100      	movs	r1, #0
 80026aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	46c0      	nop			; (mov r8, r8)
 80026bc:	ffffefff 	.word	0xffffefff

080026c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2241      	movs	r2, #65	; 0x41
 80026ce:	5c9b      	ldrb	r3, [r3, r2]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b20      	cmp	r3, #32
 80026d4:	d139      	bne.n	800274a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2240      	movs	r2, #64	; 0x40
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e033      	b.n	800274c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2240      	movs	r2, #64	; 0x40
 80026e8:	2101      	movs	r1, #1
 80026ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2241      	movs	r2, #65	; 0x41
 80026f0:	2124      	movs	r1, #36	; 0x24
 80026f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2101      	movs	r1, #1
 8002700:	438a      	bics	r2, r1
 8002702:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	4a11      	ldr	r2, [pc, #68]	; (8002754 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002710:	4013      	ands	r3, r2
 8002712:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4313      	orrs	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2101      	movs	r1, #1
 8002732:	430a      	orrs	r2, r1
 8002734:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2241      	movs	r2, #65	; 0x41
 800273a:	2120      	movs	r1, #32
 800273c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2240      	movs	r2, #64	; 0x40
 8002742:	2100      	movs	r1, #0
 8002744:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800274a:	2302      	movs	r3, #2
  }
}
 800274c:	0018      	movs	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	b004      	add	sp, #16
 8002752:	bd80      	pop	{r7, pc}
 8002754:	fffff0ff 	.word	0xfffff0ff

08002758 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_I2CEx_EnableFastModePlus+0x34>)
 8002762:	699a      	ldr	r2, [r3, #24]
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_I2CEx_EnableFastModePlus+0x34>)
 8002766:	2101      	movs	r1, #1
 8002768:	430a      	orrs	r2, r1
 800276a:	619a      	str	r2, [r3, #24]
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_I2CEx_EnableFastModePlus+0x34>)
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2201      	movs	r2, #1
 8002772:	4013      	ands	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	40010000 	.word	0x40010000

08002794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b088      	sub	sp, #32
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d101      	bne.n	80027a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e301      	b.n	8002daa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2201      	movs	r2, #1
 80027ac:	4013      	ands	r3, r2
 80027ae:	d100      	bne.n	80027b2 <HAL_RCC_OscConfig+0x1e>
 80027b0:	e08d      	b.n	80028ce <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027b2:	4bc3      	ldr	r3, [pc, #780]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	220c      	movs	r2, #12
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d00e      	beq.n	80027dc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027be:	4bc0      	ldr	r3, [pc, #768]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	220c      	movs	r2, #12
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d116      	bne.n	80027f8 <HAL_RCC_OscConfig+0x64>
 80027ca:	4bbd      	ldr	r3, [pc, #756]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	025b      	lsls	r3, r3, #9
 80027d2:	401a      	ands	r2, r3
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	025b      	lsls	r3, r3, #9
 80027d8:	429a      	cmp	r2, r3
 80027da:	d10d      	bne.n	80027f8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027dc:	4bb8      	ldr	r3, [pc, #736]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	029b      	lsls	r3, r3, #10
 80027e4:	4013      	ands	r3, r2
 80027e6:	d100      	bne.n	80027ea <HAL_RCC_OscConfig+0x56>
 80027e8:	e070      	b.n	80028cc <HAL_RCC_OscConfig+0x138>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d000      	beq.n	80027f4 <HAL_RCC_OscConfig+0x60>
 80027f2:	e06b      	b.n	80028cc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e2d8      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_OscConfig+0x7c>
 8002800:	4baf      	ldr	r3, [pc, #700]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4bae      	ldr	r3, [pc, #696]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002806:	2180      	movs	r1, #128	; 0x80
 8002808:	0249      	lsls	r1, r1, #9
 800280a:	430a      	orrs	r2, r1
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e02f      	b.n	8002870 <HAL_RCC_OscConfig+0xdc>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10c      	bne.n	8002832 <HAL_RCC_OscConfig+0x9e>
 8002818:	4ba9      	ldr	r3, [pc, #676]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4ba8      	ldr	r3, [pc, #672]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 800281e:	49a9      	ldr	r1, [pc, #676]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002820:	400a      	ands	r2, r1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	4ba6      	ldr	r3, [pc, #664]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4ba5      	ldr	r3, [pc, #660]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 800282a:	49a7      	ldr	r1, [pc, #668]	; (8002ac8 <HAL_RCC_OscConfig+0x334>)
 800282c:	400a      	ands	r2, r1
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	e01e      	b.n	8002870 <HAL_RCC_OscConfig+0xdc>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b05      	cmp	r3, #5
 8002838:	d10e      	bne.n	8002858 <HAL_RCC_OscConfig+0xc4>
 800283a:	4ba1      	ldr	r3, [pc, #644]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4ba0      	ldr	r3, [pc, #640]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002840:	2180      	movs	r1, #128	; 0x80
 8002842:	02c9      	lsls	r1, r1, #11
 8002844:	430a      	orrs	r2, r1
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	4b9d      	ldr	r3, [pc, #628]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b9c      	ldr	r3, [pc, #624]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	0249      	lsls	r1, r1, #9
 8002852:	430a      	orrs	r2, r1
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0xdc>
 8002858:	4b99      	ldr	r3, [pc, #612]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b98      	ldr	r3, [pc, #608]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 800285e:	4999      	ldr	r1, [pc, #612]	; (8002ac4 <HAL_RCC_OscConfig+0x330>)
 8002860:	400a      	ands	r2, r1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	4b96      	ldr	r3, [pc, #600]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b95      	ldr	r3, [pc, #596]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 800286a:	4997      	ldr	r1, [pc, #604]	; (8002ac8 <HAL_RCC_OscConfig+0x334>)
 800286c:	400a      	ands	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d014      	beq.n	80028a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe fffe 	bl	8001878 <HAL_GetTick>
 800287c:	0003      	movs	r3, r0
 800287e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002882:	f7fe fff9 	bl	8001878 <HAL_GetTick>
 8002886:	0002      	movs	r2, r0
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b64      	cmp	r3, #100	; 0x64
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e28a      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002894:	4b8a      	ldr	r3, [pc, #552]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	4013      	ands	r3, r2
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0xee>
 80028a0:	e015      	b.n	80028ce <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7fe ffe9 	bl	8001878 <HAL_GetTick>
 80028a6:	0003      	movs	r3, r0
 80028a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ac:	f7fe ffe4 	bl	8001878 <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	; 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e275      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	4b80      	ldr	r3, [pc, #512]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	029b      	lsls	r3, r3, #10
 80028c6:	4013      	ands	r3, r2
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x118>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d100      	bne.n	80028da <HAL_RCC_OscConfig+0x146>
 80028d8:	e069      	b.n	80029ae <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80028da:	4b79      	ldr	r3, [pc, #484]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	220c      	movs	r2, #12
 80028e0:	4013      	ands	r3, r2
 80028e2:	d00b      	beq.n	80028fc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80028e4:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	220c      	movs	r2, #12
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b08      	cmp	r3, #8
 80028ee:	d11c      	bne.n	800292a <HAL_RCC_OscConfig+0x196>
 80028f0:	4b73      	ldr	r3, [pc, #460]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	025b      	lsls	r3, r3, #9
 80028f8:	4013      	ands	r3, r2
 80028fa:	d116      	bne.n	800292a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fc:	4b70      	ldr	r3, [pc, #448]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2202      	movs	r2, #2
 8002902:	4013      	ands	r3, r2
 8002904:	d005      	beq.n	8002912 <HAL_RCC_OscConfig+0x17e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d001      	beq.n	8002912 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e24b      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002912:	4b6b      	ldr	r3, [pc, #428]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	22f8      	movs	r2, #248	; 0xf8
 8002918:	4393      	bics	r3, r2
 800291a:	0019      	movs	r1, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	00da      	lsls	r2, r3, #3
 8002922:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002928:	e041      	b.n	80029ae <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d024      	beq.n	800297c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002932:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4b62      	ldr	r3, [pc, #392]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002938:	2101      	movs	r1, #1
 800293a:	430a      	orrs	r2, r1
 800293c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe ff9b 	bl	8001878 <HAL_GetTick>
 8002942:	0003      	movs	r3, r0
 8002944:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002948:	f7fe ff96 	bl	8001878 <HAL_GetTick>
 800294c:	0002      	movs	r2, r0
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e227      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295a:	4b59      	ldr	r3, [pc, #356]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2202      	movs	r2, #2
 8002960:	4013      	ands	r3, r2
 8002962:	d0f1      	beq.n	8002948 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002964:	4b56      	ldr	r3, [pc, #344]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	22f8      	movs	r2, #248	; 0xf8
 800296a:	4393      	bics	r3, r2
 800296c:	0019      	movs	r1, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00da      	lsls	r2, r3, #3
 8002974:	4b52      	ldr	r3, [pc, #328]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002976:	430a      	orrs	r2, r1
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e018      	b.n	80029ae <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b4f      	ldr	r3, [pc, #316]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002982:	2101      	movs	r1, #1
 8002984:	438a      	bics	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe ff76 	bl	8001878 <HAL_GetTick>
 800298c:	0003      	movs	r3, r0
 800298e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002992:	f7fe ff71 	bl	8001878 <HAL_GetTick>
 8002996:	0002      	movs	r2, r0
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e202      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a4:	4b46      	ldr	r3, [pc, #280]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2202      	movs	r2, #2
 80029aa:	4013      	ands	r3, r2
 80029ac:	d1f1      	bne.n	8002992 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2208      	movs	r2, #8
 80029b4:	4013      	ands	r3, r2
 80029b6:	d036      	beq.n	8002a26 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d019      	beq.n	80029f4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c0:	4b3f      	ldr	r3, [pc, #252]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80029c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029c4:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80029c6:	2101      	movs	r1, #1
 80029c8:	430a      	orrs	r2, r1
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029cc:	f7fe ff54 	bl	8001878 <HAL_GetTick>
 80029d0:	0003      	movs	r3, r0
 80029d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d6:	f7fe ff4f 	bl	8001878 <HAL_GetTick>
 80029da:	0002      	movs	r2, r0
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e1e0      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e8:	4b35      	ldr	r3, [pc, #212]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	2202      	movs	r2, #2
 80029ee:	4013      	ands	r3, r2
 80029f0:	d0f1      	beq.n	80029d6 <HAL_RCC_OscConfig+0x242>
 80029f2:	e018      	b.n	8002a26 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f4:	4b32      	ldr	r3, [pc, #200]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80029f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f8:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 80029fa:	2101      	movs	r1, #1
 80029fc:	438a      	bics	r2, r1
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fe ff3a 	bl	8001878 <HAL_GetTick>
 8002a04:	0003      	movs	r3, r0
 8002a06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a0a:	f7fe ff35 	bl	8001878 <HAL_GetTick>
 8002a0e:	0002      	movs	r2, r0
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1c6      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	4b28      	ldr	r3, [pc, #160]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	2202      	movs	r2, #2
 8002a22:	4013      	ands	r3, r2
 8002a24:	d1f1      	bne.n	8002a0a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d100      	bne.n	8002a32 <HAL_RCC_OscConfig+0x29e>
 8002a30:	e0b4      	b.n	8002b9c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a32:	201f      	movs	r0, #31
 8002a34:	183b      	adds	r3, r7, r0
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3a:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002a3c:	69da      	ldr	r2, [r3, #28]
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	055b      	lsls	r3, r3, #21
 8002a42:	4013      	ands	r3, r2
 8002a44:	d110      	bne.n	8002a68 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002a4c:	2180      	movs	r1, #128	; 0x80
 8002a4e:	0549      	lsls	r1, r1, #21
 8002a50:	430a      	orrs	r2, r1
 8002a52:	61da      	str	r2, [r3, #28]
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	055b      	lsls	r3, r3, #21
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a62:	183b      	adds	r3, r7, r0
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	4b18      	ldr	r3, [pc, #96]	; (8002acc <HAL_RCC_OscConfig+0x338>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4013      	ands	r3, r2
 8002a72:	d11a      	bne.n	8002aaa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a74:	4b15      	ldr	r3, [pc, #84]	; (8002acc <HAL_RCC_OscConfig+0x338>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <HAL_RCC_OscConfig+0x338>)
 8002a7a:	2180      	movs	r1, #128	; 0x80
 8002a7c:	0049      	lsls	r1, r1, #1
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a82:	f7fe fef9 	bl	8001878 <HAL_GetTick>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8c:	f7fe fef4 	bl	8001878 <HAL_GetTick>
 8002a90:	0002      	movs	r2, r0
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b64      	cmp	r3, #100	; 0x64
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e185      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_RCC_OscConfig+0x338>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	2380      	movs	r3, #128	; 0x80
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d10e      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x33c>
 8002ab2:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002ab4:	6a1a      	ldr	r2, [r3, #32]
 8002ab6:	4b02      	ldr	r3, [pc, #8]	; (8002ac0 <HAL_RCC_OscConfig+0x32c>)
 8002ab8:	2101      	movs	r1, #1
 8002aba:	430a      	orrs	r2, r1
 8002abc:	621a      	str	r2, [r3, #32]
 8002abe:	e035      	b.n	8002b2c <HAL_RCC_OscConfig+0x398>
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	fffeffff 	.word	0xfffeffff
 8002ac8:	fffbffff 	.word	0xfffbffff
 8002acc:	40007000 	.word	0x40007000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10c      	bne.n	8002af2 <HAL_RCC_OscConfig+0x35e>
 8002ad8:	4bb6      	ldr	r3, [pc, #728]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	4bb5      	ldr	r3, [pc, #724]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002ade:	2101      	movs	r1, #1
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	621a      	str	r2, [r3, #32]
 8002ae4:	4bb3      	ldr	r3, [pc, #716]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002ae6:	6a1a      	ldr	r2, [r3, #32]
 8002ae8:	4bb2      	ldr	r3, [pc, #712]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002aea:	2104      	movs	r1, #4
 8002aec:	438a      	bics	r2, r1
 8002aee:	621a      	str	r2, [r3, #32]
 8002af0:	e01c      	b.n	8002b2c <HAL_RCC_OscConfig+0x398>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b05      	cmp	r3, #5
 8002af8:	d10c      	bne.n	8002b14 <HAL_RCC_OscConfig+0x380>
 8002afa:	4bae      	ldr	r3, [pc, #696]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002afc:	6a1a      	ldr	r2, [r3, #32]
 8002afe:	4bad      	ldr	r3, [pc, #692]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002b00:	2104      	movs	r1, #4
 8002b02:	430a      	orrs	r2, r1
 8002b04:	621a      	str	r2, [r3, #32]
 8002b06:	4bab      	ldr	r3, [pc, #684]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002b08:	6a1a      	ldr	r2, [r3, #32]
 8002b0a:	4baa      	ldr	r3, [pc, #680]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	621a      	str	r2, [r3, #32]
 8002b12:	e00b      	b.n	8002b2c <HAL_RCC_OscConfig+0x398>
 8002b14:	4ba7      	ldr	r3, [pc, #668]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002b16:	6a1a      	ldr	r2, [r3, #32]
 8002b18:	4ba6      	ldr	r3, [pc, #664]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	438a      	bics	r2, r1
 8002b1e:	621a      	str	r2, [r3, #32]
 8002b20:	4ba4      	ldr	r3, [pc, #656]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002b22:	6a1a      	ldr	r2, [r3, #32]
 8002b24:	4ba3      	ldr	r3, [pc, #652]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002b26:	2104      	movs	r1, #4
 8002b28:	438a      	bics	r2, r1
 8002b2a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d014      	beq.n	8002b5e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b34:	f7fe fea0 	bl	8001878 <HAL_GetTick>
 8002b38:	0003      	movs	r3, r0
 8002b3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b3c:	e009      	b.n	8002b52 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe fe9b 	bl	8001878 <HAL_GetTick>
 8002b42:	0002      	movs	r2, r0
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	4a9b      	ldr	r2, [pc, #620]	; (8002db8 <HAL_RCC_OscConfig+0x624>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e12b      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	4b98      	ldr	r3, [pc, #608]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	2202      	movs	r2, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x3aa>
 8002b5c:	e013      	b.n	8002b86 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5e:	f7fe fe8b 	bl	8001878 <HAL_GetTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b66:	e009      	b.n	8002b7c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe fe86 	bl	8001878 <HAL_GetTick>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	4a91      	ldr	r2, [pc, #580]	; (8002db8 <HAL_RCC_OscConfig+0x624>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e116      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7c:	4b8d      	ldr	r3, [pc, #564]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	2202      	movs	r2, #2
 8002b82:	4013      	ands	r3, r2
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b86:	231f      	movs	r3, #31
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b90:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	4b87      	ldr	r3, [pc, #540]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002b96:	4989      	ldr	r1, [pc, #548]	; (8002dbc <HAL_RCC_OscConfig+0x628>)
 8002b98:	400a      	ands	r2, r1
 8002b9a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2210      	movs	r2, #16
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d12a      	bne.n	8002c04 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bae:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	4b80      	ldr	r3, [pc, #512]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002bba:	4b7e      	ldr	r3, [pc, #504]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bbe:	4b7d      	ldr	r3, [pc, #500]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bc6:	f7fe fe57 	bl	8001878 <HAL_GetTick>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bd0:	f7fe fe52 	bl	8001878 <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0e3      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002be2:	4b74      	ldr	r3, [pc, #464]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002be6:	2202      	movs	r2, #2
 8002be8:	4013      	ands	r3, r2
 8002bea:	d0f1      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bec:	4b71      	ldr	r3, [pc, #452]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf0:	22f8      	movs	r2, #248	; 0xf8
 8002bf2:	4393      	bics	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	00da      	lsls	r2, r3, #3
 8002bfc:	4b6d      	ldr	r3, [pc, #436]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	635a      	str	r2, [r3, #52]	; 0x34
 8002c02:	e034      	b.n	8002c6e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	3305      	adds	r3, #5
 8002c0a:	d111      	bne.n	8002c30 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c0c:	4b69      	ldr	r3, [pc, #420]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c10:	4b68      	ldr	r3, [pc, #416]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c12:	2104      	movs	r1, #4
 8002c14:	438a      	bics	r2, r1
 8002c16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c18:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c1c:	22f8      	movs	r2, #248	; 0xf8
 8002c1e:	4393      	bics	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	00da      	lsls	r2, r3, #3
 8002c28:	4b62      	ldr	r3, [pc, #392]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c2e:	e01e      	b.n	8002c6e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c30:	4b60      	ldr	r3, [pc, #384]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c34:	4b5f      	ldr	r3, [pc, #380]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c36:	2104      	movs	r1, #4
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002c3c:	4b5d      	ldr	r3, [pc, #372]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c40:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c42:	2101      	movs	r1, #1
 8002c44:	438a      	bics	r2, r1
 8002c46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c48:	f7fe fe16 	bl	8001878 <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c52:	f7fe fe11 	bl	8001878 <HAL_GetTick>
 8002c56:	0002      	movs	r2, r0
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e0a2      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c64:	4b53      	ldr	r3, [pc, #332]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	2202      	movs	r2, #2
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d1f1      	bne.n	8002c52 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d100      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4e4>
 8002c76:	e097      	b.n	8002da8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c78:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	220c      	movs	r2, #12
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d100      	bne.n	8002c86 <HAL_RCC_OscConfig+0x4f2>
 8002c84:	e06b      	b.n	8002d5e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d14c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002c94:	494a      	ldr	r1, [pc, #296]	; (8002dc0 <HAL_RCC_OscConfig+0x62c>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9a:	f7fe fded 	bl	8001878 <HAL_GetTick>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca4:	f7fe fde8 	bl	8001878 <HAL_GetTick>
 8002ca8:	0002      	movs	r2, r0
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e079      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	2380      	movs	r3, #128	; 0x80
 8002cbc:	049b      	lsls	r3, r3, #18
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc2:	4b3c      	ldr	r3, [pc, #240]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	4393      	bics	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cd0:	4b38      	ldr	r3, [pc, #224]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cd6:	4b37      	ldr	r3, [pc, #220]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4a3a      	ldr	r2, [pc, #232]	; (8002dc4 <HAL_RCC_OscConfig+0x630>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	4b32      	ldr	r3, [pc, #200]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002cec:	430a      	orrs	r2, r1
 8002cee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	0449      	lsls	r1, r1, #17
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fdbb 	bl	8001878 <HAL_GetTick>
 8002d02:	0003      	movs	r3, r0
 8002d04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fdb6 	bl	8001878 <HAL_GetTick>
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e047      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d1a:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	049b      	lsls	r3, r3, #18
 8002d22:	4013      	ands	r3, r2
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x574>
 8002d26:	e03f      	b.n	8002da8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b22      	ldr	r3, [pc, #136]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002d2e:	4924      	ldr	r1, [pc, #144]	; (8002dc0 <HAL_RCC_OscConfig+0x62c>)
 8002d30:	400a      	ands	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d34:	f7fe fda0 	bl	8001878 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe fd9b 	bl	8001878 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e02c      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	049b      	lsls	r3, r3, #18
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x5aa>
 8002d5c:	e024      	b.n	8002da8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e01f      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d70:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <HAL_RCC_OscConfig+0x620>)
 8002d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d74:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	025b      	lsls	r3, r3, #9
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d10e      	bne.n	8002da4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	220f      	movs	r2, #15
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d107      	bne.n	8002da4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	23f0      	movs	r3, #240	; 0xf0
 8002d98:	039b      	lsls	r3, r3, #14
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b008      	add	sp, #32
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	40021000 	.word	0x40021000
 8002db8:	00001388 	.word	0x00001388
 8002dbc:	efffffff 	.word	0xefffffff
 8002dc0:	feffffff 	.word	0xfeffffff
 8002dc4:	ffc2ffff 	.word	0xffc2ffff

08002dc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0b3      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	4013      	ands	r3, r2
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d911      	bls.n	8002e0e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b58      	ldr	r3, [pc, #352]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2201      	movs	r2, #1
 8002df0:	4393      	bics	r3, r2
 8002df2:	0019      	movs	r1, r3
 8002df4:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfc:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2201      	movs	r2, #1
 8002e02:	4013      	ands	r3, r2
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d001      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e09a      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2202      	movs	r2, #2
 8002e14:	4013      	ands	r3, r2
 8002e16:	d015      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d006      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002e22:	4b4b      	ldr	r3, [pc, #300]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	4b4a      	ldr	r3, [pc, #296]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e28:	21e0      	movs	r1, #224	; 0xe0
 8002e2a:	00c9      	lsls	r1, r1, #3
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b47      	ldr	r3, [pc, #284]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	22f0      	movs	r2, #240	; 0xf0
 8002e36:	4393      	bics	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	4b44      	ldr	r3, [pc, #272]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d040      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b3e      	ldr	r3, [pc, #248]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	2380      	movs	r3, #128	; 0x80
 8002e5c:	029b      	lsls	r3, r3, #10
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d114      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e06e      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	4b38      	ldr	r3, [pc, #224]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	2380      	movs	r3, #128	; 0x80
 8002e74:	049b      	lsls	r3, r3, #18
 8002e76:	4013      	ands	r3, r2
 8002e78:	d108      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e062      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2202      	movs	r2, #2
 8002e84:	4013      	ands	r3, r2
 8002e86:	d101      	bne.n	8002e8c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e05b      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8c:	4b30      	ldr	r3, [pc, #192]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2203      	movs	r2, #3
 8002e92:	4393      	bics	r3, r2
 8002e94:	0019      	movs	r1, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea0:	f7fe fcea 	bl	8001878 <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea8:	e009      	b.n	8002ebe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eaa:	f7fe fce5 	bl	8001878 <HAL_GetTick>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	4a27      	ldr	r2, [pc, #156]	; (8002f54 <HAL_RCC_ClockConfig+0x18c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e042      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	401a      	ands	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1ec      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b1e      	ldr	r3, [pc, #120]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d211      	bcs.n	8002f02 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	4393      	bics	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	4b18      	ldr	r3, [pc, #96]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <HAL_RCC_ClockConfig+0x184>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e020      	b.n	8002f44 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2204      	movs	r2, #4
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <HAL_RCC_ClockConfig+0x190>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68da      	ldr	r2, [r3, #12]
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f20:	f000 f820 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 8002f24:	0001      	movs	r1, r0
 8002f26:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x188>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	091b      	lsrs	r3, r3, #4
 8002f2c:	220f      	movs	r2, #15
 8002f2e:	4013      	ands	r3, r2
 8002f30:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <HAL_RCC_ClockConfig+0x194>)
 8002f32:	5cd3      	ldrb	r3, [r2, r3]
 8002f34:	000a      	movs	r2, r1
 8002f36:	40da      	lsrs	r2, r3
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_ClockConfig+0x198>)
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002f3c:	2000      	movs	r0, #0
 8002f3e:	f7fe fc55 	bl	80017ec <HAL_InitTick>
  
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	0018      	movs	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	b004      	add	sp, #16
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40022000 	.word	0x40022000
 8002f50:	40021000 	.word	0x40021000
 8002f54:	00001388 	.word	0x00001388
 8002f58:	fffff8ff 	.word	0xfffff8ff
 8002f5c:	08003ad8 	.word	0x08003ad8
 8002f60:	2000001c 	.word	0x2000001c

08002f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	2300      	movs	r3, #0
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
 8002f76:	2300      	movs	r3, #0
 8002f78:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	220c      	movs	r2, #12
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d002      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x30>
 8002f8e:	2b08      	cmp	r3, #8
 8002f90:	d003      	beq.n	8002f9a <HAL_RCC_GetSysClockFreq+0x36>
 8002f92:	e02c      	b.n	8002fee <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f96:	613b      	str	r3, [r7, #16]
      break;
 8002f98:	e02c      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	0c9b      	lsrs	r3, r3, #18
 8002f9e:	220f      	movs	r2, #15
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	4a19      	ldr	r2, [pc, #100]	; (8003008 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fa4:	5cd3      	ldrb	r3, [r2, r3]
 8002fa6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002fa8:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	220f      	movs	r2, #15
 8002fae:	4013      	ands	r3, r2
 8002fb0:	4a16      	ldr	r2, [pc, #88]	; (800300c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	025b      	lsls	r3, r3, #9
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d009      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	4810      	ldr	r0, [pc, #64]	; (8003004 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fc4:	f7fd f8a0 	bl	8000108 <__udivsi3>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	001a      	movs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4353      	muls	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e009      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	000a      	movs	r2, r1
 8002fd8:	0152      	lsls	r2, r2, #5
 8002fda:	1a52      	subs	r2, r2, r1
 8002fdc:	0193      	lsls	r3, r2, #6
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	185b      	adds	r3, r3, r1
 8002fe4:	021b      	lsls	r3, r3, #8
 8002fe6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	613b      	str	r3, [r7, #16]
      break;
 8002fec:	e002      	b.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fee:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ff0:	613b      	str	r3, [r7, #16]
      break;
 8002ff2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ff4:	693b      	ldr	r3, [r7, #16]
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b006      	add	sp, #24
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			; (mov r8, r8)
 8003000:	40021000 	.word	0x40021000
 8003004:	007a1200 	.word	0x007a1200
 8003008:	08003ae8 	.word	0x08003ae8
 800300c:	08003af8 	.word	0x08003af8

08003010 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	025b      	lsls	r3, r3, #9
 8003028:	4013      	ands	r3, r2
 800302a:	d100      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800302c:	e08e      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800302e:	2017      	movs	r0, #23
 8003030:	183b      	adds	r3, r7, r0
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003036:	4b57      	ldr	r3, [pc, #348]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	055b      	lsls	r3, r3, #21
 800303e:	4013      	ands	r3, r2
 8003040:	d110      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003042:	4b54      	ldr	r3, [pc, #336]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	4b53      	ldr	r3, [pc, #332]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003048:	2180      	movs	r1, #128	; 0x80
 800304a:	0549      	lsls	r1, r1, #21
 800304c:	430a      	orrs	r2, r1
 800304e:	61da      	str	r2, [r3, #28]
 8003050:	4b50      	ldr	r3, [pc, #320]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	2380      	movs	r3, #128	; 0x80
 8003056:	055b      	lsls	r3, r3, #21
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305e:	183b      	adds	r3, r7, r0
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003064:	4b4c      	ldr	r3, [pc, #304]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	2380      	movs	r3, #128	; 0x80
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4013      	ands	r3, r2
 800306e:	d11a      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003070:	4b49      	ldr	r3, [pc, #292]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b48      	ldr	r3, [pc, #288]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	0049      	lsls	r1, r1, #1
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fe fbfb 	bl	8001878 <HAL_GetTick>
 8003082:	0003      	movs	r3, r0
 8003084:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003086:	e008      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7fe fbf6 	bl	8001878 <HAL_GetTick>
 800308c:	0002      	movs	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b64      	cmp	r3, #100	; 0x64
 8003094:	d901      	bls.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e077      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800309a:	4b3f      	ldr	r3, [pc, #252]	; (8003198 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4013      	ands	r3, r2
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030a6:	4b3b      	ldr	r3, [pc, #236]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030a8:	6a1a      	ldr	r2, [r3, #32]
 80030aa:	23c0      	movs	r3, #192	; 0xc0
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4013      	ands	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d034      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	23c0      	movs	r3, #192	; 0xc0
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4013      	ands	r3, r2
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d02c      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030c8:	4b32      	ldr	r3, [pc, #200]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4a33      	ldr	r2, [pc, #204]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030d2:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030d4:	6a1a      	ldr	r2, [r3, #32]
 80030d6:	4b2f      	ldr	r3, [pc, #188]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030d8:	2180      	movs	r1, #128	; 0x80
 80030da:	0249      	lsls	r1, r1, #9
 80030dc:	430a      	orrs	r2, r1
 80030de:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030e0:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030e2:	6a1a      	ldr	r2, [r3, #32]
 80030e4:	4b2b      	ldr	r3, [pc, #172]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030e6:	492e      	ldr	r1, [pc, #184]	; (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80030e8:	400a      	ands	r2, r1
 80030ea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030ec:	4b29      	ldr	r3, [pc, #164]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	4013      	ands	r3, r2
 80030f8:	d013      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fa:	f7fe fbbd 	bl	8001878 <HAL_GetTick>
 80030fe:	0003      	movs	r3, r0
 8003100:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	e009      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe fbb8 	bl	8001878 <HAL_GetTick>
 8003108:	0002      	movs	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	4a25      	ldr	r2, [pc, #148]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d901      	bls.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e038      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003118:	4b1e      	ldr	r3, [pc, #120]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800311a:	6a1b      	ldr	r3, [r3, #32]
 800311c:	2202      	movs	r2, #2
 800311e:	4013      	ands	r3, r2
 8003120:	d0f0      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003122:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	4a1d      	ldr	r2, [pc, #116]	; (800319c <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003128:	4013      	ands	r3, r2
 800312a:	0019      	movs	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003132:	430a      	orrs	r2, r1
 8003134:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003136:	2317      	movs	r3, #23
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003140:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003142:	69da      	ldr	r2, [r3, #28]
 8003144:	4b13      	ldr	r3, [pc, #76]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003146:	4918      	ldr	r1, [pc, #96]	; (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003148:	400a      	ands	r2, r1
 800314a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2201      	movs	r2, #1
 8003152:	4013      	ands	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	2203      	movs	r2, #3
 800315c:	4393      	bics	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003166:	430a      	orrs	r2, r1
 8003168:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2220      	movs	r2, #32
 8003170:	4013      	ands	r3, r2
 8003172:	d009      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	2210      	movs	r2, #16
 800317a:	4393      	bics	r3, r2
 800317c:	0019      	movs	r1, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	4b04      	ldr	r3, [pc, #16]	; (8003194 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003184:	430a      	orrs	r2, r1
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b006      	add	sp, #24
 8003190:	bd80      	pop	{r7, pc}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	40021000 	.word	0x40021000
 8003198:	40007000 	.word	0x40007000
 800319c:	fffffcff 	.word	0xfffffcff
 80031a0:	fffeffff 	.word	0xfffeffff
 80031a4:	00001388 	.word	0x00001388
 80031a8:	efffffff 	.word	0xefffffff

080031ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e042      	b.n	8003244 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	223d      	movs	r2, #61	; 0x3d
 80031c2:	5c9b      	ldrb	r3, [r3, r2]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d107      	bne.n	80031da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	223c      	movs	r2, #60	; 0x3c
 80031ce:	2100      	movs	r1, #0
 80031d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7fe fa23 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	223d      	movs	r2, #61	; 0x3d
 80031de:	2102      	movs	r1, #2
 80031e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3304      	adds	r3, #4
 80031ea:	0019      	movs	r1, r3
 80031ec:	0010      	movs	r0, r2
 80031ee:	f000 fa5b 	bl	80036a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2246      	movs	r2, #70	; 0x46
 80031f6:	2101      	movs	r1, #1
 80031f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	223e      	movs	r2, #62	; 0x3e
 80031fe:	2101      	movs	r1, #1
 8003200:	5499      	strb	r1, [r3, r2]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	223f      	movs	r2, #63	; 0x3f
 8003206:	2101      	movs	r1, #1
 8003208:	5499      	strb	r1, [r3, r2]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2240      	movs	r2, #64	; 0x40
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2241      	movs	r2, #65	; 0x41
 8003216:	2101      	movs	r1, #1
 8003218:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2242      	movs	r2, #66	; 0x42
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2243      	movs	r2, #67	; 0x43
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2244      	movs	r2, #68	; 0x44
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2245      	movs	r2, #69	; 0x45
 8003236:	2101      	movs	r1, #1
 8003238:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	223d      	movs	r2, #61	; 0x3d
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	0018      	movs	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	b002      	add	sp, #8
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	223d      	movs	r2, #61	; 0x3d
 8003258:	5c9b      	ldrb	r3, [r3, r2]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d001      	beq.n	8003264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e036      	b.n	80032d2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	223d      	movs	r2, #61	; 0x3d
 8003268:	2102      	movs	r1, #2
 800326a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2101      	movs	r1, #1
 8003278:	430a      	orrs	r2, r1
 800327a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <HAL_TIM_Base_Start_IT+0x90>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00a      	beq.n	800329c <HAL_TIM_Base_Start_IT+0x50>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	05db      	lsls	r3, r3, #23
 800328e:	429a      	cmp	r2, r3
 8003290:	d004      	beq.n	800329c <HAL_TIM_Base_Start_IT+0x50>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <HAL_TIM_Base_Start_IT+0x94>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d111      	bne.n	80032c0 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2207      	movs	r2, #7
 80032a4:	4013      	ands	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b06      	cmp	r3, #6
 80032ac:	d010      	beq.n	80032d0 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2101      	movs	r1, #1
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032be:	e007      	b.n	80032d0 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2101      	movs	r1, #1
 80032cc:	430a      	orrs	r2, r1
 80032ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	0018      	movs	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b004      	add	sp, #16
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	40012c00 	.word	0x40012c00
 80032e0:	40000400 	.word	0x40000400

080032e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2202      	movs	r2, #2
 8003300:	4013      	ands	r3, r2
 8003302:	d021      	beq.n	8003348 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2202      	movs	r2, #2
 8003308:	4013      	ands	r3, r2
 800330a:	d01d      	beq.n	8003348 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2203      	movs	r2, #3
 8003312:	4252      	negs	r2, r2
 8003314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2203      	movs	r2, #3
 8003324:	4013      	ands	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	0018      	movs	r0, r3
 800332c:	f000 f9a4 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 8003330:	e007      	b.n	8003342 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	0018      	movs	r0, r3
 8003336:	f000 f997 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0018      	movs	r0, r3
 800333e:	f000 f9a3 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2204      	movs	r2, #4
 800334c:	4013      	ands	r3, r2
 800334e:	d022      	beq.n	8003396 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2204      	movs	r2, #4
 8003354:	4013      	ands	r3, r2
 8003356:	d01e      	beq.n	8003396 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2205      	movs	r2, #5
 800335e:	4252      	negs	r2, r2
 8003360:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699a      	ldr	r2, [r3, #24]
 800336e:	23c0      	movs	r3, #192	; 0xc0
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4013      	ands	r3, r2
 8003374:	d004      	beq.n	8003380 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f97d 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 800337e:	e007      	b.n	8003390 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	0018      	movs	r0, r3
 8003384:	f000 f970 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f97c 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	2208      	movs	r2, #8
 800339a:	4013      	ands	r3, r2
 800339c:	d021      	beq.n	80033e2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2208      	movs	r2, #8
 80033a2:	4013      	ands	r3, r2
 80033a4:	d01d      	beq.n	80033e2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2209      	movs	r2, #9
 80033ac:	4252      	negs	r2, r2
 80033ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2204      	movs	r2, #4
 80033b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	2203      	movs	r2, #3
 80033be:	4013      	ands	r3, r2
 80033c0:	d004      	beq.n	80033cc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 f957 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 80033ca:	e007      	b.n	80033dc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	0018      	movs	r0, r3
 80033d0:	f000 f94a 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 f956 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2210      	movs	r2, #16
 80033e6:	4013      	ands	r3, r2
 80033e8:	d022      	beq.n	8003430 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2210      	movs	r2, #16
 80033ee:	4013      	ands	r3, r2
 80033f0:	d01e      	beq.n	8003430 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2211      	movs	r2, #17
 80033f8:	4252      	negs	r2, r2
 80033fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2208      	movs	r2, #8
 8003400:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	23c0      	movs	r3, #192	; 0xc0
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4013      	ands	r3, r2
 800340e:	d004      	beq.n	800341a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	0018      	movs	r0, r3
 8003414:	f000 f930 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 8003418:	e007      	b.n	800342a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	0018      	movs	r0, r3
 800341e:	f000 f923 	bl	8003668 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	0018      	movs	r0, r3
 8003426:	f000 f92f 	bl	8003688 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	2201      	movs	r2, #1
 8003434:	4013      	ands	r3, r2
 8003436:	d00c      	beq.n	8003452 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2201      	movs	r2, #1
 800343c:	4013      	ands	r3, r2
 800343e:	d008      	beq.n	8003452 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2202      	movs	r2, #2
 8003446:	4252      	negs	r2, r2
 8003448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f7fe f983 	bl	8001758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	2280      	movs	r2, #128	; 0x80
 8003456:	4013      	ands	r3, r2
 8003458:	d00c      	beq.n	8003474 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2280      	movs	r2, #128	; 0x80
 800345e:	4013      	ands	r3, r2
 8003460:	d008      	beq.n	8003474 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2281      	movs	r2, #129	; 0x81
 8003468:	4252      	negs	r2, r2
 800346a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	0018      	movs	r0, r3
 8003470:	f000 fa98 	bl	80039a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	2240      	movs	r2, #64	; 0x40
 8003478:	4013      	ands	r3, r2
 800347a:	d00c      	beq.n	8003496 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2240      	movs	r2, #64	; 0x40
 8003480:	4013      	ands	r3, r2
 8003482:	d008      	beq.n	8003496 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2241      	movs	r2, #65	; 0x41
 800348a:	4252      	negs	r2, r2
 800348c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 f901 	bl	8003698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2220      	movs	r2, #32
 800349a:	4013      	ands	r3, r2
 800349c:	d00c      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2220      	movs	r2, #32
 80034a2:	4013      	ands	r3, r2
 80034a4:	d008      	beq.n	80034b8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2221      	movs	r2, #33	; 0x21
 80034ac:	4252      	negs	r2, r2
 80034ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 fa6e 	bl	8003994 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b004      	add	sp, #16
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	230f      	movs	r3, #15
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223c      	movs	r2, #60	; 0x3c
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_TIM_ConfigClockSource+0x20>
 80034dc:	2302      	movs	r3, #2
 80034de:	e0bc      	b.n	800365a <HAL_TIM_ConfigClockSource+0x19a>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	223c      	movs	r2, #60	; 0x3c
 80034e4:	2101      	movs	r1, #1
 80034e6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	223d      	movs	r2, #61	; 0x3d
 80034ec:	2102      	movs	r1, #2
 80034ee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2277      	movs	r2, #119	; 0x77
 80034fc:	4393      	bics	r3, r2
 80034fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4a58      	ldr	r2, [pc, #352]	; (8003664 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003504:	4013      	ands	r3, r2
 8003506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2280      	movs	r2, #128	; 0x80
 8003516:	0192      	lsls	r2, r2, #6
 8003518:	4293      	cmp	r3, r2
 800351a:	d040      	beq.n	800359e <HAL_TIM_ConfigClockSource+0xde>
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	0192      	lsls	r2, r2, #6
 8003520:	4293      	cmp	r3, r2
 8003522:	d900      	bls.n	8003526 <HAL_TIM_ConfigClockSource+0x66>
 8003524:	e088      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 8003526:	2280      	movs	r2, #128	; 0x80
 8003528:	0152      	lsls	r2, r2, #5
 800352a:	4293      	cmp	r3, r2
 800352c:	d100      	bne.n	8003530 <HAL_TIM_ConfigClockSource+0x70>
 800352e:	e088      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x182>
 8003530:	2280      	movs	r2, #128	; 0x80
 8003532:	0152      	lsls	r2, r2, #5
 8003534:	4293      	cmp	r3, r2
 8003536:	d900      	bls.n	800353a <HAL_TIM_ConfigClockSource+0x7a>
 8003538:	e07e      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 800353a:	2b70      	cmp	r3, #112	; 0x70
 800353c:	d018      	beq.n	8003570 <HAL_TIM_ConfigClockSource+0xb0>
 800353e:	d900      	bls.n	8003542 <HAL_TIM_ConfigClockSource+0x82>
 8003540:	e07a      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 8003542:	2b60      	cmp	r3, #96	; 0x60
 8003544:	d04f      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x126>
 8003546:	d900      	bls.n	800354a <HAL_TIM_ConfigClockSource+0x8a>
 8003548:	e076      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 800354a:	2b50      	cmp	r3, #80	; 0x50
 800354c:	d03b      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0x106>
 800354e:	d900      	bls.n	8003552 <HAL_TIM_ConfigClockSource+0x92>
 8003550:	e072      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d057      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x146>
 8003556:	d900      	bls.n	800355a <HAL_TIM_ConfigClockSource+0x9a>
 8003558:	e06e      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 800355a:	2b30      	cmp	r3, #48	; 0x30
 800355c:	d063      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x166>
 800355e:	d86b      	bhi.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 8003560:	2b20      	cmp	r3, #32
 8003562:	d060      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x166>
 8003564:	d868      	bhi.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d05d      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x166>
 800356a:	2b10      	cmp	r3, #16
 800356c:	d05b      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x166>
 800356e:	e063      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	6899      	ldr	r1, [r3, #8]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f000 f990 	bl	80038a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2277      	movs	r2, #119	; 0x77
 8003590:	4313      	orrs	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	609a      	str	r2, [r3, #8]
      break;
 800359c:	e052      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6899      	ldr	r1, [r3, #8]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f000 f979 	bl	80038a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2180      	movs	r1, #128	; 0x80
 80035be:	01c9      	lsls	r1, r1, #7
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
      break;
 80035c4:	e03e      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	001a      	movs	r2, r3
 80035d4:	f000 f8ec 	bl	80037b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2150      	movs	r1, #80	; 0x50
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 f946 	bl	8003870 <TIM_ITRx_SetConfig>
      break;
 80035e4:	e02e      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	001a      	movs	r2, r3
 80035f4:	f000 f90a 	bl	800380c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2160      	movs	r1, #96	; 0x60
 80035fe:	0018      	movs	r0, r3
 8003600:	f000 f936 	bl	8003870 <TIM_ITRx_SetConfig>
      break;
 8003604:	e01e      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6859      	ldr	r1, [r3, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	001a      	movs	r2, r3
 8003614:	f000 f8cc 	bl	80037b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2140      	movs	r1, #64	; 0x40
 800361e:	0018      	movs	r0, r3
 8003620:	f000 f926 	bl	8003870 <TIM_ITRx_SetConfig>
      break;
 8003624:	e00e      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	0019      	movs	r1, r3
 8003630:	0010      	movs	r0, r2
 8003632:	f000 f91d 	bl	8003870 <TIM_ITRx_SetConfig>
      break;
 8003636:	e005      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003638:	230f      	movs	r3, #15
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
      break;
 8003640:	e000      	b.n	8003644 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003642:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	223d      	movs	r2, #61	; 0x3d
 8003648:	2101      	movs	r1, #1
 800364a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	223c      	movs	r2, #60	; 0x3c
 8003650:	2100      	movs	r1, #0
 8003652:	5499      	strb	r1, [r3, r2]

  return status;
 8003654:	230f      	movs	r3, #15
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	781b      	ldrb	r3, [r3, #0]
}
 800365a:	0018      	movs	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	b004      	add	sp, #16
 8003660:	bd80      	pop	{r7, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	ffff00ff 	.word	0xffff00ff

08003668 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003670:	46c0      	nop			; (mov r8, r8)
 8003672:	46bd      	mov	sp, r7
 8003674:	b002      	add	sp, #8
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003680:	46c0      	nop			; (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b002      	add	sp, #8
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	b002      	add	sp, #8
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a37      	ldr	r2, [pc, #220]	; (8003798 <TIM_Base_SetConfig+0xf0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d008      	beq.n	80036d2 <TIM_Base_SetConfig+0x2a>
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	05db      	lsls	r3, r3, #23
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d003      	beq.n	80036d2 <TIM_Base_SetConfig+0x2a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a33      	ldr	r2, [pc, #204]	; (800379c <TIM_Base_SetConfig+0xf4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d108      	bne.n	80036e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2270      	movs	r2, #112	; 0x70
 80036d6:	4393      	bics	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a2c      	ldr	r2, [pc, #176]	; (8003798 <TIM_Base_SetConfig+0xf0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d014      	beq.n	8003716 <TIM_Base_SetConfig+0x6e>
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	05db      	lsls	r3, r3, #23
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d00f      	beq.n	8003716 <TIM_Base_SetConfig+0x6e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a28      	ldr	r2, [pc, #160]	; (800379c <TIM_Base_SetConfig+0xf4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00b      	beq.n	8003716 <TIM_Base_SetConfig+0x6e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <TIM_Base_SetConfig+0xf8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d007      	beq.n	8003716 <TIM_Base_SetConfig+0x6e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <TIM_Base_SetConfig+0xfc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_Base_SetConfig+0x6e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a25      	ldr	r2, [pc, #148]	; (80037a8 <TIM_Base_SetConfig+0x100>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d108      	bne.n	8003728 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a24      	ldr	r2, [pc, #144]	; (80037ac <TIM_Base_SetConfig+0x104>)
 800371a:	4013      	ands	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	4393      	bics	r3, r2
 800372e:	001a      	movs	r2, r3
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	689a      	ldr	r2, [r3, #8]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a11      	ldr	r2, [pc, #68]	; (8003798 <TIM_Base_SetConfig+0xf0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <TIM_Base_SetConfig+0xbe>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a12      	ldr	r2, [pc, #72]	; (80037a4 <TIM_Base_SetConfig+0xfc>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <TIM_Base_SetConfig+0xbe>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a11      	ldr	r2, [pc, #68]	; (80037a8 <TIM_Base_SetConfig+0x100>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d103      	bne.n	800376e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2201      	movs	r2, #1
 800377a:	4013      	ands	r3, r2
 800377c:	2b01      	cmp	r3, #1
 800377e:	d106      	bne.n	800378e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2201      	movs	r2, #1
 8003786:	4393      	bics	r3, r2
 8003788:	001a      	movs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	611a      	str	r2, [r3, #16]
  }
}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	46bd      	mov	sp, r7
 8003792:	b004      	add	sp, #16
 8003794:	bd80      	pop	{r7, pc}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40000400 	.word	0x40000400
 80037a0:	40002000 	.word	0x40002000
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800
 80037ac:	fffffcff 	.word	0xfffffcff

080037b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	2201      	movs	r2, #1
 80037c8:	4393      	bics	r3, r2
 80037ca:	001a      	movs	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	22f0      	movs	r2, #240	; 0xf0
 80037da:	4393      	bics	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	220a      	movs	r2, #10
 80037ec:	4393      	bics	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	621a      	str	r2, [r3, #32]
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b006      	add	sp, #24
 800380a:	bd80      	pop	{r7, pc}

0800380c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b086      	sub	sp, #24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	2210      	movs	r2, #16
 8003824:	4393      	bics	r3, r2
 8003826:	001a      	movs	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	699b      	ldr	r3, [r3, #24]
 8003830:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4a0d      	ldr	r2, [pc, #52]	; (800386c <TIM_TI2_ConfigInputStage+0x60>)
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	031b      	lsls	r3, r3, #12
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	22a0      	movs	r2, #160	; 0xa0
 8003848:	4393      	bics	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	621a      	str	r2, [r3, #32]
}
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	46bd      	mov	sp, r7
 8003866:	b006      	add	sp, #24
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	ffff0fff 	.word	0xffff0fff

08003870 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2270      	movs	r2, #112	; 0x70
 8003884:	4393      	bics	r3, r2
 8003886:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	2207      	movs	r2, #7
 8003890:	4313      	orrs	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	609a      	str	r2, [r3, #8]
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b004      	add	sp, #16
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
 80038b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <TIM_ETR_SetConfig+0x3c>)
 80038bc:	4013      	ands	r3, r2
 80038be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	021a      	lsls	r2, r3, #8
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	609a      	str	r2, [r3, #8]
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	b006      	add	sp, #24
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	ffff00ff 	.word	0xffff00ff

080038e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	223c      	movs	r2, #60	; 0x3c
 80038f2:	5c9b      	ldrb	r3, [r3, r2]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e042      	b.n	8003982 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	223c      	movs	r2, #60	; 0x3c
 8003900:	2101      	movs	r1, #1
 8003902:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	223d      	movs	r2, #61	; 0x3d
 8003908:	2102      	movs	r1, #2
 800390a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2270      	movs	r2, #112	; 0x70
 8003920:	4393      	bics	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a14      	ldr	r2, [pc, #80]	; (800398c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d00a      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	05db      	lsls	r3, r3, #23
 8003948:	429a      	cmp	r2, r3
 800394a:	d004      	beq.n	8003956 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0f      	ldr	r2, [pc, #60]	; (8003990 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d10c      	bne.n	8003970 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2280      	movs	r2, #128	; 0x80
 800395a:	4393      	bics	r3, r2
 800395c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	4313      	orrs	r3, r2
 8003966:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	223d      	movs	r2, #61	; 0x3d
 8003974:	2101      	movs	r1, #1
 8003976:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	223c      	movs	r2, #60	; 0x3c
 800397c:	2100      	movs	r1, #0
 800397e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b004      	add	sp, #16
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40000400 	.word	0x40000400

08003994 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800399c:	46c0      	nop			; (mov r8, r8)
 800399e:	46bd      	mov	sp, r7
 80039a0:	b002      	add	sp, #8
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039ac:	46c0      	nop			; (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b002      	add	sp, #8
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <__libc_init_array>:
 80039b4:	b570      	push	{r4, r5, r6, lr}
 80039b6:	2600      	movs	r6, #0
 80039b8:	4d0c      	ldr	r5, [pc, #48]	; (80039ec <__libc_init_array+0x38>)
 80039ba:	4c0d      	ldr	r4, [pc, #52]	; (80039f0 <__libc_init_array+0x3c>)
 80039bc:	1b64      	subs	r4, r4, r5
 80039be:	10a4      	asrs	r4, r4, #2
 80039c0:	42a6      	cmp	r6, r4
 80039c2:	d109      	bne.n	80039d8 <__libc_init_array+0x24>
 80039c4:	2600      	movs	r6, #0
 80039c6:	f000 f821 	bl	8003a0c <_init>
 80039ca:	4d0a      	ldr	r5, [pc, #40]	; (80039f4 <__libc_init_array+0x40>)
 80039cc:	4c0a      	ldr	r4, [pc, #40]	; (80039f8 <__libc_init_array+0x44>)
 80039ce:	1b64      	subs	r4, r4, r5
 80039d0:	10a4      	asrs	r4, r4, #2
 80039d2:	42a6      	cmp	r6, r4
 80039d4:	d105      	bne.n	80039e2 <__libc_init_array+0x2e>
 80039d6:	bd70      	pop	{r4, r5, r6, pc}
 80039d8:	00b3      	lsls	r3, r6, #2
 80039da:	58eb      	ldr	r3, [r5, r3]
 80039dc:	4798      	blx	r3
 80039de:	3601      	adds	r6, #1
 80039e0:	e7ee      	b.n	80039c0 <__libc_init_array+0xc>
 80039e2:	00b3      	lsls	r3, r6, #2
 80039e4:	58eb      	ldr	r3, [r5, r3]
 80039e6:	4798      	blx	r3
 80039e8:	3601      	adds	r6, #1
 80039ea:	e7f2      	b.n	80039d2 <__libc_init_array+0x1e>
 80039ec:	08003b08 	.word	0x08003b08
 80039f0:	08003b08 	.word	0x08003b08
 80039f4:	08003b08 	.word	0x08003b08
 80039f8:	08003b0c 	.word	0x08003b0c

080039fc <memset>:
 80039fc:	0003      	movs	r3, r0
 80039fe:	1882      	adds	r2, r0, r2
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d100      	bne.n	8003a06 <memset+0xa>
 8003a04:	4770      	bx	lr
 8003a06:	7019      	strb	r1, [r3, #0]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	e7f9      	b.n	8003a00 <memset+0x4>

08003a0c <_init>:
 8003a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a12:	bc08      	pop	{r3}
 8003a14:	469e      	mov	lr, r3
 8003a16:	4770      	bx	lr

08003a18 <_fini>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1e:	bc08      	pop	{r3}
 8003a20:	469e      	mov	lr, r3
 8003a22:	4770      	bx	lr
