
TRAFFIC_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000595c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005a1c  08005a1c  00006a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b30  08005b30  00007078  2**0
                  CONTENTS
  4 .ARM          00000000  08005b30  08005b30  00007078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b30  08005b30  00007078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b30  08005b30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b34  08005b34  00006b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005b38  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  20000078  08005bb0  00007078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08005bb0  00007354  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012171  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003057  00000000  00000000  00019211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  0001c268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3c  00000000  00000000  0001d370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012ccb  00000000  00000000  0001e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019105  00000000  00000000  00030d77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068632  00000000  00000000  00049e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b24ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eac  00000000  00000000  000b24f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000b63a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a04 	.word	0x08005a04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08005a04 	.word	0x08005a04

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <getKeyinput>:


int buttonFlag[3] = {0,0,0};
uint8_t count = 0;

void getKeyinput(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	if (count > 0 ) count--;
 80003f8:	4b21      	ldr	r3, [pc, #132]	@ (8000480 <getKeyinput+0x8c>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d005      	beq.n	800040c <getKeyinput+0x18>
 8000400:	4b1f      	ldr	r3, [pc, #124]	@ (8000480 <getKeyinput+0x8c>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	3b01      	subs	r3, #1
 8000406:	b2da      	uxtb	r2, r3
 8000408:	4b1d      	ldr	r3, [pc, #116]	@ (8000480 <getKeyinput+0x8c>)
 800040a:	701a      	strb	r2, [r3, #0]
	//-----PROCESS BUTTON 1------------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == 0)){
 800040c:	4b1c      	ldr	r3, [pc, #112]	@ (8000480 <getKeyinput+0x8c>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d10d      	bne.n	8000430 <getKeyinput+0x3c>
 8000414:	2390      	movs	r3, #144	@ 0x90
 8000416:	05db      	lsls	r3, r3, #23
 8000418:	2180      	movs	r1, #128	@ 0x80
 800041a:	0018      	movs	r0, r3
 800041c:	f002 f9c0 	bl	80027a0 <HAL_GPIO_ReadPin>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d105      	bne.n	8000430 <getKeyinput+0x3c>
		buttonFlag[0] = 1;
 8000424:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <getKeyinput+0x90>)
 8000426:	2201      	movs	r2, #1
 8000428:	601a      	str	r2, [r3, #0]
		count = 10;
 800042a:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <getKeyinput+0x8c>)
 800042c:	220a      	movs	r2, #10
 800042e:	701a      	strb	r2, [r3, #0]
	}
	// ----PROCESS BUTTON 2-----------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)){
 8000430:	4b13      	ldr	r3, [pc, #76]	@ (8000480 <getKeyinput+0x8c>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d10d      	bne.n	8000454 <getKeyinput+0x60>
 8000438:	2390      	movs	r3, #144	@ 0x90
 800043a:	05db      	lsls	r3, r3, #23
 800043c:	2108      	movs	r1, #8
 800043e:	0018      	movs	r0, r3
 8000440:	f002 f9ae 	bl	80027a0 <HAL_GPIO_ReadPin>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d105      	bne.n	8000454 <getKeyinput+0x60>
		buttonFlag[1] = 1;
 8000448:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <getKeyinput+0x90>)
 800044a:	2201      	movs	r2, #1
 800044c:	605a      	str	r2, [r3, #4]
		count = 10;
 800044e:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <getKeyinput+0x8c>)
 8000450:	220a      	movs	r2, #10
 8000452:	701a      	strb	r2, [r3, #0]
	}
	// ----- PROCESS BUTTON 3 -----------
	if((count == 0) && (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == 0)){
 8000454:	4b0a      	ldr	r3, [pc, #40]	@ (8000480 <getKeyinput+0x8c>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d10d      	bne.n	8000478 <getKeyinput+0x84>
 800045c:	2390      	movs	r3, #144	@ 0x90
 800045e:	05db      	lsls	r3, r3, #23
 8000460:	2102      	movs	r1, #2
 8000462:	0018      	movs	r0, r3
 8000464:	f002 f99c 	bl	80027a0 <HAL_GPIO_ReadPin>
 8000468:	1e03      	subs	r3, r0, #0
 800046a:	d105      	bne.n	8000478 <getKeyinput+0x84>
		buttonFlag[2] = 1;
 800046c:	4b05      	ldr	r3, [pc, #20]	@ (8000484 <getKeyinput+0x90>)
 800046e:	2201      	movs	r2, #1
 8000470:	609a      	str	r2, [r3, #8]
		count = 10;
 8000472:	4b03      	ldr	r3, [pc, #12]	@ (8000480 <getKeyinput+0x8c>)
 8000474:	220a      	movs	r2, #10
 8000476:	701a      	strb	r2, [r3, #0]
	}

}
 8000478:	46c0      	nop			@ (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	200000a0 	.word	0x200000a0
 8000484:	20000094 	.word	0x20000094

08000488 <isButtonPress>:
int isButtonPress(int i){
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 8000490:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <isButtonPress+0x2c>)
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	0092      	lsls	r2, r2, #2
 8000496:	58d3      	ldr	r3, [r2, r3]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d106      	bne.n	80004aa <isButtonPress+0x22>
		buttonFlag[i] = 0;
 800049c:	4b05      	ldr	r3, [pc, #20]	@ (80004b4 <isButtonPress+0x2c>)
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	0092      	lsls	r2, r2, #2
 80004a2:	2100      	movs	r1, #0
 80004a4:	50d1      	str	r1, [r2, r3]
		return 1;
 80004a6:	2301      	movs	r3, #1
 80004a8:	e000      	b.n	80004ac <isButtonPress+0x24>
	}
	return 0;
 80004aa:	2300      	movs	r3, #0
}
 80004ac:	0018      	movs	r0, r3
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b002      	add	sp, #8
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000094 	.word	0x20000094

080004b8 <fsm_auto_run>:
#include "fsm_auto.h"

void (*nextTask_Switch_State)() = NULL;
void fsm_auto_run(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	switch (status) {   // LINE 1
 80004bc:	4bc6      	ldr	r3, [pc, #792]	@ (80007d8 <fsm_auto_run+0x320>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2b04      	cmp	r3, #4
 80004c2:	d900      	bls.n	80004c6 <fsm_auto_run+0xe>
 80004c4:	e184      	b.n	80007d0 <fsm_auto_run+0x318>
 80004c6:	009a      	lsls	r2, r3, #2
 80004c8:	4bc4      	ldr	r3, [pc, #784]	@ (80007dc <fsm_auto_run+0x324>)
 80004ca:	18d3      	adds	r3, r2, r3
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	469f      	mov	pc, r3
		case auto_init:
			// ------- ALL LED OFF -------------
			single_LED_off();
 80004d0:	f001 f8a6 	bl	8001620 <single_LED_off>
			count0 = (time_red_green + time_red_yellow)/1000;
 80004d4:	4bc2      	ldr	r3, [pc, #776]	@ (80007e0 <fsm_auto_run+0x328>)
 80004d6:	681a      	ldr	r2, [r3, #0]
 80004d8:	4bc2      	ldr	r3, [pc, #776]	@ (80007e4 <fsm_auto_run+0x32c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	18d3      	adds	r3, r2, r3
 80004de:	22fa      	movs	r2, #250	@ 0xfa
 80004e0:	0091      	lsls	r1, r2, #2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f7ff fe9a 	bl	800021c <__divsi3>
 80004e8:	0003      	movs	r3, r0
 80004ea:	001a      	movs	r2, r3
 80004ec:	4bbe      	ldr	r3, [pc, #760]	@ (80007e8 <fsm_auto_run+0x330>)
 80004ee:	601a      	str	r2, [r3, #0]
			count1 = time_red_green/1000;
 80004f0:	4bbb      	ldr	r3, [pc, #748]	@ (80007e0 <fsm_auto_run+0x328>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	22fa      	movs	r2, #250	@ 0xfa
 80004f6:	0091      	lsls	r1, r2, #2
 80004f8:	0018      	movs	r0, r3
 80004fa:	f7ff fe8f 	bl	800021c <__divsi3>
 80004fe:	0003      	movs	r3, r0
 8000500:	001a      	movs	r2, r3
 8000502:	4bba      	ldr	r3, [pc, #744]	@ (80007ec <fsm_auto_run+0x334>)
 8000504:	601a      	str	r2, [r3, #0]
			updateClockBuffer(count0, count1);
 8000506:	4bb8      	ldr	r3, [pc, #736]	@ (80007e8 <fsm_auto_run+0x330>)
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	4bb8      	ldr	r3, [pc, #736]	@ (80007ec <fsm_auto_run+0x334>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	0019      	movs	r1, r3
 8000510:	0010      	movs	r0, r2
 8000512:	f001 f855 	bl	80015c0 <updateClockBuffer>
			status = auto_red_green;
 8000516:	4bb0      	ldr	r3, [pc, #704]	@ (80007d8 <fsm_auto_run+0x320>)
 8000518:	2201      	movs	r2, #1
 800051a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET); // yellow 0 off
 800051c:	2390      	movs	r3, #144	@ 0x90
 800051e:	05db      	lsls	r3, r3, #23
 8000520:	2201      	movs	r2, #1
 8000522:	2110      	movs	r1, #16
 8000524:	0018      	movs	r0, r3
 8000526:	f002 f958 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); // red 1 on
 800052a:	2390      	movs	r3, #144	@ 0x90
 800052c:	05db      	lsls	r3, r3, #23
 800052e:	2201      	movs	r2, #1
 8000530:	2104      	movs	r1, #4
 8000532:	0018      	movs	r0, r3
 8000534:	f002 f951 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET); // red0 on
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	0159      	lsls	r1, r3, #5
 800053c:	2390      	movs	r3, #144	@ 0x90
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	2200      	movs	r2, #0
 8000542:	0018      	movs	r0, r3
 8000544:	f002 f949 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET); // green1 on
 8000548:	4ba9      	ldr	r3, [pc, #676]	@ (80007f0 <fsm_auto_run+0x338>)
 800054a:	2200      	movs	r2, #0
 800054c:	2110      	movs	r1, #16
 800054e:	0018      	movs	r0, r3
 8000550:	f002 f943 	bl	80027da <HAL_GPIO_WritePin>
			SCH_Add_Task(fsm_switch_state_auto_red_yellow, time_red_green, 0);
 8000554:	4ba2      	ldr	r3, [pc, #648]	@ (80007e0 <fsm_auto_run+0x328>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	0019      	movs	r1, r3
 800055a:	4ba6      	ldr	r3, [pc, #664]	@ (80007f4 <fsm_auto_run+0x33c>)
 800055c:	2200      	movs	r2, #0
 800055e:	0018      	movs	r0, r3
 8000560:	f001 fae8 	bl	8001b34 <SCH_Add_Task>
			nextTask_Switch_State = fsm_switch_state_auto_red_yellow;
 8000564:	4ba4      	ldr	r3, [pc, #656]	@ (80007f8 <fsm_auto_run+0x340>)
 8000566:	4aa3      	ldr	r2, [pc, #652]	@ (80007f4 <fsm_auto_run+0x33c>)
 8000568:	601a      	str	r2, [r3, #0]

			lcd_clear_display();
 800056a:	f000 fe4d 	bl	8001208 <lcd_clear_display>
			lcd_goto_XY(1, 0);
 800056e:	2100      	movs	r1, #0
 8000570:	2001      	movs	r0, #1
 8000572:	f000 fe54 	bl	800121e <lcd_goto_XY>
			lcd_send_string("MODE: AUTO");
 8000576:	4ba1      	ldr	r3, [pc, #644]	@ (80007fc <fsm_auto_run+0x344>)
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fe30 	bl	80011de <lcd_send_string>
			lcd_goto_XY(0, 0);
 800057e:	2100      	movs	r1, #0
 8000580:	2000      	movs	r0, #0
 8000582:	f000 fe4c 	bl	800121e <lcd_goto_XY>
			lcd_send_string("PLEASE SLOW DOWN");
 8000586:	4b9e      	ldr	r3, [pc, #632]	@ (8000800 <fsm_auto_run+0x348>)
 8000588:	0018      	movs	r0, r3
 800058a:	f000 fe28 	bl	80011de <lcd_send_string>

			break;
 800058e:	e0a5      	b.n	80006dc <fsm_auto_run+0x224>
		case auto_red_green:
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff ff79 	bl	8000488 <isButtonPress>
 8000596:	0003      	movs	r3, r0
 8000598:	2b01      	cmp	r3, #1
 800059a:	d000      	beq.n	800059e <fsm_auto_run+0xe6>
 800059c:	e09b      	b.n	80006d6 <fsm_auto_run+0x21e>
				SCH_Delete_Task(nextTask_Switch_State); // DELETE NEXT STATE OF AUTO MODE
 800059e:	4b96      	ldr	r3, [pc, #600]	@ (80007f8 <fsm_auto_run+0x340>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 fbb0 	bl	8001d08 <SCH_Delete_Task>
				SCH_Delete_Task(fsm_auto_run);
 80005a8:	4b96      	ldr	r3, [pc, #600]	@ (8000804 <fsm_auto_run+0x34c>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 fbac 	bl	8001d08 <SCH_Delete_Task>
				SCH_Delete_Task(Scan7SEG);
 80005b0:	4b95      	ldr	r3, [pc, #596]	@ (8000808 <fsm_auto_run+0x350>)
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 fba8 	bl	8001d08 <SCH_Delete_Task>
				SCH_Add_Task(fsm_manual, 100, 10);
 80005b8:	4b94      	ldr	r3, [pc, #592]	@ (800080c <fsm_auto_run+0x354>)
 80005ba:	220a      	movs	r2, #10
 80005bc:	2164      	movs	r1, #100	@ 0x64
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 fab8 	bl	8001b34 <SCH_Add_Task>
				status = manual_red_green;
 80005c4:	4b84      	ldr	r3, [pc, #528]	@ (80007d8 <fsm_auto_run+0x320>)
 80005c6:	2205      	movs	r2, #5
 80005c8:	601a      	str	r2, [r3, #0]
				Diable_7SEG();
 80005ca:	f000 fe51 	bl	8001270 <Diable_7SEG>
				single_LED_off();
 80005ce:	f001 f827 	bl	8001620 <single_LED_off>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 80005d2:	2380      	movs	r3, #128	@ 0x80
 80005d4:	0159      	lsls	r1, r3, #5
 80005d6:	2390      	movs	r3, #144	@ 0x90
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2200      	movs	r2, #0
 80005dc:	0018      	movs	r0, r3
 80005de:	f002 f8fc 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80005e2:	4b83      	ldr	r3, [pc, #524]	@ (80007f0 <fsm_auto_run+0x338>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	2110      	movs	r1, #16
 80005e8:	0018      	movs	r0, r3
 80005ea:	f002 f8f6 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80005ee:	2390      	movs	r3, #144	@ 0x90
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	2201      	movs	r2, #1
 80005f4:	2104      	movs	r1, #4
 80005f6:	0018      	movs	r0, r3
 80005f8:	f002 f8ef 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 80005fc:	2380      	movs	r3, #128	@ 0x80
 80005fe:	0059      	lsls	r1, r3, #1
 8000600:	2390      	movs	r3, #144	@ 0x90
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2201      	movs	r2, #1
 8000606:	0018      	movs	r0, r3
 8000608:	f002 f8e7 	bl	80027da <HAL_GPIO_WritePin>

				lcd_clear_display();// ----CLEAR LCD ----
 800060c:	f000 fdfc 	bl	8001208 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000610:	2100      	movs	r1, #0
 8000612:	2001      	movs	r0, #1
 8000614:	f000 fe03 	bl	800121e <lcd_goto_XY>
				lcd_send_string("MODE: MANUAL");
 8000618:	4b7d      	ldr	r3, [pc, #500]	@ (8000810 <fsm_auto_run+0x358>)
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fddf 	bl	80011de <lcd_send_string>
				lcd_goto_XY(0, 0);
 8000620:	2100      	movs	r1, #0
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fdfb 	bl	800121e <lcd_goto_XY>
				lcd_send_string("WAIT LED TO GO");
 8000628:	4b7a      	ldr	r3, [pc, #488]	@ (8000814 <fsm_auto_run+0x35c>)
 800062a:	0018      	movs	r0, r3
 800062c:	f000 fdd7 	bl	80011de <lcd_send_string>

				return;
 8000630:	e0cf      	b.n	80007d2 <fsm_auto_run+0x31a>
			break;
		case auto_red_yellow:
			break;
		case auto_green_red:
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 8000632:	2001      	movs	r0, #1
 8000634:	f7ff ff28 	bl	8000488 <isButtonPress>
 8000638:	0003      	movs	r3, r0
 800063a:	2b01      	cmp	r3, #1
 800063c:	d14d      	bne.n	80006da <fsm_auto_run+0x222>
				SCH_Delete_Task(nextTask_Switch_State); // DELETE NEXT STATE OF AUTO MODE
 800063e:	4b6e      	ldr	r3, [pc, #440]	@ (80007f8 <fsm_auto_run+0x340>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	0018      	movs	r0, r3
 8000644:	f001 fb60 	bl	8001d08 <SCH_Delete_Task>
				SCH_Delete_Task(fsm_auto_run);
 8000648:	4b6e      	ldr	r3, [pc, #440]	@ (8000804 <fsm_auto_run+0x34c>)
 800064a:	0018      	movs	r0, r3
 800064c:	f001 fb5c 	bl	8001d08 <SCH_Delete_Task>
				SCH_Delete_Task(Scan7SEG);
 8000650:	4b6d      	ldr	r3, [pc, #436]	@ (8000808 <fsm_auto_run+0x350>)
 8000652:	0018      	movs	r0, r3
 8000654:	f001 fb58 	bl	8001d08 <SCH_Delete_Task>
				SCH_Add_Task(fsm_manual, 10, 10);
 8000658:	4b6c      	ldr	r3, [pc, #432]	@ (800080c <fsm_auto_run+0x354>)
 800065a:	220a      	movs	r2, #10
 800065c:	210a      	movs	r1, #10
 800065e:	0018      	movs	r0, r3
 8000660:	f001 fa68 	bl	8001b34 <SCH_Add_Task>
				status = manual_green_red;
 8000664:	4b5c      	ldr	r3, [pc, #368]	@ (80007d8 <fsm_auto_run+0x320>)
 8000666:	2206      	movs	r2, #6
 8000668:	601a      	str	r2, [r3, #0]
				Diable_7SEG();
 800066a:	f000 fe01 	bl	8001270 <Diable_7SEG>
				single_LED_off();
 800066e:	f000 ffd7 	bl	8001620 <single_LED_off>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000672:	2390      	movs	r3, #144	@ 0x90
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2200      	movs	r2, #0
 8000678:	2104      	movs	r1, #4
 800067a:	0018      	movs	r0, r3
 800067c:	f002 f8ad 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 8000680:	2380      	movs	r3, #128	@ 0x80
 8000682:	0059      	lsls	r1, r3, #1
 8000684:	2390      	movs	r3, #144	@ 0x90
 8000686:	05db      	lsls	r3, r3, #23
 8000688:	2200      	movs	r2, #0
 800068a:	0018      	movs	r0, r3
 800068c:	f002 f8a5 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 8000690:	2380      	movs	r3, #128	@ 0x80
 8000692:	0159      	lsls	r1, r3, #5
 8000694:	2390      	movs	r3, #144	@ 0x90
 8000696:	05db      	lsls	r3, r3, #23
 8000698:	2201      	movs	r2, #1
 800069a:	0018      	movs	r0, r3
 800069c:	f002 f89d 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80006a0:	4b53      	ldr	r3, [pc, #332]	@ (80007f0 <fsm_auto_run+0x338>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	2110      	movs	r1, #16
 80006a6:	0018      	movs	r0, r3
 80006a8:	f002 f897 	bl	80027da <HAL_GPIO_WritePin>

				lcd_clear_display();// ----CLEAR LCD ----
 80006ac:	f000 fdac 	bl	8001208 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 80006b0:	2100      	movs	r1, #0
 80006b2:	2001      	movs	r0, #1
 80006b4:	f000 fdb3 	bl	800121e <lcd_goto_XY>
				lcd_send_string("MODE: MANUAL");
 80006b8:	4b55      	ldr	r3, [pc, #340]	@ (8000810 <fsm_auto_run+0x358>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fd8f 	bl	80011de <lcd_send_string>
				lcd_goto_XY(0, 0);
 80006c0:	2100      	movs	r1, #0
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 fdab 	bl	800121e <lcd_goto_XY>
				lcd_send_string("WAIT LED TO GO");
 80006c8:	4b52      	ldr	r3, [pc, #328]	@ (8000814 <fsm_auto_run+0x35c>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fd87 	bl	80011de <lcd_send_string>


				return;
 80006d0:	e07f      	b.n	80007d2 <fsm_auto_run+0x31a>
			}
			break;
		case auto_yellow_red:
			break;
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	e002      	b.n	80006dc <fsm_auto_run+0x224>
			break;
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	e000      	b.n	80006dc <fsm_auto_run+0x224>
			break;
 80006da:	46c0      	nop			@ (mov r8, r8)
		default: // ----- MANUAL MODE & SETTING MODE & SLOW MODE---------
			return;
	}
	// -------SWITCHING SLOW MODE ---------------
	if(isButtonPress(0) == 1){
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff fed3 	bl	8000488 <isButtonPress>
 80006e2:	0003      	movs	r3, r0
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d12a      	bne.n	800073e <fsm_auto_run+0x286>
		SCH_Delete_Task(nextTask_Switch_State); // DELETE TASK SWITCH STATE
 80006e8:	4b43      	ldr	r3, [pc, #268]	@ (80007f8 <fsm_auto_run+0x340>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	0018      	movs	r0, r3
 80006ee:	f001 fb0b 	bl	8001d08 <SCH_Delete_Task>
		SCH_Delete_Task(fsm_auto_run);
 80006f2:	4b44      	ldr	r3, [pc, #272]	@ (8000804 <fsm_auto_run+0x34c>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 fb07 	bl	8001d08 <SCH_Delete_Task>
		SCH_Delete_Task(Scan7SEG);
 80006fa:	4b43      	ldr	r3, [pc, #268]	@ (8000808 <fsm_auto_run+0x350>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fb03 	bl	8001d08 <SCH_Delete_Task>
		SCH_Add_Task(fsm_slow_run, 10, 500);
 8000702:	23fa      	movs	r3, #250	@ 0xfa
 8000704:	005a      	lsls	r2, r3, #1
 8000706:	4b44      	ldr	r3, [pc, #272]	@ (8000818 <fsm_auto_run+0x360>)
 8000708:	210a      	movs	r1, #10
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fa12 	bl	8001b34 <SCH_Add_Task>
		single_LED_off();// ------ALL LED OFF----------
 8000710:	f000 ff86 	bl	8001620 <single_LED_off>
		Diable_7SEG(); //--- Disable led 7 segment ------
 8000714:	f000 fdac 	bl	8001270 <Diable_7SEG>

		lcd_clear_display(); // ----CLEAR LCD ----
 8000718:	f000 fd76 	bl	8001208 <lcd_clear_display>
		lcd_goto_XY(1, 0);
 800071c:	2100      	movs	r1, #0
 800071e:	2001      	movs	r0, #1
 8000720:	f000 fd7d 	bl	800121e <lcd_goto_XY>
		lcd_send_string("MODE: SLOW");
 8000724:	4b3d      	ldr	r3, [pc, #244]	@ (800081c <fsm_auto_run+0x364>)
 8000726:	0018      	movs	r0, r3
 8000728:	f000 fd59 	bl	80011de <lcd_send_string>
		lcd_goto_XY(0, 0);
 800072c:	2100      	movs	r1, #0
 800072e:	2000      	movs	r0, #0
 8000730:	f000 fd75 	bl	800121e <lcd_goto_XY>
		lcd_send_string("FREE-STAY ALERT");
 8000734:	4b3a      	ldr	r3, [pc, #232]	@ (8000820 <fsm_auto_run+0x368>)
 8000736:	0018      	movs	r0, r3
 8000738:	f000 fd51 	bl	80011de <lcd_send_string>

		return;
 800073c:	e049      	b.n	80007d2 <fsm_auto_run+0x31a>
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 800073e:	2002      	movs	r0, #2
 8000740:	f7ff fea2 	bl	8000488 <isButtonPress>
 8000744:	0003      	movs	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d143      	bne.n	80007d2 <fsm_auto_run+0x31a>
		time_red_yellow = 0;
 800074a:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <fsm_auto_run+0x32c>)
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 8000750:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <fsm_auto_run+0x328>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
		updateClockBuffer(0, 1);
 8000756:	2101      	movs	r1, #1
 8000758:	2000      	movs	r0, #0
 800075a:	f000 ff31 	bl	80015c0 <updateClockBuffer>
		status = set_green;
 800075e:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <fsm_auto_run+0x320>)
 8000760:	2208      	movs	r2, #8
 8000762:	601a      	str	r2, [r3, #0]
		SCH_Delete_Task(nextTask_Switch_State); // DELETE TASK SWITCH STATE
 8000764:	4b24      	ldr	r3, [pc, #144]	@ (80007f8 <fsm_auto_run+0x340>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	0018      	movs	r0, r3
 800076a:	f001 facd 	bl	8001d08 <SCH_Delete_Task>
		SCH_Delete_Task(fsm_auto_run);
 800076e:	4b25      	ldr	r3, [pc, #148]	@ (8000804 <fsm_auto_run+0x34c>)
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fac9 	bl	8001d08 <SCH_Delete_Task>
		SCH_Delete_Task(count_1_second);
 8000776:	4b2b      	ldr	r3, [pc, #172]	@ (8000824 <fsm_auto_run+0x36c>)
 8000778:	0018      	movs	r0, r3
 800077a:	f001 fac5 	bl	8001d08 <SCH_Delete_Task>
		SCH_Add_Task(fsm_setting, 10, 10);
 800077e:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <fsm_auto_run+0x370>)
 8000780:	220a      	movs	r2, #10
 8000782:	210a      	movs	r1, #10
 8000784:	0018      	movs	r0, r3
 8000786:	f001 f9d5 	bl	8001b34 <SCH_Add_Task>
		single_LED_off();
 800078a:	f000 ff49 	bl	8001620 <single_LED_off>
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, 0);
 800078e:	2380      	movs	r3, #128	@ 0x80
 8000790:	0059      	lsls	r1, r3, #1
 8000792:	2390      	movs	r3, #144	@ 0x90
 8000794:	05db      	lsls	r3, r3, #23
 8000796:	2200      	movs	r2, #0
 8000798:	0018      	movs	r0, r3
 800079a:	f002 f81e 	bl	80027da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, 0);
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <fsm_auto_run+0x338>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	2110      	movs	r1, #16
 80007a4:	0018      	movs	r0, r3
 80007a6:	f002 f818 	bl	80027da <HAL_GPIO_WritePin>

		lcd_clear_display(); // ----CLEAR LCD ----
 80007aa:	f000 fd2d 	bl	8001208 <lcd_clear_display>
		lcd_goto_XY(1, 0);
 80007ae:	2100      	movs	r1, #0
 80007b0:	2001      	movs	r0, #1
 80007b2:	f000 fd34 	bl	800121e <lcd_goto_XY>
		lcd_send_string("MODE: SETTING");
 80007b6:	4b1d      	ldr	r3, [pc, #116]	@ (800082c <fsm_auto_run+0x374>)
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fd10 	bl	80011de <lcd_send_string>
		lcd_goto_XY(0, 0);
 80007be:	2100      	movs	r1, #0
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 fd2c 	bl	800121e <lcd_goto_XY>
		lcd_send_string("INCREASE TIMELED");
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <fsm_auto_run+0x378>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fd08 	bl	80011de <lcd_send_string>
 80007ce:	e000      	b.n	80007d2 <fsm_auto_run+0x31a>
			return;
 80007d0:	46c0      	nop			@ (mov r8, r8)

	}
}
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	200000b0 	.word	0x200000b0
 80007dc:	08005abc 	.word	0x08005abc
 80007e0:	20000014 	.word	0x20000014
 80007e4:	20000018 	.word	0x20000018
 80007e8:	200000b4 	.word	0x200000b4
 80007ec:	200000b8 	.word	0x200000b8
 80007f0:	48000400 	.word	0x48000400
 80007f4:	080008e5 	.word	0x080008e5
 80007f8:	200000a4 	.word	0x200000a4
 80007fc:	08005a1c 	.word	0x08005a1c
 8000800:	08005a28 	.word	0x08005a28
 8000804:	080004b9 	.word	0x080004b9
 8000808:	080012b9 	.word	0x080012b9
 800080c:	08000ad5 	.word	0x08000ad5
 8000810:	08005a3c 	.word	0x08005a3c
 8000814:	08005a4c 	.word	0x08005a4c
 8000818:	08001021 	.word	0x08001021
 800081c:	08005a5c 	.word	0x08005a5c
 8000820:	08005a68 	.word	0x08005a68
 8000824:	08000a8d 	.word	0x08000a8d
 8000828:	08000d8d 	.word	0x08000d8d
 800082c:	08005a78 	.word	0x08005a78
 8000830:	08005a88 	.word	0x08005a88

08000834 <fsm_switch_state_auto_red_green>:

void fsm_switch_state_auto_red_green(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET); // yellow 0 off
 8000838:	2390      	movs	r3, #144	@ 0x90
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	0018      	movs	r0, r3
 8000842:	f001 ffca 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); // red 1 on
 8000846:	2390      	movs	r3, #144	@ 0x90
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2201      	movs	r2, #1
 800084c:	2104      	movs	r1, #4
 800084e:	0018      	movs	r0, r3
 8000850:	f001 ffc3 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET); // red0 on
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	0159      	lsls	r1, r3, #5
 8000858:	2390      	movs	r3, #144	@ 0x90
 800085a:	05db      	lsls	r3, r3, #23
 800085c:	2200      	movs	r2, #0
 800085e:	0018      	movs	r0, r3
 8000860:	f001 ffbb 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET); // green1 on
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <fsm_switch_state_auto_red_green+0x90>)
 8000866:	2200      	movs	r2, #0
 8000868:	2110      	movs	r1, #16
 800086a:	0018      	movs	r0, r3
 800086c:	f001 ffb5 	bl	80027da <HAL_GPIO_WritePin>
	status = auto_red_green;
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <fsm_switch_state_auto_red_green+0x94>)
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]
	count0 = (time_red_green + time_red_yellow)/1000;
 8000876:	4b15      	ldr	r3, [pc, #84]	@ (80008cc <fsm_switch_state_auto_red_green+0x98>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <fsm_switch_state_auto_red_green+0x9c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	18d3      	adds	r3, r2, r3
 8000880:	22fa      	movs	r2, #250	@ 0xfa
 8000882:	0091      	lsls	r1, r2, #2
 8000884:	0018      	movs	r0, r3
 8000886:	f7ff fcc9 	bl	800021c <__divsi3>
 800088a:	0003      	movs	r3, r0
 800088c:	001a      	movs	r2, r3
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <fsm_switch_state_auto_red_green+0xa0>)
 8000890:	601a      	str	r2, [r3, #0]
	count1 = time_red_green/1000;
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <fsm_switch_state_auto_red_green+0x98>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	22fa      	movs	r2, #250	@ 0xfa
 8000898:	0091      	lsls	r1, r2, #2
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff fcbe 	bl	800021c <__divsi3>
 80008a0:	0003      	movs	r3, r0
 80008a2:	001a      	movs	r2, r3
 80008a4:	4b0c      	ldr	r3, [pc, #48]	@ (80008d8 <fsm_switch_state_auto_red_green+0xa4>)
 80008a6:	601a      	str	r2, [r3, #0]
	SCH_Add_Task(fsm_switch_state_auto_red_yellow, time_red_green, 0); // NEXT STATE
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <fsm_switch_state_auto_red_green+0x98>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	0019      	movs	r1, r3
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <fsm_switch_state_auto_red_green+0xa8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 f93e 	bl	8001b34 <SCH_Add_Task>
	nextTask_Switch_State = fsm_switch_state_auto_red_yellow;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <fsm_switch_state_auto_red_green+0xac>)
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <fsm_switch_state_auto_red_green+0xa8>)
 80008bc:	601a      	str	r2, [r3, #0]

}
 80008be:	46c0      	nop			@ (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	48000400 	.word	0x48000400
 80008c8:	200000b0 	.word	0x200000b0
 80008cc:	20000014 	.word	0x20000014
 80008d0:	20000018 	.word	0x20000018
 80008d4:	200000b4 	.word	0x200000b4
 80008d8:	200000b8 	.word	0x200000b8
 80008dc:	080008e5 	.word	0x080008e5
 80008e0:	200000a4 	.word	0x200000a4

080008e4 <fsm_switch_state_auto_red_yellow>:
void fsm_switch_state_auto_red_yellow(){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 off
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <fsm_switch_state_auto_red_yellow+0x5c>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	2110      	movs	r1, #16
 80008ee:	0018      	movs	r0, r3
 80008f0:	f001 ff73 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET); // yellow1 on
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <fsm_switch_state_auto_red_yellow+0x5c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	2120      	movs	r1, #32
 80008fa:	0018      	movs	r0, r3
 80008fc:	f001 ff6d 	bl	80027da <HAL_GPIO_WritePin>
	status = auto_red_yellow;
 8000900:	4b10      	ldr	r3, [pc, #64]	@ (8000944 <fsm_switch_state_auto_red_yellow+0x60>)
 8000902:	2202      	movs	r2, #2
 8000904:	601a      	str	r2, [r3, #0]
	count0 = count1 = time_red_yellow/1000;;
 8000906:	4b10      	ldr	r3, [pc, #64]	@ (8000948 <fsm_switch_state_auto_red_yellow+0x64>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	22fa      	movs	r2, #250	@ 0xfa
 800090c:	0091      	lsls	r1, r2, #2
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff fc84 	bl	800021c <__divsi3>
 8000914:	0003      	movs	r3, r0
 8000916:	001a      	movs	r2, r3
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <fsm_switch_state_auto_red_yellow+0x68>)
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <fsm_switch_state_auto_red_yellow+0x68>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <fsm_switch_state_auto_red_yellow+0x6c>)
 8000922:	601a      	str	r2, [r3, #0]
	SCH_Add_Task(fsm_switch_state_auto_green_red, time_red_yellow, 0); // NEXT STATE
 8000924:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <fsm_switch_state_auto_red_yellow+0x64>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	0019      	movs	r1, r3
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <fsm_switch_state_auto_red_yellow+0x70>)
 800092c:	2200      	movs	r2, #0
 800092e:	0018      	movs	r0, r3
 8000930:	f001 f900 	bl	8001b34 <SCH_Add_Task>
	nextTask_Switch_State = fsm_switch_state_auto_green_red;
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <fsm_switch_state_auto_red_yellow+0x74>)
 8000936:	4a07      	ldr	r2, [pc, #28]	@ (8000954 <fsm_switch_state_auto_red_yellow+0x70>)
 8000938:	601a      	str	r2, [r3, #0]

}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	48000400 	.word	0x48000400
 8000944:	200000b0 	.word	0x200000b0
 8000948:	20000018 	.word	0x20000018
 800094c:	200000b8 	.word	0x200000b8
 8000950:	200000b4 	.word	0x200000b4
 8000954:	0800095d 	.word	0x0800095d
 8000958:	200000a4 	.word	0x200000a4

0800095c <fsm_switch_state_auto_green_red>:
void fsm_switch_state_auto_green_red(){
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red 0 off
 8000960:	2380      	movs	r3, #128	@ 0x80
 8000962:	0159      	lsls	r1, r3, #5
 8000964:	2390      	movs	r3, #144	@ 0x90
 8000966:	05db      	lsls	r3, r3, #23
 8000968:	2201      	movs	r2, #1
 800096a:	0018      	movs	r0, r3
 800096c:	f001 ff35 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); // yellow 1 off
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <fsm_switch_state_auto_green_red+0x94>)
 8000972:	2201      	movs	r2, #1
 8000974:	2120      	movs	r1, #32
 8000976:	0018      	movs	r0, r3
 8000978:	f001 ff2f 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET); // green 0 on
 800097c:	2380      	movs	r3, #128	@ 0x80
 800097e:	0059      	lsls	r1, r3, #1
 8000980:	2390      	movs	r3, #144	@ 0x90
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	2200      	movs	r2, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f001 ff27 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 800098c:	2390      	movs	r3, #144	@ 0x90
 800098e:	05db      	lsls	r3, r3, #23
 8000990:	2200      	movs	r2, #0
 8000992:	2104      	movs	r1, #4
 8000994:	0018      	movs	r0, r3
 8000996:	f001 ff20 	bl	80027da <HAL_GPIO_WritePin>
	status = auto_green_red;
 800099a:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <fsm_switch_state_auto_green_red+0x98>)
 800099c:	2203      	movs	r2, #3
 800099e:	601a      	str	r2, [r3, #0]
	count0 = (time_red_green)/1000;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <fsm_switch_state_auto_green_red+0x9c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	22fa      	movs	r2, #250	@ 0xfa
 80009a6:	0091      	lsls	r1, r2, #2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff fc37 	bl	800021c <__divsi3>
 80009ae:	0003      	movs	r3, r0
 80009b0:	001a      	movs	r2, r3
 80009b2:	4b12      	ldr	r3, [pc, #72]	@ (80009fc <fsm_switch_state_auto_green_red+0xa0>)
 80009b4:	601a      	str	r2, [r3, #0]
	count1 = (time_red_green + time_red_yellow)/1000;
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <fsm_switch_state_auto_green_red+0x9c>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <fsm_switch_state_auto_green_red+0xa4>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	18d3      	adds	r3, r2, r3
 80009c0:	22fa      	movs	r2, #250	@ 0xfa
 80009c2:	0091      	lsls	r1, r2, #2
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fc29 	bl	800021c <__divsi3>
 80009ca:	0003      	movs	r3, r0
 80009cc:	001a      	movs	r2, r3
 80009ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000a04 <fsm_switch_state_auto_green_red+0xa8>)
 80009d0:	601a      	str	r2, [r3, #0]
	SCH_Add_Task(fsm_switch_state_auto_yellow_red, time_red_green, 0);// NEXT STATE
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <fsm_switch_state_auto_green_red+0x9c>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	0019      	movs	r1, r3
 80009d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <fsm_switch_state_auto_green_red+0xac>)
 80009da:	2200      	movs	r2, #0
 80009dc:	0018      	movs	r0, r3
 80009de:	f001 f8a9 	bl	8001b34 <SCH_Add_Task>
	nextTask_Switch_State = fsm_switch_state_auto_yellow_red;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <fsm_switch_state_auto_green_red+0xb0>)
 80009e4:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <fsm_switch_state_auto_green_red+0xac>)
 80009e6:	601a      	str	r2, [r3, #0]
}
 80009e8:	46c0      	nop			@ (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	48000400 	.word	0x48000400
 80009f4:	200000b0 	.word	0x200000b0
 80009f8:	20000014 	.word	0x20000014
 80009fc:	200000b4 	.word	0x200000b4
 8000a00:	20000018 	.word	0x20000018
 8000a04:	200000b8 	.word	0x200000b8
 8000a08:	08000a11 	.word	0x08000a11
 8000a0c:	200000a4 	.word	0x200000a4

08000a10 <fsm_switch_state_auto_yellow_red>:
void fsm_switch_state_auto_yellow_red(){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 on
 8000a14:	2390      	movs	r3, #144	@ 0x90
 8000a16:	05db      	lsls	r3, r3, #23
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f001 fedc 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET); // green 0 off
 8000a22:	2380      	movs	r3, #128	@ 0x80
 8000a24:	0059      	lsls	r1, r3, #1
 8000a26:	2390      	movs	r3, #144	@ 0x90
 8000a28:	05db      	lsls	r3, r3, #23
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 fed4 	bl	80027da <HAL_GPIO_WritePin>
	status = auto_yellow_red;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <fsm_switch_state_auto_yellow_red+0x64>)
 8000a34:	2204      	movs	r2, #4
 8000a36:	601a      	str	r2, [r3, #0]
	count0 = count1 = time_red_yellow/1000;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	@ (8000a78 <fsm_switch_state_auto_yellow_red+0x68>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	22fa      	movs	r2, #250	@ 0xfa
 8000a3e:	0091      	lsls	r1, r2, #2
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fbeb 	bl	800021c <__divsi3>
 8000a46:	0003      	movs	r3, r0
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <fsm_switch_state_auto_yellow_red+0x6c>)
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <fsm_switch_state_auto_yellow_red+0x6c>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <fsm_switch_state_auto_yellow_red+0x70>)
 8000a54:	601a      	str	r2, [r3, #0]
	SCH_Add_Task(fsm_switch_state_auto_red_green, time_red_yellow, 0);
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <fsm_switch_state_auto_yellow_red+0x68>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	0019      	movs	r1, r3
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <fsm_switch_state_auto_yellow_red+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	0018      	movs	r0, r3
 8000a62:	f001 f867 	bl	8001b34 <SCH_Add_Task>
	nextTask_Switch_State = fsm_switch_state_auto_red_green;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <fsm_switch_state_auto_yellow_red+0x78>)
 8000a68:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <fsm_switch_state_auto_yellow_red+0x74>)
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	46c0      	nop			@ (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	200000b0 	.word	0x200000b0
 8000a78:	20000018 	.word	0x20000018
 8000a7c:	200000b8 	.word	0x200000b8
 8000a80:	200000b4 	.word	0x200000b4
 8000a84:	08000835 	.word	0x08000835
 8000a88:	200000a4 	.word	0x200000a4

08000a8c <count_1_second>:
void count_1_second(){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
	if(count0 > 0)
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <count_1_second+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	dd04      	ble.n	8000aa2 <count_1_second+0x16>
		count0 --;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <count_1_second+0x40>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	1e5a      	subs	r2, r3, #1
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <count_1_second+0x40>)
 8000aa0:	601a      	str	r2, [r3, #0]
	if(count1 > 0)
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <count_1_second+0x44>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	dd04      	ble.n	8000ab4 <count_1_second+0x28>
		count1 --;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ad0 <count_1_second+0x44>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	1e5a      	subs	r2, r3, #1
 8000ab0:	4b07      	ldr	r3, [pc, #28]	@ (8000ad0 <count_1_second+0x44>)
 8000ab2:	601a      	str	r2, [r3, #0]
	updateClockBuffer(count0, count1);
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <count_1_second+0x40>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <count_1_second+0x44>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	0019      	movs	r1, r3
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f000 fd7e 	bl	80015c0 <updateClockBuffer>
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	200000b4 	.word	0x200000b4
 8000ad0:	200000b8 	.word	0x200000b8

08000ad4 <fsm_manual>:
 *      Author: Admin
 */

#include "fsm_manual.h"

void fsm_manual(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	switch (status) {
 8000ad8:	4b9d      	ldr	r3, [pc, #628]	@ (8000d50 <fsm_manual+0x27c>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b05      	cmp	r3, #5
 8000ade:	d003      	beq.n	8000ae8 <fsm_manual+0x14>
 8000ae0:	2b06      	cmp	r3, #6
 8000ae2:	d100      	bne.n	8000ae6 <fsm_manual+0x12>
 8000ae4:	e07c      	b.n	8000be0 <fsm_manual+0x10c>

				return;
			}
			break;
		default:
			return;
 8000ae6:	e130      	b.n	8000d4a <fsm_manual+0x276>
			if(isButtonPress(1) == 1){
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f7ff fccd 	bl	8000488 <isButtonPress>
 8000aee:	0003      	movs	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d11f      	bne.n	8000b34 <fsm_manual+0x60>
				status = manual_green_red;
 8000af4:	4b96      	ldr	r3, [pc, #600]	@ (8000d50 <fsm_manual+0x27c>)
 8000af6:	2206      	movs	r2, #6
 8000af8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000afa:	2390      	movs	r3, #144	@ 0x90
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	2201      	movs	r2, #1
 8000b00:	2104      	movs	r1, #4
 8000b02:	0018      	movs	r0, r3
 8000b04:	f001 fe69 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000b08:	2380      	movs	r3, #128	@ 0x80
 8000b0a:	0059      	lsls	r1, r3, #1
 8000b0c:	2390      	movs	r3, #144	@ 0x90
 8000b0e:	05db      	lsls	r3, r3, #23
 8000b10:	2201      	movs	r2, #1
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fe61 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 8000b18:	2380      	movs	r3, #128	@ 0x80
 8000b1a:	0159      	lsls	r1, r3, #5
 8000b1c:	2390      	movs	r3, #144	@ 0x90
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f001 fe59 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000b28:	4b8a      	ldr	r3, [pc, #552]	@ (8000d54 <fsm_manual+0x280>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2110      	movs	r1, #16
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 fe53 	bl	80027da <HAL_GPIO_WritePin>
			if(isButtonPress(0) == 1){
 8000b34:	2000      	movs	r0, #0
 8000b36:	f7ff fca7 	bl	8000488 <isButtonPress>
 8000b3a:	0003      	movs	r3, r0
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d000      	beq.n	8000b42 <fsm_manual+0x6e>
 8000b40:	e0c9      	b.n	8000cd6 <fsm_manual+0x202>
				SCH_Add_Task(fsm_auto_run, 10, 10);
 8000b42:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <fsm_manual+0x284>)
 8000b44:	220a      	movs	r2, #10
 8000b46:	210a      	movs	r1, #10
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fff3 	bl	8001b34 <SCH_Add_Task>
				SCH_Add_Task(Scan7SEG, 10, 20);
 8000b4e:	4b83      	ldr	r3, [pc, #524]	@ (8000d5c <fsm_manual+0x288>)
 8000b50:	2214      	movs	r2, #20
 8000b52:	210a      	movs	r1, #10
 8000b54:	0018      	movs	r0, r3
 8000b56:	f000 ffed 	bl	8001b34 <SCH_Add_Task>
				SCH_Delete_Task(fsm_manual);
 8000b5a:	4b81      	ldr	r3, [pc, #516]	@ (8000d60 <fsm_manual+0x28c>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f001 f8d3 	bl	8001d08 <SCH_Delete_Task>
				status = auto_red_green;
 8000b62:	4b7b      	ldr	r3, [pc, #492]	@ (8000d50 <fsm_manual+0x27c>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 8000b68:	4b7e      	ldr	r3, [pc, #504]	@ (8000d64 <fsm_manual+0x290>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b7e      	ldr	r3, [pc, #504]	@ (8000d68 <fsm_manual+0x294>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	18d3      	adds	r3, r2, r3
 8000b72:	22fa      	movs	r2, #250	@ 0xfa
 8000b74:	0091      	lsls	r1, r2, #2
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff fb50 	bl	800021c <__divsi3>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	001a      	movs	r2, r3
 8000b80:	4b7a      	ldr	r3, [pc, #488]	@ (8000d6c <fsm_manual+0x298>)
 8000b82:	601a      	str	r2, [r3, #0]
				count1 = time_red_green / 1000;
 8000b84:	4b77      	ldr	r3, [pc, #476]	@ (8000d64 <fsm_manual+0x290>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	22fa      	movs	r2, #250	@ 0xfa
 8000b8a:	0091      	lsls	r1, r2, #2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff fb45 	bl	800021c <__divsi3>
 8000b92:	0003      	movs	r3, r0
 8000b94:	001a      	movs	r2, r3
 8000b96:	4b76      	ldr	r3, [pc, #472]	@ (8000d70 <fsm_manual+0x29c>)
 8000b98:	601a      	str	r2, [r3, #0]
				updateClockBuffer(count0, count1);
 8000b9a:	4b74      	ldr	r3, [pc, #464]	@ (8000d6c <fsm_manual+0x298>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4b74      	ldr	r3, [pc, #464]	@ (8000d70 <fsm_manual+0x29c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	0019      	movs	r1, r3
 8000ba4:	0010      	movs	r0, r2
 8000ba6:	f000 fd0b 	bl	80015c0 <updateClockBuffer>
				SCH_Add_Task(fsm_switch_state_auto_red_yellow, time_red_green, 0);
 8000baa:	4b6e      	ldr	r3, [pc, #440]	@ (8000d64 <fsm_manual+0x290>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	0019      	movs	r1, r3
 8000bb0:	4b70      	ldr	r3, [pc, #448]	@ (8000d74 <fsm_manual+0x2a0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 ffbd 	bl	8001b34 <SCH_Add_Task>
				lcd_clear_display();
 8000bba:	f000 fb25 	bl	8001208 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f000 fb2c 	bl	800121e <lcd_goto_XY>
				lcd_send_string("MODE: AUTO");
 8000bc6:	4b6c      	ldr	r3, [pc, #432]	@ (8000d78 <fsm_manual+0x2a4>)
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 fb08 	bl	80011de <lcd_send_string>
				lcd_goto_XY(0, 0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 fb24 	bl	800121e <lcd_goto_XY>
				lcd_send_string("PLEASE SLOW DOWN");
 8000bd6:	4b69      	ldr	r3, [pc, #420]	@ (8000d7c <fsm_manual+0x2a8>)
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 fb00 	bl	80011de <lcd_send_string>
				return;
 8000bde:	e0b4      	b.n	8000d4a <fsm_manual+0x276>
			if(isButtonPress(1) == 1){
 8000be0:	2001      	movs	r0, #1
 8000be2:	f7ff fc51 	bl	8000488 <isButtonPress>
 8000be6:	0003      	movs	r3, r0
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d11f      	bne.n	8000c2c <fsm_manual+0x158>
				status = manual_red_green;
 8000bec:	4b58      	ldr	r3, [pc, #352]	@ (8000d50 <fsm_manual+0x27c>)
 8000bee:	2205      	movs	r2, #5
 8000bf0:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 8000bf2:	2380      	movs	r3, #128	@ 0x80
 8000bf4:	0159      	lsls	r1, r3, #5
 8000bf6:	2390      	movs	r3, #144	@ 0x90
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f001 fdec 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000c02:	4b54      	ldr	r3, [pc, #336]	@ (8000d54 <fsm_manual+0x280>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	2110      	movs	r1, #16
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f001 fde6 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000c0e:	2390      	movs	r3, #144	@ 0x90
 8000c10:	05db      	lsls	r3, r3, #23
 8000c12:	2200      	movs	r2, #0
 8000c14:	2104      	movs	r1, #4
 8000c16:	0018      	movs	r0, r3
 8000c18:	f001 fddf 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 8000c1c:	2380      	movs	r3, #128	@ 0x80
 8000c1e:	0059      	lsls	r1, r3, #1
 8000c20:	2390      	movs	r3, #144	@ 0x90
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	2200      	movs	r2, #0
 8000c26:	0018      	movs	r0, r3
 8000c28:	f001 fdd7 	bl	80027da <HAL_GPIO_WritePin>
			if(isButtonPress(0) == 1){
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f7ff fc2b 	bl	8000488 <isButtonPress>
 8000c32:	0003      	movs	r3, r0
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d150      	bne.n	8000cda <fsm_manual+0x206>
				SCH_Add_Task(fsm_auto_run, 10, 10);
 8000c38:	4b47      	ldr	r3, [pc, #284]	@ (8000d58 <fsm_manual+0x284>)
 8000c3a:	220a      	movs	r2, #10
 8000c3c:	210a      	movs	r1, #10
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 ff78 	bl	8001b34 <SCH_Add_Task>
				SCH_Add_Task(Scan7SEG, 10, 20);
 8000c44:	4b45      	ldr	r3, [pc, #276]	@ (8000d5c <fsm_manual+0x288>)
 8000c46:	2214      	movs	r2, #20
 8000c48:	210a      	movs	r1, #10
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f000 ff72 	bl	8001b34 <SCH_Add_Task>
				SCH_Delete_Task(fsm_manual);
 8000c50:	4b43      	ldr	r3, [pc, #268]	@ (8000d60 <fsm_manual+0x28c>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f001 f858 	bl	8001d08 <SCH_Delete_Task>
				status = auto_green_red;
 8000c58:	4b3d      	ldr	r3, [pc, #244]	@ (8000d50 <fsm_manual+0x27c>)
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	601a      	str	r2, [r3, #0]
				count0 = time_red_green/1000;
 8000c5e:	4b41      	ldr	r3, [pc, #260]	@ (8000d64 <fsm_manual+0x290>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	22fa      	movs	r2, #250	@ 0xfa
 8000c64:	0091      	lsls	r1, r2, #2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff fad8 	bl	800021c <__divsi3>
 8000c6c:	0003      	movs	r3, r0
 8000c6e:	001a      	movs	r2, r3
 8000c70:	4b3e      	ldr	r3, [pc, #248]	@ (8000d6c <fsm_manual+0x298>)
 8000c72:	601a      	str	r2, [r3, #0]
				count1 =   (time_red_green + time_red_yellow)/1000;
 8000c74:	4b3b      	ldr	r3, [pc, #236]	@ (8000d64 <fsm_manual+0x290>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b3b      	ldr	r3, [pc, #236]	@ (8000d68 <fsm_manual+0x294>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	22fa      	movs	r2, #250	@ 0xfa
 8000c80:	0091      	lsls	r1, r2, #2
 8000c82:	0018      	movs	r0, r3
 8000c84:	f7ff faca 	bl	800021c <__divsi3>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	4b38      	ldr	r3, [pc, #224]	@ (8000d70 <fsm_manual+0x29c>)
 8000c8e:	601a      	str	r2, [r3, #0]
				updateClockBuffer(count0, count1);
 8000c90:	4b36      	ldr	r3, [pc, #216]	@ (8000d6c <fsm_manual+0x298>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b36      	ldr	r3, [pc, #216]	@ (8000d70 <fsm_manual+0x29c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	0019      	movs	r1, r3
 8000c9a:	0010      	movs	r0, r2
 8000c9c:	f000 fc90 	bl	80015c0 <updateClockBuffer>
				SCH_Add_Task(fsm_switch_state_auto_yellow_red, time_red_green, 0);
 8000ca0:	4b30      	ldr	r3, [pc, #192]	@ (8000d64 <fsm_manual+0x290>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	0019      	movs	r1, r3
 8000ca6:	4b36      	ldr	r3, [pc, #216]	@ (8000d80 <fsm_manual+0x2ac>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 ff42 	bl	8001b34 <SCH_Add_Task>
				lcd_clear_display();
 8000cb0:	f000 faaa 	bl	8001208 <lcd_clear_display>
				lcd_goto_XY(1, 0);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	f000 fab1 	bl	800121e <lcd_goto_XY>
				lcd_send_string("MODE: AUTO");
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <fsm_manual+0x2a4>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 fa8d 	bl	80011de <lcd_send_string>
				lcd_goto_XY(0, 0);
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 faa9 	bl	800121e <lcd_goto_XY>
				lcd_send_string("PLEASE SLOW DOWN");
 8000ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8000d7c <fsm_manual+0x2a8>)
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 fa85 	bl	80011de <lcd_send_string>
				return;
 8000cd4:	e039      	b.n	8000d4a <fsm_manual+0x276>
			break;
 8000cd6:	46c0      	nop			@ (mov r8, r8)
 8000cd8:	e000      	b.n	8000cdc <fsm_manual+0x208>
			break;
 8000cda:	46c0      	nop			@ (mov r8, r8)
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 8000cdc:	2002      	movs	r0, #2
 8000cde:	f7ff fbd3 	bl	8000488 <isButtonPress>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d130      	bne.n	8000d4a <fsm_manual+0x276>
		time_red_yellow = 0;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <fsm_manual+0x294>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 8000cee:	4b1d      	ldr	r3, [pc, #116]	@ (8000d64 <fsm_manual+0x290>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
		updateClockBuffer(0, 1);
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 fc62 	bl	80015c0 <updateClockBuffer>
		status = set_green;
 8000cfc:	4b14      	ldr	r3, [pc, #80]	@ (8000d50 <fsm_manual+0x27c>)
 8000cfe:	2208      	movs	r2, #8
 8000d00:	601a      	str	r2, [r3, #0]
		SCH_Delete_Task(fsm_manual);
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <fsm_manual+0x28c>)
 8000d04:	0018      	movs	r0, r3
 8000d06:	f000 ffff 	bl	8001d08 <SCH_Delete_Task>
		SCH_Delete_Task(count_1_second);
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <fsm_manual+0x2b0>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f000 fffb 	bl	8001d08 <SCH_Delete_Task>
		SCH_Add_Task(fsm_setting, 100, 10);
 8000d12:	4b1d      	ldr	r3, [pc, #116]	@ (8000d88 <fsm_manual+0x2b4>)
 8000d14:	220a      	movs	r2, #10
 8000d16:	2164      	movs	r1, #100	@ 0x64
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f000 ff0b 	bl	8001b34 <SCH_Add_Task>
		SCH_Add_Task(Scan7SEG, 10, 20);
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <fsm_manual+0x288>)
 8000d20:	2214      	movs	r2, #20
 8000d22:	210a      	movs	r1, #10
 8000d24:	0018      	movs	r0, r3
 8000d26:	f000 ff05 	bl	8001b34 <SCH_Add_Task>
		single_LED_off();
 8000d2a:	f000 fc79 	bl	8001620 <single_LED_off>
		HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, 1);
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	0059      	lsls	r1, r3, #1
 8000d32:	2390      	movs	r3, #144	@ 0x90
 8000d34:	05db      	lsls	r3, r3, #23
 8000d36:	2201      	movs	r2, #1
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 fd4e 	bl	80027da <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, 1);
 8000d3e:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <fsm_manual+0x280>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	2110      	movs	r1, #16
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 fd48 	bl	80027da <HAL_GPIO_WritePin>
	}
}
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	200000b0 	.word	0x200000b0
 8000d54:	48000400 	.word	0x48000400
 8000d58:	080004b9 	.word	0x080004b9
 8000d5c:	080012b9 	.word	0x080012b9
 8000d60:	08000ad5 	.word	0x08000ad5
 8000d64:	20000014 	.word	0x20000014
 8000d68:	20000018 	.word	0x20000018
 8000d6c:	200000b4 	.word	0x200000b4
 8000d70:	200000b8 	.word	0x200000b8
 8000d74:	080008e5 	.word	0x080008e5
 8000d78:	08005a9c 	.word	0x08005a9c
 8000d7c:	08005aa8 	.word	0x08005aa8
 8000d80:	08000a11 	.word	0x08000a11
 8000d84:	08000a8d 	.word	0x08000a8d
 8000d88:	08000d8d 	.word	0x08000d8d

08000d8c <fsm_setting>:
#include "fsm_setting.h"

int increment[5] = {1000,2000,5000,10000,20000};
int i = 0;
int temp =0 ;
void fsm_setting(){
 8000d8c:	b5b0      	push	{r4, r5, r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	switch (status) {
 8000d90:	4b96      	ldr	r3, [pc, #600]	@ (8000fec <fsm_setting+0x260>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b07      	cmp	r3, #7
 8000d96:	d100      	bne.n	8000d9a <fsm_setting+0xe>
 8000d98:	e07e      	b.n	8000e98 <fsm_setting+0x10c>
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	d000      	beq.n	8000da0 <fsm_setting+0x14>
 8000d9e:	e121      	b.n	8000fe4 <fsm_setting+0x258>
		case set_green:
			if(isButtonPress(0) == 1){  // TIME INCREASE
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fb71 	bl	8000488 <isButtonPress>
 8000da6:	0003      	movs	r3, r0
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d12d      	bne.n	8000e08 <fsm_setting+0x7c>
				time_red_green += increment[i];
 8000dac:	4b90      	ldr	r3, [pc, #576]	@ (8000ff0 <fsm_setting+0x264>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b90      	ldr	r3, [pc, #576]	@ (8000ff4 <fsm_setting+0x268>)
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	58d2      	ldr	r2, [r2, r3]
 8000db6:	4b90      	ldr	r3, [pc, #576]	@ (8000ff8 <fsm_setting+0x26c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	18d2      	adds	r2, r2, r3
 8000dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8000ff8 <fsm_setting+0x26c>)
 8000dbe:	601a      	str	r2, [r3, #0]
				temp = time_red_green;
 8000dc0:	4b8d      	ldr	r3, [pc, #564]	@ (8000ff8 <fsm_setting+0x26c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b8d      	ldr	r3, [pc, #564]	@ (8000ffc <fsm_setting+0x270>)
 8000dc6:	601a      	str	r2, [r3, #0]
				if(time_red_green > 98000){
 8000dc8:	4b8b      	ldr	r3, [pc, #556]	@ (8000ff8 <fsm_setting+0x26c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a8c      	ldr	r2, [pc, #560]	@ (8001000 <fsm_setting+0x274>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	dd02      	ble.n	8000dd8 <fsm_setting+0x4c>
					time_red_green = 0;
 8000dd2:	4b89      	ldr	r3, [pc, #548]	@ (8000ff8 <fsm_setting+0x26c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
				}
				updateClockBuffer(time_red_green/1000, increment[i]/1000);
 8000dd8:	4b87      	ldr	r3, [pc, #540]	@ (8000ff8 <fsm_setting+0x26c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	22fa      	movs	r2, #250	@ 0xfa
 8000dde:	0091      	lsls	r1, r2, #2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f7ff fa1b 	bl	800021c <__divsi3>
 8000de6:	0003      	movs	r3, r0
 8000de8:	001c      	movs	r4, r3
 8000dea:	4b81      	ldr	r3, [pc, #516]	@ (8000ff0 <fsm_setting+0x264>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	4b81      	ldr	r3, [pc, #516]	@ (8000ff4 <fsm_setting+0x268>)
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	58d3      	ldr	r3, [r2, r3]
 8000df4:	22fa      	movs	r2, #250	@ 0xfa
 8000df6:	0091      	lsls	r1, r2, #2
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff fa0f 	bl	800021c <__divsi3>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	0019      	movs	r1, r3
 8000e02:	0020      	movs	r0, r4
 8000e04:	f000 fbdc 	bl	80015c0 <updateClockBuffer>
			}
			if(isButtonPress(2) == 1){
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f7ff fb3d 	bl	8000488 <isButtonPress>
 8000e0e:	0003      	movs	r3, r0
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d000      	beq.n	8000e16 <fsm_setting+0x8a>
 8000e14:	e0b8      	b.n	8000f88 <fsm_setting+0x1fc>
				i = 0;
 8000e16:	4b76      	ldr	r3, [pc, #472]	@ (8000ff0 <fsm_setting+0x264>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
				updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 8000e1c:	4b79      	ldr	r3, [pc, #484]	@ (8001004 <fsm_setting+0x278>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	22fa      	movs	r2, #250	@ 0xfa
 8000e22:	0091      	lsls	r1, r2, #2
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff f9f9 	bl	800021c <__divsi3>
 8000e2a:	0003      	movs	r3, r0
 8000e2c:	001c      	movs	r4, r3
 8000e2e:	4b70      	ldr	r3, [pc, #448]	@ (8000ff0 <fsm_setting+0x264>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b70      	ldr	r3, [pc, #448]	@ (8000ff4 <fsm_setting+0x268>)
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	58d3      	ldr	r3, [r2, r3]
 8000e38:	22fa      	movs	r2, #250	@ 0xfa
 8000e3a:	0091      	lsls	r1, r2, #2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff f9ed 	bl	800021c <__divsi3>
 8000e42:	0003      	movs	r3, r0
 8000e44:	0019      	movs	r1, r3
 8000e46:	0020      	movs	r0, r4
 8000e48:	f000 fbba 	bl	80015c0 <updateClockBuffer>
				temp = time_red_yellow;
 8000e4c:	4b6d      	ldr	r3, [pc, #436]	@ (8001004 <fsm_setting+0x278>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b6a      	ldr	r3, [pc, #424]	@ (8000ffc <fsm_setting+0x270>)
 8000e52:	601a      	str	r2, [r3, #0]
				status = set_yellow;
 8000e54:	4b65      	ldr	r3, [pc, #404]	@ (8000fec <fsm_setting+0x260>)
 8000e56:	2207      	movs	r2, #7
 8000e58:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000e5a:	2380      	movs	r3, #128	@ 0x80
 8000e5c:	0059      	lsls	r1, r3, #1
 8000e5e:	2390      	movs	r3, #144	@ 0x90
 8000e60:	05db      	lsls	r3, r3, #23
 8000e62:	2201      	movs	r2, #1
 8000e64:	0018      	movs	r0, r3
 8000e66:	f001 fcb8 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000e6a:	4b67      	ldr	r3, [pc, #412]	@ (8001008 <fsm_setting+0x27c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2110      	movs	r1, #16
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 fcb2 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET);
 8000e76:	2390      	movs	r3, #144	@ 0x90
 8000e78:	05db      	lsls	r3, r3, #23
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2110      	movs	r1, #16
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f001 fcab 	bl	80027da <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET);
 8000e84:	4b60      	ldr	r3, [pc, #384]	@ (8001008 <fsm_setting+0x27c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	2120      	movs	r1, #32
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f001 fca5 	bl	80027da <HAL_GPIO_WritePin>
				i = 0;
 8000e90:	4b57      	ldr	r3, [pc, #348]	@ (8000ff0 <fsm_setting+0x264>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
			}
			break;
 8000e96:	e077      	b.n	8000f88 <fsm_setting+0x1fc>
		case set_yellow:
			if(isButtonPress(0) == 1){
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff faf5 	bl	8000488 <isButtonPress>
 8000e9e:	0003      	movs	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d125      	bne.n	8000ef0 <fsm_setting+0x164>
				time_red_yellow += increment[i];
 8000ea4:	4b52      	ldr	r3, [pc, #328]	@ (8000ff0 <fsm_setting+0x264>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	4b52      	ldr	r3, [pc, #328]	@ (8000ff4 <fsm_setting+0x268>)
 8000eaa:	0092      	lsls	r2, r2, #2
 8000eac:	58d2      	ldr	r2, [r2, r3]
 8000eae:	4b55      	ldr	r3, [pc, #340]	@ (8001004 <fsm_setting+0x278>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	18d2      	adds	r2, r2, r3
 8000eb4:	4b53      	ldr	r3, [pc, #332]	@ (8001004 <fsm_setting+0x278>)
 8000eb6:	601a      	str	r2, [r3, #0]
				temp = time_red_yellow;
 8000eb8:	4b52      	ldr	r3, [pc, #328]	@ (8001004 <fsm_setting+0x278>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8000ffc <fsm_setting+0x270>)
 8000ebe:	601a      	str	r2, [r3, #0]
				updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 8000ec0:	4b50      	ldr	r3, [pc, #320]	@ (8001004 <fsm_setting+0x278>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	22fa      	movs	r2, #250	@ 0xfa
 8000ec6:	0091      	lsls	r1, r2, #2
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff f9a7 	bl	800021c <__divsi3>
 8000ece:	0003      	movs	r3, r0
 8000ed0:	001c      	movs	r4, r3
 8000ed2:	4b47      	ldr	r3, [pc, #284]	@ (8000ff0 <fsm_setting+0x264>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b47      	ldr	r3, [pc, #284]	@ (8000ff4 <fsm_setting+0x268>)
 8000ed8:	0092      	lsls	r2, r2, #2
 8000eda:	58d3      	ldr	r3, [r2, r3]
 8000edc:	22fa      	movs	r2, #250	@ 0xfa
 8000ede:	0091      	lsls	r1, r2, #2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f7ff f99b 	bl	800021c <__divsi3>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	0019      	movs	r1, r3
 8000eea:	0020      	movs	r0, r4
 8000eec:	f000 fb68 	bl	80015c0 <updateClockBuffer>
			}
			if(isButtonPress(2) == 1){
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f7ff fac9 	bl	8000488 <isButtonPress>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d147      	bne.n	8000f8c <fsm_setting+0x200>
				if( ( (time_red_yellow + time_red_green) >= 100000)  && (time_red_green == 0) ){
 8000efc:	4b41      	ldr	r3, [pc, #260]	@ (8001004 <fsm_setting+0x278>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b3d      	ldr	r3, [pc, #244]	@ (8000ff8 <fsm_setting+0x26c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	18d3      	adds	r3, r2, r3
 8000f06:	4a41      	ldr	r2, [pc, #260]	@ (800100c <fsm_setting+0x280>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	dd25      	ble.n	8000f58 <fsm_setting+0x1cc>
 8000f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000ff8 <fsm_setting+0x26c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d121      	bne.n	8000f58 <fsm_setting+0x1cc>
					HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 8000f14:	2390      	movs	r3, #144	@ 0x90
 8000f16:	05db      	lsls	r3, r3, #23
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f001 fc5c 	bl	80027da <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8000f22:	4b39      	ldr	r3, [pc, #228]	@ (8001008 <fsm_setting+0x27c>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	2120      	movs	r1, #32
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f001 fc56 	bl	80027da <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 8000f2e:	2380      	movs	r3, #128	@ 0x80
 8000f30:	0059      	lsls	r1, r3, #1
 8000f32:	2390      	movs	r3, #144	@ 0x90
 8000f34:	05db      	lsls	r3, r3, #23
 8000f36:	2200      	movs	r2, #0
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f001 fc4e 	bl	80027da <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 8000f3e:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <fsm_setting+0x27c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	2110      	movs	r1, #16
 8000f44:	0018      	movs	r0, r3
 8000f46:	f001 fc48 	bl	80027da <HAL_GPIO_WritePin>
					status = set_green;
 8000f4a:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <fsm_setting+0x260>)
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	601a      	str	r2, [r3, #0]
					i = 0;
 8000f50:	4b27      	ldr	r3, [pc, #156]	@ (8000ff0 <fsm_setting+0x264>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
					SCH_Add_Task(fsm_auto_run, 10, 10);
					SCH_Add_Task(count_1_second, 1010, 1000);
					return;
				}
			}
			break;
 8000f56:	e019      	b.n	8000f8c <fsm_setting+0x200>
					i = 0;
 8000f58:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <fsm_setting+0x264>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
					status = auto_init;
 8000f5e:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <fsm_setting+0x260>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
					SCH_Delete_Task(fsm_setting);
 8000f64:	4b2a      	ldr	r3, [pc, #168]	@ (8001010 <fsm_setting+0x284>)
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 fece 	bl	8001d08 <SCH_Delete_Task>
					SCH_Add_Task(fsm_auto_run, 10, 10);
 8000f6c:	4b29      	ldr	r3, [pc, #164]	@ (8001014 <fsm_setting+0x288>)
 8000f6e:	220a      	movs	r2, #10
 8000f70:	210a      	movs	r1, #10
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 fdde 	bl	8001b34 <SCH_Add_Task>
					SCH_Add_Task(count_1_second, 1010, 1000);
 8000f78:	23fa      	movs	r3, #250	@ 0xfa
 8000f7a:	009a      	lsls	r2, r3, #2
 8000f7c:	4926      	ldr	r1, [pc, #152]	@ (8001018 <fsm_setting+0x28c>)
 8000f7e:	4b27      	ldr	r3, [pc, #156]	@ (800101c <fsm_setting+0x290>)
 8000f80:	0018      	movs	r0, r3
 8000f82:	f000 fdd7 	bl	8001b34 <SCH_Add_Task>
					return;
 8000f86:	e02e      	b.n	8000fe6 <fsm_setting+0x25a>
			break;
 8000f88:	46c0      	nop			@ (mov r8, r8)
 8000f8a:	e000      	b.n	8000f8e <fsm_setting+0x202>
			break;
 8000f8c:	46c0      	nop			@ (mov r8, r8)
		default:
			return;
	}
	if(isButtonPress(1) == 1){
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f7ff fa7a 	bl	8000488 <isButtonPress>
 8000f94:	0003      	movs	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d125      	bne.n	8000fe6 <fsm_setting+0x25a>
		 ++i;
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <fsm_setting+0x264>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <fsm_setting+0x264>)
 8000fa2:	601a      	str	r2, [r3, #0]
		 if(i >= 5) i = 0;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <fsm_setting+0x264>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b04      	cmp	r3, #4
 8000faa:	dd02      	ble.n	8000fb2 <fsm_setting+0x226>
 8000fac:	4b10      	ldr	r3, [pc, #64]	@ (8000ff0 <fsm_setting+0x264>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
		 updateClockBuffer(temp/1000, increment[i]/1000);
 8000fb2:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <fsm_setting+0x270>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	22fa      	movs	r2, #250	@ 0xfa
 8000fb8:	0091      	lsls	r1, r2, #2
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f7ff f92e 	bl	800021c <__divsi3>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	001c      	movs	r4, r3
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <fsm_setting+0x264>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <fsm_setting+0x268>)
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	58d3      	ldr	r3, [r2, r3]
 8000fce:	22fa      	movs	r2, #250	@ 0xfa
 8000fd0:	0091      	lsls	r1, r2, #2
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f7ff f922 	bl	800021c <__divsi3>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	0019      	movs	r1, r3
 8000fdc:	0020      	movs	r0, r4
 8000fde:	f000 faef 	bl	80015c0 <updateClockBuffer>
 8000fe2:	e000      	b.n	8000fe6 <fsm_setting+0x25a>
			return;
 8000fe4:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8000fea:	46c0      	nop			@ (mov r8, r8)
 8000fec:	200000b0 	.word	0x200000b0
 8000ff0:	200000a8 	.word	0x200000a8
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000014 	.word	0x20000014
 8000ffc:	200000ac 	.word	0x200000ac
 8001000:	00017ed0 	.word	0x00017ed0
 8001004:	20000018 	.word	0x20000018
 8001008:	48000400 	.word	0x48000400
 800100c:	0001869f 	.word	0x0001869f
 8001010:	08000d8d 	.word	0x08000d8d
 8001014:	080004b9 	.word	0x080004b9
 8001018:	000003f2 	.word	0x000003f2
 800101c:	08000a8d 	.word	0x08000a8d

08001020 <fsm_slow_run>:
 *  Created on: Nov 8, 2024
 *      Author: xjkpr
 */
#include "fsm_slow.h"

void fsm_slow_run(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
 8001024:	2390      	movs	r3, #144	@ 0x90
 8001026:	05db      	lsls	r3, r3, #23
 8001028:	2110      	movs	r1, #16
 800102a:	0018      	movs	r0, r3
 800102c:	f001 fbf2 	bl	8002814 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8001030:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <fsm_slow_run+0x54>)
 8001032:	2120      	movs	r1, #32
 8001034:	0018      	movs	r0, r3
 8001036:	f001 fbed 	bl	8002814 <HAL_GPIO_TogglePin>
	if(isButtonPress(0) == 1){
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff fa24 	bl	8000488 <isButtonPress>
 8001040:	0003      	movs	r3, r0
 8001042:	2b01      	cmp	r3, #1
 8001044:	d112      	bne.n	800106c <fsm_slow_run+0x4c>
		SCH_Add_Task(fsm_auto_run, 10, 10);
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <fsm_slow_run+0x58>)
 8001048:	220a      	movs	r2, #10
 800104a:	210a      	movs	r1, #10
 800104c:	0018      	movs	r0, r3
 800104e:	f000 fd71 	bl	8001b34 <SCH_Add_Task>
		SCH_Add_Task(Scan7SEG, 10, 20);
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <fsm_slow_run+0x5c>)
 8001054:	2214      	movs	r2, #20
 8001056:	210a      	movs	r1, #10
 8001058:	0018      	movs	r0, r3
 800105a:	f000 fd6b 	bl	8001b34 <SCH_Add_Task>
		SCH_Delete_Task(fsm_slow_run);
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <fsm_slow_run+0x60>)
 8001060:	0018      	movs	r0, r3
 8001062:	f000 fe51 	bl	8001d08 <SCH_Delete_Task>
		status = auto_init;
 8001066:	4b07      	ldr	r3, [pc, #28]	@ (8001084 <fsm_slow_run+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
	}
}
 800106c:	46c0      	nop			@ (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	48000400 	.word	0x48000400
 8001078:	080004b9 	.word	0x080004b9
 800107c:	080012b9 	.word	0x080012b9
 8001080:	08001021 	.word	0x08001021
 8001084:	200000b0 	.word	0x200000b0

08001088 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x27 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b087      	sub	sp, #28
 800108c:	af02      	add	r7, sp, #8
 800108e:	0002      	movs	r2, r0
 8001090:	1dfb      	adds	r3, r7, #7
 8001092:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001094:	200f      	movs	r0, #15
 8001096:	183b      	adds	r3, r7, r0
 8001098:	1dfa      	adds	r2, r7, #7
 800109a:	7812      	ldrb	r2, [r2, #0]
 800109c:	210f      	movs	r1, #15
 800109e:	438a      	bics	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	011a      	lsls	r2, r3, #4
 80010a8:	240e      	movs	r4, #14
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80010ae:	183b      	adds	r3, r7, r0
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	220c      	movs	r2, #12
 80010b4:	4313      	orrs	r3, r2
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	2108      	movs	r1, #8
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80010be:	183b      	adds	r3, r7, r0
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2208      	movs	r2, #8
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80010cc:	193b      	adds	r3, r7, r4
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	220c      	movs	r2, #12
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b2da      	uxtb	r2, r3
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80010da:	193b      	adds	r3, r7, r4
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2208      	movs	r2, #8
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80010e8:	187a      	adds	r2, r7, r1
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <lcd_send_cmd+0x78>)
 80010ec:	2364      	movs	r3, #100	@ 0x64
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	2304      	movs	r3, #4
 80010f2:	214e      	movs	r1, #78	@ 0x4e
 80010f4:	f001 fc50 	bl	8002998 <HAL_I2C_Master_Transmit>
}
 80010f8:	46c0      	nop			@ (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	b005      	add	sp, #20
 80010fe:	bd90      	pop	{r4, r7, pc}
 8001100:	200000d0 	.word	0x200000d0

08001104 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b087      	sub	sp, #28
 8001108:	af02      	add	r7, sp, #8
 800110a:	0002      	movs	r2, r0
 800110c:	1dfb      	adds	r3, r7, #7
 800110e:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001110:	200f      	movs	r0, #15
 8001112:	183b      	adds	r3, r7, r0
 8001114:	1dfa      	adds	r2, r7, #7
 8001116:	7812      	ldrb	r2, [r2, #0]
 8001118:	210f      	movs	r1, #15
 800111a:	438a      	bics	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	011a      	lsls	r2, r3, #4
 8001124:	240e      	movs	r4, #14
 8001126:	193b      	adds	r3, r7, r4
 8001128:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800112a:	183b      	adds	r3, r7, r0
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	220d      	movs	r2, #13
 8001130:	4313      	orrs	r3, r2
 8001132:	b2da      	uxtb	r2, r3
 8001134:	2108      	movs	r1, #8
 8001136:	187b      	adds	r3, r7, r1
 8001138:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800113a:	183b      	adds	r3, r7, r0
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2209      	movs	r2, #9
 8001140:	4313      	orrs	r3, r2
 8001142:	b2da      	uxtb	r2, r3
 8001144:	187b      	adds	r3, r7, r1
 8001146:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001148:	193b      	adds	r3, r7, r4
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	220d      	movs	r2, #13
 800114e:	4313      	orrs	r3, r2
 8001150:	b2da      	uxtb	r2, r3
 8001152:	187b      	adds	r3, r7, r1
 8001154:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001156:	193b      	adds	r3, r7, r4
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2209      	movs	r2, #9
 800115c:	4313      	orrs	r3, r2
 800115e:	b2da      	uxtb	r2, r3
 8001160:	187b      	adds	r3, r7, r1
 8001162:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001164:	187a      	adds	r2, r7, r1
 8001166:	4805      	ldr	r0, [pc, #20]	@ (800117c <lcd_send_data+0x78>)
 8001168:	2364      	movs	r3, #100	@ 0x64
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2304      	movs	r3, #4
 800116e:	214e      	movs	r1, #78	@ 0x4e
 8001170:	f001 fc12 	bl	8002998 <HAL_I2C_Master_Transmit>
}
 8001174:	46c0      	nop			@ (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	b005      	add	sp, #20
 800117a:	bd90      	pop	{r4, r7, pc}
 800117c:	200000d0 	.word	0x200000d0

08001180 <lcd_init>:

void lcd_init (void) {
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001184:	2033      	movs	r0, #51	@ 0x33
 8001186:	f7ff ff7f 	bl	8001088 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800118a:	2032      	movs	r0, #50	@ 0x32
 800118c:	f7ff ff7c 	bl	8001088 <lcd_send_cmd>
	HAL_Delay(50);
 8001190:	2032      	movs	r0, #50	@ 0x32
 8001192:	f001 f81d 	bl	80021d0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001196:	2028      	movs	r0, #40	@ 0x28
 8001198:	f7ff ff76 	bl	8001088 <lcd_send_cmd>
	HAL_Delay(50);
 800119c:	2032      	movs	r0, #50	@ 0x32
 800119e:	f001 f817 	bl	80021d0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff ff70 	bl	8001088 <lcd_send_cmd>
	HAL_Delay(50);
 80011a8:	2032      	movs	r0, #50	@ 0x32
 80011aa:	f001 f811 	bl	80021d0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80011ae:	2006      	movs	r0, #6
 80011b0:	f7ff ff6a 	bl	8001088 <lcd_send_cmd>
	HAL_Delay(50);
 80011b4:	2032      	movs	r0, #50	@ 0x32
 80011b6:	f001 f80b 	bl	80021d0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 80011ba:	200c      	movs	r0, #12
 80011bc:	f7ff ff64 	bl	8001088 <lcd_send_cmd>
	HAL_Delay(50);
 80011c0:	2032      	movs	r0, #50	@ 0x32
 80011c2:	f001 f805 	bl	80021d0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80011c6:	2002      	movs	r0, #2
 80011c8:	f7ff ff5e 	bl	8001088 <lcd_send_cmd>
	HAL_Delay(50);
 80011cc:	2032      	movs	r0, #50	@ 0x32
 80011ce:	f000 ffff 	bl	80021d0 <HAL_Delay>
	lcd_send_cmd (0x80);
 80011d2:	2080      	movs	r0, #128	@ 0x80
 80011d4:	f7ff ff58 	bl	8001088 <lcd_send_cmd>
}
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <lcd_send_string>:

void lcd_send_string (char *str)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80011e6:	e006      	b.n	80011f6 <lcd_send_string+0x18>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	0018      	movs	r0, r3
 80011f2:	f7ff ff87 	bl	8001104 <lcd_send_data>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f4      	bne.n	80011e8 <lcd_send_string+0xa>
}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	b002      	add	sp, #8
 8001206:	bd80      	pop	{r7, pc}

08001208 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff ff3b 	bl	8001088 <lcd_send_cmd>
	HAL_Delay(5);
 8001212:	2005      	movs	r0, #5
 8001214:	f000 ffdc 	bl	80021d0 <HAL_Delay>
}
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b084      	sub	sp, #16
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10a      	bne.n	8001244 <lcd_goto_XY+0x26>
	{
		pos_Addr = 0x80 + row - 1 + col;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	18d3      	adds	r3, r2, r3
 8001238:	b2da      	uxtb	r2, r3
 800123a:	230f      	movs	r3, #15
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	327f      	adds	r2, #127	@ 0x7f
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e00b      	b.n	800125c <lcd_goto_XY+0x3e>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	3340      	adds	r3, #64	@ 0x40
 800124a:	b2db      	uxtb	r3, r3
 800124c:	b25b      	sxtb	r3, r3
 800124e:	2280      	movs	r2, #128	@ 0x80
 8001250:	4252      	negs	r2, r2
 8001252:	4313      	orrs	r3, r2
 8001254:	b25a      	sxtb	r2, r3
 8001256:	230f      	movs	r3, #15
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	701a      	strb	r2, [r3, #0]
	}
	lcd_send_cmd(pos_Addr);
 800125c:	230f      	movs	r3, #15
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0018      	movs	r0, r3
 8001264:	f7ff ff10 	bl	8001088 <lcd_send_cmd>
}
 8001268:	46c0      	nop			@ (mov r8, r8)
 800126a:	46bd      	mov	sp, r7
 800126c:	b004      	add	sp, #16
 800126e:	bd80      	pop	{r7, pc}

08001270 <Diable_7SEG>:
 */
#include "led_display.h"

int led_buffer[4] = {0,0,0,0};
int led_index = 0;
void Diable_7SEG(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8001274:	2390      	movs	r3, #144	@ 0x90
 8001276:	05db      	lsls	r3, r3, #23
 8001278:	2200      	movs	r2, #0
 800127a:	2101      	movs	r1, #1
 800127c:	0018      	movs	r0, r3
 800127e:	f001 faac 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8001282:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <Diable_7SEG+0x40>)
 8001284:	2200      	movs	r2, #0
 8001286:	2102      	movs	r1, #2
 8001288:	0018      	movs	r0, r3
 800128a:	f001 faa6 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <Diable_7SEG+0x44>)
 8001290:	2200      	movs	r2, #0
 8001292:	2108      	movs	r1, #8
 8001294:	0018      	movs	r0, r3
 8001296:	f001 faa0 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800129a:	2380      	movs	r3, #128	@ 0x80
 800129c:	0119      	lsls	r1, r3, #4
 800129e:	2390      	movs	r3, #144	@ 0x90
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	2200      	movs	r2, #0
 80012a4:	0018      	movs	r0, r3
 80012a6:	f001 fa98 	bl	80027da <HAL_GPIO_WritePin>
}
 80012aa:	46c0      	nop			@ (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	48001400 	.word	0x48001400
 80012b4:	48000400 	.word	0x48000400

080012b8 <Scan7SEG>:
void Scan7SEG(){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	Diable_7SEG();
 80012bc:	f7ff ffd8 	bl	8001270 <Diable_7SEG>
	switch(led_index){
 80012c0:	4b27      	ldr	r3, [pc, #156]	@ (8001360 <Scan7SEG+0xa8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d02d      	beq.n	8001324 <Scan7SEG+0x6c>
 80012c8:	dc3a      	bgt.n	8001340 <Scan7SEG+0x88>
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d01e      	beq.n	800130c <Scan7SEG+0x54>
 80012ce:	dc37      	bgt.n	8001340 <Scan7SEG+0x88>
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <Scan7SEG+0x22>
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d00d      	beq.n	80012f4 <Scan7SEG+0x3c>
		case 3:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
			display7SEG(led_buffer[3]);
			break;
		default:
			break;
 80012d8:	e032      	b.n	8001340 <Scan7SEG+0x88>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80012da:	2390      	movs	r3, #144	@ 0x90
 80012dc:	05db      	lsls	r3, r3, #23
 80012de:	2201      	movs	r2, #1
 80012e0:	2101      	movs	r1, #1
 80012e2:	0018      	movs	r0, r3
 80012e4:	f001 fa79 	bl	80027da <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 80012e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001364 <Scan7SEG+0xac>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	0018      	movs	r0, r3
 80012ee:	f000 f83f 	bl	8001370 <display7SEG>
			break;
 80012f2:	e026      	b.n	8001342 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80012f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001368 <Scan7SEG+0xb0>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	2102      	movs	r1, #2
 80012fa:	0018      	movs	r0, r3
 80012fc:	f001 fa6d 	bl	80027da <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8001300:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <Scan7SEG+0xac>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	0018      	movs	r0, r3
 8001306:	f000 f833 	bl	8001370 <display7SEG>
			break;
 800130a:	e01a      	b.n	8001342 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800130c:	4b17      	ldr	r3, [pc, #92]	@ (800136c <Scan7SEG+0xb4>)
 800130e:	2201      	movs	r2, #1
 8001310:	2108      	movs	r1, #8
 8001312:	0018      	movs	r0, r3
 8001314:	f001 fa61 	bl	80027da <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <Scan7SEG+0xac>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	0018      	movs	r0, r3
 800131e:	f000 f827 	bl	8001370 <display7SEG>
			break;
 8001322:	e00e      	b.n	8001342 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8001324:	2380      	movs	r3, #128	@ 0x80
 8001326:	0119      	lsls	r1, r3, #4
 8001328:	2390      	movs	r3, #144	@ 0x90
 800132a:	05db      	lsls	r3, r3, #23
 800132c:	2201      	movs	r2, #1
 800132e:	0018      	movs	r0, r3
 8001330:	f001 fa53 	bl	80027da <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8001334:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <Scan7SEG+0xac>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	0018      	movs	r0, r3
 800133a:	f000 f819 	bl	8001370 <display7SEG>
			break;
 800133e:	e000      	b.n	8001342 <Scan7SEG+0x8a>
			break;
 8001340:	46c0      	nop			@ (mov r8, r8)
	}
	if((++led_index) >= 4) led_index = 0;
 8001342:	4b07      	ldr	r3, [pc, #28]	@ (8001360 <Scan7SEG+0xa8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <Scan7SEG+0xa8>)
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <Scan7SEG+0xa8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b03      	cmp	r3, #3
 8001352:	dd02      	ble.n	800135a <Scan7SEG+0xa2>
 8001354:	4b02      	ldr	r3, [pc, #8]	@ (8001360 <Scan7SEG+0xa8>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
}
 800135a:	46c0      	nop			@ (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200000cc 	.word	0x200000cc
 8001364:	200000bc 	.word	0x200000bc
 8001368:	48001400 	.word	0x48001400
 800136c:	48000400 	.word	0x48000400

08001370 <display7SEG>:
void display7SEG(int num){
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	switch(num){
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b09      	cmp	r3, #9
 800137c:	d900      	bls.n	8001380 <display7SEG+0x10>
 800137e:	e113      	b.n	80015a8 <display7SEG+0x238>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	009a      	lsls	r2, r3, #2
 8001384:	4b8b      	ldr	r3, [pc, #556]	@ (80015b4 <display7SEG+0x244>)
 8001386:	18d3      	adds	r3, r2, r3
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	469f      	mov	pc, r3
		case 0:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 800138c:	4b8a      	ldr	r3, [pc, #552]	@ (80015b8 <display7SEG+0x248>)
 800138e:	2200      	movs	r2, #0
 8001390:	2101      	movs	r1, #1
 8001392:	0018      	movs	r0, r3
 8001394:	f001 fa21 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8001398:	2390      	movs	r3, #144	@ 0x90
 800139a:	05db      	lsls	r3, r3, #23
 800139c:	2200      	movs	r2, #0
 800139e:	2140      	movs	r1, #64	@ 0x40
 80013a0:	0018      	movs	r0, r3
 80013a2:	f001 fa1a 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 80013a6:	2390      	movs	r3, #144	@ 0x90
 80013a8:	05db      	lsls	r3, r3, #23
 80013aa:	2200      	movs	r2, #0
 80013ac:	2120      	movs	r1, #32
 80013ae:	0018      	movs	r0, r3
 80013b0:	f001 fa13 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80013b4:	4b81      	ldr	r3, [pc, #516]	@ (80015bc <display7SEG+0x24c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	2102      	movs	r1, #2
 80013ba:	0018      	movs	r0, r3
 80013bc:	f001 fa0d 	bl	80027da <HAL_GPIO_WritePin>
			break;
 80013c0:	e0f3      	b.n	80015aa <display7SEG+0x23a>
		case 1:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 80013c2:	4b7d      	ldr	r3, [pc, #500]	@ (80015b8 <display7SEG+0x248>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	2101      	movs	r1, #1
 80013c8:	0018      	movs	r0, r3
 80013ca:	f001 fa06 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80013ce:	2390      	movs	r3, #144	@ 0x90
 80013d0:	05db      	lsls	r3, r3, #23
 80013d2:	2200      	movs	r2, #0
 80013d4:	2140      	movs	r1, #64	@ 0x40
 80013d6:	0018      	movs	r0, r3
 80013d8:	f001 f9ff 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 80013dc:	2390      	movs	r3, #144	@ 0x90
 80013de:	05db      	lsls	r3, r3, #23
 80013e0:	2200      	movs	r2, #0
 80013e2:	2120      	movs	r1, #32
 80013e4:	0018      	movs	r0, r3
 80013e6:	f001 f9f8 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80013ea:	4b74      	ldr	r3, [pc, #464]	@ (80015bc <display7SEG+0x24c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	2102      	movs	r1, #2
 80013f0:	0018      	movs	r0, r3
 80013f2:	f001 f9f2 	bl	80027da <HAL_GPIO_WritePin>
			break;
 80013f6:	e0d8      	b.n	80015aa <display7SEG+0x23a>
		case 2:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 80013f8:	4b6f      	ldr	r3, [pc, #444]	@ (80015b8 <display7SEG+0x248>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	2101      	movs	r1, #1
 80013fe:	0018      	movs	r0, r3
 8001400:	f001 f9eb 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8001404:	2390      	movs	r3, #144	@ 0x90
 8001406:	05db      	lsls	r3, r3, #23
 8001408:	2201      	movs	r2, #1
 800140a:	2140      	movs	r1, #64	@ 0x40
 800140c:	0018      	movs	r0, r3
 800140e:	f001 f9e4 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8001412:	2390      	movs	r3, #144	@ 0x90
 8001414:	05db      	lsls	r3, r3, #23
 8001416:	2200      	movs	r2, #0
 8001418:	2120      	movs	r1, #32
 800141a:	0018      	movs	r0, r3
 800141c:	f001 f9dd 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8001420:	4b66      	ldr	r3, [pc, #408]	@ (80015bc <display7SEG+0x24c>)
 8001422:	2200      	movs	r2, #0
 8001424:	2102      	movs	r1, #2
 8001426:	0018      	movs	r0, r3
 8001428:	f001 f9d7 	bl	80027da <HAL_GPIO_WritePin>
			break;
 800142c:	e0bd      	b.n	80015aa <display7SEG+0x23a>
		case 3:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 800142e:	4b62      	ldr	r3, [pc, #392]	@ (80015b8 <display7SEG+0x248>)
 8001430:	2201      	movs	r2, #1
 8001432:	2101      	movs	r1, #1
 8001434:	0018      	movs	r0, r3
 8001436:	f001 f9d0 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 800143a:	2390      	movs	r3, #144	@ 0x90
 800143c:	05db      	lsls	r3, r3, #23
 800143e:	2201      	movs	r2, #1
 8001440:	2140      	movs	r1, #64	@ 0x40
 8001442:	0018      	movs	r0, r3
 8001444:	f001 f9c9 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8001448:	2390      	movs	r3, #144	@ 0x90
 800144a:	05db      	lsls	r3, r3, #23
 800144c:	2200      	movs	r2, #0
 800144e:	2120      	movs	r1, #32
 8001450:	0018      	movs	r0, r3
 8001452:	f001 f9c2 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8001456:	4b59      	ldr	r3, [pc, #356]	@ (80015bc <display7SEG+0x24c>)
 8001458:	2200      	movs	r2, #0
 800145a:	2102      	movs	r1, #2
 800145c:	0018      	movs	r0, r3
 800145e:	f001 f9bc 	bl	80027da <HAL_GPIO_WritePin>
			break;
 8001462:	e0a2      	b.n	80015aa <display7SEG+0x23a>
		case 4:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8001464:	4b54      	ldr	r3, [pc, #336]	@ (80015b8 <display7SEG+0x248>)
 8001466:	2200      	movs	r2, #0
 8001468:	2101      	movs	r1, #1
 800146a:	0018      	movs	r0, r3
 800146c:	f001 f9b5 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8001470:	2390      	movs	r3, #144	@ 0x90
 8001472:	05db      	lsls	r3, r3, #23
 8001474:	2200      	movs	r2, #0
 8001476:	2140      	movs	r1, #64	@ 0x40
 8001478:	0018      	movs	r0, r3
 800147a:	f001 f9ae 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 800147e:	2390      	movs	r3, #144	@ 0x90
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	2201      	movs	r2, #1
 8001484:	2120      	movs	r1, #32
 8001486:	0018      	movs	r0, r3
 8001488:	f001 f9a7 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 800148c:	4b4b      	ldr	r3, [pc, #300]	@ (80015bc <display7SEG+0x24c>)
 800148e:	2200      	movs	r2, #0
 8001490:	2102      	movs	r1, #2
 8001492:	0018      	movs	r0, r3
 8001494:	f001 f9a1 	bl	80027da <HAL_GPIO_WritePin>
			break;
 8001498:	e087      	b.n	80015aa <display7SEG+0x23a>
		case 5:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 800149a:	4b47      	ldr	r3, [pc, #284]	@ (80015b8 <display7SEG+0x248>)
 800149c:	2201      	movs	r2, #1
 800149e:	2101      	movs	r1, #1
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 f99a 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80014a6:	2390      	movs	r3, #144	@ 0x90
 80014a8:	05db      	lsls	r3, r3, #23
 80014aa:	2200      	movs	r2, #0
 80014ac:	2140      	movs	r1, #64	@ 0x40
 80014ae:	0018      	movs	r0, r3
 80014b0:	f001 f993 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 80014b4:	2390      	movs	r3, #144	@ 0x90
 80014b6:	05db      	lsls	r3, r3, #23
 80014b8:	2201      	movs	r2, #1
 80014ba:	2120      	movs	r1, #32
 80014bc:	0018      	movs	r0, r3
 80014be:	f001 f98c 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80014c2:	4b3e      	ldr	r3, [pc, #248]	@ (80015bc <display7SEG+0x24c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	2102      	movs	r1, #2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f001 f986 	bl	80027da <HAL_GPIO_WritePin>
			break;
 80014ce:	e06c      	b.n	80015aa <display7SEG+0x23a>
		case 6:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 80014d0:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <display7SEG+0x248>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	2101      	movs	r1, #1
 80014d6:	0018      	movs	r0, r3
 80014d8:	f001 f97f 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 80014dc:	2390      	movs	r3, #144	@ 0x90
 80014de:	05db      	lsls	r3, r3, #23
 80014e0:	2201      	movs	r2, #1
 80014e2:	2140      	movs	r1, #64	@ 0x40
 80014e4:	0018      	movs	r0, r3
 80014e6:	f001 f978 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 80014ea:	2390      	movs	r3, #144	@ 0x90
 80014ec:	05db      	lsls	r3, r3, #23
 80014ee:	2201      	movs	r2, #1
 80014f0:	2120      	movs	r1, #32
 80014f2:	0018      	movs	r0, r3
 80014f4:	f001 f971 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80014f8:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <display7SEG+0x24c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	2102      	movs	r1, #2
 80014fe:	0018      	movs	r0, r3
 8001500:	f001 f96b 	bl	80027da <HAL_GPIO_WritePin>
			break;
 8001504:	e051      	b.n	80015aa <display7SEG+0x23a>
		case 7:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8001506:	4b2c      	ldr	r3, [pc, #176]	@ (80015b8 <display7SEG+0x248>)
 8001508:	2201      	movs	r2, #1
 800150a:	2101      	movs	r1, #1
 800150c:	0018      	movs	r0, r3
 800150e:	f001 f964 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8001512:	2390      	movs	r3, #144	@ 0x90
 8001514:	05db      	lsls	r3, r3, #23
 8001516:	2201      	movs	r2, #1
 8001518:	2140      	movs	r1, #64	@ 0x40
 800151a:	0018      	movs	r0, r3
 800151c:	f001 f95d 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8001520:	2390      	movs	r3, #144	@ 0x90
 8001522:	05db      	lsls	r3, r3, #23
 8001524:	2201      	movs	r2, #1
 8001526:	2120      	movs	r1, #32
 8001528:	0018      	movs	r0, r3
 800152a:	f001 f956 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 800152e:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <display7SEG+0x24c>)
 8001530:	2200      	movs	r2, #0
 8001532:	2102      	movs	r1, #2
 8001534:	0018      	movs	r0, r3
 8001536:	f001 f950 	bl	80027da <HAL_GPIO_WritePin>
			break;
 800153a:	e036      	b.n	80015aa <display7SEG+0x23a>
		case 8:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <display7SEG+0x248>)
 800153e:	2200      	movs	r2, #0
 8001540:	2101      	movs	r1, #1
 8001542:	0018      	movs	r0, r3
 8001544:	f001 f949 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8001548:	2390      	movs	r3, #144	@ 0x90
 800154a:	05db      	lsls	r3, r3, #23
 800154c:	2200      	movs	r2, #0
 800154e:	2140      	movs	r1, #64	@ 0x40
 8001550:	0018      	movs	r0, r3
 8001552:	f001 f942 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8001556:	2390      	movs	r3, #144	@ 0x90
 8001558:	05db      	lsls	r3, r3, #23
 800155a:	2200      	movs	r2, #0
 800155c:	2120      	movs	r1, #32
 800155e:	0018      	movs	r0, r3
 8001560:	f001 f93b 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <display7SEG+0x24c>)
 8001566:	2201      	movs	r2, #1
 8001568:	2102      	movs	r1, #2
 800156a:	0018      	movs	r0, r3
 800156c:	f001 f935 	bl	80027da <HAL_GPIO_WritePin>
			break;
 8001570:	e01b      	b.n	80015aa <display7SEG+0x23a>
		case 9:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8001572:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <display7SEG+0x248>)
 8001574:	2201      	movs	r2, #1
 8001576:	2101      	movs	r1, #1
 8001578:	0018      	movs	r0, r3
 800157a:	f001 f92e 	bl	80027da <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800157e:	2390      	movs	r3, #144	@ 0x90
 8001580:	05db      	lsls	r3, r3, #23
 8001582:	2200      	movs	r2, #0
 8001584:	2140      	movs	r1, #64	@ 0x40
 8001586:	0018      	movs	r0, r3
 8001588:	f001 f927 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 800158c:	2390      	movs	r3, #144	@ 0x90
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	2200      	movs	r2, #0
 8001592:	2120      	movs	r1, #32
 8001594:	0018      	movs	r0, r3
 8001596:	f001 f920 	bl	80027da <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <display7SEG+0x24c>)
 800159c:	2201      	movs	r2, #1
 800159e:	2102      	movs	r1, #2
 80015a0:	0018      	movs	r0, r3
 80015a2:	f001 f91a 	bl	80027da <HAL_GPIO_WritePin>
			break;
 80015a6:	e000      	b.n	80015aa <display7SEG+0x23a>
		default:
			break;
 80015a8:	46c0      	nop			@ (mov r8, r8)
	}
}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b002      	add	sp, #8
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	08005ad0 	.word	0x08005ad0
 80015b8:	48001400 	.word	0x48001400
 80015bc:	48000400 	.word	0x48000400

080015c0 <updateClockBuffer>:
void updateClockBuffer(int num1, int num2){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	210a      	movs	r1, #10
 80015ce:	0018      	movs	r0, r3
 80015d0:	f7fe fe24 	bl	800021c <__divsi3>
 80015d4:	0003      	movs	r3, r0
 80015d6:	001a      	movs	r2, r3
 80015d8:	4b10      	ldr	r3, [pc, #64]	@ (800161c <updateClockBuffer+0x5c>)
 80015da:	601a      	str	r2, [r3, #0]
	led_buffer[1] = num1 % 10;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	210a      	movs	r1, #10
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7fe ff01 	bl	80003e8 <__aeabi_idivmod>
 80015e6:	000b      	movs	r3, r1
 80015e8:	001a      	movs	r2, r3
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <updateClockBuffer+0x5c>)
 80015ec:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	210a      	movs	r1, #10
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7fe fe12 	bl	800021c <__divsi3>
 80015f8:	0003      	movs	r3, r0
 80015fa:	001a      	movs	r2, r3
 80015fc:	4b07      	ldr	r3, [pc, #28]	@ (800161c <updateClockBuffer+0x5c>)
 80015fe:	609a      	str	r2, [r3, #8]
	led_buffer[3] = num2 % 10;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	210a      	movs	r1, #10
 8001604:	0018      	movs	r0, r3
 8001606:	f7fe feef 	bl	80003e8 <__aeabi_idivmod>
 800160a:	000b      	movs	r3, r1
 800160c:	001a      	movs	r2, r3
 800160e:	4b03      	ldr	r3, [pc, #12]	@ (800161c <updateClockBuffer+0x5c>)
 8001610:	60da      	str	r2, [r3, #12]
}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	46bd      	mov	sp, r7
 8001616:	b002      	add	sp, #8
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			@ (mov r8, r8)
 800161c:	200000bc 	.word	0x200000bc

08001620 <single_LED_off>:
void single_LED_off(){
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 8001624:	2380      	movs	r3, #128	@ 0x80
 8001626:	0159      	lsls	r1, r3, #5
 8001628:	2390      	movs	r3, #144	@ 0x90
 800162a:	05db      	lsls	r3, r3, #23
 800162c:	2201      	movs	r2, #1
 800162e:	0018      	movs	r0, r3
 8001630:	f001 f8d3 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 8001634:	2390      	movs	r3, #144	@ 0x90
 8001636:	05db      	lsls	r3, r3, #23
 8001638:	2201      	movs	r2, #1
 800163a:	2110      	movs	r1, #16
 800163c:	0018      	movs	r0, r3
 800163e:	f001 f8cc 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	0059      	lsls	r1, r3, #1
 8001646:	2390      	movs	r3, #144	@ 0x90
 8001648:	05db      	lsls	r3, r3, #23
 800164a:	2201      	movs	r2, #1
 800164c:	0018      	movs	r0, r3
 800164e:	f001 f8c4 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8001652:	2390      	movs	r3, #144	@ 0x90
 8001654:	05db      	lsls	r3, r3, #23
 8001656:	2201      	movs	r2, #1
 8001658:	2104      	movs	r1, #4
 800165a:	0018      	movs	r0, r3
 800165c:	f001 f8bd 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8001660:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <single_LED_off+0x60>)
 8001662:	2201      	movs	r2, #1
 8001664:	2120      	movs	r1, #32
 8001666:	0018      	movs	r0, r3
 8001668:	f001 f8b7 	bl	80027da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <single_LED_off+0x60>)
 800166e:	2201      	movs	r2, #1
 8001670:	2110      	movs	r1, #16
 8001672:	0018      	movs	r0, r3
 8001674:	f001 f8b1 	bl	80027da <HAL_GPIO_WritePin>
}
 8001678:	46c0      	nop			@ (mov r8, r8)
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			@ (mov r8, r8)
 8001680:	48000400 	.word	0x48000400

08001684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001688:	f000 fd3e 	bl	8002108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168c:	f000 f870 	bl	8001770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001690:	f000 f98c 	bl	80019ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8001694:	f000 f906 	bl	80018a4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001698:	f000 f8c4 	bl	8001824 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800169c:	f000 f956 	bl	800194c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80016a0:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <main+0xc4>)
 80016a2:	0018      	movs	r0, r3
 80016a4:	f002 faec 	bl	8003c80 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(&huart1, &data, 1);
 80016a8:	4928      	ldr	r1, [pc, #160]	@ (800174c <main+0xc8>)
 80016aa:	4b29      	ldr	r3, [pc, #164]	@ (8001750 <main+0xcc>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	0018      	movs	r0, r3
 80016b0:	f002 feee 	bl	8004490 <HAL_UART_Receive_IT>
  lcd_init();
 80016b4:	f7ff fd64 	bl	8001180 <lcd_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(fsm_auto_run, 10, 10);
 80016b8:	4b26      	ldr	r3, [pc, #152]	@ (8001754 <main+0xd0>)
 80016ba:	220a      	movs	r2, #10
 80016bc:	210a      	movs	r1, #10
 80016be:	0018      	movs	r0, r3
 80016c0:	f000 fa38 	bl	8001b34 <SCH_Add_Task>
  SCH_Add_Task(getKeyinput, 10, 20);
 80016c4:	4b24      	ldr	r3, [pc, #144]	@ (8001758 <main+0xd4>)
 80016c6:	2214      	movs	r2, #20
 80016c8:	210a      	movs	r1, #10
 80016ca:	0018      	movs	r0, r3
 80016cc:	f000 fa32 	bl	8001b34 <SCH_Add_Task>
  SCH_Add_Task(Scan7SEG, 10, 20);
 80016d0:	4b22      	ldr	r3, [pc, #136]	@ (800175c <main+0xd8>)
 80016d2:	2214      	movs	r2, #20
 80016d4:	210a      	movs	r1, #10
 80016d6:	0018      	movs	r0, r3
 80016d8:	f000 fa2c 	bl	8001b34 <SCH_Add_Task>
  SCH_Add_Task(count_1_second, 10, 1000);
 80016dc:	23fa      	movs	r3, #250	@ 0xfa
 80016de:	009a      	lsls	r2, r3, #2
 80016e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <main+0xdc>)
 80016e2:	210a      	movs	r1, #10
 80016e4:	0018      	movs	r0, r3
 80016e6:	f000 fa25 	bl	8001b34 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Task();
 80016ea:	f000 facd 	bl	8001c88 <SCH_Dispatch_Task>
	  if(flag == 1){
 80016ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001764 <main+0xe0>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d1f9      	bne.n	80016ea <main+0x66>
		  if(data == '1'){
 80016f6:	4b15      	ldr	r3, [pc, #84]	@ (800174c <main+0xc8>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b31      	cmp	r3, #49	@ 0x31
 80016fc:	d107      	bne.n	800170e <main+0x8a>
			  buttonFlag[0] = 1;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <main+0xe4>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <main+0xe8>)
 8001706:	2101      	movs	r1, #1
 8001708:	0018      	movs	r0, r3
 800170a:	f001 f883 	bl	8002814 <HAL_GPIO_TogglePin>
		  }
		  if(data == '2'){
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <main+0xc8>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b32      	cmp	r3, #50	@ 0x32
 8001714:	d107      	bne.n	8001726 <main+0xa2>
			  buttonFlag[1] = 1;
 8001716:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <main+0xe4>)
 8001718:	2201      	movs	r2, #1
 800171a:	605a      	str	r2, [r3, #4]
			  HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <main+0xe8>)
 800171e:	2101      	movs	r1, #1
 8001720:	0018      	movs	r0, r3
 8001722:	f001 f877 	bl	8002814 <HAL_GPIO_TogglePin>
		  }
		  if(data == '3'){
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <main+0xc8>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b33      	cmp	r3, #51	@ 0x33
 800172c:	d107      	bne.n	800173e <main+0xba>
			  buttonFlag[2] = 1;
 800172e:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <main+0xe4>)
 8001730:	2201      	movs	r2, #1
 8001732:	609a      	str	r2, [r3, #8]
			  HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8001734:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <main+0xe8>)
 8001736:	2101      	movs	r1, #1
 8001738:	0018      	movs	r0, r3
 800173a:	f001 f86b 	bl	8002814 <HAL_GPIO_TogglePin>
		  }
		  flag = 0;
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <main+0xe0>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
	  SCH_Dispatch_Task();
 8001744:	e7d1      	b.n	80016ea <main+0x66>
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	20000124 	.word	0x20000124
 800174c:	200001f4 	.word	0x200001f4
 8001750:	2000016c 	.word	0x2000016c
 8001754:	080004b9 	.word	0x080004b9
 8001758:	080003f5 	.word	0x080003f5
 800175c:	080012b9 	.word	0x080012b9
 8001760:	08000a8d 	.word	0x08000a8d
 8001764:	200001f5 	.word	0x200001f5
 8001768:	20000094 	.word	0x20000094
 800176c:	48000400 	.word	0x48000400

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b095      	sub	sp, #84	@ 0x54
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	2420      	movs	r4, #32
 8001778:	193b      	adds	r3, r7, r4
 800177a:	0018      	movs	r0, r3
 800177c:	2330      	movs	r3, #48	@ 0x30
 800177e:	001a      	movs	r2, r3
 8001780:	2100      	movs	r1, #0
 8001782:	f004 f8af 	bl	80058e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001786:	2310      	movs	r3, #16
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	0018      	movs	r0, r3
 800178c:	2310      	movs	r3, #16
 800178e:	001a      	movs	r2, r3
 8001790:	2100      	movs	r1, #0
 8001792:	f004 f8a7 	bl	80058e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001796:	003b      	movs	r3, r7
 8001798:	0018      	movs	r0, r3
 800179a:	2310      	movs	r3, #16
 800179c:	001a      	movs	r2, r3
 800179e:	2100      	movs	r1, #0
 80017a0:	f004 f8a0 	bl	80058e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017a4:	0021      	movs	r1, r4
 80017a6:	187b      	adds	r3, r7, r1
 80017a8:	2202      	movs	r2, #2
 80017aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ac:	187b      	adds	r3, r7, r1
 80017ae:	2201      	movs	r2, #1
 80017b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b2:	187b      	adds	r3, r7, r1
 80017b4:	2210      	movs	r2, #16
 80017b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	2200      	movs	r2, #0
 80017bc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017be:	187b      	adds	r3, r7, r1
 80017c0:	0018      	movs	r0, r3
 80017c2:	f001 fce1 	bl	8003188 <HAL_RCC_OscConfig>
 80017c6:	1e03      	subs	r3, r0, #0
 80017c8:	d001      	beq.n	80017ce <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80017ca:	f000 f9ad 	bl	8001b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ce:	2110      	movs	r1, #16
 80017d0:	187b      	adds	r3, r7, r1
 80017d2:	2207      	movs	r2, #7
 80017d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	2200      	movs	r2, #0
 80017da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017e8:	187b      	adds	r3, r7, r1
 80017ea:	2100      	movs	r1, #0
 80017ec:	0018      	movs	r0, r3
 80017ee:	f001 ffe5 	bl	80037bc <HAL_RCC_ClockConfig>
 80017f2:	1e03      	subs	r3, r0, #0
 80017f4:	d001      	beq.n	80017fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80017f6:	f000 f997 	bl	8001b28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80017fa:	003b      	movs	r3, r7
 80017fc:	2221      	movs	r2, #33	@ 0x21
 80017fe:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001800:	003b      	movs	r3, r7
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001806:	003b      	movs	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180c:	003b      	movs	r3, r7
 800180e:	0018      	movs	r0, r3
 8001810:	f002 f918 	bl	8003a44 <HAL_RCCEx_PeriphCLKConfig>
 8001814:	1e03      	subs	r3, r0, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001818:	f000 f986 	bl	8001b28 <Error_Handler>
  }
}
 800181c:	46c0      	nop			@ (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b015      	add	sp, #84	@ 0x54
 8001822:	bd90      	pop	{r4, r7, pc}

08001824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <MX_I2C1_Init+0x74>)
 800182a:	4a1c      	ldr	r2, [pc, #112]	@ (800189c <MX_I2C1_Init+0x78>)
 800182c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800182e:	4b1a      	ldr	r3, [pc, #104]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001830:	4a1b      	ldr	r2, [pc, #108]	@ (80018a0 <MX_I2C1_Init+0x7c>)
 8001832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001834:	4b18      	ldr	r3, [pc, #96]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800183a:	4b17      	ldr	r3, [pc, #92]	@ (8001898 <MX_I2C1_Init+0x74>)
 800183c:	2201      	movs	r2, #1
 800183e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001840:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001846:	4b14      	ldr	r3, [pc, #80]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800184c:	4b12      	ldr	r3, [pc, #72]	@ (8001898 <MX_I2C1_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001852:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001858:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <MX_I2C1_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800185e:	4b0e      	ldr	r3, [pc, #56]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001860:	0018      	movs	r0, r3
 8001862:	f000 fff3 	bl	800284c <HAL_I2C_Init>
 8001866:	1e03      	subs	r3, r0, #0
 8001868:	d001      	beq.n	800186e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800186a:	f000 f95d 	bl	8001b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800186e:	4b0a      	ldr	r3, [pc, #40]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001870:	2100      	movs	r1, #0
 8001872:	0018      	movs	r0, r3
 8001874:	f001 fbf0 	bl	8003058 <HAL_I2CEx_ConfigAnalogFilter>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d001      	beq.n	8001880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800187c:	f000 f954 	bl	8001b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <MX_I2C1_Init+0x74>)
 8001882:	2100      	movs	r1, #0
 8001884:	0018      	movs	r0, r3
 8001886:	f001 fc33 	bl	80030f0 <HAL_I2CEx_ConfigDigitalFilter>
 800188a:	1e03      	subs	r3, r0, #0
 800188c:	d001      	beq.n	8001892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800188e:	f000 f94b 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001892:	46c0      	nop			@ (mov r8, r8)
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200000d0 	.word	0x200000d0
 800189c:	40005400 	.word	0x40005400
 80018a0:	2000090e 	.word	0x2000090e

080018a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018aa:	2308      	movs	r3, #8
 80018ac:	18fb      	adds	r3, r7, r3
 80018ae:	0018      	movs	r0, r3
 80018b0:	2310      	movs	r3, #16
 80018b2:	001a      	movs	r2, r3
 80018b4:	2100      	movs	r1, #0
 80018b6:	f004 f815 	bl	80058e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ba:	003b      	movs	r3, r7
 80018bc:	0018      	movs	r0, r3
 80018be:	2308      	movs	r3, #8
 80018c0:	001a      	movs	r2, r3
 80018c2:	2100      	movs	r1, #0
 80018c4:	f004 f80e 	bl	80058e4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001944 <MX_TIM2_Init+0xa0>)
 80018ca:	2280      	movs	r2, #128	@ 0x80
 80018cc:	05d2      	lsls	r2, r2, #23
 80018ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80018d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <MX_TIM2_Init+0xa0>)
 80018d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001948 <MX_TIM2_Init+0xa4>)
 80018d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <MX_TIM2_Init+0xa0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80018dc:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <MX_TIM2_Init+0xa0>)
 80018de:	2209      	movs	r2, #9
 80018e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e2:	4b18      	ldr	r3, [pc, #96]	@ (8001944 <MX_TIM2_Init+0xa0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e8:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <MX_TIM2_Init+0xa0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <MX_TIM2_Init+0xa0>)
 80018f0:	0018      	movs	r0, r3
 80018f2:	f002 f975 	bl	8003be0 <HAL_TIM_Base_Init>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80018fa:	f000 f915 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fe:	2108      	movs	r1, #8
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2280      	movs	r2, #128	@ 0x80
 8001904:	0152      	lsls	r2, r2, #5
 8001906:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001908:	187a      	adds	r2, r7, r1
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <MX_TIM2_Init+0xa0>)
 800190c:	0011      	movs	r1, r2
 800190e:	0018      	movs	r0, r3
 8001910:	f002 faf0 	bl	8003ef4 <HAL_TIM_ConfigClockSource>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d001      	beq.n	800191c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001918:	f000 f906 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800191c:	003b      	movs	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001922:	003b      	movs	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001928:	003a      	movs	r2, r7
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <MX_TIM2_Init+0xa0>)
 800192c:	0011      	movs	r1, r2
 800192e:	0018      	movs	r0, r3
 8001930:	f002 fcf2 	bl	8004318 <HAL_TIMEx_MasterConfigSynchronization>
 8001934:	1e03      	subs	r3, r0, #0
 8001936:	d001      	beq.n	800193c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001938:	f000 f8f6 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800193c:	46c0      	nop			@ (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b006      	add	sp, #24
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000124 	.word	0x20000124
 8001948:	00001f3f 	.word	0x00001f3f

0800194c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001950:	4b14      	ldr	r3, [pc, #80]	@ (80019a4 <MX_USART1_UART_Init+0x58>)
 8001952:	4a15      	ldr	r2, [pc, #84]	@ (80019a8 <MX_USART1_UART_Init+0x5c>)
 8001954:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001956:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <MX_USART1_UART_Init+0x58>)
 8001958:	2296      	movs	r2, #150	@ 0x96
 800195a:	0192      	lsls	r2, r2, #6
 800195c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <MX_USART1_UART_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b0f      	ldr	r3, [pc, #60]	@ (80019a4 <MX_USART1_UART_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <MX_USART1_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <MX_USART1_UART_Init+0x58>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <MX_USART1_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <MX_USART1_UART_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <MX_USART1_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <MX_USART1_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <MX_USART1_UART_Init+0x58>)
 8001990:	0018      	movs	r0, r3
 8001992:	f002 fd29 	bl	80043e8 <HAL_UART_Init>
 8001996:	1e03      	subs	r3, r0, #0
 8001998:	d001      	beq.n	800199e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800199a:	f000 f8c5 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800199e:	46c0      	nop			@ (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	2000016c 	.word	0x2000016c
 80019a8:	40013800 	.word	0x40013800

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	240c      	movs	r4, #12
 80019b4:	193b      	adds	r3, r7, r4
 80019b6:	0018      	movs	r0, r3
 80019b8:	2314      	movs	r3, #20
 80019ba:	001a      	movs	r2, r3
 80019bc:	2100      	movs	r1, #0
 80019be:	f003 ff91 	bl	80058e4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019c2:	4b44      	ldr	r3, [pc, #272]	@ (8001ad4 <MX_GPIO_Init+0x128>)
 80019c4:	695a      	ldr	r2, [r3, #20]
 80019c6:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <MX_GPIO_Init+0x128>)
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	03c9      	lsls	r1, r1, #15
 80019cc:	430a      	orrs	r2, r1
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <MX_GPIO_Init+0x128>)
 80019d2:	695a      	ldr	r2, [r3, #20]
 80019d4:	2380      	movs	r3, #128	@ 0x80
 80019d6:	03db      	lsls	r3, r3, #15
 80019d8:	4013      	ands	r3, r2
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad4 <MX_GPIO_Init+0x128>)
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad4 <MX_GPIO_Init+0x128>)
 80019e4:	2180      	movs	r1, #128	@ 0x80
 80019e6:	0289      	lsls	r1, r1, #10
 80019e8:	430a      	orrs	r2, r1
 80019ea:	615a      	str	r2, [r3, #20]
 80019ec:	4b39      	ldr	r3, [pc, #228]	@ (8001ad4 <MX_GPIO_Init+0x128>)
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	029b      	lsls	r3, r3, #10
 80019f4:	4013      	ands	r3, r2
 80019f6:	607b      	str	r3, [r7, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	4b36      	ldr	r3, [pc, #216]	@ (8001ad4 <MX_GPIO_Init+0x128>)
 80019fc:	695a      	ldr	r2, [r3, #20]
 80019fe:	4b35      	ldr	r3, [pc, #212]	@ (8001ad4 <MX_GPIO_Init+0x128>)
 8001a00:	2180      	movs	r1, #128	@ 0x80
 8001a02:	02c9      	lsls	r1, r1, #11
 8001a04:	430a      	orrs	r2, r1
 8001a06:	615a      	str	r2, [r3, #20]
 8001a08:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <MX_GPIO_Init+0x128>)
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	2380      	movs	r3, #128	@ 0x80
 8001a0e:	02db      	lsls	r3, r3, #11
 8001a10:	4013      	ands	r3, r2
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, A_Pin|EN1_Pin, GPIO_PIN_RESET);
 8001a16:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <MX_GPIO_Init+0x12c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	0018      	movs	r0, r3
 8001a1e:	f000 fedc 	bl	80027da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|R1_Pin|Y0_Pin|C_Pin
 8001a22:	492e      	ldr	r1, [pc, #184]	@ (8001adc <MX_GPIO_Init+0x130>)
 8001a24:	2390      	movs	r3, #144	@ 0x90
 8001a26:	05db      	lsls	r3, r3, #23
 8001a28:	2200      	movs	r2, #0
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 fed5 	bl	80027da <HAL_GPIO_WritePin>
                          |B_Pin|G0_Pin|EN3_Pin|R0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_DEBUG_Pin|D_Pin|EN2_Pin|G1_Pin
 8001a30:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae0 <MX_GPIO_Init+0x134>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	213b      	movs	r1, #59	@ 0x3b
 8001a36:	0018      	movs	r0, r3
 8001a38:	f000 fecf 	bl	80027da <HAL_GPIO_WritePin>
                          |Y1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A_Pin EN1_Pin */
  GPIO_InitStruct.Pin = A_Pin|EN1_Pin;
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	2203      	movs	r2, #3
 8001a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a42:	193b      	adds	r3, r7, r4
 8001a44:	2201      	movs	r2, #1
 8001a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	193b      	adds	r3, r7, r4
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	193b      	adds	r3, r7, r4
 8001a50:	2200      	movs	r2, #0
 8001a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a54:	193b      	adds	r3, r7, r4
 8001a56:	4a20      	ldr	r2, [pc, #128]	@ (8001ad8 <MX_GPIO_Init+0x12c>)
 8001a58:	0019      	movs	r1, r3
 8001a5a:	0010      	movs	r0, r2
 8001a5c:	f000 fd38 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin R1_Pin Y0_Pin C_Pin
                           B_Pin G0_Pin EN3_Pin R0_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|R1_Pin|Y0_Pin|C_Pin
 8001a60:	193b      	adds	r3, r7, r4
 8001a62:	4a1e      	ldr	r2, [pc, #120]	@ (8001adc <MX_GPIO_Init+0x130>)
 8001a64:	601a      	str	r2, [r3, #0]
                          |B_Pin|G0_Pin|EN3_Pin|R0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	193b      	adds	r3, r7, r4
 8001a68:	2201      	movs	r2, #1
 8001a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	193b      	adds	r3, r7, r4
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a78:	193a      	adds	r2, r7, r4
 8001a7a:	2390      	movs	r3, #144	@ 0x90
 8001a7c:	05db      	lsls	r3, r3, #23
 8001a7e:	0011      	movs	r1, r2
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 fd25 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	228a      	movs	r2, #138	@ 0x8a
 8001a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8c:	193b      	adds	r3, r7, r4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	2201      	movs	r2, #1
 8001a96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a98:	193a      	adds	r2, r7, r4
 8001a9a:	2390      	movs	r3, #144	@ 0x90
 8001a9c:	05db      	lsls	r3, r3, #23
 8001a9e:	0011      	movs	r1, r2
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	f000 fd15 	bl	80024d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_DEBUG_Pin D_Pin EN2_Pin G1_Pin
                           Y1_Pin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|D_Pin|EN2_Pin|G1_Pin
 8001aa6:	0021      	movs	r1, r4
 8001aa8:	187b      	adds	r3, r7, r1
 8001aaa:	223b      	movs	r2, #59	@ 0x3b
 8001aac:	601a      	str	r2, [r3, #0]
                          |Y1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	187b      	adds	r3, r7, r1
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <MX_GPIO_Init+0x134>)
 8001ac4:	0019      	movs	r1, r3
 8001ac6:	0010      	movs	r0, r2
 8001ac8:	f000 fd02 	bl	80024d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001acc:	46c0      	nop			@ (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b009      	add	sp, #36	@ 0x24
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48001400 	.word	0x48001400
 8001adc:	00001975 	.word	0x00001975
 8001ae0:	48000400 	.word	0x48000400

08001ae4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, &data, 1);
 8001aec:	4906      	ldr	r1, [pc, #24]	@ (8001b08 <HAL_UART_RxCpltCallback+0x24>)
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <HAL_UART_RxCpltCallback+0x28>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	0018      	movs	r0, r3
 8001af4:	f002 fccc 	bl	8004490 <HAL_UART_Receive_IT>
	flag = 1;
 8001af8:	4b05      	ldr	r3, [pc, #20]	@ (8001b10 <HAL_UART_RxCpltCallback+0x2c>)
 8001afa:	2201      	movs	r2, #1
 8001afc:	701a      	strb	r2, [r3, #0]
}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	46bd      	mov	sp, r7
 8001b02:	b002      	add	sp, #8
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	200001f4 	.word	0x200001f4
 8001b0c:	2000016c 	.word	0x2000016c
 8001b10:	200001f5 	.word	0x200001f5

08001b14 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim2){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001b1c:	f000 f8a2 	bl	8001c64 <SCH_Update>
}
 8001b20:	46c0      	nop			@ (mov r8, r8)
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b002      	add	sp, #8
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b30:	46c0      	nop			@ (mov r8, r8)
 8001b32:	e7fd      	b.n	8001b30 <Error_Handler+0x8>

08001b34 <SCH_Add_Task>:
	list.head = NULL;
	list.tail = NULL;
    list.numTask = 0;
}

void SCH_Add_Task(void (*function)(), uint32_t Delay, uint32_t Period){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	sTask * newTask = (sTask *) malloc (sizeof(sTask));
 8001b40:	2014      	movs	r0, #20
 8001b42:	f003 fe09 	bl	8005758 <malloc>
 8001b46:	0003      	movs	r3, r0
 8001b48:	613b      	str	r3, [r7, #16]
	if (newTask == NULL)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d100      	bne.n	8001b52 <SCH_Add_Task+0x1e>
 8001b50:	e081      	b.n	8001c56 <SCH_Add_Task+0x122>
		return;
	newTask->pTask = function;
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	601a      	str	r2, [r3, #0]
	newTask->Delay = Delay/10; // scale for TIM2 10ms run
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	210a      	movs	r1, #10
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7fe fad3 	bl	8000108 <__udivsi3>
 8001b62:	0003      	movs	r3, r0
 8001b64:	001a      	movs	r2, r3
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	605a      	str	r2, [r3, #4]
	newTask->Period = Period/10;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	210a      	movs	r1, #10
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f7fe faca 	bl	8000108 <__udivsi3>
 8001b74:	0003      	movs	r3, r0
 8001b76:	001a      	movs	r2, r3
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]
	newTask->next = NULL;
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
	newTask->prev = NULL;
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]

	if(list.head == NULL){
 8001b88:	4b35      	ldr	r3, [pc, #212]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d106      	bne.n	8001b9e <SCH_Add_Task+0x6a>
		list.head = newTask;
 8001b90:	4b33      	ldr	r3, [pc, #204]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	601a      	str	r2, [r3, #0]
		list.tail = newTask;
 8001b96:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	e054      	b.n	8001c48 <SCH_Add_Task+0x114>
	}
	else{
		sTask * cur = list.head;
 8001b9e:	4b30      	ldr	r3, [pc, #192]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	617b      	str	r3, [r7, #20]
		//--------- FINDING LOCATE FOR NEWTASK-----------
		while(cur != NULL && newTask->Delay >= cur->Delay){
 8001ba4:	e009      	b.n	8001bba <SCH_Add_Task+0x86>
			newTask->Delay = newTask->Delay - cur->Delay;
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	1ad2      	subs	r2, r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	605a      	str	r2, [r3, #4]
			cur = cur->next;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	617b      	str	r3, [r7, #20]
		while(cur != NULL && newTask->Delay >= cur->Delay){
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <SCH_Add_Task+0x98>
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d2ec      	bcs.n	8001ba6 <SCH_Add_Task+0x72>
		}
		if(cur == list.head){ // Add To First List
 8001bcc:	4b24      	ldr	r3, [pc, #144]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d114      	bne.n	8001c00 <SCH_Add_Task+0xcc>
			newTask->next = list.head;
 8001bd6:	4b22      	ldr	r3, [pc, #136]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	60da      	str	r2, [r3, #12]
			list.head->prev = newTask;
 8001bde:	4b20      	ldr	r3, [pc, #128]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	611a      	str	r2, [r3, #16]
			list.head->Delay = list.head->Delay - newTask->Delay;
 8001be6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	1a8a      	subs	r2, r1, r2
 8001bf6:	605a      	str	r2, [r3, #4]
			list.head = newTask;
 8001bf8:	4b19      	ldr	r3, [pc, #100]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e023      	b.n	8001c48 <SCH_Add_Task+0x114>
		}
		else if(cur == NULL){ // Add to Last List -- Add After Cur
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10b      	bne.n	8001c1e <SCH_Add_Task+0xea>
			newTask->prev = list.tail;
 8001c06:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	611a      	str	r2, [r3, #16]
			list.tail->next = newTask;
 8001c0e:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	60da      	str	r2, [r3, #12]
			list.tail = newTask;
 8001c16:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	e014      	b.n	8001c48 <SCH_Add_Task+0x114>
		}
		else{ // Add to Mid list -- Add before Cur
			newTask->next = cur;
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	60da      	str	r2, [r3, #12]
			newTask->prev = cur->prev;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	611a      	str	r2, [r3, #16]
			cur->prev->next = newTask;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	60da      	str	r2, [r3, #12]
			cur->prev = newTask;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	611a      	str	r2, [r3, #16]
			cur->Delay = cur->Delay - newTask->Delay;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	1ad2      	subs	r2, r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	605a      	str	r2, [r3, #4]
		}
	}
	list.numTask++;
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001c4a:	7a1b      	ldrb	r3, [r3, #8]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <SCH_Add_Task+0x12c>)
 8001c52:	721a      	strb	r2, [r3, #8]
 8001c54:	e000      	b.n	8001c58 <SCH_Add_Task+0x124>
		return;
 8001c56:	46c0      	nop			@ (mov r8, r8)
}
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b006      	add	sp, #24
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	200001f8 	.word	0x200001f8

08001c64 <SCH_Update>:

void SCH_Update(void){ // TIM involked every 10ms
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	if (list.head == NULL) {
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <SCH_Update+0x20>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <SCH_Update+0x18>
		return;
	}
	list.head->Delay--;
 8001c70:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <SCH_Update+0x20>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	3a01      	subs	r2, #1
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	e000      	b.n	8001c7e <SCH_Update+0x1a>
		return;
 8001c7c:	46c0      	nop			@ (mov r8, r8)
}
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	200001f8 	.word	0x200001f8

08001c88 <SCH_Dispatch_Task>:
void SCH_Dispatch_Task(void){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
	if (list.head == NULL) {
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d04 <SCH_Dispatch_Task+0x7c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d031      	beq.n	8001cfa <SCH_Dispatch_Task+0x72>
		return;
	}
	if(list.head->Delay <= 0){
 8001c96:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <SCH_Dispatch_Task+0x7c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d12d      	bne.n	8001cfc <SCH_Dispatch_Task+0x74>
		list.head->pTask();
 8001ca0:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <SCH_Dispatch_Task+0x7c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4798      	blx	r3
		sTask * temp = list.head;
 8001ca8:	4b16      	ldr	r3, [pc, #88]	@ (8001d04 <SCH_Dispatch_Task+0x7c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	607b      	str	r3, [r7, #4]
		list.head = list.head->next;
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <SCH_Dispatch_Task+0x7c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <SCH_Dispatch_Task+0x7c>)
 8001cb6:	601a      	str	r2, [r3, #0]
		if(temp->Period > 0){
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d011      	beq.n	8001ce4 <SCH_Dispatch_Task+0x5c>
			SCH_Add_Task(temp->pTask, temp->Period * 10, temp->Period * 10);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6818      	ldr	r0, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	0013      	movs	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	189b      	adds	r3, r3, r2
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	0019      	movs	r1, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	0013      	movs	r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	189b      	adds	r3, r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	001a      	movs	r2, r3
 8001ce0:	f7ff ff28 	bl	8001b34 <SCH_Add_Task>
		}
		free(temp);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f003 fd40 	bl	800576c <free>
		list.numTask--;
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <SCH_Dispatch_Task+0x7c>)
 8001cee:	7a1b      	ldrb	r3, [r3, #8]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <SCH_Dispatch_Task+0x7c>)
 8001cf6:	721a      	strb	r2, [r3, #8]
 8001cf8:	e000      	b.n	8001cfc <SCH_Dispatch_Task+0x74>
		return;
 8001cfa:	46c0      	nop			@ (mov r8, r8)
	}
}
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	200001f8 	.word	0x200001f8

08001d08 <SCH_Delete_Task>:

uint8_t SCH_Delete_Task(void (*function)()){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	if(list.numTask == 0)
 8001d10:	4b3a      	ldr	r3, [pc, #232]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d12:	7a1b      	ldrb	r3, [r3, #8]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <SCH_Delete_Task+0x14>
		return 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	e06a      	b.n	8001df2 <SCH_Delete_Task+0xea>
	if(list.numTask == 1){
 8001d1c:	4b37      	ldr	r3, [pc, #220]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d1e:	7a1b      	ldrb	r3, [r3, #8]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d112      	bne.n	8001d4a <SCH_Delete_Task+0x42>
		sTask * temp = list.head;
 8001d24:	4b35      	ldr	r3, [pc, #212]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60bb      	str	r3, [r7, #8]
		list.head = list.tail = NULL;
 8001d2a:	4b34      	ldr	r3, [pc, #208]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	4b32      	ldr	r3, [pc, #200]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4b31      	ldr	r3, [pc, #196]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d36:	601a      	str	r2, [r3, #0]
		list.numTask = 0;
 8001d38:	4b30      	ldr	r3, [pc, #192]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	721a      	strb	r2, [r3, #8]
		free(temp);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f003 fd13 	bl	800576c <free>
		return 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e053      	b.n	8001df2 <SCH_Delete_Task+0xea>
	}
	sTask * temp = list.head;
 8001d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 8001d50:	e04b      	b.n	8001dea <SCH_Delete_Task+0xe2>
		if(temp->pTask == function){
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d143      	bne.n	8001de4 <SCH_Delete_Task+0xdc>
			if(temp == list.head){ // Delete head
 8001d5c:	4b27      	ldr	r3, [pc, #156]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d111      	bne.n	8001d8a <SCH_Delete_Task+0x82>
				temp->next->prev = NULL;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
				list.head = temp->next;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	4b22      	ldr	r3, [pc, #136]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d74:	601a      	str	r2, [r3, #0]
				list.head->Delay = list.head->Delay + temp->Delay;
 8001d76:	4b21      	ldr	r3, [pc, #132]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	188a      	adds	r2, r1, r2
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	e020      	b.n	8001dcc <SCH_Delete_Task+0xc4>
			}
			else if (temp == list.tail){ // Delete tail
 8001d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d108      	bne.n	8001da6 <SCH_Delete_Task+0x9e>
				temp->prev->next = NULL;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
				list.tail = temp->prev;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001da2:	605a      	str	r2, [r3, #4]
 8001da4:	e012      	b.n	8001dcc <SCH_Delete_Task+0xc4>
			}
			else{
				temp->prev->next = temp->next;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	691b      	ldr	r3, [r3, #16]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	68d2      	ldr	r2, [r2, #12]
 8001dae:	60da      	str	r2, [r3, #12]
				temp->next->prev = temp->prev;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	6912      	ldr	r2, [r2, #16]
 8001db8:	611a      	str	r2, [r3, #16]
				temp->next->Delay = temp->next->Delay + temp->Delay;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	188a      	adds	r2, r1, r2
 8001dca:	605a      	str	r2, [r3, #4]
			}
			list.numTask--;
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001dce:	7a1b      	ldrb	r3, [r3, #8]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <SCH_Delete_Task+0xf4>)
 8001dd6:	721a      	strb	r2, [r3, #8]
			free(temp);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f003 fcc6 	bl	800576c <free>
			return 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e006      	b.n	8001df2 <SCH_Delete_Task+0xea>
		}
		temp = temp->next;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	60fb      	str	r3, [r7, #12]
	while(temp != NULL){
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1b0      	bne.n	8001d52 <SCH_Delete_Task+0x4a>
	}
	return 0;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b004      	add	sp, #16
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			@ (mov r8, r8)
 8001dfc:	200001f8 	.word	0x200001f8

08001e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4b0f      	ldr	r3, [pc, #60]	@ (8001e44 <HAL_MspInit+0x44>)
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <HAL_MspInit+0x44>)
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	619a      	str	r2, [r3, #24]
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <HAL_MspInit+0x44>)
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2201      	movs	r2, #1
 8001e18:	4013      	ands	r3, r2
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <HAL_MspInit+0x44>)
 8001e20:	69da      	ldr	r2, [r3, #28]
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <HAL_MspInit+0x44>)
 8001e24:	2180      	movs	r1, #128	@ 0x80
 8001e26:	0549      	lsls	r1, r1, #21
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	61da      	str	r2, [r3, #28]
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_MspInit+0x44>)
 8001e2e:	69da      	ldr	r2, [r3, #28]
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	055b      	lsls	r3, r3, #21
 8001e34:	4013      	ands	r3, r2
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b002      	add	sp, #8
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b08b      	sub	sp, #44	@ 0x2c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	2414      	movs	r4, #20
 8001e52:	193b      	adds	r3, r7, r4
 8001e54:	0018      	movs	r0, r3
 8001e56:	2314      	movs	r3, #20
 8001e58:	001a      	movs	r2, r3
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	f003 fd42 	bl	80058e4 <memset>
  if(hi2c->Instance==I2C1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a1d      	ldr	r2, [pc, #116]	@ (8001edc <HAL_I2C_MspInit+0x94>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d133      	bne.n	8001ed2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <HAL_I2C_MspInit+0x98>)
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <HAL_I2C_MspInit+0x98>)
 8001e70:	2180      	movs	r1, #128	@ 0x80
 8001e72:	0289      	lsls	r1, r1, #10
 8001e74:	430a      	orrs	r2, r1
 8001e76:	615a      	str	r2, [r3, #20]
 8001e78:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <HAL_I2C_MspInit+0x98>)
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	029b      	lsls	r3, r3, #10
 8001e80:	4013      	ands	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8001e86:	193b      	adds	r3, r7, r4
 8001e88:	22c0      	movs	r2, #192	@ 0xc0
 8001e8a:	00d2      	lsls	r2, r2, #3
 8001e8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e8e:	0021      	movs	r1, r4
 8001e90:	187b      	adds	r3, r7, r1
 8001e92:	2212      	movs	r2, #18
 8001e94:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	187b      	adds	r3, r7, r1
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	2204      	movs	r2, #4
 8001ea6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	187a      	adds	r2, r7, r1
 8001eaa:	2390      	movs	r3, #144	@ 0x90
 8001eac:	05db      	lsls	r3, r3, #23
 8001eae:	0011      	movs	r1, r2
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f000 fb0d 	bl	80024d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_I2C_MspInit+0x98>)
 8001eb8:	69da      	ldr	r2, [r3, #28]
 8001eba:	4b09      	ldr	r3, [pc, #36]	@ (8001ee0 <HAL_I2C_MspInit+0x98>)
 8001ebc:	2180      	movs	r1, #128	@ 0x80
 8001ebe:	0389      	lsls	r1, r1, #14
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	61da      	str	r2, [r3, #28]
 8001ec4:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_I2C_MspInit+0x98>)
 8001ec6:	69da      	ldr	r2, [r3, #28]
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	039b      	lsls	r3, r3, #14
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b00b      	add	sp, #44	@ 0x2c
 8001ed8:	bd90      	pop	{r4, r7, pc}
 8001eda:	46c0      	nop			@ (mov r8, r8)
 8001edc:	40005400 	.word	0x40005400
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2380      	movs	r3, #128	@ 0x80
 8001ef2:	05db      	lsls	r3, r3, #23
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d113      	bne.n	8001f20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_TIM_Base_MspInit+0x44>)
 8001efa:	69da      	ldr	r2, [r3, #28]
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <HAL_TIM_Base_MspInit+0x44>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	430a      	orrs	r2, r1
 8001f02:	61da      	str	r2, [r3, #28]
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_TIM_Base_MspInit+0x44>)
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2100      	movs	r1, #0
 8001f14:	200f      	movs	r0, #15
 8001f16:	f000 fa2b 	bl	8002370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f1a:	200f      	movs	r0, #15
 8001f1c:	f000 fa3d 	bl	800239a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001f20:	46c0      	nop			@ (mov r8, r8)
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b004      	add	sp, #16
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000

08001f2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f2c:	b590      	push	{r4, r7, lr}
 8001f2e:	b08b      	sub	sp, #44	@ 0x2c
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	2414      	movs	r4, #20
 8001f36:	193b      	adds	r3, r7, r4
 8001f38:	0018      	movs	r0, r3
 8001f3a:	2314      	movs	r3, #20
 8001f3c:	001a      	movs	r2, r3
 8001f3e:	2100      	movs	r1, #0
 8001f40:	f003 fcd0 	bl	80058e4 <memset>
  if(huart->Instance==USART1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a20      	ldr	r2, [pc, #128]	@ (8001fcc <HAL_UART_MspInit+0xa0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d139      	bne.n	8001fc2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f4e:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <HAL_UART_MspInit+0xa4>)
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd0 <HAL_UART_MspInit+0xa4>)
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	01c9      	lsls	r1, r1, #7
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	619a      	str	r2, [r3, #24]
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <HAL_UART_MspInit+0xa4>)
 8001f5e:	699a      	ldr	r2, [r3, #24]
 8001f60:	2380      	movs	r3, #128	@ 0x80
 8001f62:	01db      	lsls	r3, r3, #7
 8001f64:	4013      	ands	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6a:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <HAL_UART_MspInit+0xa4>)
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	4b18      	ldr	r3, [pc, #96]	@ (8001fd0 <HAL_UART_MspInit+0xa4>)
 8001f70:	2180      	movs	r1, #128	@ 0x80
 8001f72:	02c9      	lsls	r1, r1, #11
 8001f74:	430a      	orrs	r2, r1
 8001f76:	615a      	str	r2, [r3, #20]
 8001f78:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <HAL_UART_MspInit+0xa4>)
 8001f7a:	695a      	ldr	r2, [r3, #20]
 8001f7c:	2380      	movs	r3, #128	@ 0x80
 8001f7e:	02db      	lsls	r3, r3, #11
 8001f80:	4013      	ands	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f86:	0021      	movs	r1, r4
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	22c0      	movs	r2, #192	@ 0xc0
 8001f8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2202      	movs	r2, #2
 8001f92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa6:	187b      	adds	r3, r7, r1
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd4 <HAL_UART_MspInit+0xa8>)
 8001faa:	0019      	movs	r1, r3
 8001fac:	0010      	movs	r0, r2
 8001fae:	f000 fa8f 	bl	80024d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	201b      	movs	r0, #27
 8001fb8:	f000 f9da 	bl	8002370 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fbc:	201b      	movs	r0, #27
 8001fbe:	f000 f9ec 	bl	800239a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	b00b      	add	sp, #44	@ 0x2c
 8001fc8:	bd90      	pop	{r4, r7, pc}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	40013800 	.word	0x40013800
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	48000400 	.word	0x48000400

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fdc:	46c0      	nop			@ (mov r8, r8)
 8001fde:	e7fd      	b.n	8001fdc <NMI_Handler+0x4>

08001fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe4:	46c0      	nop			@ (mov r8, r8)
 8001fe6:	e7fd      	b.n	8001fe4 <HardFault_Handler+0x4>

08001fe8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fec:	46c0      	nop			@ (mov r8, r8)
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002000:	f000 f8ca 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002004:	46c0      	nop			@ (mov r8, r8)
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002010:	4b03      	ldr	r3, [pc, #12]	@ (8002020 <TIM2_IRQHandler+0x14>)
 8002012:	0018      	movs	r0, r3
 8002014:	f001 fe80 	bl	8003d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002018:	46c0      	nop			@ (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	20000124 	.word	0x20000124

08002024 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002028:	4b03      	ldr	r3, [pc, #12]	@ (8002038 <USART1_IRQHandler+0x14>)
 800202a:	0018      	movs	r0, r3
 800202c:	f002 fa88 	bl	8004540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002030:	46c0      	nop			@ (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	2000016c 	.word	0x2000016c

0800203c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002044:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <_sbrk+0x5c>)
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <_sbrk+0x60>)
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <_sbrk+0x64>)
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	18d3      	adds	r3, r2, r3
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	d207      	bcs.n	800207c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800206c:	f003 fc54 	bl	8005918 <__errno>
 8002070:	0003      	movs	r3, r0
 8002072:	220c      	movs	r2, #12
 8002074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002076:	2301      	movs	r3, #1
 8002078:	425b      	negs	r3, r3
 800207a:	e009      	b.n	8002090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800207c:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002082:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	18d2      	adds	r2, r2, r3
 800208a:	4b05      	ldr	r3, [pc, #20]	@ (80020a0 <_sbrk+0x64>)
 800208c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b006      	add	sp, #24
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20001000 	.word	0x20001000
 800209c:	00000400 	.word	0x00000400
 80020a0:	20000204 	.word	0x20000204
 80020a4:	20000358 	.word	0x20000358

080020a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80020ac:	46c0      	nop			@ (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020b4:	480d      	ldr	r0, [pc, #52]	@ (80020ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020b8:	f7ff fff6 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020bc:	480c      	ldr	r0, [pc, #48]	@ (80020f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80020be:	490d      	ldr	r1, [pc, #52]	@ (80020f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020c0:	4a0d      	ldr	r2, [pc, #52]	@ (80020f8 <LoopForever+0xe>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c4:	e002      	b.n	80020cc <LoopCopyDataInit>

080020c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ca:	3304      	adds	r3, #4

080020cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d0:	d3f9      	bcc.n	80020c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d2:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80020d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002100 <LoopForever+0x16>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d8:	e001      	b.n	80020de <LoopFillZerobss>

080020da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020dc:	3204      	adds	r2, #4

080020de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e0:	d3fb      	bcc.n	80020da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020e2:	f003 fc1f 	bl	8005924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020e6:	f7ff facd 	bl	8001684 <main>

080020ea <LoopForever>:

LoopForever:
    b LoopForever
 80020ea:	e7fe      	b.n	80020ea <LoopForever>
  ldr   r0, =_estack
 80020ec:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80020f8:	08005b38 	.word	0x08005b38
  ldr r2, =_sbss
 80020fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002100:	20000354 	.word	0x20000354

08002104 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC1_IRQHandler>
	...

08002108 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800210c:	4b07      	ldr	r3, [pc, #28]	@ (800212c <HAL_Init+0x24>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <HAL_Init+0x24>)
 8002112:	2110      	movs	r1, #16
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002118:	2000      	movs	r0, #0
 800211a:	f000 f809 	bl	8002130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800211e:	f7ff fe6f 	bl	8001e00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			@ (mov r8, r8)
 800212c:	40022000 	.word	0x40022000

08002130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002138:	4b14      	ldr	r3, [pc, #80]	@ (800218c <HAL_InitTick+0x5c>)
 800213a:	681c      	ldr	r4, [r3, #0]
 800213c:	4b14      	ldr	r3, [pc, #80]	@ (8002190 <HAL_InitTick+0x60>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	0019      	movs	r1, r3
 8002142:	23fa      	movs	r3, #250	@ 0xfa
 8002144:	0098      	lsls	r0, r3, #2
 8002146:	f7fd ffdf 	bl	8000108 <__udivsi3>
 800214a:	0003      	movs	r3, r0
 800214c:	0019      	movs	r1, r3
 800214e:	0020      	movs	r0, r4
 8002150:	f7fd ffda 	bl	8000108 <__udivsi3>
 8002154:	0003      	movs	r3, r0
 8002156:	0018      	movs	r0, r3
 8002158:	f000 f92f 	bl	80023ba <HAL_SYSTICK_Config>
 800215c:	1e03      	subs	r3, r0, #0
 800215e:	d001      	beq.n	8002164 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e00f      	b.n	8002184 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d80b      	bhi.n	8002182 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	2301      	movs	r3, #1
 800216e:	425b      	negs	r3, r3
 8002170:	2200      	movs	r2, #0
 8002172:	0018      	movs	r0, r3
 8002174:	f000 f8fc 	bl	8002370 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_InitTick+0x64>)
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b003      	add	sp, #12
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	2000001c 	.word	0x2000001c
 8002190:	20000024 	.word	0x20000024
 8002194:	20000020 	.word	0x20000020

08002198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b05      	ldr	r3, [pc, #20]	@ (80021b4 <HAL_IncTick+0x1c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	001a      	movs	r2, r3
 80021a2:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <HAL_IncTick+0x20>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	18d2      	adds	r2, r2, r3
 80021a8:	4b03      	ldr	r3, [pc, #12]	@ (80021b8 <HAL_IncTick+0x20>)
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	46c0      	nop			@ (mov r8, r8)
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			@ (mov r8, r8)
 80021b4:	20000024 	.word	0x20000024
 80021b8:	20000208 	.word	0x20000208

080021bc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  return uwTick;
 80021c0:	4b02      	ldr	r3, [pc, #8]	@ (80021cc <HAL_GetTick+0x10>)
 80021c2:	681b      	ldr	r3, [r3, #0]
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	46c0      	nop			@ (mov r8, r8)
 80021cc:	20000208 	.word	0x20000208

080021d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff fff0 	bl	80021bc <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3301      	adds	r3, #1
 80021e8:	d005      	beq.n	80021f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <HAL_Delay+0x44>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	001a      	movs	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	189b      	adds	r3, r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	f7ff ffe0 	bl	80021bc <HAL_GetTick>
 80021fc:	0002      	movs	r2, r0
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	429a      	cmp	r2, r3
 8002206:	d8f7      	bhi.n	80021f8 <HAL_Delay+0x28>
  {
  }
}
 8002208:	46c0      	nop			@ (mov r8, r8)
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b004      	add	sp, #16
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	20000024 	.word	0x20000024

08002218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	0002      	movs	r2, r0
 8002220:	1dfb      	adds	r3, r7, #7
 8002222:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002224:	1dfb      	adds	r3, r7, #7
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b7f      	cmp	r3, #127	@ 0x7f
 800222a:	d809      	bhi.n	8002240 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222c:	1dfb      	adds	r3, r7, #7
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	001a      	movs	r2, r3
 8002232:	231f      	movs	r3, #31
 8002234:	401a      	ands	r2, r3
 8002236:	4b04      	ldr	r3, [pc, #16]	@ (8002248 <__NVIC_EnableIRQ+0x30>)
 8002238:	2101      	movs	r1, #1
 800223a:	4091      	lsls	r1, r2
 800223c:	000a      	movs	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
  }
}
 8002240:	46c0      	nop			@ (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	0002      	movs	r2, r0
 8002254:	6039      	str	r1, [r7, #0]
 8002256:	1dfb      	adds	r3, r7, #7
 8002258:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800225a:	1dfb      	adds	r3, r7, #7
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002260:	d828      	bhi.n	80022b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002262:	4a2f      	ldr	r2, [pc, #188]	@ (8002320 <__NVIC_SetPriority+0xd4>)
 8002264:	1dfb      	adds	r3, r7, #7
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b25b      	sxtb	r3, r3
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	33c0      	adds	r3, #192	@ 0xc0
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	589b      	ldr	r3, [r3, r2]
 8002272:	1dfa      	adds	r2, r7, #7
 8002274:	7812      	ldrb	r2, [r2, #0]
 8002276:	0011      	movs	r1, r2
 8002278:	2203      	movs	r2, #3
 800227a:	400a      	ands	r2, r1
 800227c:	00d2      	lsls	r2, r2, #3
 800227e:	21ff      	movs	r1, #255	@ 0xff
 8002280:	4091      	lsls	r1, r2
 8002282:	000a      	movs	r2, r1
 8002284:	43d2      	mvns	r2, r2
 8002286:	401a      	ands	r2, r3
 8002288:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	019b      	lsls	r3, r3, #6
 800228e:	22ff      	movs	r2, #255	@ 0xff
 8002290:	401a      	ands	r2, r3
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	0018      	movs	r0, r3
 8002298:	2303      	movs	r3, #3
 800229a:	4003      	ands	r3, r0
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022a0:	481f      	ldr	r0, [pc, #124]	@ (8002320 <__NVIC_SetPriority+0xd4>)
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b25b      	sxtb	r3, r3
 80022a8:	089b      	lsrs	r3, r3, #2
 80022aa:	430a      	orrs	r2, r1
 80022ac:	33c0      	adds	r3, #192	@ 0xc0
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80022b2:	e031      	b.n	8002318 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002324 <__NVIC_SetPriority+0xd8>)
 80022b6:	1dfb      	adds	r3, r7, #7
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	0019      	movs	r1, r3
 80022bc:	230f      	movs	r3, #15
 80022be:	400b      	ands	r3, r1
 80022c0:	3b08      	subs	r3, #8
 80022c2:	089b      	lsrs	r3, r3, #2
 80022c4:	3306      	adds	r3, #6
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	18d3      	adds	r3, r2, r3
 80022ca:	3304      	adds	r3, #4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1dfa      	adds	r2, r7, #7
 80022d0:	7812      	ldrb	r2, [r2, #0]
 80022d2:	0011      	movs	r1, r2
 80022d4:	2203      	movs	r2, #3
 80022d6:	400a      	ands	r2, r1
 80022d8:	00d2      	lsls	r2, r2, #3
 80022da:	21ff      	movs	r1, #255	@ 0xff
 80022dc:	4091      	lsls	r1, r2
 80022de:	000a      	movs	r2, r1
 80022e0:	43d2      	mvns	r2, r2
 80022e2:	401a      	ands	r2, r3
 80022e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	019b      	lsls	r3, r3, #6
 80022ea:	22ff      	movs	r2, #255	@ 0xff
 80022ec:	401a      	ands	r2, r3
 80022ee:	1dfb      	adds	r3, r7, #7
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	0018      	movs	r0, r3
 80022f4:	2303      	movs	r3, #3
 80022f6:	4003      	ands	r3, r0
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022fc:	4809      	ldr	r0, [pc, #36]	@ (8002324 <__NVIC_SetPriority+0xd8>)
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	001c      	movs	r4, r3
 8002304:	230f      	movs	r3, #15
 8002306:	4023      	ands	r3, r4
 8002308:	3b08      	subs	r3, #8
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	430a      	orrs	r2, r1
 800230e:	3306      	adds	r3, #6
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	18c3      	adds	r3, r0, r3
 8002314:	3304      	adds	r3, #4
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	46c0      	nop			@ (mov r8, r8)
 800231a:	46bd      	mov	sp, r7
 800231c:	b003      	add	sp, #12
 800231e:	bd90      	pop	{r4, r7, pc}
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	1e5a      	subs	r2, r3, #1
 8002334:	2380      	movs	r3, #128	@ 0x80
 8002336:	045b      	lsls	r3, r3, #17
 8002338:	429a      	cmp	r2, r3
 800233a:	d301      	bcc.n	8002340 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233c:	2301      	movs	r3, #1
 800233e:	e010      	b.n	8002362 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002340:	4b0a      	ldr	r3, [pc, #40]	@ (800236c <SysTick_Config+0x44>)
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	3a01      	subs	r2, #1
 8002346:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002348:	2301      	movs	r3, #1
 800234a:	425b      	negs	r3, r3
 800234c:	2103      	movs	r1, #3
 800234e:	0018      	movs	r0, r3
 8002350:	f7ff ff7c 	bl	800224c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002354:	4b05      	ldr	r3, [pc, #20]	@ (800236c <SysTick_Config+0x44>)
 8002356:	2200      	movs	r2, #0
 8002358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800235a:	4b04      	ldr	r3, [pc, #16]	@ (800236c <SysTick_Config+0x44>)
 800235c:	2207      	movs	r2, #7
 800235e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002360:	2300      	movs	r3, #0
}
 8002362:	0018      	movs	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	b002      	add	sp, #8
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			@ (mov r8, r8)
 800236c:	e000e010 	.word	0xe000e010

08002370 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	210f      	movs	r1, #15
 800237c:	187b      	adds	r3, r7, r1
 800237e:	1c02      	adds	r2, r0, #0
 8002380:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	187b      	adds	r3, r7, r1
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b25b      	sxtb	r3, r3
 800238a:	0011      	movs	r1, r2
 800238c:	0018      	movs	r0, r3
 800238e:	f7ff ff5d 	bl	800224c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8002392:	46c0      	nop			@ (mov r8, r8)
 8002394:	46bd      	mov	sp, r7
 8002396:	b004      	add	sp, #16
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
 80023a0:	0002      	movs	r2, r0
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	b25b      	sxtb	r3, r3
 80023ac:	0018      	movs	r0, r3
 80023ae:	f7ff ff33 	bl	8002218 <__NVIC_EnableIRQ>
}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b002      	add	sp, #8
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7ff ffaf 	bl	8002328 <SysTick_Config>
 80023ca:	0003      	movs	r3, r0
}
 80023cc:	0018      	movs	r0, r3
 80023ce:	46bd      	mov	sp, r7
 80023d0:	b002      	add	sp, #8
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2221      	movs	r2, #33	@ 0x21
 80023e0:	5c9b      	ldrb	r3, [r3, r2]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d008      	beq.n	80023fa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2204      	movs	r2, #4
 80023ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2220      	movs	r2, #32
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e020      	b.n	800243c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	210e      	movs	r1, #14
 8002406:	438a      	bics	r2, r1
 8002408:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	438a      	bics	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002422:	2101      	movs	r1, #1
 8002424:	4091      	lsls	r1, r2
 8002426:	000a      	movs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2221      	movs	r2, #33	@ 0x21
 800242e:	2101      	movs	r1, #1
 8002430:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	2100      	movs	r1, #0
 8002438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b002      	add	sp, #8
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800244c:	210f      	movs	r1, #15
 800244e:	187b      	adds	r3, r7, r1
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2221      	movs	r2, #33	@ 0x21
 8002458:	5c9b      	ldrb	r3, [r3, r2]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d006      	beq.n	800246e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2204      	movs	r2, #4
 8002464:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002466:	187b      	adds	r3, r7, r1
 8002468:	2201      	movs	r2, #1
 800246a:	701a      	strb	r2, [r3, #0]
 800246c:	e028      	b.n	80024c0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	210e      	movs	r1, #14
 800247a:	438a      	bics	r2, r1
 800247c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2101      	movs	r1, #1
 800248a:	438a      	bics	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002496:	2101      	movs	r1, #1
 8002498:	4091      	lsls	r1, r2
 800249a:	000a      	movs	r2, r1
 800249c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2221      	movs	r2, #33	@ 0x21
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2220      	movs	r2, #32
 80024aa:	2100      	movs	r1, #0
 80024ac:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	0010      	movs	r0, r2
 80024be:	4798      	blx	r3
    }
  }
  return status;
 80024c0:	230f      	movs	r3, #15
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	781b      	ldrb	r3, [r3, #0]
}
 80024c6:	0018      	movs	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b004      	add	sp, #16
 80024cc:	bd80      	pop	{r7, pc}
	...

080024d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024de:	e149      	b.n	8002774 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2101      	movs	r1, #1
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4091      	lsls	r1, r2
 80024ea:	000a      	movs	r2, r1
 80024ec:	4013      	ands	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d100      	bne.n	80024f8 <HAL_GPIO_Init+0x28>
 80024f6:	e13a      	b.n	800276e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2203      	movs	r2, #3
 80024fe:	4013      	ands	r3, r2
 8002500:	2b01      	cmp	r3, #1
 8002502:	d005      	beq.n	8002510 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2203      	movs	r2, #3
 800250a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800250c:	2b02      	cmp	r3, #2
 800250e:	d130      	bne.n	8002572 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	2203      	movs	r2, #3
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	43da      	mvns	r2, r3
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	005b      	lsls	r3, r3, #1
 8002530:	409a      	lsls	r2, r3
 8002532:	0013      	movs	r3, r2
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002546:	2201      	movs	r2, #1
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	409a      	lsls	r2, r3
 800254c:	0013      	movs	r3, r2
 800254e:	43da      	mvns	r2, r3
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	2201      	movs	r2, #1
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
 8002564:	0013      	movs	r3, r2
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	4313      	orrs	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	2203      	movs	r2, #3
 8002578:	4013      	ands	r3, r2
 800257a:	2b03      	cmp	r3, #3
 800257c:	d017      	beq.n	80025ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	2203      	movs	r2, #3
 800258a:	409a      	lsls	r2, r3
 800258c:	0013      	movs	r3, r2
 800258e:	43da      	mvns	r2, r3
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	409a      	lsls	r2, r3
 80025a0:	0013      	movs	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2203      	movs	r2, #3
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d123      	bne.n	8002602 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	08da      	lsrs	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3208      	adds	r2, #8
 80025c2:	0092      	lsls	r2, r2, #2
 80025c4:	58d3      	ldr	r3, [r2, r3]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2207      	movs	r2, #7
 80025cc:	4013      	ands	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	409a      	lsls	r2, r3
 80025d4:	0013      	movs	r3, r2
 80025d6:	43da      	mvns	r2, r3
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4013      	ands	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	2107      	movs	r1, #7
 80025e6:	400b      	ands	r3, r1
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	409a      	lsls	r2, r3
 80025ec:	0013      	movs	r3, r2
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	0092      	lsls	r2, r2, #2
 80025fe:	6939      	ldr	r1, [r7, #16]
 8002600:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	2203      	movs	r2, #3
 800260e:	409a      	lsls	r2, r3
 8002610:	0013      	movs	r3, r2
 8002612:	43da      	mvns	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2203      	movs	r2, #3
 8002620:	401a      	ands	r2, r3
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	409a      	lsls	r2, r3
 8002628:	0013      	movs	r3, r2
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	23c0      	movs	r3, #192	@ 0xc0
 800263c:	029b      	lsls	r3, r3, #10
 800263e:	4013      	ands	r3, r2
 8002640:	d100      	bne.n	8002644 <HAL_GPIO_Init+0x174>
 8002642:	e094      	b.n	800276e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002644:	4b51      	ldr	r3, [pc, #324]	@ (800278c <HAL_GPIO_Init+0x2bc>)
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	4b50      	ldr	r3, [pc, #320]	@ (800278c <HAL_GPIO_Init+0x2bc>)
 800264a:	2101      	movs	r1, #1
 800264c:	430a      	orrs	r2, r1
 800264e:	619a      	str	r2, [r3, #24]
 8002650:	4b4e      	ldr	r3, [pc, #312]	@ (800278c <HAL_GPIO_Init+0x2bc>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	2201      	movs	r2, #1
 8002656:	4013      	ands	r3, r2
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800265c:	4a4c      	ldr	r2, [pc, #304]	@ (8002790 <HAL_GPIO_Init+0x2c0>)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	089b      	lsrs	r3, r3, #2
 8002662:	3302      	adds	r3, #2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	589b      	ldr	r3, [r3, r2]
 8002668:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2203      	movs	r2, #3
 800266e:	4013      	ands	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	220f      	movs	r2, #15
 8002674:	409a      	lsls	r2, r3
 8002676:	0013      	movs	r3, r2
 8002678:	43da      	mvns	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	2390      	movs	r3, #144	@ 0x90
 8002684:	05db      	lsls	r3, r3, #23
 8002686:	429a      	cmp	r2, r3
 8002688:	d00d      	beq.n	80026a6 <HAL_GPIO_Init+0x1d6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a41      	ldr	r2, [pc, #260]	@ (8002794 <HAL_GPIO_Init+0x2c4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x1d2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a40      	ldr	r2, [pc, #256]	@ (8002798 <HAL_GPIO_Init+0x2c8>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_GPIO_Init+0x1ce>
 800269a:	2302      	movs	r3, #2
 800269c:	e004      	b.n	80026a8 <HAL_GPIO_Init+0x1d8>
 800269e:	2305      	movs	r3, #5
 80026a0:	e002      	b.n	80026a8 <HAL_GPIO_Init+0x1d8>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <HAL_GPIO_Init+0x1d8>
 80026a6:	2300      	movs	r3, #0
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	2103      	movs	r1, #3
 80026ac:	400a      	ands	r2, r1
 80026ae:	0092      	lsls	r2, r2, #2
 80026b0:	4093      	lsls	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026b8:	4935      	ldr	r1, [pc, #212]	@ (8002790 <HAL_GPIO_Init+0x2c0>)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	3302      	adds	r3, #2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026c6:	4b35      	ldr	r3, [pc, #212]	@ (800279c <HAL_GPIO_Init+0x2cc>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	43da      	mvns	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	2380      	movs	r3, #128	@ 0x80
 80026dc:	035b      	lsls	r3, r3, #13
 80026de:	4013      	ands	r3, r2
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026ea:	4b2c      	ldr	r3, [pc, #176]	@ (800279c <HAL_GPIO_Init+0x2cc>)
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026f0:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <HAL_GPIO_Init+0x2cc>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	43da      	mvns	r2, r3
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	039b      	lsls	r3, r3, #14
 8002708:	4013      	ands	r3, r2
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4313      	orrs	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002714:	4b21      	ldr	r3, [pc, #132]	@ (800279c <HAL_GPIO_Init+0x2cc>)
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800271a:	4b20      	ldr	r3, [pc, #128]	@ (800279c <HAL_GPIO_Init+0x2cc>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43da      	mvns	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4013      	ands	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	2380      	movs	r3, #128	@ 0x80
 8002730:	029b      	lsls	r3, r3, #10
 8002732:	4013      	ands	r3, r2
 8002734:	d003      	beq.n	800273e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800273e:	4b17      	ldr	r3, [pc, #92]	@ (800279c <HAL_GPIO_Init+0x2cc>)
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002744:	4b15      	ldr	r3, [pc, #84]	@ (800279c <HAL_GPIO_Init+0x2cc>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	43da      	mvns	r2, r3
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	025b      	lsls	r3, r3, #9
 800275c:	4013      	ands	r3, r2
 800275e:	d003      	beq.n	8002768 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002768:	4b0c      	ldr	r3, [pc, #48]	@ (800279c <HAL_GPIO_Init+0x2cc>)
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3301      	adds	r3, #1
 8002772:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	40da      	lsrs	r2, r3
 800277c:	1e13      	subs	r3, r2, #0
 800277e:	d000      	beq.n	8002782 <HAL_GPIO_Init+0x2b2>
 8002780:	e6ae      	b.n	80024e0 <HAL_GPIO_Init+0x10>
  } 
}
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	46c0      	nop			@ (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b006      	add	sp, #24
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	40010000 	.word	0x40010000
 8002794:	48000400 	.word	0x48000400
 8002798:	48000800 	.word	0x48000800
 800279c:	40010400 	.word	0x40010400

080027a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	000a      	movs	r2, r1
 80027aa:	1cbb      	adds	r3, r7, #2
 80027ac:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	1cba      	adds	r2, r7, #2
 80027b4:	8812      	ldrh	r2, [r2, #0]
 80027b6:	4013      	ands	r3, r2
 80027b8:	d004      	beq.n	80027c4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80027ba:	230f      	movs	r3, #15
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e003      	b.n	80027cc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027c4:	230f      	movs	r3, #15
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80027cc:	230f      	movs	r3, #15
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	781b      	ldrb	r3, [r3, #0]
  }
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b004      	add	sp, #16
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	0008      	movs	r0, r1
 80027e4:	0011      	movs	r1, r2
 80027e6:	1cbb      	adds	r3, r7, #2
 80027e8:	1c02      	adds	r2, r0, #0
 80027ea:	801a      	strh	r2, [r3, #0]
 80027ec:	1c7b      	adds	r3, r7, #1
 80027ee:	1c0a      	adds	r2, r1, #0
 80027f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027f2:	1c7b      	adds	r3, r7, #1
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027fa:	1cbb      	adds	r3, r7, #2
 80027fc:	881a      	ldrh	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002802:	e003      	b.n	800280c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002804:	1cbb      	adds	r3, r7, #2
 8002806:	881a      	ldrh	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800280c:	46c0      	nop			@ (mov r8, r8)
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}

08002814 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	000a      	movs	r2, r1
 800281e:	1cbb      	adds	r3, r7, #2
 8002820:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002828:	1cbb      	adds	r3, r7, #2
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	4013      	ands	r3, r2
 8002830:	041a      	lsls	r2, r3, #16
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	43db      	mvns	r3, r3
 8002836:	1cb9      	adds	r1, r7, #2
 8002838:	8809      	ldrh	r1, [r1, #0]
 800283a:	400b      	ands	r3, r1
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	46c0      	nop			@ (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	b004      	add	sp, #16
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e08f      	b.n	800297e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2241      	movs	r2, #65	@ 0x41
 8002862:	5c9b      	ldrb	r3, [r3, r2]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d107      	bne.n	800287a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2240      	movs	r2, #64	@ 0x40
 800286e:	2100      	movs	r1, #0
 8002870:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	0018      	movs	r0, r3
 8002876:	f7ff fae7 	bl	8001e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2241      	movs	r2, #65	@ 0x41
 800287e:	2124      	movs	r1, #36	@ 0x24
 8002880:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	438a      	bics	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	493b      	ldr	r1, [pc, #236]	@ (8002988 <HAL_I2C_Init+0x13c>)
 800289c:	400a      	ands	r2, r1
 800289e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4938      	ldr	r1, [pc, #224]	@ (800298c <HAL_I2C_Init+0x140>)
 80028ac:	400a      	ands	r2, r1
 80028ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d108      	bne.n	80028ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2180      	movs	r1, #128	@ 0x80
 80028c2:	0209      	lsls	r1, r1, #8
 80028c4:	430a      	orrs	r2, r1
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e007      	b.n	80028da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2184      	movs	r1, #132	@ 0x84
 80028d4:	0209      	lsls	r1, r1, #8
 80028d6:	430a      	orrs	r2, r1
 80028d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d109      	bne.n	80028f6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2180      	movs	r1, #128	@ 0x80
 80028ee:	0109      	lsls	r1, r1, #4
 80028f0:	430a      	orrs	r2, r1
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	e007      	b.n	8002906 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4923      	ldr	r1, [pc, #140]	@ (8002990 <HAL_I2C_Init+0x144>)
 8002902:	400a      	ands	r2, r1
 8002904:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4920      	ldr	r1, [pc, #128]	@ (8002994 <HAL_I2C_Init+0x148>)
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	491a      	ldr	r1, [pc, #104]	@ (800298c <HAL_I2C_Init+0x140>)
 8002922:	400a      	ands	r2, r1
 8002924:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691a      	ldr	r2, [r3, #16]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	431a      	orrs	r2, r3
 8002930:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	430a      	orrs	r2, r1
 800293e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	69d9      	ldr	r1, [r3, #28]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1a      	ldr	r2, [r3, #32]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	430a      	orrs	r2, r1
 800294e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2101      	movs	r1, #1
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2241      	movs	r2, #65	@ 0x41
 800296a:	2120      	movs	r1, #32
 800296c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2242      	movs	r2, #66	@ 0x42
 8002978:	2100      	movs	r1, #0
 800297a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	0018      	movs	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	b002      	add	sp, #8
 8002984:	bd80      	pop	{r7, pc}
 8002986:	46c0      	nop			@ (mov r8, r8)
 8002988:	f0ffffff 	.word	0xf0ffffff
 800298c:	ffff7fff 	.word	0xffff7fff
 8002990:	fffff7ff 	.word	0xfffff7ff
 8002994:	02008000 	.word	0x02008000

08002998 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002998:	b590      	push	{r4, r7, lr}
 800299a:	b089      	sub	sp, #36	@ 0x24
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	0008      	movs	r0, r1
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	0019      	movs	r1, r3
 80029a6:	230a      	movs	r3, #10
 80029a8:	18fb      	adds	r3, r7, r3
 80029aa:	1c02      	adds	r2, r0, #0
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	2308      	movs	r3, #8
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	1c0a      	adds	r2, r1, #0
 80029b4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2241      	movs	r2, #65	@ 0x41
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d000      	beq.n	80029c4 <HAL_I2C_Master_Transmit+0x2c>
 80029c2:	e10a      	b.n	8002bda <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2240      	movs	r2, #64	@ 0x40
 80029c8:	5c9b      	ldrb	r3, [r3, r2]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_I2C_Master_Transmit+0x3a>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e104      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2240      	movs	r2, #64	@ 0x40
 80029d6:	2101      	movs	r1, #1
 80029d8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029da:	f7ff fbef 	bl	80021bc <HAL_GetTick>
 80029de:	0003      	movs	r3, r0
 80029e0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029e2:	2380      	movs	r3, #128	@ 0x80
 80029e4:	0219      	lsls	r1, r3, #8
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2319      	movs	r3, #25
 80029ee:	2201      	movs	r2, #1
 80029f0:	f000 f91e 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 80029f4:	1e03      	subs	r3, r0, #0
 80029f6:	d001      	beq.n	80029fc <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e0ef      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2241      	movs	r2, #65	@ 0x41
 8002a00:	2121      	movs	r1, #33	@ 0x21
 8002a02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2242      	movs	r2, #66	@ 0x42
 8002a08:	2110      	movs	r1, #16
 8002a0a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2208      	movs	r2, #8
 8002a1c:	18ba      	adds	r2, r7, r2
 8002a1e:	8812      	ldrh	r2, [r2, #0]
 8002a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	2bff      	cmp	r3, #255	@ 0xff
 8002a30:	d906      	bls.n	8002a40 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	22ff      	movs	r2, #255	@ 0xff
 8002a36:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	045b      	lsls	r3, r3, #17
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e007      	b.n	8002a50 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002a4a:	2380      	movs	r3, #128	@ 0x80
 8002a4c:	049b      	lsls	r3, r3, #18
 8002a4e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d027      	beq.n	8002aa8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5c:	781a      	ldrb	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a68:	1c5a      	adds	r2, r3, #1
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	697c      	ldr	r4, [r7, #20]
 8002a94:	230a      	movs	r3, #10
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	8819      	ldrh	r1, [r3, #0]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	4b51      	ldr	r3, [pc, #324]	@ (8002be4 <HAL_I2C_Master_Transmit+0x24c>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	0023      	movs	r3, r4
 8002aa2:	f000 fa9f 	bl	8002fe4 <I2C_TransferConfig>
 8002aa6:	e06f      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	697c      	ldr	r4, [r7, #20]
 8002ab0:	230a      	movs	r3, #10
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	8819      	ldrh	r1, [r3, #0]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	@ (8002be4 <HAL_I2C_Master_Transmit+0x24c>)
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	0023      	movs	r3, r4
 8002abe:	f000 fa91 	bl	8002fe4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ac2:	e061      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f908 	bl	8002ce0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad0:	1e03      	subs	r3, r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e081      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d03a      	beq.n	8002b88 <HAL_I2C_Master_Transmit+0x1f0>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d136      	bne.n	8002b88 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	0013      	movs	r3, r2
 8002b24:	2200      	movs	r2, #0
 8002b26:	2180      	movs	r1, #128	@ 0x80
 8002b28:	f000 f882 	bl	8002c30 <I2C_WaitOnFlagUntilTimeout>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e053      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2bff      	cmp	r3, #255	@ 0xff
 8002b3c:	d911      	bls.n	8002b62 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	22ff      	movs	r2, #255	@ 0xff
 8002b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	2380      	movs	r3, #128	@ 0x80
 8002b4c:	045c      	lsls	r4, r3, #17
 8002b4e:	230a      	movs	r3, #10
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	8819      	ldrh	r1, [r3, #0]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	2300      	movs	r3, #0
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	0023      	movs	r3, r4
 8002b5c:	f000 fa42 	bl	8002fe4 <I2C_TransferConfig>
 8002b60:	e012      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	2380      	movs	r3, #128	@ 0x80
 8002b74:	049c      	lsls	r4, r3, #18
 8002b76:	230a      	movs	r3, #10
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	8819      	ldrh	r1, [r3, #0]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	0023      	movs	r3, r4
 8002b84:	f000 fa2e 	bl	8002fe4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d198      	bne.n	8002ac4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f000 f8e7 	bl	8002d6c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b9e:	1e03      	subs	r3, r0, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e01a      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2220      	movs	r2, #32
 8002bac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	490b      	ldr	r1, [pc, #44]	@ (8002be8 <HAL_I2C_Master_Transmit+0x250>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2241      	movs	r2, #65	@ 0x41
 8002bc2:	2120      	movs	r1, #32
 8002bc4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2242      	movs	r2, #66	@ 0x42
 8002bca:	2100      	movs	r1, #0
 8002bcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2240      	movs	r2, #64	@ 0x40
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
  }
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b007      	add	sp, #28
 8002be2:	bd90      	pop	{r4, r7, pc}
 8002be4:	80002000 	.word	0x80002000
 8002be8:	fe00e800 	.word	0xfe00e800

08002bec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d103      	bne.n	8002c0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2200      	movs	r2, #0
 8002c08:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2201      	movs	r2, #1
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d007      	beq.n	8002c28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2101      	movs	r1, #1
 8002c24:	430a      	orrs	r2, r1
 8002c26:	619a      	str	r2, [r3, #24]
  }
}
 8002c28:	46c0      	nop			@ (mov r8, r8)
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	1dfb      	adds	r3, r7, #7
 8002c3e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c40:	e03a      	b.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c42:	69ba      	ldr	r2, [r7, #24]
 8002c44:	6839      	ldr	r1, [r7, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 f8d3 	bl	8002df4 <I2C_IsErrorOccurred>
 8002c4e:	1e03      	subs	r3, r0, #0
 8002c50:	d001      	beq.n	8002c56 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e040      	b.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	d02d      	beq.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5c:	f7ff faae 	bl	80021bc <HAL_GetTick>
 8002c60:	0002      	movs	r2, r0
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d302      	bcc.n	8002c72 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d122      	bne.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	425a      	negs	r2, r3
 8002c82:	4153      	adcs	r3, r2
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	001a      	movs	r2, r3
 8002c88:	1dfb      	adds	r3, r7, #7
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d113      	bne.n	8002cb8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c94:	2220      	movs	r2, #32
 8002c96:	431a      	orrs	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2241      	movs	r2, #65	@ 0x41
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2242      	movs	r2, #66	@ 0x42
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2240      	movs	r2, #64	@ 0x40
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e00f      	b.n	8002cd8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	425a      	negs	r2, r3
 8002cc8:	4153      	adcs	r3, r2
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	001a      	movs	r2, r3
 8002cce:	1dfb      	adds	r3, r7, #7
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d0b5      	beq.n	8002c42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	0018      	movs	r0, r3
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b004      	add	sp, #16
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cec:	e032      	b.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f000 f87d 	bl	8002df4 <I2C_IsErrorOccurred>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d001      	beq.n	8002d02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e030      	b.n	8002d64 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	3301      	adds	r3, #1
 8002d06:	d025      	beq.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d08:	f7ff fa58 	bl	80021bc <HAL_GetTick>
 8002d0c:	0002      	movs	r2, r0
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d302      	bcc.n	8002d1e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d11a      	bne.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	2202      	movs	r2, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d013      	beq.n	8002d54 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d30:	2220      	movs	r2, #32
 8002d32:	431a      	orrs	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2241      	movs	r2, #65	@ 0x41
 8002d3c:	2120      	movs	r1, #32
 8002d3e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2242      	movs	r2, #66	@ 0x42
 8002d44:	2100      	movs	r1, #0
 8002d46:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2240      	movs	r2, #64	@ 0x40
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e007      	b.n	8002d64 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d1c5      	bne.n	8002cee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b004      	add	sp, #16
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d78:	e02f      	b.n	8002dda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	0018      	movs	r0, r3
 8002d82:	f000 f837 	bl	8002df4 <I2C_IsErrorOccurred>
 8002d86:	1e03      	subs	r3, r0, #0
 8002d88:	d001      	beq.n	8002d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e02d      	b.n	8002dea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d8e:	f7ff fa15 	bl	80021bc <HAL_GetTick>
 8002d92:	0002      	movs	r2, r0
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d302      	bcc.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11a      	bne.n	8002dda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2220      	movs	r2, #32
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d013      	beq.n	8002dda <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	2220      	movs	r2, #32
 8002db8:	431a      	orrs	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2241      	movs	r2, #65	@ 0x41
 8002dc2:	2120      	movs	r1, #32
 8002dc4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2242      	movs	r2, #66	@ 0x42
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2240      	movs	r2, #64	@ 0x40
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e007      	b.n	8002dea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	2220      	movs	r2, #32
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d1c8      	bne.n	8002d7a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	0018      	movs	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b004      	add	sp, #16
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	@ 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e00:	2327      	movs	r3, #39	@ 0x27
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	d100      	bne.n	8002e22 <I2C_IsErrorOccurred+0x2e>
 8002e20:	e079      	b.n	8002f16 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2210      	movs	r2, #16
 8002e28:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e2a:	e057      	b.n	8002edc <I2C_IsErrorOccurred+0xe8>
 8002e2c:	2227      	movs	r2, #39	@ 0x27
 8002e2e:	18bb      	adds	r3, r7, r2
 8002e30:	18ba      	adds	r2, r7, r2
 8002e32:	7812      	ldrb	r2, [r2, #0]
 8002e34:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	d04f      	beq.n	8002edc <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e3c:	f7ff f9be 	bl	80021bc <HAL_GetTick>
 8002e40:	0002      	movs	r2, r0
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d302      	bcc.n	8002e52 <I2C_IsErrorOccurred+0x5e>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d144      	bne.n	8002edc <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	2380      	movs	r3, #128	@ 0x80
 8002e5a:	01db      	lsls	r3, r3, #7
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e60:	2013      	movs	r0, #19
 8002e62:	183b      	adds	r3, r7, r0
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	2142      	movs	r1, #66	@ 0x42
 8002e68:	5c52      	ldrb	r2, [r2, r1]
 8002e6a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	2380      	movs	r3, #128	@ 0x80
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	401a      	ands	r2, r3
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d126      	bne.n	8002ece <I2C_IsErrorOccurred+0xda>
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	01db      	lsls	r3, r3, #7
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d021      	beq.n	8002ece <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002e8a:	183b      	adds	r3, r7, r0
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d01d      	beq.n	8002ece <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2180      	movs	r1, #128	@ 0x80
 8002e9e:	01c9      	lsls	r1, r1, #7
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ea4:	f7ff f98a 	bl	80021bc <HAL_GetTick>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eac:	e00f      	b.n	8002ece <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002eae:	f7ff f985 	bl	80021bc <HAL_GetTick>
 8002eb2:	0002      	movs	r2, r0
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b19      	cmp	r3, #25
 8002eba:	d908      	bls.n	8002ece <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ec4:	2327      	movs	r3, #39	@ 0x27
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]

              break;
 8002ecc:	e006      	b.n	8002edc <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d1e8      	bne.n	8002eae <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d004      	beq.n	8002ef4 <I2C_IsErrorOccurred+0x100>
 8002eea:	2327      	movs	r3, #39	@ 0x27
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d09b      	beq.n	8002e2c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ef4:	2327      	movs	r3, #39	@ 0x27
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2220      	movs	r2, #32
 8002f04:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	2204      	movs	r2, #4
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f0e:	2327      	movs	r3, #39	@ 0x27
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	d00c      	beq.n	8002f42 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2280      	movs	r2, #128	@ 0x80
 8002f36:	0052      	lsls	r2, r2, #1
 8002f38:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f3a:	2327      	movs	r3, #39	@ 0x27
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	2201      	movs	r2, #1
 8002f40:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	2380      	movs	r3, #128	@ 0x80
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d00c      	beq.n	8002f66 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	2208      	movs	r2, #8
 8002f50:	4313      	orrs	r3, r2
 8002f52:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2280      	movs	r2, #128	@ 0x80
 8002f5a:	00d2      	lsls	r2, r2, #3
 8002f5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f5e:	2327      	movs	r3, #39	@ 0x27
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	2201      	movs	r2, #1
 8002f64:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	2380      	movs	r3, #128	@ 0x80
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d00c      	beq.n	8002f8a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	2202      	movs	r2, #2
 8002f74:	4313      	orrs	r3, r2
 8002f76:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2280      	movs	r2, #128	@ 0x80
 8002f7e:	0092      	lsls	r2, r2, #2
 8002f80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f82:	2327      	movs	r3, #39	@ 0x27
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2201      	movs	r2, #1
 8002f88:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002f8a:	2327      	movs	r3, #39	@ 0x27
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01d      	beq.n	8002fd0 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	0018      	movs	r0, r3
 8002f98:	f7ff fe28 	bl	8002bec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	490e      	ldr	r1, [pc, #56]	@ (8002fe0 <I2C_IsErrorOccurred+0x1ec>)
 8002fa8:	400a      	ands	r2, r1
 8002faa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fb0:	6a3b      	ldr	r3, [r7, #32]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2241      	movs	r2, #65	@ 0x41
 8002fbc:	2120      	movs	r1, #32
 8002fbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2242      	movs	r2, #66	@ 0x42
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2240      	movs	r2, #64	@ 0x40
 8002fcc:	2100      	movs	r1, #0
 8002fce:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002fd0:	2327      	movs	r3, #39	@ 0x27
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	781b      	ldrb	r3, [r3, #0]
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b00a      	add	sp, #40	@ 0x28
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	fe00e800 	.word	0xfe00e800

08002fe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	0008      	movs	r0, r1
 8002fee:	0011      	movs	r1, r2
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	240a      	movs	r4, #10
 8002ff4:	193b      	adds	r3, r7, r4
 8002ff6:	1c02      	adds	r2, r0, #0
 8002ff8:	801a      	strh	r2, [r3, #0]
 8002ffa:	2009      	movs	r0, #9
 8002ffc:	183b      	adds	r3, r7, r0
 8002ffe:	1c0a      	adds	r2, r1, #0
 8003000:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003002:	193b      	adds	r3, r7, r4
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	059b      	lsls	r3, r3, #22
 8003008:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800300a:	183b      	adds	r3, r7, r0
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	0419      	lsls	r1, r3, #16
 8003010:	23ff      	movs	r3, #255	@ 0xff
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003016:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800301c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301e:	4313      	orrs	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800302e:	0d51      	lsrs	r1, r2, #21
 8003030:	2280      	movs	r2, #128	@ 0x80
 8003032:	00d2      	lsls	r2, r2, #3
 8003034:	400a      	ands	r2, r1
 8003036:	4907      	ldr	r1, [pc, #28]	@ (8003054 <I2C_TransferConfig+0x70>)
 8003038:	430a      	orrs	r2, r1
 800303a:	43d2      	mvns	r2, r2
 800303c:	401a      	ands	r2, r3
 800303e:	0011      	movs	r1, r2
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	46bd      	mov	sp, r7
 800304e:	b007      	add	sp, #28
 8003050:	bd90      	pop	{r4, r7, pc}
 8003052:	46c0      	nop			@ (mov r8, r8)
 8003054:	03ff63ff 	.word	0x03ff63ff

08003058 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2241      	movs	r2, #65	@ 0x41
 8003066:	5c9b      	ldrb	r3, [r3, r2]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b20      	cmp	r3, #32
 800306c:	d138      	bne.n	80030e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2240      	movs	r2, #64	@ 0x40
 8003072:	5c9b      	ldrb	r3, [r3, r2]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003078:	2302      	movs	r3, #2
 800307a:	e032      	b.n	80030e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2240      	movs	r2, #64	@ 0x40
 8003080:	2101      	movs	r1, #1
 8003082:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2241      	movs	r2, #65	@ 0x41
 8003088:	2124      	movs	r1, #36	@ 0x24
 800308a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2101      	movs	r1, #1
 8003098:	438a      	bics	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4911      	ldr	r1, [pc, #68]	@ (80030ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80030a8:	400a      	ands	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2101      	movs	r1, #1
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2241      	movs	r2, #65	@ 0x41
 80030d0:	2120      	movs	r1, #32
 80030d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2240      	movs	r2, #64	@ 0x40
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	e000      	b.n	80030e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030e0:	2302      	movs	r3, #2
  }
}
 80030e2:	0018      	movs	r0, r3
 80030e4:	46bd      	mov	sp, r7
 80030e6:	b002      	add	sp, #8
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	ffffefff 	.word	0xffffefff

080030f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2241      	movs	r2, #65	@ 0x41
 80030fe:	5c9b      	ldrb	r3, [r3, r2]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b20      	cmp	r3, #32
 8003104:	d139      	bne.n	800317a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2240      	movs	r2, #64	@ 0x40
 800310a:	5c9b      	ldrb	r3, [r3, r2]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d101      	bne.n	8003114 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003110:	2302      	movs	r3, #2
 8003112:	e033      	b.n	800317c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2240      	movs	r2, #64	@ 0x40
 8003118:	2101      	movs	r1, #1
 800311a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2241      	movs	r2, #65	@ 0x41
 8003120:	2124      	movs	r1, #36	@ 0x24
 8003122:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2101      	movs	r1, #1
 8003130:	438a      	bics	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a11      	ldr	r2, [pc, #68]	@ (8003184 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003140:	4013      	ands	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2101      	movs	r1, #1
 8003162:	430a      	orrs	r2, r1
 8003164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2241      	movs	r2, #65	@ 0x41
 800316a:	2120      	movs	r1, #32
 800316c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2240      	movs	r2, #64	@ 0x40
 8003172:	2100      	movs	r1, #0
 8003174:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
  }
}
 800317c:	0018      	movs	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	b004      	add	sp, #16
 8003182:	bd80      	pop	{r7, pc}
 8003184:	fffff0ff 	.word	0xfffff0ff

08003188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b088      	sub	sp, #32
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e301      	b.n	800379e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2201      	movs	r2, #1
 80031a0:	4013      	ands	r3, r2
 80031a2:	d100      	bne.n	80031a6 <HAL_RCC_OscConfig+0x1e>
 80031a4:	e08d      	b.n	80032c2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031a6:	4bc3      	ldr	r3, [pc, #780]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	220c      	movs	r2, #12
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d00e      	beq.n	80031d0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031b2:	4bc0      	ldr	r3, [pc, #768]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	220c      	movs	r2, #12
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d116      	bne.n	80031ec <HAL_RCC_OscConfig+0x64>
 80031be:	4bbd      	ldr	r3, [pc, #756]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	2380      	movs	r3, #128	@ 0x80
 80031c4:	025b      	lsls	r3, r3, #9
 80031c6:	401a      	ands	r2, r3
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	025b      	lsls	r3, r3, #9
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d10d      	bne.n	80031ec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	4bb8      	ldr	r3, [pc, #736]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	029b      	lsls	r3, r3, #10
 80031d8:	4013      	ands	r3, r2
 80031da:	d100      	bne.n	80031de <HAL_RCC_OscConfig+0x56>
 80031dc:	e070      	b.n	80032c0 <HAL_RCC_OscConfig+0x138>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d000      	beq.n	80031e8 <HAL_RCC_OscConfig+0x60>
 80031e6:	e06b      	b.n	80032c0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e2d8      	b.n	800379e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d107      	bne.n	8003204 <HAL_RCC_OscConfig+0x7c>
 80031f4:	4baf      	ldr	r3, [pc, #700]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4bae      	ldr	r3, [pc, #696]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80031fa:	2180      	movs	r1, #128	@ 0x80
 80031fc:	0249      	lsls	r1, r1, #9
 80031fe:	430a      	orrs	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e02f      	b.n	8003264 <HAL_RCC_OscConfig+0xdc>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10c      	bne.n	8003226 <HAL_RCC_OscConfig+0x9e>
 800320c:	4ba9      	ldr	r3, [pc, #676]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4ba8      	ldr	r3, [pc, #672]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003212:	49a9      	ldr	r1, [pc, #676]	@ (80034b8 <HAL_RCC_OscConfig+0x330>)
 8003214:	400a      	ands	r2, r1
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	4ba6      	ldr	r3, [pc, #664]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	4ba5      	ldr	r3, [pc, #660]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800321e:	49a7      	ldr	r1, [pc, #668]	@ (80034bc <HAL_RCC_OscConfig+0x334>)
 8003220:	400a      	ands	r2, r1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e01e      	b.n	8003264 <HAL_RCC_OscConfig+0xdc>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b05      	cmp	r3, #5
 800322c:	d10e      	bne.n	800324c <HAL_RCC_OscConfig+0xc4>
 800322e:	4ba1      	ldr	r3, [pc, #644]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4ba0      	ldr	r3, [pc, #640]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003234:	2180      	movs	r1, #128	@ 0x80
 8003236:	02c9      	lsls	r1, r1, #11
 8003238:	430a      	orrs	r2, r1
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	4b9d      	ldr	r3, [pc, #628]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b9c      	ldr	r3, [pc, #624]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003242:	2180      	movs	r1, #128	@ 0x80
 8003244:	0249      	lsls	r1, r1, #9
 8003246:	430a      	orrs	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xdc>
 800324c:	4b99      	ldr	r3, [pc, #612]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	4b98      	ldr	r3, [pc, #608]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003252:	4999      	ldr	r1, [pc, #612]	@ (80034b8 <HAL_RCC_OscConfig+0x330>)
 8003254:	400a      	ands	r2, r1
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	4b96      	ldr	r3, [pc, #600]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b95      	ldr	r3, [pc, #596]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800325e:	4997      	ldr	r1, [pc, #604]	@ (80034bc <HAL_RCC_OscConfig+0x334>)
 8003260:	400a      	ands	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d014      	beq.n	8003296 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe ffa6 	bl	80021bc <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003276:	f7fe ffa1 	bl	80021bc <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b64      	cmp	r3, #100	@ 0x64
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e28a      	b.n	800379e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003288:	4b8a      	ldr	r3, [pc, #552]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	2380      	movs	r3, #128	@ 0x80
 800328e:	029b      	lsls	r3, r3, #10
 8003290:	4013      	ands	r3, r2
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0xee>
 8003294:	e015      	b.n	80032c2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fe ff91 	bl	80021bc <HAL_GetTick>
 800329a:	0003      	movs	r3, r0
 800329c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe ff8c 	bl	80021bc <HAL_GetTick>
 80032a4:	0002      	movs	r2, r0
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e275      	b.n	800379e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b2:	4b80      	ldr	r3, [pc, #512]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	2380      	movs	r3, #128	@ 0x80
 80032b8:	029b      	lsls	r3, r3, #10
 80032ba:	4013      	ands	r3, r2
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x118>
 80032be:	e000      	b.n	80032c2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2202      	movs	r2, #2
 80032c8:	4013      	ands	r3, r2
 80032ca:	d100      	bne.n	80032ce <HAL_RCC_OscConfig+0x146>
 80032cc:	e069      	b.n	80033a2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032ce:	4b79      	ldr	r3, [pc, #484]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	220c      	movs	r2, #12
 80032d4:	4013      	ands	r3, r2
 80032d6:	d00b      	beq.n	80032f0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032d8:	4b76      	ldr	r3, [pc, #472]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	220c      	movs	r2, #12
 80032de:	4013      	ands	r3, r2
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	d11c      	bne.n	800331e <HAL_RCC_OscConfig+0x196>
 80032e4:	4b73      	ldr	r3, [pc, #460]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	2380      	movs	r3, #128	@ 0x80
 80032ea:	025b      	lsls	r3, r3, #9
 80032ec:	4013      	ands	r3, r2
 80032ee:	d116      	bne.n	800331e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f0:	4b70      	ldr	r3, [pc, #448]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2202      	movs	r2, #2
 80032f6:	4013      	ands	r3, r2
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x17e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e24b      	b.n	800379e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b6b      	ldr	r3, [pc, #428]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	22f8      	movs	r2, #248	@ 0xf8
 800330c:	4393      	bics	r3, r2
 800330e:	0019      	movs	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	00da      	lsls	r2, r3, #3
 8003316:	4b67      	ldr	r3, [pc, #412]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003318:	430a      	orrs	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331c:	e041      	b.n	80033a2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d024      	beq.n	8003370 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003326:	4b63      	ldr	r3, [pc, #396]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b62      	ldr	r3, [pc, #392]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800332c:	2101      	movs	r1, #1
 800332e:	430a      	orrs	r2, r1
 8003330:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003332:	f7fe ff43 	bl	80021bc <HAL_GetTick>
 8003336:	0003      	movs	r3, r0
 8003338:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333c:	f7fe ff3e 	bl	80021bc <HAL_GetTick>
 8003340:	0002      	movs	r2, r0
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e227      	b.n	800379e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334e:	4b59      	ldr	r3, [pc, #356]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2202      	movs	r2, #2
 8003354:	4013      	ands	r3, r2
 8003356:	d0f1      	beq.n	800333c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b56      	ldr	r3, [pc, #344]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	22f8      	movs	r2, #248	@ 0xf8
 800335e:	4393      	bics	r3, r2
 8003360:	0019      	movs	r1, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	00da      	lsls	r2, r3, #3
 8003368:	4b52      	ldr	r3, [pc, #328]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800336a:	430a      	orrs	r2, r1
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e018      	b.n	80033a2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003370:	4b50      	ldr	r3, [pc, #320]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b4f      	ldr	r3, [pc, #316]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003376:	2101      	movs	r1, #1
 8003378:	438a      	bics	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe ff1e 	bl	80021bc <HAL_GetTick>
 8003380:	0003      	movs	r3, r0
 8003382:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003386:	f7fe ff19 	bl	80021bc <HAL_GetTick>
 800338a:	0002      	movs	r2, r0
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e202      	b.n	800379e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003398:	4b46      	ldr	r3, [pc, #280]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2202      	movs	r2, #2
 800339e:	4013      	ands	r3, r2
 80033a0:	d1f1      	bne.n	8003386 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2208      	movs	r2, #8
 80033a8:	4013      	ands	r3, r2
 80033aa:	d036      	beq.n	800341a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d019      	beq.n	80033e8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b4:	4b3f      	ldr	r3, [pc, #252]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80033b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033b8:	4b3e      	ldr	r3, [pc, #248]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80033ba:	2101      	movs	r1, #1
 80033bc:	430a      	orrs	r2, r1
 80033be:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c0:	f7fe fefc 	bl	80021bc <HAL_GetTick>
 80033c4:	0003      	movs	r3, r0
 80033c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c8:	e008      	b.n	80033dc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ca:	f7fe fef7 	bl	80021bc <HAL_GetTick>
 80033ce:	0002      	movs	r2, r0
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d901      	bls.n	80033dc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e1e0      	b.n	800379e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033dc:	4b35      	ldr	r3, [pc, #212]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	2202      	movs	r2, #2
 80033e2:	4013      	ands	r3, r2
 80033e4:	d0f1      	beq.n	80033ca <HAL_RCC_OscConfig+0x242>
 80033e6:	e018      	b.n	800341a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e8:	4b32      	ldr	r3, [pc, #200]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80033ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033ec:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80033ee:	2101      	movs	r1, #1
 80033f0:	438a      	bics	r2, r1
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f4:	f7fe fee2 	bl	80021bc <HAL_GetTick>
 80033f8:	0003      	movs	r3, r0
 80033fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	e008      	b.n	8003410 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033fe:	f7fe fedd 	bl	80021bc <HAL_GetTick>
 8003402:	0002      	movs	r2, r0
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b02      	cmp	r3, #2
 800340a:	d901      	bls.n	8003410 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e1c6      	b.n	800379e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	4b28      	ldr	r3, [pc, #160]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003414:	2202      	movs	r2, #2
 8003416:	4013      	ands	r3, r2
 8003418:	d1f1      	bne.n	80033fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2204      	movs	r2, #4
 8003420:	4013      	ands	r3, r2
 8003422:	d100      	bne.n	8003426 <HAL_RCC_OscConfig+0x29e>
 8003424:	e0b4      	b.n	8003590 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003426:	201f      	movs	r0, #31
 8003428:	183b      	adds	r3, r7, r0
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342e:	4b21      	ldr	r3, [pc, #132]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	2380      	movs	r3, #128	@ 0x80
 8003434:	055b      	lsls	r3, r3, #21
 8003436:	4013      	ands	r3, r2
 8003438:	d110      	bne.n	800345c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	4b1e      	ldr	r3, [pc, #120]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	4b1d      	ldr	r3, [pc, #116]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 8003440:	2180      	movs	r1, #128	@ 0x80
 8003442:	0549      	lsls	r1, r1, #21
 8003444:	430a      	orrs	r2, r1
 8003446:	61da      	str	r2, [r3, #28]
 8003448:	4b1a      	ldr	r3, [pc, #104]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	2380      	movs	r3, #128	@ 0x80
 800344e:	055b      	lsls	r3, r3, #21
 8003450:	4013      	ands	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003456:	183b      	adds	r3, r7, r0
 8003458:	2201      	movs	r2, #1
 800345a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345c:	4b18      	ldr	r3, [pc, #96]	@ (80034c0 <HAL_RCC_OscConfig+0x338>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	2380      	movs	r3, #128	@ 0x80
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	4013      	ands	r3, r2
 8003466:	d11a      	bne.n	800349e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003468:	4b15      	ldr	r3, [pc, #84]	@ (80034c0 <HAL_RCC_OscConfig+0x338>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b14      	ldr	r3, [pc, #80]	@ (80034c0 <HAL_RCC_OscConfig+0x338>)
 800346e:	2180      	movs	r1, #128	@ 0x80
 8003470:	0049      	lsls	r1, r1, #1
 8003472:	430a      	orrs	r2, r1
 8003474:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003476:	f7fe fea1 	bl	80021bc <HAL_GetTick>
 800347a:	0003      	movs	r3, r0
 800347c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003480:	f7fe fe9c 	bl	80021bc <HAL_GetTick>
 8003484:	0002      	movs	r2, r0
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	@ 0x64
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e185      	b.n	800379e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003492:	4b0b      	ldr	r3, [pc, #44]	@ (80034c0 <HAL_RCC_OscConfig+0x338>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	2380      	movs	r3, #128	@ 0x80
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	4013      	ands	r3, r2
 800349c:	d0f0      	beq.n	8003480 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d10e      	bne.n	80034c4 <HAL_RCC_OscConfig+0x33c>
 80034a6:	4b03      	ldr	r3, [pc, #12]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	4b02      	ldr	r3, [pc, #8]	@ (80034b4 <HAL_RCC_OscConfig+0x32c>)
 80034ac:	2101      	movs	r1, #1
 80034ae:	430a      	orrs	r2, r1
 80034b0:	621a      	str	r2, [r3, #32]
 80034b2:	e035      	b.n	8003520 <HAL_RCC_OscConfig+0x398>
 80034b4:	40021000 	.word	0x40021000
 80034b8:	fffeffff 	.word	0xfffeffff
 80034bc:	fffbffff 	.word	0xfffbffff
 80034c0:	40007000 	.word	0x40007000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_OscConfig+0x35e>
 80034cc:	4bb6      	ldr	r3, [pc, #728]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80034ce:	6a1a      	ldr	r2, [r3, #32]
 80034d0:	4bb5      	ldr	r3, [pc, #724]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80034d2:	2101      	movs	r1, #1
 80034d4:	438a      	bics	r2, r1
 80034d6:	621a      	str	r2, [r3, #32]
 80034d8:	4bb3      	ldr	r3, [pc, #716]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80034da:	6a1a      	ldr	r2, [r3, #32]
 80034dc:	4bb2      	ldr	r3, [pc, #712]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80034de:	2104      	movs	r1, #4
 80034e0:	438a      	bics	r2, r1
 80034e2:	621a      	str	r2, [r3, #32]
 80034e4:	e01c      	b.n	8003520 <HAL_RCC_OscConfig+0x398>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x380>
 80034ee:	4bae      	ldr	r3, [pc, #696]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80034f0:	6a1a      	ldr	r2, [r3, #32]
 80034f2:	4bad      	ldr	r3, [pc, #692]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80034f4:	2104      	movs	r1, #4
 80034f6:	430a      	orrs	r2, r1
 80034f8:	621a      	str	r2, [r3, #32]
 80034fa:	4bab      	ldr	r3, [pc, #684]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80034fc:	6a1a      	ldr	r2, [r3, #32]
 80034fe:	4baa      	ldr	r3, [pc, #680]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003500:	2101      	movs	r1, #1
 8003502:	430a      	orrs	r2, r1
 8003504:	621a      	str	r2, [r3, #32]
 8003506:	e00b      	b.n	8003520 <HAL_RCC_OscConfig+0x398>
 8003508:	4ba7      	ldr	r3, [pc, #668]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 800350a:	6a1a      	ldr	r2, [r3, #32]
 800350c:	4ba6      	ldr	r3, [pc, #664]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 800350e:	2101      	movs	r1, #1
 8003510:	438a      	bics	r2, r1
 8003512:	621a      	str	r2, [r3, #32]
 8003514:	4ba4      	ldr	r3, [pc, #656]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003516:	6a1a      	ldr	r2, [r3, #32]
 8003518:	4ba3      	ldr	r3, [pc, #652]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 800351a:	2104      	movs	r1, #4
 800351c:	438a      	bics	r2, r1
 800351e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d014      	beq.n	8003552 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003528:	f7fe fe48 	bl	80021bc <HAL_GetTick>
 800352c:	0003      	movs	r3, r0
 800352e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003530:	e009      	b.n	8003546 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003532:	f7fe fe43 	bl	80021bc <HAL_GetTick>
 8003536:	0002      	movs	r2, r0
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	4a9b      	ldr	r2, [pc, #620]	@ (80037ac <HAL_RCC_OscConfig+0x624>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e12b      	b.n	800379e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003546:	4b98      	ldr	r3, [pc, #608]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	2202      	movs	r2, #2
 800354c:	4013      	ands	r3, r2
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x3aa>
 8003550:	e013      	b.n	800357a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003552:	f7fe fe33 	bl	80021bc <HAL_GetTick>
 8003556:	0003      	movs	r3, r0
 8003558:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800355a:	e009      	b.n	8003570 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800355c:	f7fe fe2e 	bl	80021bc <HAL_GetTick>
 8003560:	0002      	movs	r2, r0
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	4a91      	ldr	r2, [pc, #580]	@ (80037ac <HAL_RCC_OscConfig+0x624>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e116      	b.n	800379e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003570:	4b8d      	ldr	r3, [pc, #564]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	2202      	movs	r2, #2
 8003576:	4013      	ands	r3, r2
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800357a:	231f      	movs	r3, #31
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d105      	bne.n	8003590 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003584:	4b88      	ldr	r3, [pc, #544]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	4b87      	ldr	r3, [pc, #540]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 800358a:	4989      	ldr	r1, [pc, #548]	@ (80037b0 <HAL_RCC_OscConfig+0x628>)
 800358c:	400a      	ands	r2, r1
 800358e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2210      	movs	r2, #16
 8003596:	4013      	ands	r3, r2
 8003598:	d063      	beq.n	8003662 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d12a      	bne.n	80035f8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80035a2:	4b81      	ldr	r3, [pc, #516]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80035a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035a6:	4b80      	ldr	r3, [pc, #512]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80035a8:	2104      	movs	r1, #4
 80035aa:	430a      	orrs	r2, r1
 80035ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80035ae:	4b7e      	ldr	r3, [pc, #504]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80035b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035b2:	4b7d      	ldr	r3, [pc, #500]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80035b4:	2101      	movs	r1, #1
 80035b6:	430a      	orrs	r2, r1
 80035b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ba:	f7fe fdff 	bl	80021bc <HAL_GetTick>
 80035be:	0003      	movs	r3, r0
 80035c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80035c4:	f7fe fdfa 	bl	80021bc <HAL_GetTick>
 80035c8:	0002      	movs	r2, r0
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0e3      	b.n	800379e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80035d6:	4b74      	ldr	r3, [pc, #464]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80035d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035da:	2202      	movs	r2, #2
 80035dc:	4013      	ands	r3, r2
 80035de:	d0f1      	beq.n	80035c4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80035e0:	4b71      	ldr	r3, [pc, #452]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80035e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035e4:	22f8      	movs	r2, #248	@ 0xf8
 80035e6:	4393      	bics	r3, r2
 80035e8:	0019      	movs	r1, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	00da      	lsls	r2, r3, #3
 80035f0:	4b6d      	ldr	r3, [pc, #436]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80035f2:	430a      	orrs	r2, r1
 80035f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80035f6:	e034      	b.n	8003662 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	3305      	adds	r3, #5
 80035fe:	d111      	bne.n	8003624 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003600:	4b69      	ldr	r3, [pc, #420]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003602:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003604:	4b68      	ldr	r3, [pc, #416]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003606:	2104      	movs	r1, #4
 8003608:	438a      	bics	r2, r1
 800360a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800360c:	4b66      	ldr	r3, [pc, #408]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 800360e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003610:	22f8      	movs	r2, #248	@ 0xf8
 8003612:	4393      	bics	r3, r2
 8003614:	0019      	movs	r1, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	00da      	lsls	r2, r3, #3
 800361c:	4b62      	ldr	r3, [pc, #392]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 800361e:	430a      	orrs	r2, r1
 8003620:	635a      	str	r2, [r3, #52]	@ 0x34
 8003622:	e01e      	b.n	8003662 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003624:	4b60      	ldr	r3, [pc, #384]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003626:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003628:	4b5f      	ldr	r3, [pc, #380]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 800362a:	2104      	movs	r1, #4
 800362c:	430a      	orrs	r2, r1
 800362e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003630:	4b5d      	ldr	r3, [pc, #372]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003634:	4b5c      	ldr	r3, [pc, #368]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003636:	2101      	movs	r1, #1
 8003638:	438a      	bics	r2, r1
 800363a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363c:	f7fe fdbe 	bl	80021bc <HAL_GetTick>
 8003640:	0003      	movs	r3, r0
 8003642:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003646:	f7fe fdb9 	bl	80021bc <HAL_GetTick>
 800364a:	0002      	movs	r2, r0
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e0a2      	b.n	800379e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003658:	4b53      	ldr	r3, [pc, #332]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 800365a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365c:	2202      	movs	r2, #2
 800365e:	4013      	ands	r3, r2
 8003660:	d1f1      	bne.n	8003646 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d100      	bne.n	800366c <HAL_RCC_OscConfig+0x4e4>
 800366a:	e097      	b.n	800379c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800366c:	4b4e      	ldr	r3, [pc, #312]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	220c      	movs	r2, #12
 8003672:	4013      	ands	r3, r2
 8003674:	2b08      	cmp	r3, #8
 8003676:	d100      	bne.n	800367a <HAL_RCC_OscConfig+0x4f2>
 8003678:	e06b      	b.n	8003752 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d14c      	bne.n	800371c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b49      	ldr	r3, [pc, #292]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b48      	ldr	r3, [pc, #288]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003688:	494a      	ldr	r1, [pc, #296]	@ (80037b4 <HAL_RCC_OscConfig+0x62c>)
 800368a:	400a      	ands	r2, r1
 800368c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800368e:	f7fe fd95 	bl	80021bc <HAL_GetTick>
 8003692:	0003      	movs	r3, r0
 8003694:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003698:	f7fe fd90 	bl	80021bc <HAL_GetTick>
 800369c:	0002      	movs	r2, r0
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e079      	b.n	800379e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036aa:	4b3f      	ldr	r3, [pc, #252]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	2380      	movs	r3, #128	@ 0x80
 80036b0:	049b      	lsls	r3, r3, #18
 80036b2:	4013      	ands	r3, r2
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036b6:	4b3c      	ldr	r3, [pc, #240]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	220f      	movs	r2, #15
 80036bc:	4393      	bics	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036c4:	4b38      	ldr	r3, [pc, #224]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80036c6:	430a      	orrs	r2, r1
 80036c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80036ca:	4b37      	ldr	r3, [pc, #220]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4a3a      	ldr	r2, [pc, #232]	@ (80037b8 <HAL_RCC_OscConfig+0x630>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	0019      	movs	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	431a      	orrs	r2, r3
 80036de:	4b32      	ldr	r3, [pc, #200]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80036e0:	430a      	orrs	r2, r1
 80036e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e4:	4b30      	ldr	r3, [pc, #192]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	4b2f      	ldr	r3, [pc, #188]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 80036ea:	2180      	movs	r1, #128	@ 0x80
 80036ec:	0449      	lsls	r1, r1, #17
 80036ee:	430a      	orrs	r2, r1
 80036f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe fd63 	bl	80021bc <HAL_GetTick>
 80036f6:	0003      	movs	r3, r0
 80036f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fc:	f7fe fd5e 	bl	80021bc <HAL_GetTick>
 8003700:	0002      	movs	r2, r0
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e047      	b.n	800379e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800370e:	4b26      	ldr	r3, [pc, #152]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	2380      	movs	r3, #128	@ 0x80
 8003714:	049b      	lsls	r3, r3, #18
 8003716:	4013      	ands	r3, r2
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x574>
 800371a:	e03f      	b.n	800379c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800371c:	4b22      	ldr	r3, [pc, #136]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b21      	ldr	r3, [pc, #132]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003722:	4924      	ldr	r1, [pc, #144]	@ (80037b4 <HAL_RCC_OscConfig+0x62c>)
 8003724:	400a      	ands	r2, r1
 8003726:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fe fd48 	bl	80021bc <HAL_GetTick>
 800372c:	0003      	movs	r3, r0
 800372e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe fd43 	bl	80021bc <HAL_GetTick>
 8003736:	0002      	movs	r2, r0
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e02c      	b.n	800379e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003744:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	2380      	movs	r3, #128	@ 0x80
 800374a:	049b      	lsls	r3, r3, #18
 800374c:	4013      	ands	r3, r2
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x5aa>
 8003750:	e024      	b.n	800379c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e01f      	b.n	800379e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800375e:	4b12      	ldr	r3, [pc, #72]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003764:	4b10      	ldr	r3, [pc, #64]	@ (80037a8 <HAL_RCC_OscConfig+0x620>)
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	2380      	movs	r3, #128	@ 0x80
 800376e:	025b      	lsls	r3, r3, #9
 8003770:	401a      	ands	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003776:	429a      	cmp	r2, r3
 8003778:	d10e      	bne.n	8003798 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	220f      	movs	r2, #15
 800377e:	401a      	ands	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003784:	429a      	cmp	r2, r3
 8003786:	d107      	bne.n	8003798 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	23f0      	movs	r3, #240	@ 0xf0
 800378c:	039b      	lsls	r3, r3, #14
 800378e:	401a      	ands	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d001      	beq.n	800379c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	0018      	movs	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	b008      	add	sp, #32
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	40021000 	.word	0x40021000
 80037ac:	00001388 	.word	0x00001388
 80037b0:	efffffff 	.word	0xefffffff
 80037b4:	feffffff 	.word	0xfeffffff
 80037b8:	ffc2ffff 	.word	0xffc2ffff

080037bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0b3      	b.n	8003938 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037d0:	4b5b      	ldr	r3, [pc, #364]	@ (8003940 <HAL_RCC_ClockConfig+0x184>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2201      	movs	r2, #1
 80037d6:	4013      	ands	r3, r2
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d911      	bls.n	8003802 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b58      	ldr	r3, [pc, #352]	@ (8003940 <HAL_RCC_ClockConfig+0x184>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2201      	movs	r2, #1
 80037e4:	4393      	bics	r3, r2
 80037e6:	0019      	movs	r1, r3
 80037e8:	4b55      	ldr	r3, [pc, #340]	@ (8003940 <HAL_RCC_ClockConfig+0x184>)
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f0:	4b53      	ldr	r3, [pc, #332]	@ (8003940 <HAL_RCC_ClockConfig+0x184>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2201      	movs	r2, #1
 80037f6:	4013      	ands	r3, r2
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d001      	beq.n	8003802 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e09a      	b.n	8003938 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2202      	movs	r2, #2
 8003808:	4013      	ands	r3, r2
 800380a:	d015      	beq.n	8003838 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2204      	movs	r2, #4
 8003812:	4013      	ands	r3, r2
 8003814:	d006      	beq.n	8003824 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003816:	4b4b      	ldr	r3, [pc, #300]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	4b4a      	ldr	r3, [pc, #296]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 800381c:	21e0      	movs	r1, #224	@ 0xe0
 800381e:	00c9      	lsls	r1, r1, #3
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003824:	4b47      	ldr	r3, [pc, #284]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	22f0      	movs	r2, #240	@ 0xf0
 800382a:	4393      	bics	r3, r2
 800382c:	0019      	movs	r1, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	4b44      	ldr	r3, [pc, #272]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 8003834:	430a      	orrs	r2, r1
 8003836:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2201      	movs	r2, #1
 800383e:	4013      	ands	r3, r2
 8003840:	d040      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d107      	bne.n	800385a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	4b3e      	ldr	r3, [pc, #248]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	2380      	movs	r3, #128	@ 0x80
 8003850:	029b      	lsls	r3, r3, #10
 8003852:	4013      	ands	r3, r2
 8003854:	d114      	bne.n	8003880 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e06e      	b.n	8003938 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d107      	bne.n	8003872 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003862:	4b38      	ldr	r3, [pc, #224]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	2380      	movs	r3, #128	@ 0x80
 8003868:	049b      	lsls	r3, r3, #18
 800386a:	4013      	ands	r3, r2
 800386c:	d108      	bne.n	8003880 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e062      	b.n	8003938 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003872:	4b34      	ldr	r3, [pc, #208]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2202      	movs	r2, #2
 8003878:	4013      	ands	r3, r2
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e05b      	b.n	8003938 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003880:	4b30      	ldr	r3, [pc, #192]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2203      	movs	r2, #3
 8003886:	4393      	bics	r3, r2
 8003888:	0019      	movs	r1, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	4b2d      	ldr	r3, [pc, #180]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 8003890:	430a      	orrs	r2, r1
 8003892:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003894:	f7fe fc92 	bl	80021bc <HAL_GetTick>
 8003898:	0003      	movs	r3, r0
 800389a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389c:	e009      	b.n	80038b2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800389e:	f7fe fc8d 	bl	80021bc <HAL_GetTick>
 80038a2:	0002      	movs	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	4a27      	ldr	r2, [pc, #156]	@ (8003948 <HAL_RCC_ClockConfig+0x18c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e042      	b.n	8003938 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b2:	4b24      	ldr	r3, [pc, #144]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	220c      	movs	r2, #12
 80038b8:	401a      	ands	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d1ec      	bne.n	800389e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c4:	4b1e      	ldr	r3, [pc, #120]	@ (8003940 <HAL_RCC_ClockConfig+0x184>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2201      	movs	r2, #1
 80038ca:	4013      	ands	r3, r2
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d211      	bcs.n	80038f6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003940 <HAL_RCC_ClockConfig+0x184>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2201      	movs	r2, #1
 80038d8:	4393      	bics	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	4b18      	ldr	r3, [pc, #96]	@ (8003940 <HAL_RCC_ClockConfig+0x184>)
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e4:	4b16      	ldr	r3, [pc, #88]	@ (8003940 <HAL_RCC_ClockConfig+0x184>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2201      	movs	r2, #1
 80038ea:	4013      	ands	r3, r2
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e020      	b.n	8003938 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2204      	movs	r2, #4
 80038fc:	4013      	ands	r3, r2
 80038fe:	d009      	beq.n	8003914 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003900:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	4a11      	ldr	r2, [pc, #68]	@ (800394c <HAL_RCC_ClockConfig+0x190>)
 8003906:	4013      	ands	r3, r2
 8003908:	0019      	movs	r1, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	4b0d      	ldr	r3, [pc, #52]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 8003910:	430a      	orrs	r2, r1
 8003912:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003914:	f000 f820 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8003918:	0001      	movs	r1, r0
 800391a:	4b0a      	ldr	r3, [pc, #40]	@ (8003944 <HAL_RCC_ClockConfig+0x188>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	091b      	lsrs	r3, r3, #4
 8003920:	220f      	movs	r2, #15
 8003922:	4013      	ands	r3, r2
 8003924:	4a0a      	ldr	r2, [pc, #40]	@ (8003950 <HAL_RCC_ClockConfig+0x194>)
 8003926:	5cd3      	ldrb	r3, [r2, r3]
 8003928:	000a      	movs	r2, r1
 800392a:	40da      	lsrs	r2, r3
 800392c:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <HAL_RCC_ClockConfig+0x198>)
 800392e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003930:	2000      	movs	r0, #0
 8003932:	f7fe fbfd 	bl	8002130 <HAL_InitTick>
  
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b004      	add	sp, #16
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40022000 	.word	0x40022000
 8003944:	40021000 	.word	0x40021000
 8003948:	00001388 	.word	0x00001388
 800394c:	fffff8ff 	.word	0xfffff8ff
 8003950:	08005af8 	.word	0x08005af8
 8003954:	2000001c 	.word	0x2000001c

08003958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	2300      	movs	r3, #0
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	2300      	movs	r3, #0
 800396c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003972:	4b20      	ldr	r3, [pc, #128]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	220c      	movs	r2, #12
 800397c:	4013      	ands	r3, r2
 800397e:	2b04      	cmp	r3, #4
 8003980:	d002      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0x30>
 8003982:	2b08      	cmp	r3, #8
 8003984:	d003      	beq.n	800398e <HAL_RCC_GetSysClockFreq+0x36>
 8003986:	e02c      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003988:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800398a:	613b      	str	r3, [r7, #16]
      break;
 800398c:	e02c      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	0c9b      	lsrs	r3, r3, #18
 8003992:	220f      	movs	r2, #15
 8003994:	4013      	ands	r3, r2
 8003996:	4a19      	ldr	r2, [pc, #100]	@ (80039fc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003998:	5cd3      	ldrb	r3, [r2, r3]
 800399a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800399c:	4b15      	ldr	r3, [pc, #84]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800399e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a0:	220f      	movs	r2, #15
 80039a2:	4013      	ands	r3, r2
 80039a4:	4a16      	ldr	r2, [pc, #88]	@ (8003a00 <HAL_RCC_GetSysClockFreq+0xa8>)
 80039a6:	5cd3      	ldrb	r3, [r2, r3]
 80039a8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	2380      	movs	r3, #128	@ 0x80
 80039ae:	025b      	lsls	r3, r3, #9
 80039b0:	4013      	ands	r3, r2
 80039b2:	d009      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	4810      	ldr	r0, [pc, #64]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039b8:	f7fc fba6 	bl	8000108 <__udivsi3>
 80039bc:	0003      	movs	r3, r0
 80039be:	001a      	movs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4353      	muls	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e009      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80039c8:	6879      	ldr	r1, [r7, #4]
 80039ca:	000a      	movs	r2, r1
 80039cc:	0152      	lsls	r2, r2, #5
 80039ce:	1a52      	subs	r2, r2, r1
 80039d0:	0193      	lsls	r3, r2, #6
 80039d2:	1a9b      	subs	r3, r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	185b      	adds	r3, r3, r1
 80039d8:	021b      	lsls	r3, r3, #8
 80039da:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	613b      	str	r3, [r7, #16]
      break;
 80039e0:	e002      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039e2:	4b05      	ldr	r3, [pc, #20]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80039e4:	613b      	str	r3, [r7, #16]
      break;
 80039e6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80039e8:	693b      	ldr	r3, [r7, #16]
}
 80039ea:	0018      	movs	r0, r3
 80039ec:	46bd      	mov	sp, r7
 80039ee:	b006      	add	sp, #24
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	40021000 	.word	0x40021000
 80039f8:	007a1200 	.word	0x007a1200
 80039fc:	08005b10 	.word	0x08005b10
 8003a00:	08005b20 	.word	0x08005b20

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b02      	ldr	r3, [pc, #8]	@ (8003a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	2000001c 	.word	0x2000001c

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003a1c:	f7ff fff2 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a20:	0001      	movs	r1, r0
 8003a22:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	2207      	movs	r2, #7
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	4a04      	ldr	r2, [pc, #16]	@ (8003a40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	40d9      	lsrs	r1, r3
 8003a32:	000b      	movs	r3, r1
}    
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	08005b08 	.word	0x08005b08

08003a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	2380      	movs	r3, #128	@ 0x80
 8003a5a:	025b      	lsls	r3, r3, #9
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003a60:	e08e      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003a62:	2017      	movs	r0, #23
 8003a64:	183b      	adds	r3, r7, r0
 8003a66:	2200      	movs	r2, #0
 8003a68:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a6a:	4b57      	ldr	r3, [pc, #348]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	2380      	movs	r3, #128	@ 0x80
 8003a70:	055b      	lsls	r3, r3, #21
 8003a72:	4013      	ands	r3, r2
 8003a74:	d110      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a76:	4b54      	ldr	r3, [pc, #336]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a78:	69da      	ldr	r2, [r3, #28]
 8003a7a:	4b53      	ldr	r3, [pc, #332]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a7c:	2180      	movs	r1, #128	@ 0x80
 8003a7e:	0549      	lsls	r1, r1, #21
 8003a80:	430a      	orrs	r2, r1
 8003a82:	61da      	str	r2, [r3, #28]
 8003a84:	4b50      	ldr	r3, [pc, #320]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003a86:	69da      	ldr	r2, [r3, #28]
 8003a88:	2380      	movs	r3, #128	@ 0x80
 8003a8a:	055b      	lsls	r3, r3, #21
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60bb      	str	r3, [r7, #8]
 8003a90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a92:	183b      	adds	r3, r7, r0
 8003a94:	2201      	movs	r2, #1
 8003a96:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a98:	4b4c      	ldr	r3, [pc, #304]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d11a      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa4:	4b49      	ldr	r3, [pc, #292]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b48      	ldr	r3, [pc, #288]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003aaa:	2180      	movs	r1, #128	@ 0x80
 8003aac:	0049      	lsls	r1, r1, #1
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab2:	f7fe fb83 	bl	80021bc <HAL_GetTick>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aba:	e008      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abc:	f7fe fb7e 	bl	80021bc <HAL_GetTick>
 8003ac0:	0002      	movs	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	@ 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e077      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ace:	4b3f      	ldr	r3, [pc, #252]	@ (8003bcc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	2380      	movs	r3, #128	@ 0x80
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ada:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	23c0      	movs	r3, #192	@ 0xc0
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d034      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	23c0      	movs	r3, #192	@ 0xc0
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4013      	ands	r3, r2
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d02c      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003afc:	4b32      	ldr	r3, [pc, #200]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	4a33      	ldr	r2, [pc, #204]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b06:	4b30      	ldr	r3, [pc, #192]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b08:	6a1a      	ldr	r2, [r3, #32]
 8003b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b0c:	2180      	movs	r1, #128	@ 0x80
 8003b0e:	0249      	lsls	r1, r1, #9
 8003b10:	430a      	orrs	r2, r1
 8003b12:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b14:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	4b2b      	ldr	r3, [pc, #172]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b1a:	492e      	ldr	r1, [pc, #184]	@ (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b20:	4b29      	ldr	r3, [pc, #164]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2e:	f7fe fb45 	bl	80021bc <HAL_GetTick>
 8003b32:	0003      	movs	r3, r0
 8003b34:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b36:	e009      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b38:	f7fe fb40 	bl	80021bc <HAL_GetTick>
 8003b3c:	0002      	movs	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	4a25      	ldr	r2, [pc, #148]	@ (8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d901      	bls.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e038      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	2202      	movs	r2, #2
 8003b52:	4013      	ands	r3, r2
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b56:	4b1c      	ldr	r3, [pc, #112]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	0019      	movs	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	4b18      	ldr	r3, [pc, #96]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b66:	430a      	orrs	r2, r1
 8003b68:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b6a:	2317      	movs	r3, #23
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b74:	4b14      	ldr	r3, [pc, #80]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	4b13      	ldr	r3, [pc, #76]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b7a:	4918      	ldr	r1, [pc, #96]	@ (8003bdc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003b7c:	400a      	ands	r2, r1
 8003b7e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2201      	movs	r2, #1
 8003b86:	4013      	ands	r3, r2
 8003b88:	d009      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	2203      	movs	r2, #3
 8003b90:	4393      	bics	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d009      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ba8:	4b07      	ldr	r3, [pc, #28]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bac:	2210      	movs	r2, #16
 8003bae:	4393      	bics	r3, r2
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	4b04      	ldr	r3, [pc, #16]	@ (8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b006      	add	sp, #24
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40007000 	.word	0x40007000
 8003bd0:	fffffcff 	.word	0xfffffcff
 8003bd4:	fffeffff 	.word	0xfffeffff
 8003bd8:	00001388 	.word	0x00001388
 8003bdc:	efffffff 	.word	0xefffffff

08003be0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e042      	b.n	8003c78 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	223d      	movs	r2, #61	@ 0x3d
 8003bf6:	5c9b      	ldrb	r3, [r3, r2]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d107      	bne.n	8003c0e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	223c      	movs	r2, #60	@ 0x3c
 8003c02:	2100      	movs	r1, #0
 8003c04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7fe f96b 	bl	8001ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	223d      	movs	r2, #61	@ 0x3d
 8003c12:	2102      	movs	r1, #2
 8003c14:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	0019      	movs	r1, r3
 8003c20:	0010      	movs	r0, r2
 8003c22:	f000 fa5b 	bl	80040dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2246      	movs	r2, #70	@ 0x46
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	223e      	movs	r2, #62	@ 0x3e
 8003c32:	2101      	movs	r1, #1
 8003c34:	5499      	strb	r1, [r3, r2]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	223f      	movs	r2, #63	@ 0x3f
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	5499      	strb	r1, [r3, r2]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2240      	movs	r2, #64	@ 0x40
 8003c42:	2101      	movs	r1, #1
 8003c44:	5499      	strb	r1, [r3, r2]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2241      	movs	r2, #65	@ 0x41
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2242      	movs	r2, #66	@ 0x42
 8003c52:	2101      	movs	r1, #1
 8003c54:	5499      	strb	r1, [r3, r2]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2243      	movs	r2, #67	@ 0x43
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2244      	movs	r2, #68	@ 0x44
 8003c62:	2101      	movs	r1, #1
 8003c64:	5499      	strb	r1, [r3, r2]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2245      	movs	r2, #69	@ 0x45
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	223d      	movs	r2, #61	@ 0x3d
 8003c72:	2101      	movs	r1, #1
 8003c74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	0018      	movs	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	223d      	movs	r2, #61	@ 0x3d
 8003c8c:	5c9b      	ldrb	r3, [r3, r2]
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d001      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e036      	b.n	8003d06 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	223d      	movs	r2, #61	@ 0x3d
 8003c9c:	2102      	movs	r1, #2
 8003c9e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	430a      	orrs	r2, r1
 8003cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a16      	ldr	r2, [pc, #88]	@ (8003d10 <HAL_TIM_Base_Start_IT+0x90>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x50>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	2380      	movs	r3, #128	@ 0x80
 8003cc0:	05db      	lsls	r3, r3, #23
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d004      	beq.n	8003cd0 <HAL_TIM_Base_Start_IT+0x50>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a12      	ldr	r2, [pc, #72]	@ (8003d14 <HAL_TIM_Base_Start_IT+0x94>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d111      	bne.n	8003cf4 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2207      	movs	r2, #7
 8003cd8:	4013      	ands	r3, r2
 8003cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	d010      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2101      	movs	r1, #1
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf2:	e007      	b.n	8003d04 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2101      	movs	r1, #1
 8003d00:	430a      	orrs	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b004      	add	sp, #16
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			@ (mov r8, r8)
 8003d10:	40012c00 	.word	0x40012c00
 8003d14:	40000400 	.word	0x40000400

08003d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2202      	movs	r2, #2
 8003d34:	4013      	ands	r3, r2
 8003d36:	d021      	beq.n	8003d7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d01d      	beq.n	8003d7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2203      	movs	r2, #3
 8003d46:	4252      	negs	r2, r2
 8003d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	2203      	movs	r2, #3
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d004      	beq.n	8003d66 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f000 f9a4 	bl	80040ac <HAL_TIM_IC_CaptureCallback>
 8003d64:	e007      	b.n	8003d76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f000 f997 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 f9a3 	bl	80040bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2204      	movs	r2, #4
 8003d80:	4013      	ands	r3, r2
 8003d82:	d022      	beq.n	8003dca <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2204      	movs	r2, #4
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d01e      	beq.n	8003dca <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2205      	movs	r2, #5
 8003d92:	4252      	negs	r2, r2
 8003d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	23c0      	movs	r3, #192	@ 0xc0
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4013      	ands	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f000 f97d 	bl	80040ac <HAL_TIM_IC_CaptureCallback>
 8003db2:	e007      	b.n	8003dc4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	0018      	movs	r0, r3
 8003db8:	f000 f970 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f000 f97c 	bl	80040bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d021      	beq.n	8003e16 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	d01d      	beq.n	8003e16 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2209      	movs	r2, #9
 8003de0:	4252      	negs	r2, r2
 8003de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2204      	movs	r2, #4
 8003de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69db      	ldr	r3, [r3, #28]
 8003df0:	2203      	movs	r2, #3
 8003df2:	4013      	ands	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f000 f957 	bl	80040ac <HAL_TIM_IC_CaptureCallback>
 8003dfe:	e007      	b.n	8003e10 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	0018      	movs	r0, r3
 8003e04:	f000 f94a 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f000 f956 	bl	80040bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2210      	movs	r2, #16
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d022      	beq.n	8003e64 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2210      	movs	r2, #16
 8003e22:	4013      	ands	r3, r2
 8003e24:	d01e      	beq.n	8003e64 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2211      	movs	r2, #17
 8003e2c:	4252      	negs	r2, r2
 8003e2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2208      	movs	r2, #8
 8003e34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	69da      	ldr	r2, [r3, #28]
 8003e3c:	23c0      	movs	r3, #192	@ 0xc0
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4013      	ands	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 f930 	bl	80040ac <HAL_TIM_IC_CaptureCallback>
 8003e4c:	e007      	b.n	8003e5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	0018      	movs	r0, r3
 8003e52:	f000 f923 	bl	800409c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f000 f92f 	bl	80040bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2201      	movs	r2, #1
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d00c      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4013      	ands	r3, r2
 8003e72:	d008      	beq.n	8003e86 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	4252      	negs	r2, r2
 8003e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7fd fe47 	bl	8001b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2280      	movs	r2, #128	@ 0x80
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2280      	movs	r2, #128	@ 0x80
 8003e92:	4013      	ands	r3, r2
 8003e94:	d008      	beq.n	8003ea8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2281      	movs	r2, #129	@ 0x81
 8003e9c:	4252      	negs	r2, r2
 8003e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 fa98 	bl	80043d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	2240      	movs	r2, #64	@ 0x40
 8003eac:	4013      	ands	r3, r2
 8003eae:	d00c      	beq.n	8003eca <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2240      	movs	r2, #64	@ 0x40
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	d008      	beq.n	8003eca <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2241      	movs	r2, #65	@ 0x41
 8003ebe:	4252      	negs	r2, r2
 8003ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f000 f901 	bl	80040cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	4013      	ands	r3, r2
 8003ed0:	d00c      	beq.n	8003eec <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	d008      	beq.n	8003eec <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2221      	movs	r2, #33	@ 0x21
 8003ee0:	4252      	negs	r2, r2
 8003ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 fa6e 	bl	80043c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003eec:	46c0      	nop			@ (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b004      	add	sp, #16
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003efe:	230f      	movs	r3, #15
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	2200      	movs	r2, #0
 8003f04:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	223c      	movs	r2, #60	@ 0x3c
 8003f0a:	5c9b      	ldrb	r3, [r3, r2]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIM_ConfigClockSource+0x20>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e0bc      	b.n	800408e <HAL_TIM_ConfigClockSource+0x19a>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	223c      	movs	r2, #60	@ 0x3c
 8003f18:	2101      	movs	r1, #1
 8003f1a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	223d      	movs	r2, #61	@ 0x3d
 8003f20:	2102      	movs	r1, #2
 8003f22:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2277      	movs	r2, #119	@ 0x77
 8003f30:	4393      	bics	r3, r2
 8003f32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4a58      	ldr	r2, [pc, #352]	@ (8004098 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2280      	movs	r2, #128	@ 0x80
 8003f4a:	0192      	lsls	r2, r2, #6
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d040      	beq.n	8003fd2 <HAL_TIM_ConfigClockSource+0xde>
 8003f50:	2280      	movs	r2, #128	@ 0x80
 8003f52:	0192      	lsls	r2, r2, #6
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d900      	bls.n	8003f5a <HAL_TIM_ConfigClockSource+0x66>
 8003f58:	e088      	b.n	800406c <HAL_TIM_ConfigClockSource+0x178>
 8003f5a:	2280      	movs	r2, #128	@ 0x80
 8003f5c:	0152      	lsls	r2, r2, #5
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d100      	bne.n	8003f64 <HAL_TIM_ConfigClockSource+0x70>
 8003f62:	e088      	b.n	8004076 <HAL_TIM_ConfigClockSource+0x182>
 8003f64:	2280      	movs	r2, #128	@ 0x80
 8003f66:	0152      	lsls	r2, r2, #5
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d900      	bls.n	8003f6e <HAL_TIM_ConfigClockSource+0x7a>
 8003f6c:	e07e      	b.n	800406c <HAL_TIM_ConfigClockSource+0x178>
 8003f6e:	2b70      	cmp	r3, #112	@ 0x70
 8003f70:	d018      	beq.n	8003fa4 <HAL_TIM_ConfigClockSource+0xb0>
 8003f72:	d900      	bls.n	8003f76 <HAL_TIM_ConfigClockSource+0x82>
 8003f74:	e07a      	b.n	800406c <HAL_TIM_ConfigClockSource+0x178>
 8003f76:	2b60      	cmp	r3, #96	@ 0x60
 8003f78:	d04f      	beq.n	800401a <HAL_TIM_ConfigClockSource+0x126>
 8003f7a:	d900      	bls.n	8003f7e <HAL_TIM_ConfigClockSource+0x8a>
 8003f7c:	e076      	b.n	800406c <HAL_TIM_ConfigClockSource+0x178>
 8003f7e:	2b50      	cmp	r3, #80	@ 0x50
 8003f80:	d03b      	beq.n	8003ffa <HAL_TIM_ConfigClockSource+0x106>
 8003f82:	d900      	bls.n	8003f86 <HAL_TIM_ConfigClockSource+0x92>
 8003f84:	e072      	b.n	800406c <HAL_TIM_ConfigClockSource+0x178>
 8003f86:	2b40      	cmp	r3, #64	@ 0x40
 8003f88:	d057      	beq.n	800403a <HAL_TIM_ConfigClockSource+0x146>
 8003f8a:	d900      	bls.n	8003f8e <HAL_TIM_ConfigClockSource+0x9a>
 8003f8c:	e06e      	b.n	800406c <HAL_TIM_ConfigClockSource+0x178>
 8003f8e:	2b30      	cmp	r3, #48	@ 0x30
 8003f90:	d063      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x166>
 8003f92:	d86b      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x178>
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d060      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x166>
 8003f98:	d868      	bhi.n	800406c <HAL_TIM_ConfigClockSource+0x178>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d05d      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x166>
 8003f9e:	2b10      	cmp	r3, #16
 8003fa0:	d05b      	beq.n	800405a <HAL_TIM_ConfigClockSource+0x166>
 8003fa2:	e063      	b.n	800406c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fb4:	f000 f990 	bl	80042d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	2277      	movs	r2, #119	@ 0x77
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
      break;
 8003fd0:	e052      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003fe2:	f000 f979 	bl	80042d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2180      	movs	r1, #128	@ 0x80
 8003ff2:	01c9      	lsls	r1, r1, #7
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	609a      	str	r2, [r3, #8]
      break;
 8003ff8:	e03e      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004006:	001a      	movs	r2, r3
 8004008:	f000 f8ec 	bl	80041e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2150      	movs	r1, #80	@ 0x50
 8004012:	0018      	movs	r0, r3
 8004014:	f000 f946 	bl	80042a4 <TIM_ITRx_SetConfig>
      break;
 8004018:	e02e      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004026:	001a      	movs	r2, r3
 8004028:	f000 f90a 	bl	8004240 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2160      	movs	r1, #96	@ 0x60
 8004032:	0018      	movs	r0, r3
 8004034:	f000 f936 	bl	80042a4 <TIM_ITRx_SetConfig>
      break;
 8004038:	e01e      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004046:	001a      	movs	r2, r3
 8004048:	f000 f8cc 	bl	80041e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2140      	movs	r1, #64	@ 0x40
 8004052:	0018      	movs	r0, r3
 8004054:	f000 f926 	bl	80042a4 <TIM_ITRx_SetConfig>
      break;
 8004058:	e00e      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	0019      	movs	r1, r3
 8004064:	0010      	movs	r0, r2
 8004066:	f000 f91d 	bl	80042a4 <TIM_ITRx_SetConfig>
      break;
 800406a:	e005      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800406c:	230f      	movs	r3, #15
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	2201      	movs	r2, #1
 8004072:	701a      	strb	r2, [r3, #0]
      break;
 8004074:	e000      	b.n	8004078 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004076:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	223d      	movs	r2, #61	@ 0x3d
 800407c:	2101      	movs	r1, #1
 800407e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	223c      	movs	r2, #60	@ 0x3c
 8004084:	2100      	movs	r1, #0
 8004086:	5499      	strb	r1, [r3, r2]

  return status;
 8004088:	230f      	movs	r3, #15
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	781b      	ldrb	r3, [r3, #0]
}
 800408e:	0018      	movs	r0, r3
 8004090:	46bd      	mov	sp, r7
 8004092:	b004      	add	sp, #16
 8004094:	bd80      	pop	{r7, pc}
 8004096:	46c0      	nop			@ (mov r8, r8)
 8004098:	ffff00ff 	.word	0xffff00ff

0800409c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040a4:	46c0      	nop			@ (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b002      	add	sp, #8
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040b4:	46c0      	nop			@ (mov r8, r8)
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b002      	add	sp, #8
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040c4:	46c0      	nop			@ (mov r8, r8)
 80040c6:	46bd      	mov	sp, r7
 80040c8:	b002      	add	sp, #8
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b002      	add	sp, #8
 80040da:	bd80      	pop	{r7, pc}

080040dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a37      	ldr	r2, [pc, #220]	@ (80041cc <TIM_Base_SetConfig+0xf0>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d008      	beq.n	8004106 <TIM_Base_SetConfig+0x2a>
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	2380      	movs	r3, #128	@ 0x80
 80040f8:	05db      	lsls	r3, r3, #23
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d003      	beq.n	8004106 <TIM_Base_SetConfig+0x2a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a33      	ldr	r2, [pc, #204]	@ (80041d0 <TIM_Base_SetConfig+0xf4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2270      	movs	r2, #112	@ 0x70
 800410a:	4393      	bics	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a2c      	ldr	r2, [pc, #176]	@ (80041cc <TIM_Base_SetConfig+0xf0>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d014      	beq.n	800414a <TIM_Base_SetConfig+0x6e>
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	2380      	movs	r3, #128	@ 0x80
 8004124:	05db      	lsls	r3, r3, #23
 8004126:	429a      	cmp	r2, r3
 8004128:	d00f      	beq.n	800414a <TIM_Base_SetConfig+0x6e>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a28      	ldr	r2, [pc, #160]	@ (80041d0 <TIM_Base_SetConfig+0xf4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00b      	beq.n	800414a <TIM_Base_SetConfig+0x6e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a27      	ldr	r2, [pc, #156]	@ (80041d4 <TIM_Base_SetConfig+0xf8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d007      	beq.n	800414a <TIM_Base_SetConfig+0x6e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a26      	ldr	r2, [pc, #152]	@ (80041d8 <TIM_Base_SetConfig+0xfc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d003      	beq.n	800414a <TIM_Base_SetConfig+0x6e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a25      	ldr	r2, [pc, #148]	@ (80041dc <TIM_Base_SetConfig+0x100>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d108      	bne.n	800415c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a24      	ldr	r2, [pc, #144]	@ (80041e0 <TIM_Base_SetConfig+0x104>)
 800414e:	4013      	ands	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2280      	movs	r2, #128	@ 0x80
 8004160:	4393      	bics	r3, r2
 8004162:	001a      	movs	r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a11      	ldr	r2, [pc, #68]	@ (80041cc <TIM_Base_SetConfig+0xf0>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <TIM_Base_SetConfig+0xbe>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a12      	ldr	r2, [pc, #72]	@ (80041d8 <TIM_Base_SetConfig+0xfc>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_Base_SetConfig+0xbe>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a11      	ldr	r2, [pc, #68]	@ (80041dc <TIM_Base_SetConfig+0x100>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d103      	bne.n	80041a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	2201      	movs	r2, #1
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d106      	bne.n	80041c2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2201      	movs	r2, #1
 80041ba:	4393      	bics	r3, r2
 80041bc:	001a      	movs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	611a      	str	r2, [r3, #16]
  }
}
 80041c2:	46c0      	nop			@ (mov r8, r8)
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b004      	add	sp, #16
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40000400 	.word	0x40000400
 80041d4:	40002000 	.word	0x40002000
 80041d8:	40014400 	.word	0x40014400
 80041dc:	40014800 	.word	0x40014800
 80041e0:	fffffcff 	.word	0xfffffcff

080041e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	2201      	movs	r2, #1
 80041fc:	4393      	bics	r3, r2
 80041fe:	001a      	movs	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	22f0      	movs	r2, #240	@ 0xf0
 800420e:	4393      	bics	r3, r2
 8004210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4313      	orrs	r3, r2
 800421a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	220a      	movs	r2, #10
 8004220:	4393      	bics	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	621a      	str	r2, [r3, #32]
}
 8004238:	46c0      	nop			@ (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b006      	add	sp, #24
 800423e:	bd80      	pop	{r7, pc}

08004240 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	2210      	movs	r2, #16
 8004258:	4393      	bics	r3, r2
 800425a:	001a      	movs	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4a0d      	ldr	r2, [pc, #52]	@ (80042a0 <TIM_TI2_ConfigInputStage+0x60>)
 800426a:	4013      	ands	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	031b      	lsls	r3, r3, #12
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	4313      	orrs	r3, r2
 8004276:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	22a0      	movs	r2, #160	@ 0xa0
 800427c:	4393      	bics	r3, r2
 800427e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	46bd      	mov	sp, r7
 800429a:	b006      	add	sp, #24
 800429c:	bd80      	pop	{r7, pc}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	ffff0fff 	.word	0xffff0fff

080042a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2270      	movs	r2, #112	@ 0x70
 80042b8:	4393      	bics	r3, r2
 80042ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	2207      	movs	r2, #7
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	609a      	str	r2, [r3, #8]
}
 80042ce:	46c0      	nop			@ (mov r8, r8)
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b004      	add	sp, #16
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	4a09      	ldr	r2, [pc, #36]	@ (8004314 <TIM_ETR_SetConfig+0x3c>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	021a      	lsls	r2, r3, #8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	431a      	orrs	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	4313      	orrs	r3, r2
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	46c0      	nop			@ (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b006      	add	sp, #24
 8004312:	bd80      	pop	{r7, pc}
 8004314:	ffff00ff 	.word	0xffff00ff

08004318 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	223c      	movs	r2, #60	@ 0x3c
 8004326:	5c9b      	ldrb	r3, [r3, r2]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800432c:	2302      	movs	r3, #2
 800432e:	e042      	b.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	223c      	movs	r2, #60	@ 0x3c
 8004334:	2101      	movs	r1, #1
 8004336:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	223d      	movs	r2, #61	@ 0x3d
 800433c:	2102      	movs	r1, #2
 800433e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2270      	movs	r2, #112	@ 0x70
 8004354:	4393      	bics	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a14      	ldr	r2, [pc, #80]	@ (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00a      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	2380      	movs	r3, #128	@ 0x80
 800437a:	05db      	lsls	r3, r3, #23
 800437c:	429a      	cmp	r2, r3
 800437e:	d004      	beq.n	800438a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0f      	ldr	r2, [pc, #60]	@ (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10c      	bne.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2280      	movs	r2, #128	@ 0x80
 800438e:	4393      	bics	r3, r2
 8004390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	4313      	orrs	r3, r2
 800439a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	223d      	movs	r2, #61	@ 0x3d
 80043a8:	2101      	movs	r1, #1
 80043aa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	223c      	movs	r2, #60	@ 0x3c
 80043b0:	2100      	movs	r1, #0
 80043b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	0018      	movs	r0, r3
 80043b8:	46bd      	mov	sp, r7
 80043ba:	b004      	add	sp, #16
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	40012c00 	.word	0x40012c00
 80043c4:	40000400 	.word	0x40000400

080043c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043d0:	46c0      	nop			@ (mov r8, r8)
 80043d2:	46bd      	mov	sp, r7
 80043d4:	b002      	add	sp, #8
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043e0:	46c0      	nop			@ (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b002      	add	sp, #8
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e044      	b.n	8004484 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d107      	bne.n	8004412 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2278      	movs	r2, #120	@ 0x78
 8004406:	2100      	movs	r1, #0
 8004408:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	0018      	movs	r0, r3
 800440e:	f7fd fd8d 	bl	8001f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2224      	movs	r2, #36	@ 0x24
 8004416:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2101      	movs	r1, #1
 8004424:	438a      	bics	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	0018      	movs	r0, r3
 8004434:	f000 fca8 	bl	8004d88 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	0018      	movs	r0, r3
 800443c:	f000 fb7c 	bl	8004b38 <UART_SetConfig>
 8004440:	0003      	movs	r3, r0
 8004442:	2b01      	cmp	r3, #1
 8004444:	d101      	bne.n	800444a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e01c      	b.n	8004484 <HAL_UART_Init+0x9c>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	490d      	ldr	r1, [pc, #52]	@ (800448c <HAL_UART_Init+0xa4>)
 8004456:	400a      	ands	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689a      	ldr	r2, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	212a      	movs	r1, #42	@ 0x2a
 8004466:	438a      	bics	r2, r1
 8004468:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2101      	movs	r1, #1
 8004476:	430a      	orrs	r2, r1
 8004478:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	0018      	movs	r0, r3
 800447e:	f000 fd37 	bl	8004ef0 <UART_CheckIdleState>
 8004482:	0003      	movs	r3, r0
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b002      	add	sp, #8
 800448a:	bd80      	pop	{r7, pc}
 800448c:	ffffb7ff 	.word	0xffffb7ff

08004490 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b088      	sub	sp, #32
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	1dbb      	adds	r3, r7, #6
 800449c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2280      	movs	r2, #128	@ 0x80
 80044a2:	589b      	ldr	r3, [r3, r2]
 80044a4:	2b20      	cmp	r3, #32
 80044a6:	d145      	bne.n	8004534 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_UART_Receive_IT+0x26>
 80044ae:	1dbb      	adds	r3, r7, #6
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e03d      	b.n	8004536 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	2380      	movs	r3, #128	@ 0x80
 80044c0:	015b      	lsls	r3, r3, #5
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d109      	bne.n	80044da <HAL_UART_Receive_IT+0x4a>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d105      	bne.n	80044da <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2201      	movs	r2, #1
 80044d2:	4013      	ands	r3, r2
 80044d4:	d001      	beq.n	80044da <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e02d      	b.n	8004536 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	2380      	movs	r3, #128	@ 0x80
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	4013      	ands	r3, r2
 80044ec:	d019      	beq.n	8004522 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ee:	f3ef 8310 	mrs	r3, PRIMASK
 80044f2:	613b      	str	r3, [r7, #16]
  return(result);
 80044f4:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	2301      	movs	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f383 8810 	msr	PRIMASK, r3
}
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2180      	movs	r1, #128	@ 0x80
 8004510:	04c9      	lsls	r1, r1, #19
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f383 8810 	msr	PRIMASK, r3
}
 8004520:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004522:	1dbb      	adds	r3, r7, #6
 8004524:	881a      	ldrh	r2, [r3, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	0018      	movs	r0, r3
 800452c:	f000 fdf8 	bl	8005120 <UART_Start_Receive_IT>
 8004530:	0003      	movs	r3, r0
 8004532:	e000      	b.n	8004536 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004534:	2302      	movs	r3, #2
  }
}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b008      	add	sp, #32
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004540:	b590      	push	{r4, r7, lr}
 8004542:	b0ab      	sub	sp, #172	@ 0xac
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	22a4      	movs	r2, #164	@ 0xa4
 8004550:	18b9      	adds	r1, r7, r2
 8004552:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	20a0      	movs	r0, #160	@ 0xa0
 800455c:	1839      	adds	r1, r7, r0
 800455e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	219c      	movs	r1, #156	@ 0x9c
 8004568:	1879      	adds	r1, r7, r1
 800456a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800456c:	0011      	movs	r1, r2
 800456e:	18bb      	adds	r3, r7, r2
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a99      	ldr	r2, [pc, #612]	@ (80047d8 <HAL_UART_IRQHandler+0x298>)
 8004574:	4013      	ands	r3, r2
 8004576:	2298      	movs	r2, #152	@ 0x98
 8004578:	18bc      	adds	r4, r7, r2
 800457a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800457c:	18bb      	adds	r3, r7, r2
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d114      	bne.n	80045ae <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004584:	187b      	adds	r3, r7, r1
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2220      	movs	r2, #32
 800458a:	4013      	ands	r3, r2
 800458c:	d00f      	beq.n	80045ae <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800458e:	183b      	adds	r3, r7, r0
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2220      	movs	r2, #32
 8004594:	4013      	ands	r3, r2
 8004596:	d00a      	beq.n	80045ae <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800459c:	2b00      	cmp	r3, #0
 800459e:	d100      	bne.n	80045a2 <HAL_UART_IRQHandler+0x62>
 80045a0:	e29e      	b.n	8004ae0 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	0010      	movs	r0, r2
 80045aa:	4798      	blx	r3
      }
      return;
 80045ac:	e298      	b.n	8004ae0 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045ae:	2398      	movs	r3, #152	@ 0x98
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d100      	bne.n	80045ba <HAL_UART_IRQHandler+0x7a>
 80045b8:	e114      	b.n	80047e4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80045ba:	239c      	movs	r3, #156	@ 0x9c
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2201      	movs	r2, #1
 80045c2:	4013      	ands	r3, r2
 80045c4:	d106      	bne.n	80045d4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80045c6:	23a0      	movs	r3, #160	@ 0xa0
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a83      	ldr	r2, [pc, #524]	@ (80047dc <HAL_UART_IRQHandler+0x29c>)
 80045ce:	4013      	ands	r3, r2
 80045d0:	d100      	bne.n	80045d4 <HAL_UART_IRQHandler+0x94>
 80045d2:	e107      	b.n	80047e4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80045d4:	23a4      	movs	r3, #164	@ 0xa4
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2201      	movs	r2, #1
 80045dc:	4013      	ands	r3, r2
 80045de:	d012      	beq.n	8004606 <HAL_UART_IRQHandler+0xc6>
 80045e0:	23a0      	movs	r3, #160	@ 0xa0
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	2380      	movs	r3, #128	@ 0x80
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	4013      	ands	r3, r2
 80045ec:	d00b      	beq.n	8004606 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2201      	movs	r2, #1
 80045f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2284      	movs	r2, #132	@ 0x84
 80045fa:	589b      	ldr	r3, [r3, r2]
 80045fc:	2201      	movs	r2, #1
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2184      	movs	r1, #132	@ 0x84
 8004604:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004606:	23a4      	movs	r3, #164	@ 0xa4
 8004608:	18fb      	adds	r3, r7, r3
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2202      	movs	r2, #2
 800460e:	4013      	ands	r3, r2
 8004610:	d011      	beq.n	8004636 <HAL_UART_IRQHandler+0xf6>
 8004612:	239c      	movs	r3, #156	@ 0x9c
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2201      	movs	r2, #1
 800461a:	4013      	ands	r3, r2
 800461c:	d00b      	beq.n	8004636 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2202      	movs	r2, #2
 8004624:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2284      	movs	r2, #132	@ 0x84
 800462a:	589b      	ldr	r3, [r3, r2]
 800462c:	2204      	movs	r2, #4
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2184      	movs	r1, #132	@ 0x84
 8004634:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004636:	23a4      	movs	r3, #164	@ 0xa4
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2204      	movs	r2, #4
 800463e:	4013      	ands	r3, r2
 8004640:	d011      	beq.n	8004666 <HAL_UART_IRQHandler+0x126>
 8004642:	239c      	movs	r3, #156	@ 0x9c
 8004644:	18fb      	adds	r3, r7, r3
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2201      	movs	r2, #1
 800464a:	4013      	ands	r3, r2
 800464c:	d00b      	beq.n	8004666 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2204      	movs	r2, #4
 8004654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2284      	movs	r2, #132	@ 0x84
 800465a:	589b      	ldr	r3, [r3, r2]
 800465c:	2202      	movs	r2, #2
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2184      	movs	r1, #132	@ 0x84
 8004664:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004666:	23a4      	movs	r3, #164	@ 0xa4
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2208      	movs	r2, #8
 800466e:	4013      	ands	r3, r2
 8004670:	d017      	beq.n	80046a2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004672:	23a0      	movs	r3, #160	@ 0xa0
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2220      	movs	r2, #32
 800467a:	4013      	ands	r3, r2
 800467c:	d105      	bne.n	800468a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800467e:	239c      	movs	r3, #156	@ 0x9c
 8004680:	18fb      	adds	r3, r7, r3
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2201      	movs	r2, #1
 8004686:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004688:	d00b      	beq.n	80046a2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2208      	movs	r2, #8
 8004690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2284      	movs	r2, #132	@ 0x84
 8004696:	589b      	ldr	r3, [r3, r2]
 8004698:	2208      	movs	r2, #8
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2184      	movs	r1, #132	@ 0x84
 80046a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046a2:	23a4      	movs	r3, #164	@ 0xa4
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	2380      	movs	r3, #128	@ 0x80
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	4013      	ands	r3, r2
 80046ae:	d013      	beq.n	80046d8 <HAL_UART_IRQHandler+0x198>
 80046b0:	23a0      	movs	r3, #160	@ 0xa0
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	2380      	movs	r3, #128	@ 0x80
 80046b8:	04db      	lsls	r3, r3, #19
 80046ba:	4013      	ands	r3, r2
 80046bc:	d00c      	beq.n	80046d8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2280      	movs	r2, #128	@ 0x80
 80046c4:	0112      	lsls	r2, r2, #4
 80046c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2284      	movs	r2, #132	@ 0x84
 80046cc:	589b      	ldr	r3, [r3, r2]
 80046ce:	2220      	movs	r2, #32
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2184      	movs	r1, #132	@ 0x84
 80046d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2284      	movs	r2, #132	@ 0x84
 80046dc:	589b      	ldr	r3, [r3, r2]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d100      	bne.n	80046e4 <HAL_UART_IRQHandler+0x1a4>
 80046e2:	e1ff      	b.n	8004ae4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80046e4:	23a4      	movs	r3, #164	@ 0xa4
 80046e6:	18fb      	adds	r3, r7, r3
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2220      	movs	r2, #32
 80046ec:	4013      	ands	r3, r2
 80046ee:	d00e      	beq.n	800470e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80046f0:	23a0      	movs	r3, #160	@ 0xa0
 80046f2:	18fb      	adds	r3, r7, r3
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2220      	movs	r2, #32
 80046f8:	4013      	ands	r3, r2
 80046fa:	d008      	beq.n	800470e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004700:	2b00      	cmp	r3, #0
 8004702:	d004      	beq.n	800470e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	0010      	movs	r0, r2
 800470c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2284      	movs	r2, #132	@ 0x84
 8004712:	589b      	ldr	r3, [r3, r2]
 8004714:	2194      	movs	r1, #148	@ 0x94
 8004716:	187a      	adds	r2, r7, r1
 8004718:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2240      	movs	r2, #64	@ 0x40
 8004722:	4013      	ands	r3, r2
 8004724:	2b40      	cmp	r3, #64	@ 0x40
 8004726:	d004      	beq.n	8004732 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004728:	187b      	adds	r3, r7, r1
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2228      	movs	r2, #40	@ 0x28
 800472e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004730:	d047      	beq.n	80047c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	0018      	movs	r0, r3
 8004736:	f000 fda9 	bl	800528c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2240      	movs	r2, #64	@ 0x40
 8004742:	4013      	ands	r3, r2
 8004744:	2b40      	cmp	r3, #64	@ 0x40
 8004746:	d137      	bne.n	80047b8 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004748:	f3ef 8310 	mrs	r3, PRIMASK
 800474c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800474e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004750:	2090      	movs	r0, #144	@ 0x90
 8004752:	183a      	adds	r2, r7, r0
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	2301      	movs	r3, #1
 8004758:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800475c:	f383 8810 	msr	PRIMASK, r3
}
 8004760:	46c0      	nop			@ (mov r8, r8)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2140      	movs	r1, #64	@ 0x40
 800476e:	438a      	bics	r2, r1
 8004770:	609a      	str	r2, [r3, #8]
 8004772:	183b      	adds	r3, r7, r0
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004778:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800477a:	f383 8810 	msr	PRIMASK, r3
}
 800477e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004784:	2b00      	cmp	r3, #0
 8004786:	d012      	beq.n	80047ae <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800478c:	4a14      	ldr	r2, [pc, #80]	@ (80047e0 <HAL_UART_IRQHandler+0x2a0>)
 800478e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004794:	0018      	movs	r0, r3
 8004796:	f7fd fe55 	bl	8002444 <HAL_DMA_Abort_IT>
 800479a:	1e03      	subs	r3, r0, #0
 800479c:	d01a      	beq.n	80047d4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a8:	0018      	movs	r0, r3
 80047aa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	e012      	b.n	80047d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 f9ad 	bl	8004b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b6:	e00d      	b.n	80047d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	0018      	movs	r0, r3
 80047bc:	f000 f9a8 	bl	8004b10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	e008      	b.n	80047d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	0018      	movs	r0, r3
 80047c6:	f000 f9a3 	bl	8004b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2284      	movs	r2, #132	@ 0x84
 80047ce:	2100      	movs	r1, #0
 80047d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80047d2:	e187      	b.n	8004ae4 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	46c0      	nop			@ (mov r8, r8)
    return;
 80047d6:	e185      	b.n	8004ae4 <HAL_UART_IRQHandler+0x5a4>
 80047d8:	0000080f 	.word	0x0000080f
 80047dc:	04000120 	.word	0x04000120
 80047e0:	08005355 	.word	0x08005355

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d000      	beq.n	80047ee <HAL_UART_IRQHandler+0x2ae>
 80047ec:	e139      	b.n	8004a62 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047ee:	23a4      	movs	r3, #164	@ 0xa4
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2210      	movs	r2, #16
 80047f6:	4013      	ands	r3, r2
 80047f8:	d100      	bne.n	80047fc <HAL_UART_IRQHandler+0x2bc>
 80047fa:	e132      	b.n	8004a62 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047fc:	23a0      	movs	r3, #160	@ 0xa0
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2210      	movs	r2, #16
 8004804:	4013      	ands	r3, r2
 8004806:	d100      	bne.n	800480a <HAL_UART_IRQHandler+0x2ca>
 8004808:	e12b      	b.n	8004a62 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2210      	movs	r2, #16
 8004810:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2240      	movs	r2, #64	@ 0x40
 800481a:	4013      	ands	r3, r2
 800481c:	2b40      	cmp	r3, #64	@ 0x40
 800481e:	d000      	beq.n	8004822 <HAL_UART_IRQHandler+0x2e2>
 8004820:	e09f      	b.n	8004962 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	217e      	movs	r1, #126	@ 0x7e
 800482c:	187b      	adds	r3, r7, r1
 800482e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004830:	187b      	adds	r3, r7, r1
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d100      	bne.n	800483a <HAL_UART_IRQHandler+0x2fa>
 8004838:	e156      	b.n	8004ae8 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2258      	movs	r2, #88	@ 0x58
 800483e:	5a9b      	ldrh	r3, [r3, r2]
 8004840:	187a      	adds	r2, r7, r1
 8004842:	8812      	ldrh	r2, [r2, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d300      	bcc.n	800484a <HAL_UART_IRQHandler+0x30a>
 8004848:	e14e      	b.n	8004ae8 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	187a      	adds	r2, r7, r1
 800484e:	215a      	movs	r1, #90	@ 0x5a
 8004850:	8812      	ldrh	r2, [r2, #0]
 8004852:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2b20      	cmp	r3, #32
 800485c:	d06f      	beq.n	800493e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800485e:	f3ef 8310 	mrs	r3, PRIMASK
 8004862:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004866:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004868:	2301      	movs	r3, #1
 800486a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800486c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486e:	f383 8810 	msr	PRIMASK, r3
}
 8004872:	46c0      	nop			@ (mov r8, r8)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	499e      	ldr	r1, [pc, #632]	@ (8004af8 <HAL_UART_IRQHandler+0x5b8>)
 8004880:	400a      	ands	r2, r1
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004886:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488a:	f383 8810 	msr	PRIMASK, r3
}
 800488e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004890:	f3ef 8310 	mrs	r3, PRIMASK
 8004894:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004898:	677b      	str	r3, [r7, #116]	@ 0x74
 800489a:	2301      	movs	r3, #1
 800489c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048a0:	f383 8810 	msr	PRIMASK, r3
}
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2101      	movs	r1, #1
 80048b2:	438a      	bics	r2, r1
 80048b4:	609a      	str	r2, [r3, #8]
 80048b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048b8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048bc:	f383 8810 	msr	PRIMASK, r3
}
 80048c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048c2:	f3ef 8310 	mrs	r3, PRIMASK
 80048c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80048c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80048cc:	2301      	movs	r3, #1
 80048ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d2:	f383 8810 	msr	PRIMASK, r3
}
 80048d6:	46c0      	nop			@ (mov r8, r8)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2140      	movs	r1, #64	@ 0x40
 80048e4:	438a      	bics	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]
 80048e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048ea:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ee:	f383 8810 	msr	PRIMASK, r3
}
 80048f2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2280      	movs	r2, #128	@ 0x80
 80048f8:	2120      	movs	r1, #32
 80048fa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004902:	f3ef 8310 	mrs	r3, PRIMASK
 8004906:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800490c:	2301      	movs	r3, #1
 800490e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004910:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004912:	f383 8810 	msr	PRIMASK, r3
}
 8004916:	46c0      	nop			@ (mov r8, r8)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2110      	movs	r1, #16
 8004924:	438a      	bics	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800492a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800492e:	f383 8810 	msr	PRIMASK, r3
}
 8004932:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004938:	0018      	movs	r0, r3
 800493a:	f7fd fd4b 	bl	80023d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2202      	movs	r2, #2
 8004942:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2258      	movs	r2, #88	@ 0x58
 8004948:	5a9a      	ldrh	r2, [r3, r2]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	215a      	movs	r1, #90	@ 0x5a
 800494e:	5a5b      	ldrh	r3, [r3, r1]
 8004950:	b29b      	uxth	r3, r3
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	0011      	movs	r1, r2
 800495a:	0018      	movs	r0, r3
 800495c:	f000 f8e0 	bl	8004b20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004960:	e0c2      	b.n	8004ae8 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2258      	movs	r2, #88	@ 0x58
 8004966:	5a99      	ldrh	r1, [r3, r2]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	225a      	movs	r2, #90	@ 0x5a
 800496c:	5a9b      	ldrh	r3, [r3, r2]
 800496e:	b29a      	uxth	r2, r3
 8004970:	208e      	movs	r0, #142	@ 0x8e
 8004972:	183b      	adds	r3, r7, r0
 8004974:	1a8a      	subs	r2, r1, r2
 8004976:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	225a      	movs	r2, #90	@ 0x5a
 800497c:	5a9b      	ldrh	r3, [r3, r2]
 800497e:	b29b      	uxth	r3, r3
 8004980:	2b00      	cmp	r3, #0
 8004982:	d100      	bne.n	8004986 <HAL_UART_IRQHandler+0x446>
 8004984:	e0b2      	b.n	8004aec <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 8004986:	183b      	adds	r3, r7, r0
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d100      	bne.n	8004990 <HAL_UART_IRQHandler+0x450>
 800498e:	e0ad      	b.n	8004aec <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004990:	f3ef 8310 	mrs	r3, PRIMASK
 8004994:	60fb      	str	r3, [r7, #12]
  return(result);
 8004996:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004998:	2488      	movs	r4, #136	@ 0x88
 800499a:	193a      	adds	r2, r7, r4
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	2301      	movs	r3, #1
 80049a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f383 8810 	msr	PRIMASK, r3
}
 80049a8:	46c0      	nop			@ (mov r8, r8)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4951      	ldr	r1, [pc, #324]	@ (8004afc <HAL_UART_IRQHandler+0x5bc>)
 80049b6:	400a      	ands	r2, r1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	193b      	adds	r3, r7, r4
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f383 8810 	msr	PRIMASK, r3
}
 80049c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049c8:	f3ef 8310 	mrs	r3, PRIMASK
 80049cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80049ce:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d0:	2484      	movs	r4, #132	@ 0x84
 80049d2:	193a      	adds	r2, r7, r4
 80049d4:	6013      	str	r3, [r2, #0]
 80049d6:	2301      	movs	r3, #1
 80049d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f383 8810 	msr	PRIMASK, r3
}
 80049e0:	46c0      	nop			@ (mov r8, r8)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2101      	movs	r1, #1
 80049ee:	438a      	bics	r2, r1
 80049f0:	609a      	str	r2, [r3, #8]
 80049f2:	193b      	adds	r3, r7, r4
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f8:	6a3b      	ldr	r3, [r7, #32]
 80049fa:	f383 8810 	msr	PRIMASK, r3
}
 80049fe:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2280      	movs	r2, #128	@ 0x80
 8004a04:	2120      	movs	r1, #32
 8004a06:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a14:	f3ef 8310 	mrs	r3, PRIMASK
 8004a18:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1c:	2480      	movs	r4, #128	@ 0x80
 8004a1e:	193a      	adds	r2, r7, r4
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	2301      	movs	r3, #1
 8004a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a28:	f383 8810 	msr	PRIMASK, r3
}
 8004a2c:	46c0      	nop			@ (mov r8, r8)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2110      	movs	r1, #16
 8004a3a:	438a      	bics	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	193b      	adds	r3, r7, r4
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a46:	f383 8810 	msr	PRIMASK, r3
}
 8004a4a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2202      	movs	r2, #2
 8004a50:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a52:	183b      	adds	r3, r7, r0
 8004a54:	881a      	ldrh	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	0011      	movs	r1, r2
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f000 f860 	bl	8004b20 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a60:	e044      	b.n	8004aec <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a62:	23a4      	movs	r3, #164	@ 0xa4
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	2380      	movs	r3, #128	@ 0x80
 8004a6a:	035b      	lsls	r3, r3, #13
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d010      	beq.n	8004a92 <HAL_UART_IRQHandler+0x552>
 8004a70:	239c      	movs	r3, #156	@ 0x9c
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	2380      	movs	r3, #128	@ 0x80
 8004a78:	03db      	lsls	r3, r3, #15
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	d009      	beq.n	8004a92 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2280      	movs	r2, #128	@ 0x80
 8004a84:	0352      	lsls	r2, r2, #13
 8004a86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	f000 fe5c 	bl	8005748 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a90:	e02f      	b.n	8004af2 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004a92:	23a4      	movs	r3, #164	@ 0xa4
 8004a94:	18fb      	adds	r3, r7, r3
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2280      	movs	r2, #128	@ 0x80
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	d00f      	beq.n	8004abe <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004a9e:	23a0      	movs	r3, #160	@ 0xa0
 8004aa0:	18fb      	adds	r3, r7, r3
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2280      	movs	r2, #128	@ 0x80
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d01e      	beq.n	8004af0 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	0010      	movs	r0, r2
 8004aba:	4798      	blx	r3
    }
    return;
 8004abc:	e018      	b.n	8004af0 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004abe:	23a4      	movs	r3, #164	@ 0xa4
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2240      	movs	r2, #64	@ 0x40
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	d013      	beq.n	8004af2 <HAL_UART_IRQHandler+0x5b2>
 8004aca:	23a0      	movs	r3, #160	@ 0xa0
 8004acc:	18fb      	adds	r3, r7, r3
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2240      	movs	r2, #64	@ 0x40
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	d00d      	beq.n	8004af2 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f000 fc52 	bl	8005382 <UART_EndTransmit_IT>
    return;
 8004ade:	e008      	b.n	8004af2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004ae0:	46c0      	nop			@ (mov r8, r8)
 8004ae2:	e006      	b.n	8004af2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004ae4:	46c0      	nop			@ (mov r8, r8)
 8004ae6:	e004      	b.n	8004af2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004ae8:	46c0      	nop			@ (mov r8, r8)
 8004aea:	e002      	b.n	8004af2 <HAL_UART_IRQHandler+0x5b2>
      return;
 8004aec:	46c0      	nop			@ (mov r8, r8)
 8004aee:	e000      	b.n	8004af2 <HAL_UART_IRQHandler+0x5b2>
    return;
 8004af0:	46c0      	nop			@ (mov r8, r8)
  }

}
 8004af2:	46bd      	mov	sp, r7
 8004af4:	b02b      	add	sp, #172	@ 0xac
 8004af6:	bd90      	pop	{r4, r7, pc}
 8004af8:	fffffeff 	.word	0xfffffeff
 8004afc:	fffffedf 	.word	0xfffffedf

08004b00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b08:	46c0      	nop			@ (mov r8, r8)
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	b002      	add	sp, #8
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b18:	46c0      	nop			@ (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b002      	add	sp, #8
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	000a      	movs	r2, r1
 8004b2a:	1cbb      	adds	r3, r7, #2
 8004b2c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b2e:	46c0      	nop			@ (mov r8, r8)
 8004b30:	46bd      	mov	sp, r7
 8004b32:	b002      	add	sp, #8
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b40:	231e      	movs	r3, #30
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	431a      	orrs	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a83      	ldr	r2, [pc, #524]	@ (8004d74 <UART_SetConfig+0x23c>)
 8004b68:	4013      	ands	r3, r2
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a7e      	ldr	r2, [pc, #504]	@ (8004d78 <UART_SetConfig+0x240>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	0019      	movs	r1, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	4a75      	ldr	r2, [pc, #468]	@ (8004d7c <UART_SetConfig+0x244>)
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	0019      	movs	r1, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bb4:	4b72      	ldr	r3, [pc, #456]	@ (8004d80 <UART_SetConfig+0x248>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb8:	2203      	movs	r2, #3
 8004bba:	4013      	ands	r3, r2
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d00d      	beq.n	8004bdc <UART_SetConfig+0xa4>
 8004bc0:	d81b      	bhi.n	8004bfa <UART_SetConfig+0xc2>
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d014      	beq.n	8004bf0 <UART_SetConfig+0xb8>
 8004bc6:	d818      	bhi.n	8004bfa <UART_SetConfig+0xc2>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <UART_SetConfig+0x9a>
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d00a      	beq.n	8004be6 <UART_SetConfig+0xae>
 8004bd0:	e013      	b.n	8004bfa <UART_SetConfig+0xc2>
 8004bd2:	231f      	movs	r3, #31
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e012      	b.n	8004c02 <UART_SetConfig+0xca>
 8004bdc:	231f      	movs	r3, #31
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	2202      	movs	r2, #2
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	e00d      	b.n	8004c02 <UART_SetConfig+0xca>
 8004be6:	231f      	movs	r3, #31
 8004be8:	18fb      	adds	r3, r7, r3
 8004bea:	2204      	movs	r2, #4
 8004bec:	701a      	strb	r2, [r3, #0]
 8004bee:	e008      	b.n	8004c02 <UART_SetConfig+0xca>
 8004bf0:	231f      	movs	r3, #31
 8004bf2:	18fb      	adds	r3, r7, r3
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	701a      	strb	r2, [r3, #0]
 8004bf8:	e003      	b.n	8004c02 <UART_SetConfig+0xca>
 8004bfa:	231f      	movs	r3, #31
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	2210      	movs	r2, #16
 8004c00:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	2380      	movs	r3, #128	@ 0x80
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d15c      	bne.n	8004cc8 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8004c0e:	231f      	movs	r3, #31
 8004c10:	18fb      	adds	r3, r7, r3
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d015      	beq.n	8004c44 <UART_SetConfig+0x10c>
 8004c18:	dc18      	bgt.n	8004c4c <UART_SetConfig+0x114>
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d00d      	beq.n	8004c3a <UART_SetConfig+0x102>
 8004c1e:	dc15      	bgt.n	8004c4c <UART_SetConfig+0x114>
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <UART_SetConfig+0xf2>
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d005      	beq.n	8004c34 <UART_SetConfig+0xfc>
 8004c28:	e010      	b.n	8004c4c <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c2a:	f7fe fef5 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8004c2e:	0003      	movs	r3, r0
 8004c30:	61bb      	str	r3, [r7, #24]
        break;
 8004c32:	e012      	b.n	8004c5a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c34:	4b53      	ldr	r3, [pc, #332]	@ (8004d84 <UART_SetConfig+0x24c>)
 8004c36:	61bb      	str	r3, [r7, #24]
        break;
 8004c38:	e00f      	b.n	8004c5a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c3a:	f7fe fe8d 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8004c3e:	0003      	movs	r3, r0
 8004c40:	61bb      	str	r3, [r7, #24]
        break;
 8004c42:	e00a      	b.n	8004c5a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	61bb      	str	r3, [r7, #24]
        break;
 8004c4a:	e006      	b.n	8004c5a <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c50:	231e      	movs	r3, #30
 8004c52:	18fb      	adds	r3, r7, r3
 8004c54:	2201      	movs	r2, #1
 8004c56:	701a      	strb	r2, [r3, #0]
        break;
 8004c58:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d100      	bne.n	8004c62 <UART_SetConfig+0x12a>
 8004c60:	e07a      	b.n	8004d58 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	005a      	lsls	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	18d2      	adds	r2, r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	0019      	movs	r1, r3
 8004c74:	0010      	movs	r0, r2
 8004c76:	f7fb fa47 	bl	8000108 <__udivsi3>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b0f      	cmp	r3, #15
 8004c82:	d91c      	bls.n	8004cbe <UART_SetConfig+0x186>
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	2380      	movs	r3, #128	@ 0x80
 8004c88:	025b      	lsls	r3, r3, #9
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d217      	bcs.n	8004cbe <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	b29a      	uxth	r2, r3
 8004c92:	200e      	movs	r0, #14
 8004c94:	183b      	adds	r3, r7, r0
 8004c96:	210f      	movs	r1, #15
 8004c98:	438a      	bics	r2, r1
 8004c9a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2207      	movs	r2, #7
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	b299      	uxth	r1, r3
 8004ca8:	183b      	adds	r3, r7, r0
 8004caa:	183a      	adds	r2, r7, r0
 8004cac:	8812      	ldrh	r2, [r2, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	183a      	adds	r2, r7, r0
 8004cb8:	8812      	ldrh	r2, [r2, #0]
 8004cba:	60da      	str	r2, [r3, #12]
 8004cbc:	e04c      	b.n	8004d58 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8004cbe:	231e      	movs	r3, #30
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e047      	b.n	8004d58 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cc8:	231f      	movs	r3, #31
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d015      	beq.n	8004cfe <UART_SetConfig+0x1c6>
 8004cd2:	dc18      	bgt.n	8004d06 <UART_SetConfig+0x1ce>
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d00d      	beq.n	8004cf4 <UART_SetConfig+0x1bc>
 8004cd8:	dc15      	bgt.n	8004d06 <UART_SetConfig+0x1ce>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <UART_SetConfig+0x1ac>
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d005      	beq.n	8004cee <UART_SetConfig+0x1b6>
 8004ce2:	e010      	b.n	8004d06 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce4:	f7fe fe98 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	61bb      	str	r3, [r7, #24]
        break;
 8004cec:	e012      	b.n	8004d14 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cee:	4b25      	ldr	r3, [pc, #148]	@ (8004d84 <UART_SetConfig+0x24c>)
 8004cf0:	61bb      	str	r3, [r7, #24]
        break;
 8004cf2:	e00f      	b.n	8004d14 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf4:	f7fe fe30 	bl	8003958 <HAL_RCC_GetSysClockFreq>
 8004cf8:	0003      	movs	r3, r0
 8004cfa:	61bb      	str	r3, [r7, #24]
        break;
 8004cfc:	e00a      	b.n	8004d14 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfe:	2380      	movs	r3, #128	@ 0x80
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	61bb      	str	r3, [r7, #24]
        break;
 8004d04:	e006      	b.n	8004d14 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d0a:	231e      	movs	r3, #30
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	2201      	movs	r2, #1
 8004d10:	701a      	strb	r2, [r3, #0]
        break;
 8004d12:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d01e      	beq.n	8004d58 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	085a      	lsrs	r2, r3, #1
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	18d2      	adds	r2, r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	0019      	movs	r1, r3
 8004d2a:	0010      	movs	r0, r2
 8004d2c:	f7fb f9ec 	bl	8000108 <__udivsi3>
 8004d30:	0003      	movs	r3, r0
 8004d32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b0f      	cmp	r3, #15
 8004d38:	d90a      	bls.n	8004d50 <UART_SetConfig+0x218>
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	2380      	movs	r3, #128	@ 0x80
 8004d3e:	025b      	lsls	r3, r3, #9
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d205      	bcs.n	8004d50 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60da      	str	r2, [r3, #12]
 8004d4e:	e003      	b.n	8004d58 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8004d50:	231e      	movs	r3, #30
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	2201      	movs	r2, #1
 8004d56:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d64:	231e      	movs	r3, #30
 8004d66:	18fb      	adds	r3, r7, r3
 8004d68:	781b      	ldrb	r3, [r3, #0]
}
 8004d6a:	0018      	movs	r0, r3
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	b008      	add	sp, #32
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	46c0      	nop			@ (mov r8, r8)
 8004d74:	ffff69f3 	.word	0xffff69f3
 8004d78:	ffffcfff 	.word	0xffffcfff
 8004d7c:	fffff4ff 	.word	0xfffff4ff
 8004d80:	40021000 	.word	0x40021000
 8004d84:	007a1200 	.word	0x007a1200

08004d88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	2208      	movs	r2, #8
 8004d96:	4013      	ands	r3, r2
 8004d98:	d00b      	beq.n	8004db2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	4a4a      	ldr	r2, [pc, #296]	@ (8004ecc <UART_AdvFeatureConfig+0x144>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	0019      	movs	r1, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db6:	2201      	movs	r2, #1
 8004db8:	4013      	ands	r3, r2
 8004dba:	d00b      	beq.n	8004dd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	4a43      	ldr	r2, [pc, #268]	@ (8004ed0 <UART_AdvFeatureConfig+0x148>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	0019      	movs	r1, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd8:	2202      	movs	r2, #2
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d00b      	beq.n	8004df6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	4a3b      	ldr	r2, [pc, #236]	@ (8004ed4 <UART_AdvFeatureConfig+0x14c>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	0019      	movs	r1, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	430a      	orrs	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4a34      	ldr	r2, [pc, #208]	@ (8004ed8 <UART_AdvFeatureConfig+0x150>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	0019      	movs	r1, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	2210      	movs	r2, #16
 8004e1e:	4013      	ands	r3, r2
 8004e20:	d00b      	beq.n	8004e3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4a2c      	ldr	r2, [pc, #176]	@ (8004edc <UART_AdvFeatureConfig+0x154>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	0019      	movs	r1, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3e:	2220      	movs	r2, #32
 8004e40:	4013      	ands	r3, r2
 8004e42:	d00b      	beq.n	8004e5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	4a25      	ldr	r2, [pc, #148]	@ (8004ee0 <UART_AdvFeatureConfig+0x158>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	0019      	movs	r1, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	2240      	movs	r2, #64	@ 0x40
 8004e62:	4013      	ands	r3, r2
 8004e64:	d01d      	beq.n	8004ea2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee4 <UART_AdvFeatureConfig+0x15c>)
 8004e6e:	4013      	ands	r3, r2
 8004e70:	0019      	movs	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e82:	2380      	movs	r3, #128	@ 0x80
 8004e84:	035b      	lsls	r3, r3, #13
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d10b      	bne.n	8004ea2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4a15      	ldr	r2, [pc, #84]	@ (8004ee8 <UART_AdvFeatureConfig+0x160>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	0019      	movs	r1, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea6:	2280      	movs	r2, #128	@ 0x80
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d00b      	beq.n	8004ec4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8004eec <UART_AdvFeatureConfig+0x164>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	0019      	movs	r1, r3
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  }
}
 8004ec4:	46c0      	nop			@ (mov r8, r8)
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b002      	add	sp, #8
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	ffff7fff 	.word	0xffff7fff
 8004ed0:	fffdffff 	.word	0xfffdffff
 8004ed4:	fffeffff 	.word	0xfffeffff
 8004ed8:	fffbffff 	.word	0xfffbffff
 8004edc:	ffffefff 	.word	0xffffefff
 8004ee0:	ffffdfff 	.word	0xffffdfff
 8004ee4:	ffefffff 	.word	0xffefffff
 8004ee8:	ff9fffff 	.word	0xff9fffff
 8004eec:	fff7ffff 	.word	0xfff7ffff

08004ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b092      	sub	sp, #72	@ 0x48
 8004ef4:	af02      	add	r7, sp, #8
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2284      	movs	r2, #132	@ 0x84
 8004efc:	2100      	movs	r1, #0
 8004efe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f00:	f7fd f95c 	bl	80021bc <HAL_GetTick>
 8004f04:	0003      	movs	r3, r0
 8004f06:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2208      	movs	r2, #8
 8004f10:	4013      	ands	r3, r2
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d12c      	bne.n	8004f70 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f18:	2280      	movs	r2, #128	@ 0x80
 8004f1a:	0391      	lsls	r1, r2, #14
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	4a46      	ldr	r2, [pc, #280]	@ (8005038 <UART_CheckIdleState+0x148>)
 8004f20:	9200      	str	r2, [sp, #0]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f000 f88c 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8004f28:	1e03      	subs	r3, r0, #0
 8004f2a:	d021      	beq.n	8004f70 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f30:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f34:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f36:	2301      	movs	r3, #1
 8004f38:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	f383 8810 	msr	PRIMASK, r3
}
 8004f40:	46c0      	nop			@ (mov r8, r8)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2180      	movs	r1, #128	@ 0x80
 8004f4e:	438a      	bics	r2, r1
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f58:	f383 8810 	msr	PRIMASK, r3
}
 8004f5c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2278      	movs	r2, #120	@ 0x78
 8004f68:	2100      	movs	r1, #0
 8004f6a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e05f      	b.n	8005030 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2204      	movs	r2, #4
 8004f78:	4013      	ands	r3, r2
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d146      	bne.n	800500c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f80:	2280      	movs	r2, #128	@ 0x80
 8004f82:	03d1      	lsls	r1, r2, #15
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	4a2c      	ldr	r2, [pc, #176]	@ (8005038 <UART_CheckIdleState+0x148>)
 8004f88:	9200      	str	r2, [sp, #0]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f000 f858 	bl	8005040 <UART_WaitOnFlagUntilTimeout>
 8004f90:	1e03      	subs	r3, r0, #0
 8004f92:	d03b      	beq.n	800500c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f94:	f3ef 8310 	mrs	r3, PRIMASK
 8004f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f383 8810 	msr	PRIMASK, r3
}
 8004fa8:	46c0      	nop			@ (mov r8, r8)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4921      	ldr	r1, [pc, #132]	@ (800503c <UART_CheckIdleState+0x14c>)
 8004fb6:	400a      	ands	r2, r1
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f383 8810 	msr	PRIMASK, r3
}
 8004fc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fca:	61bb      	str	r3, [r7, #24]
  return(result);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fce:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	f383 8810 	msr	PRIMASK, r3
}
 8004fda:	46c0      	nop			@ (mov r8, r8)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	438a      	bics	r2, r1
 8004fea:	609a      	str	r2, [r3, #8]
 8004fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	f383 8810 	msr	PRIMASK, r3
}
 8004ff6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2280      	movs	r2, #128	@ 0x80
 8004ffc:	2120      	movs	r1, #32
 8004ffe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2278      	movs	r2, #120	@ 0x78
 8005004:	2100      	movs	r1, #0
 8005006:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e011      	b.n	8005030 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2280      	movs	r2, #128	@ 0x80
 8005016:	2120      	movs	r1, #32
 8005018:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2278      	movs	r2, #120	@ 0x78
 800502a:	2100      	movs	r1, #0
 800502c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	0018      	movs	r0, r3
 8005032:	46bd      	mov	sp, r7
 8005034:	b010      	add	sp, #64	@ 0x40
 8005036:	bd80      	pop	{r7, pc}
 8005038:	01ffffff 	.word	0x01ffffff
 800503c:	fffffedf 	.word	0xfffffedf

08005040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	1dfb      	adds	r3, r7, #7
 800504e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005050:	e051      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	3301      	adds	r3, #1
 8005056:	d04e      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005058:	f7fd f8b0 	bl	80021bc <HAL_GetTick>
 800505c:	0002      	movs	r2, r0
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e051      	b.n	8005116 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2204      	movs	r2, #4
 800507a:	4013      	ands	r3, r2
 800507c:	d03b      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b80      	cmp	r3, #128	@ 0x80
 8005082:	d038      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	2b40      	cmp	r3, #64	@ 0x40
 8005088:	d035      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	2208      	movs	r2, #8
 8005092:	4013      	ands	r3, r2
 8005094:	2b08      	cmp	r3, #8
 8005096:	d111      	bne.n	80050bc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2208      	movs	r2, #8
 800509e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	0018      	movs	r0, r3
 80050a4:	f000 f8f2 	bl	800528c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2284      	movs	r2, #132	@ 0x84
 80050ac:	2108      	movs	r1, #8
 80050ae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2278      	movs	r2, #120	@ 0x78
 80050b4:	2100      	movs	r1, #0
 80050b6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e02c      	b.n	8005116 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69da      	ldr	r2, [r3, #28]
 80050c2:	2380      	movs	r3, #128	@ 0x80
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	401a      	ands	r2, r3
 80050c8:	2380      	movs	r3, #128	@ 0x80
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d112      	bne.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2280      	movs	r2, #128	@ 0x80
 80050d6:	0112      	lsls	r2, r2, #4
 80050d8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	0018      	movs	r0, r3
 80050de:	f000 f8d5 	bl	800528c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2284      	movs	r2, #132	@ 0x84
 80050e6:	2120      	movs	r1, #32
 80050e8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2278      	movs	r2, #120	@ 0x78
 80050ee:	2100      	movs	r1, #0
 80050f0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e00f      	b.n	8005116 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	4013      	ands	r3, r2
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	425a      	negs	r2, r3
 8005106:	4153      	adcs	r3, r2
 8005108:	b2db      	uxtb	r3, r3
 800510a:	001a      	movs	r2, r3
 800510c:	1dfb      	adds	r3, r7, #7
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d09e      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	0018      	movs	r0, r3
 8005118:	46bd      	mov	sp, r7
 800511a:	b004      	add	sp, #16
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b090      	sub	sp, #64	@ 0x40
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	1dbb      	adds	r3, r7, #6
 800512c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1dba      	adds	r2, r7, #6
 8005138:	2158      	movs	r1, #88	@ 0x58
 800513a:	8812      	ldrh	r2, [r2, #0]
 800513c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1dba      	adds	r2, r7, #6
 8005142:	215a      	movs	r1, #90	@ 0x5a
 8005144:	8812      	ldrh	r2, [r2, #0]
 8005146:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	2380      	movs	r3, #128	@ 0x80
 8005154:	015b      	lsls	r3, r3, #5
 8005156:	429a      	cmp	r2, r3
 8005158:	d10d      	bne.n	8005176 <UART_Start_Receive_IT+0x56>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <UART_Start_Receive_IT+0x4c>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	225c      	movs	r2, #92	@ 0x5c
 8005166:	4946      	ldr	r1, [pc, #280]	@ (8005280 <UART_Start_Receive_IT+0x160>)
 8005168:	5299      	strh	r1, [r3, r2]
 800516a:	e01a      	b.n	80051a2 <UART_Start_Receive_IT+0x82>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	225c      	movs	r2, #92	@ 0x5c
 8005170:	21ff      	movs	r1, #255	@ 0xff
 8005172:	5299      	strh	r1, [r3, r2]
 8005174:	e015      	b.n	80051a2 <UART_Start_Receive_IT+0x82>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10d      	bne.n	800519a <UART_Start_Receive_IT+0x7a>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d104      	bne.n	8005190 <UART_Start_Receive_IT+0x70>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	225c      	movs	r2, #92	@ 0x5c
 800518a:	21ff      	movs	r1, #255	@ 0xff
 800518c:	5299      	strh	r1, [r3, r2]
 800518e:	e008      	b.n	80051a2 <UART_Start_Receive_IT+0x82>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	225c      	movs	r2, #92	@ 0x5c
 8005194:	217f      	movs	r1, #127	@ 0x7f
 8005196:	5299      	strh	r1, [r3, r2]
 8005198:	e003      	b.n	80051a2 <UART_Start_Receive_IT+0x82>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	225c      	movs	r2, #92	@ 0x5c
 800519e:	2100      	movs	r1, #0
 80051a0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2284      	movs	r2, #132	@ 0x84
 80051a6:	2100      	movs	r1, #0
 80051a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2280      	movs	r2, #128	@ 0x80
 80051ae:	2122      	movs	r1, #34	@ 0x22
 80051b0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b2:	f3ef 8310 	mrs	r3, PRIMASK
 80051b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80051b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051bc:	2301      	movs	r3, #1
 80051be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c2:	f383 8810 	msr	PRIMASK, r3
}
 80051c6:	46c0      	nop			@ (mov r8, r8)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2101      	movs	r1, #1
 80051d4:	430a      	orrs	r2, r1
 80051d6:	609a      	str	r2, [r3, #8]
 80051d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051da:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051de:	f383 8810 	msr	PRIMASK, r3
}
 80051e2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	2380      	movs	r3, #128	@ 0x80
 80051ea:	015b      	lsls	r3, r3, #5
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d107      	bne.n	8005200 <UART_Start_Receive_IT+0xe0>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d103      	bne.n	8005200 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4a22      	ldr	r2, [pc, #136]	@ (8005284 <UART_Start_Receive_IT+0x164>)
 80051fc:	669a      	str	r2, [r3, #104]	@ 0x68
 80051fe:	e002      	b.n	8005206 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a21      	ldr	r2, [pc, #132]	@ (8005288 <UART_Start_Receive_IT+0x168>)
 8005204:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d019      	beq.n	8005242 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800520e:	f3ef 8310 	mrs	r3, PRIMASK
 8005212:	61fb      	str	r3, [r7, #28]
  return(result);
 8005214:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
 8005218:	2301      	movs	r3, #1
 800521a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	f383 8810 	msr	PRIMASK, r3
}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2190      	movs	r1, #144	@ 0x90
 8005230:	0049      	lsls	r1, r1, #1
 8005232:	430a      	orrs	r2, r1
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005238:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	f383 8810 	msr	PRIMASK, r3
}
 8005240:	e018      	b.n	8005274 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005242:	f3ef 8310 	mrs	r3, PRIMASK
 8005246:	613b      	str	r3, [r7, #16]
  return(result);
 8005248:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800524a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800524c:	2301      	movs	r3, #1
 800524e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f383 8810 	msr	PRIMASK, r3
}
 8005256:	46c0      	nop			@ (mov r8, r8)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2120      	movs	r1, #32
 8005264:	430a      	orrs	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800526a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f383 8810 	msr	PRIMASK, r3
}
 8005272:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	0018      	movs	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	b010      	add	sp, #64	@ 0x40
 800527c:	bd80      	pop	{r7, pc}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	000001ff 	.word	0x000001ff
 8005284:	08005591 	.word	0x08005591
 8005288:	080053d9 	.word	0x080053d9

0800528c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08e      	sub	sp, #56	@ 0x38
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005294:	f3ef 8310 	mrs	r3, PRIMASK
 8005298:	617b      	str	r3, [r7, #20]
  return(result);
 800529a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800529c:	637b      	str	r3, [r7, #52]	@ 0x34
 800529e:	2301      	movs	r3, #1
 80052a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	f383 8810 	msr	PRIMASK, r3
}
 80052a8:	46c0      	nop			@ (mov r8, r8)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4926      	ldr	r1, [pc, #152]	@ (8005350 <UART_EndRxTransfer+0xc4>)
 80052b6:	400a      	ands	r2, r1
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	f383 8810 	msr	PRIMASK, r3
}
 80052c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052c6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ca:	623b      	str	r3, [r7, #32]
  return(result);
 80052cc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80052d0:	2301      	movs	r3, #1
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	f383 8810 	msr	PRIMASK, r3
}
 80052da:	46c0      	nop			@ (mov r8, r8)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2101      	movs	r1, #1
 80052e8:	438a      	bics	r2, r1
 80052ea:	609a      	str	r2, [r3, #8]
 80052ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f2:	f383 8810 	msr	PRIMASK, r3
}
 80052f6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d118      	bne.n	8005332 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005300:	f3ef 8310 	mrs	r3, PRIMASK
 8005304:	60bb      	str	r3, [r7, #8]
  return(result);
 8005306:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800530a:	2301      	movs	r3, #1
 800530c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f383 8810 	msr	PRIMASK, r3
}
 8005314:	46c0      	nop			@ (mov r8, r8)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2110      	movs	r1, #16
 8005322:	438a      	bics	r2, r1
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005328:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f383 8810 	msr	PRIMASK, r3
}
 8005330:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2280      	movs	r2, #128	@ 0x80
 8005336:	2120      	movs	r1, #32
 8005338:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005346:	46c0      	nop			@ (mov r8, r8)
 8005348:	46bd      	mov	sp, r7
 800534a:	b00e      	add	sp, #56	@ 0x38
 800534c:	bd80      	pop	{r7, pc}
 800534e:	46c0      	nop			@ (mov r8, r8)
 8005350:	fffffedf 	.word	0xfffffedf

08005354 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	225a      	movs	r2, #90	@ 0x5a
 8005366:	2100      	movs	r1, #0
 8005368:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2252      	movs	r2, #82	@ 0x52
 800536e:	2100      	movs	r1, #0
 8005370:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	0018      	movs	r0, r3
 8005376:	f7ff fbcb 	bl	8004b10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800537a:	46c0      	nop			@ (mov r8, r8)
 800537c:	46bd      	mov	sp, r7
 800537e:	b004      	add	sp, #16
 8005380:	bd80      	pop	{r7, pc}

08005382 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b086      	sub	sp, #24
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538a:	f3ef 8310 	mrs	r3, PRIMASK
 800538e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005390:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	2301      	movs	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f383 8810 	msr	PRIMASK, r3
}
 800539e:	46c0      	nop			@ (mov r8, r8)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2140      	movs	r1, #64	@ 0x40
 80053ac:	438a      	bics	r2, r1
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f383 8810 	msr	PRIMASK, r3
}
 80053ba:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2220      	movs	r2, #32
 80053c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	0018      	movs	r0, r3
 80053cc:	f7ff fb98 	bl	8004b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053d0:	46c0      	nop			@ (mov r8, r8)
 80053d2:	46bd      	mov	sp, r7
 80053d4:	b006      	add	sp, #24
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b094      	sub	sp, #80	@ 0x50
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80053e0:	204e      	movs	r0, #78	@ 0x4e
 80053e2:	183b      	adds	r3, r7, r0
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	215c      	movs	r1, #92	@ 0x5c
 80053e8:	5a52      	ldrh	r2, [r2, r1]
 80053ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2280      	movs	r2, #128	@ 0x80
 80053f0:	589b      	ldr	r3, [r3, r2]
 80053f2:	2b22      	cmp	r3, #34	@ 0x22
 80053f4:	d000      	beq.n	80053f8 <UART_RxISR_8BIT+0x20>
 80053f6:	e0ba      	b.n	800556e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	214c      	movs	r1, #76	@ 0x4c
 80053fe:	187b      	adds	r3, r7, r1
 8005400:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8005402:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005404:	187b      	adds	r3, r7, r1
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	183b      	adds	r3, r7, r0
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	b2d9      	uxtb	r1, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005414:	400a      	ands	r2, r1
 8005416:	b2d2      	uxtb	r2, r2
 8005418:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	225a      	movs	r2, #90	@ 0x5a
 8005428:	5a9b      	ldrh	r3, [r3, r2]
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b299      	uxth	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	225a      	movs	r2, #90	@ 0x5a
 8005434:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	225a      	movs	r2, #90	@ 0x5a
 800543a:	5a9b      	ldrh	r3, [r3, r2]
 800543c:	b29b      	uxth	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d000      	beq.n	8005444 <UART_RxISR_8BIT+0x6c>
 8005442:	e09c      	b.n	800557e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005444:	f3ef 8310 	mrs	r3, PRIMASK
 8005448:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800544e:	2301      	movs	r3, #1
 8005450:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005454:	f383 8810 	msr	PRIMASK, r3
}
 8005458:	46c0      	nop			@ (mov r8, r8)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4948      	ldr	r1, [pc, #288]	@ (8005588 <UART_RxISR_8BIT+0x1b0>)
 8005466:	400a      	ands	r2, r1
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800546c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005470:	f383 8810 	msr	PRIMASK, r3
}
 8005474:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005476:	f3ef 8310 	mrs	r3, PRIMASK
 800547a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800547c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005480:	2301      	movs	r3, #1
 8005482:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005486:	f383 8810 	msr	PRIMASK, r3
}
 800548a:	46c0      	nop			@ (mov r8, r8)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2101      	movs	r1, #1
 8005498:	438a      	bics	r2, r1
 800549a:	609a      	str	r2, [r3, #8]
 800549c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800549e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a2:	f383 8810 	msr	PRIMASK, r3
}
 80054a6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2280      	movs	r2, #128	@ 0x80
 80054ac:	2120      	movs	r1, #32
 80054ae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	2380      	movs	r3, #128	@ 0x80
 80054c4:	041b      	lsls	r3, r3, #16
 80054c6:	4013      	ands	r3, r2
 80054c8:	d018      	beq.n	80054fc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ca:	f3ef 8310 	mrs	r3, PRIMASK
 80054ce:	61bb      	str	r3, [r7, #24]
  return(result);
 80054d0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80054d4:	2301      	movs	r3, #1
 80054d6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f383 8810 	msr	PRIMASK, r3
}
 80054de:	46c0      	nop			@ (mov r8, r8)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4928      	ldr	r1, [pc, #160]	@ (800558c <UART_RxISR_8BIT+0x1b4>)
 80054ec:	400a      	ands	r2, r1
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054f2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	f383 8810 	msr	PRIMASK, r3
}
 80054fa:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005500:	2b01      	cmp	r3, #1
 8005502:	d12f      	bne.n	8005564 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550a:	f3ef 8310 	mrs	r3, PRIMASK
 800550e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005510:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005514:	2301      	movs	r3, #1
 8005516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f383 8810 	msr	PRIMASK, r3
}
 800551e:	46c0      	nop			@ (mov r8, r8)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2110      	movs	r1, #16
 800552c:	438a      	bics	r2, r1
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005532:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	2210      	movs	r2, #16
 8005544:	4013      	ands	r3, r2
 8005546:	2b10      	cmp	r3, #16
 8005548:	d103      	bne.n	8005552 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2210      	movs	r2, #16
 8005550:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2258      	movs	r2, #88	@ 0x58
 8005556:	5a9a      	ldrh	r2, [r3, r2]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	0011      	movs	r1, r2
 800555c:	0018      	movs	r0, r3
 800555e:	f7ff fadf 	bl	8004b20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005562:	e00c      	b.n	800557e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	0018      	movs	r0, r3
 8005568:	f7fc fabc 	bl	8001ae4 <HAL_UART_RxCpltCallback>
}
 800556c:	e007      	b.n	800557e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	699a      	ldr	r2, [r3, #24]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2108      	movs	r1, #8
 800557a:	430a      	orrs	r2, r1
 800557c:	619a      	str	r2, [r3, #24]
}
 800557e:	46c0      	nop			@ (mov r8, r8)
 8005580:	46bd      	mov	sp, r7
 8005582:	b014      	add	sp, #80	@ 0x50
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			@ (mov r8, r8)
 8005588:	fffffedf 	.word	0xfffffedf
 800558c:	fbffffff 	.word	0xfbffffff

08005590 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b094      	sub	sp, #80	@ 0x50
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005598:	204e      	movs	r0, #78	@ 0x4e
 800559a:	183b      	adds	r3, r7, r0
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	215c      	movs	r1, #92	@ 0x5c
 80055a0:	5a52      	ldrh	r2, [r2, r1]
 80055a2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2280      	movs	r2, #128	@ 0x80
 80055a8:	589b      	ldr	r3, [r3, r2]
 80055aa:	2b22      	cmp	r3, #34	@ 0x22
 80055ac:	d000      	beq.n	80055b0 <UART_RxISR_16BIT+0x20>
 80055ae:	e0ba      	b.n	8005726 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	214c      	movs	r1, #76	@ 0x4c
 80055b6:	187b      	adds	r3, r7, r1
 80055b8:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80055ba:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80055c2:	187b      	adds	r3, r7, r1
 80055c4:	183a      	adds	r2, r7, r0
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	8812      	ldrh	r2, [r2, #0]
 80055ca:	4013      	ands	r3, r2
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055d6:	1c9a      	adds	r2, r3, #2
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	225a      	movs	r2, #90	@ 0x5a
 80055e0:	5a9b      	ldrh	r3, [r3, r2]
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b299      	uxth	r1, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	225a      	movs	r2, #90	@ 0x5a
 80055ec:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	225a      	movs	r2, #90	@ 0x5a
 80055f2:	5a9b      	ldrh	r3, [r3, r2]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d000      	beq.n	80055fc <UART_RxISR_16BIT+0x6c>
 80055fa:	e09c      	b.n	8005736 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005600:	623b      	str	r3, [r7, #32]
  return(result);
 8005602:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005604:	647b      	str	r3, [r7, #68]	@ 0x44
 8005606:	2301      	movs	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	f383 8810 	msr	PRIMASK, r3
}
 8005610:	46c0      	nop			@ (mov r8, r8)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4948      	ldr	r1, [pc, #288]	@ (8005740 <UART_RxISR_16BIT+0x1b0>)
 800561e:	400a      	ands	r2, r1
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005624:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005628:	f383 8810 	msr	PRIMASK, r3
}
 800562c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800562e:	f3ef 8310 	mrs	r3, PRIMASK
 8005632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005636:	643b      	str	r3, [r7, #64]	@ 0x40
 8005638:	2301      	movs	r3, #1
 800563a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	f383 8810 	msr	PRIMASK, r3
}
 8005642:	46c0      	nop			@ (mov r8, r8)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689a      	ldr	r2, [r3, #8]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2101      	movs	r1, #1
 8005650:	438a      	bics	r2, r1
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005656:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800565a:	f383 8810 	msr	PRIMASK, r3
}
 800565e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2280      	movs	r2, #128	@ 0x80
 8005664:	2120      	movs	r1, #32
 8005666:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	4013      	ands	r3, r2
 8005680:	d018      	beq.n	80056b4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005682:	f3ef 8310 	mrs	r3, PRIMASK
 8005686:	617b      	str	r3, [r7, #20]
  return(result);
 8005688:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800568c:	2301      	movs	r3, #1
 800568e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f383 8810 	msr	PRIMASK, r3
}
 8005696:	46c0      	nop			@ (mov r8, r8)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4928      	ldr	r1, [pc, #160]	@ (8005744 <UART_RxISR_16BIT+0x1b4>)
 80056a4:	400a      	ands	r2, r1
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	f383 8810 	msr	PRIMASK, r3
}
 80056b2:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d12f      	bne.n	800571c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056c2:	f3ef 8310 	mrs	r3, PRIMASK
 80056c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056c8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056cc:	2301      	movs	r3, #1
 80056ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f383 8810 	msr	PRIMASK, r3
}
 80056d6:	46c0      	nop			@ (mov r8, r8)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2110      	movs	r1, #16
 80056e4:	438a      	bics	r2, r1
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f383 8810 	msr	PRIMASK, r3
}
 80056f2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	2210      	movs	r2, #16
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b10      	cmp	r3, #16
 8005700:	d103      	bne.n	800570a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2210      	movs	r2, #16
 8005708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2258      	movs	r2, #88	@ 0x58
 800570e:	5a9a      	ldrh	r2, [r3, r2]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	0011      	movs	r1, r2
 8005714:	0018      	movs	r0, r3
 8005716:	f7ff fa03 	bl	8004b20 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800571a:	e00c      	b.n	8005736 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	0018      	movs	r0, r3
 8005720:	f7fc f9e0 	bl	8001ae4 <HAL_UART_RxCpltCallback>
}
 8005724:	e007      	b.n	8005736 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2108      	movs	r1, #8
 8005732:	430a      	orrs	r2, r1
 8005734:	619a      	str	r2, [r3, #24]
}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	46bd      	mov	sp, r7
 800573a:	b014      	add	sp, #80	@ 0x50
 800573c:	bd80      	pop	{r7, pc}
 800573e:	46c0      	nop			@ (mov r8, r8)
 8005740:	fffffedf 	.word	0xfffffedf
 8005744:	fbffffff 	.word	0xfbffffff

08005748 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005750:	46c0      	nop			@ (mov r8, r8)
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}

08005758 <malloc>:
 8005758:	b510      	push	{r4, lr}
 800575a:	4b03      	ldr	r3, [pc, #12]	@ (8005768 <malloc+0x10>)
 800575c:	0001      	movs	r1, r0
 800575e:	6818      	ldr	r0, [r3, #0]
 8005760:	f000 f830 	bl	80057c4 <_malloc_r>
 8005764:	bd10      	pop	{r4, pc}
 8005766:	46c0      	nop			@ (mov r8, r8)
 8005768:	20000028 	.word	0x20000028

0800576c <free>:
 800576c:	b510      	push	{r4, lr}
 800576e:	4b03      	ldr	r3, [pc, #12]	@ (800577c <free+0x10>)
 8005770:	0001      	movs	r1, r0
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	f000 f8fc 	bl	8005970 <_free_r>
 8005778:	bd10      	pop	{r4, pc}
 800577a:	46c0      	nop			@ (mov r8, r8)
 800577c:	20000028 	.word	0x20000028

08005780 <sbrk_aligned>:
 8005780:	b570      	push	{r4, r5, r6, lr}
 8005782:	4e0f      	ldr	r6, [pc, #60]	@ (80057c0 <sbrk_aligned+0x40>)
 8005784:	000d      	movs	r5, r1
 8005786:	6831      	ldr	r1, [r6, #0]
 8005788:	0004      	movs	r4, r0
 800578a:	2900      	cmp	r1, #0
 800578c:	d102      	bne.n	8005794 <sbrk_aligned+0x14>
 800578e:	f000 f8b1 	bl	80058f4 <_sbrk_r>
 8005792:	6030      	str	r0, [r6, #0]
 8005794:	0029      	movs	r1, r5
 8005796:	0020      	movs	r0, r4
 8005798:	f000 f8ac 	bl	80058f4 <_sbrk_r>
 800579c:	1c43      	adds	r3, r0, #1
 800579e:	d103      	bne.n	80057a8 <sbrk_aligned+0x28>
 80057a0:	2501      	movs	r5, #1
 80057a2:	426d      	negs	r5, r5
 80057a4:	0028      	movs	r0, r5
 80057a6:	bd70      	pop	{r4, r5, r6, pc}
 80057a8:	2303      	movs	r3, #3
 80057aa:	1cc5      	adds	r5, r0, #3
 80057ac:	439d      	bics	r5, r3
 80057ae:	42a8      	cmp	r0, r5
 80057b0:	d0f8      	beq.n	80057a4 <sbrk_aligned+0x24>
 80057b2:	1a29      	subs	r1, r5, r0
 80057b4:	0020      	movs	r0, r4
 80057b6:	f000 f89d 	bl	80058f4 <_sbrk_r>
 80057ba:	3001      	adds	r0, #1
 80057bc:	d1f2      	bne.n	80057a4 <sbrk_aligned+0x24>
 80057be:	e7ef      	b.n	80057a0 <sbrk_aligned+0x20>
 80057c0:	2000020c 	.word	0x2000020c

080057c4 <_malloc_r>:
 80057c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057c6:	2203      	movs	r2, #3
 80057c8:	1ccb      	adds	r3, r1, #3
 80057ca:	4393      	bics	r3, r2
 80057cc:	3308      	adds	r3, #8
 80057ce:	0005      	movs	r5, r0
 80057d0:	001f      	movs	r7, r3
 80057d2:	2b0c      	cmp	r3, #12
 80057d4:	d234      	bcs.n	8005840 <_malloc_r+0x7c>
 80057d6:	270c      	movs	r7, #12
 80057d8:	42b9      	cmp	r1, r7
 80057da:	d833      	bhi.n	8005844 <_malloc_r+0x80>
 80057dc:	0028      	movs	r0, r5
 80057de:	f000 f871 	bl	80058c4 <__malloc_lock>
 80057e2:	4e37      	ldr	r6, [pc, #220]	@ (80058c0 <_malloc_r+0xfc>)
 80057e4:	6833      	ldr	r3, [r6, #0]
 80057e6:	001c      	movs	r4, r3
 80057e8:	2c00      	cmp	r4, #0
 80057ea:	d12f      	bne.n	800584c <_malloc_r+0x88>
 80057ec:	0039      	movs	r1, r7
 80057ee:	0028      	movs	r0, r5
 80057f0:	f7ff ffc6 	bl	8005780 <sbrk_aligned>
 80057f4:	0004      	movs	r4, r0
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	d15f      	bne.n	80058ba <_malloc_r+0xf6>
 80057fa:	6834      	ldr	r4, [r6, #0]
 80057fc:	9400      	str	r4, [sp, #0]
 80057fe:	9b00      	ldr	r3, [sp, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d14a      	bne.n	800589a <_malloc_r+0xd6>
 8005804:	2c00      	cmp	r4, #0
 8005806:	d052      	beq.n	80058ae <_malloc_r+0xea>
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	0028      	movs	r0, r5
 800580c:	18e3      	adds	r3, r4, r3
 800580e:	9900      	ldr	r1, [sp, #0]
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	f000 f86f 	bl	80058f4 <_sbrk_r>
 8005816:	9b01      	ldr	r3, [sp, #4]
 8005818:	4283      	cmp	r3, r0
 800581a:	d148      	bne.n	80058ae <_malloc_r+0xea>
 800581c:	6823      	ldr	r3, [r4, #0]
 800581e:	0028      	movs	r0, r5
 8005820:	1aff      	subs	r7, r7, r3
 8005822:	0039      	movs	r1, r7
 8005824:	f7ff ffac 	bl	8005780 <sbrk_aligned>
 8005828:	3001      	adds	r0, #1
 800582a:	d040      	beq.n	80058ae <_malloc_r+0xea>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	19db      	adds	r3, r3, r7
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	6833      	ldr	r3, [r6, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	2a00      	cmp	r2, #0
 8005838:	d133      	bne.n	80058a2 <_malloc_r+0xde>
 800583a:	9b00      	ldr	r3, [sp, #0]
 800583c:	6033      	str	r3, [r6, #0]
 800583e:	e019      	b.n	8005874 <_malloc_r+0xb0>
 8005840:	2b00      	cmp	r3, #0
 8005842:	dac9      	bge.n	80057d8 <_malloc_r+0x14>
 8005844:	230c      	movs	r3, #12
 8005846:	602b      	str	r3, [r5, #0]
 8005848:	2000      	movs	r0, #0
 800584a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800584c:	6821      	ldr	r1, [r4, #0]
 800584e:	1bc9      	subs	r1, r1, r7
 8005850:	d420      	bmi.n	8005894 <_malloc_r+0xd0>
 8005852:	290b      	cmp	r1, #11
 8005854:	d90a      	bls.n	800586c <_malloc_r+0xa8>
 8005856:	19e2      	adds	r2, r4, r7
 8005858:	6027      	str	r7, [r4, #0]
 800585a:	42a3      	cmp	r3, r4
 800585c:	d104      	bne.n	8005868 <_malloc_r+0xa4>
 800585e:	6032      	str	r2, [r6, #0]
 8005860:	6863      	ldr	r3, [r4, #4]
 8005862:	6011      	str	r1, [r2, #0]
 8005864:	6053      	str	r3, [r2, #4]
 8005866:	e005      	b.n	8005874 <_malloc_r+0xb0>
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	e7f9      	b.n	8005860 <_malloc_r+0x9c>
 800586c:	6862      	ldr	r2, [r4, #4]
 800586e:	42a3      	cmp	r3, r4
 8005870:	d10e      	bne.n	8005890 <_malloc_r+0xcc>
 8005872:	6032      	str	r2, [r6, #0]
 8005874:	0028      	movs	r0, r5
 8005876:	f000 f82d 	bl	80058d4 <__malloc_unlock>
 800587a:	0020      	movs	r0, r4
 800587c:	2207      	movs	r2, #7
 800587e:	300b      	adds	r0, #11
 8005880:	1d23      	adds	r3, r4, #4
 8005882:	4390      	bics	r0, r2
 8005884:	1ac2      	subs	r2, r0, r3
 8005886:	4298      	cmp	r0, r3
 8005888:	d0df      	beq.n	800584a <_malloc_r+0x86>
 800588a:	1a1b      	subs	r3, r3, r0
 800588c:	50a3      	str	r3, [r4, r2]
 800588e:	e7dc      	b.n	800584a <_malloc_r+0x86>
 8005890:	605a      	str	r2, [r3, #4]
 8005892:	e7ef      	b.n	8005874 <_malloc_r+0xb0>
 8005894:	0023      	movs	r3, r4
 8005896:	6864      	ldr	r4, [r4, #4]
 8005898:	e7a6      	b.n	80057e8 <_malloc_r+0x24>
 800589a:	9c00      	ldr	r4, [sp, #0]
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	e7ad      	b.n	80057fe <_malloc_r+0x3a>
 80058a2:	001a      	movs	r2, r3
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	42a3      	cmp	r3, r4
 80058a8:	d1fb      	bne.n	80058a2 <_malloc_r+0xde>
 80058aa:	2300      	movs	r3, #0
 80058ac:	e7da      	b.n	8005864 <_malloc_r+0xa0>
 80058ae:	230c      	movs	r3, #12
 80058b0:	0028      	movs	r0, r5
 80058b2:	602b      	str	r3, [r5, #0]
 80058b4:	f000 f80e 	bl	80058d4 <__malloc_unlock>
 80058b8:	e7c6      	b.n	8005848 <_malloc_r+0x84>
 80058ba:	6007      	str	r7, [r0, #0]
 80058bc:	e7da      	b.n	8005874 <_malloc_r+0xb0>
 80058be:	46c0      	nop			@ (mov r8, r8)
 80058c0:	20000210 	.word	0x20000210

080058c4 <__malloc_lock>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	4802      	ldr	r0, [pc, #8]	@ (80058d0 <__malloc_lock+0xc>)
 80058c8:	f000 f850 	bl	800596c <__retarget_lock_acquire_recursive>
 80058cc:	bd10      	pop	{r4, pc}
 80058ce:	46c0      	nop			@ (mov r8, r8)
 80058d0:	20000350 	.word	0x20000350

080058d4 <__malloc_unlock>:
 80058d4:	b510      	push	{r4, lr}
 80058d6:	4802      	ldr	r0, [pc, #8]	@ (80058e0 <__malloc_unlock+0xc>)
 80058d8:	f000 f849 	bl	800596e <__retarget_lock_release_recursive>
 80058dc:	bd10      	pop	{r4, pc}
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	20000350 	.word	0x20000350

080058e4 <memset>:
 80058e4:	0003      	movs	r3, r0
 80058e6:	1882      	adds	r2, r0, r2
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d100      	bne.n	80058ee <memset+0xa>
 80058ec:	4770      	bx	lr
 80058ee:	7019      	strb	r1, [r3, #0]
 80058f0:	3301      	adds	r3, #1
 80058f2:	e7f9      	b.n	80058e8 <memset+0x4>

080058f4 <_sbrk_r>:
 80058f4:	2300      	movs	r3, #0
 80058f6:	b570      	push	{r4, r5, r6, lr}
 80058f8:	4d06      	ldr	r5, [pc, #24]	@ (8005914 <_sbrk_r+0x20>)
 80058fa:	0004      	movs	r4, r0
 80058fc:	0008      	movs	r0, r1
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	f7fc fb9c 	bl	800203c <_sbrk>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d103      	bne.n	8005910 <_sbrk_r+0x1c>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d000      	beq.n	8005910 <_sbrk_r+0x1c>
 800590e:	6023      	str	r3, [r4, #0]
 8005910:	bd70      	pop	{r4, r5, r6, pc}
 8005912:	46c0      	nop			@ (mov r8, r8)
 8005914:	2000034c 	.word	0x2000034c

08005918 <__errno>:
 8005918:	4b01      	ldr	r3, [pc, #4]	@ (8005920 <__errno+0x8>)
 800591a:	6818      	ldr	r0, [r3, #0]
 800591c:	4770      	bx	lr
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	20000028 	.word	0x20000028

08005924 <__libc_init_array>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	2600      	movs	r6, #0
 8005928:	4c0c      	ldr	r4, [pc, #48]	@ (800595c <__libc_init_array+0x38>)
 800592a:	4d0d      	ldr	r5, [pc, #52]	@ (8005960 <__libc_init_array+0x3c>)
 800592c:	1b64      	subs	r4, r4, r5
 800592e:	10a4      	asrs	r4, r4, #2
 8005930:	42a6      	cmp	r6, r4
 8005932:	d109      	bne.n	8005948 <__libc_init_array+0x24>
 8005934:	2600      	movs	r6, #0
 8005936:	f000 f865 	bl	8005a04 <_init>
 800593a:	4c0a      	ldr	r4, [pc, #40]	@ (8005964 <__libc_init_array+0x40>)
 800593c:	4d0a      	ldr	r5, [pc, #40]	@ (8005968 <__libc_init_array+0x44>)
 800593e:	1b64      	subs	r4, r4, r5
 8005940:	10a4      	asrs	r4, r4, #2
 8005942:	42a6      	cmp	r6, r4
 8005944:	d105      	bne.n	8005952 <__libc_init_array+0x2e>
 8005946:	bd70      	pop	{r4, r5, r6, pc}
 8005948:	00b3      	lsls	r3, r6, #2
 800594a:	58eb      	ldr	r3, [r5, r3]
 800594c:	4798      	blx	r3
 800594e:	3601      	adds	r6, #1
 8005950:	e7ee      	b.n	8005930 <__libc_init_array+0xc>
 8005952:	00b3      	lsls	r3, r6, #2
 8005954:	58eb      	ldr	r3, [r5, r3]
 8005956:	4798      	blx	r3
 8005958:	3601      	adds	r6, #1
 800595a:	e7f2      	b.n	8005942 <__libc_init_array+0x1e>
 800595c:	08005b30 	.word	0x08005b30
 8005960:	08005b30 	.word	0x08005b30
 8005964:	08005b34 	.word	0x08005b34
 8005968:	08005b30 	.word	0x08005b30

0800596c <__retarget_lock_acquire_recursive>:
 800596c:	4770      	bx	lr

0800596e <__retarget_lock_release_recursive>:
 800596e:	4770      	bx	lr

08005970 <_free_r>:
 8005970:	b570      	push	{r4, r5, r6, lr}
 8005972:	0005      	movs	r5, r0
 8005974:	1e0c      	subs	r4, r1, #0
 8005976:	d010      	beq.n	800599a <_free_r+0x2a>
 8005978:	3c04      	subs	r4, #4
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	da00      	bge.n	8005982 <_free_r+0x12>
 8005980:	18e4      	adds	r4, r4, r3
 8005982:	0028      	movs	r0, r5
 8005984:	f7ff ff9e 	bl	80058c4 <__malloc_lock>
 8005988:	4a1d      	ldr	r2, [pc, #116]	@ (8005a00 <_free_r+0x90>)
 800598a:	6813      	ldr	r3, [r2, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d105      	bne.n	800599c <_free_r+0x2c>
 8005990:	6063      	str	r3, [r4, #4]
 8005992:	6014      	str	r4, [r2, #0]
 8005994:	0028      	movs	r0, r5
 8005996:	f7ff ff9d 	bl	80058d4 <__malloc_unlock>
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	42a3      	cmp	r3, r4
 800599e:	d908      	bls.n	80059b2 <_free_r+0x42>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	1821      	adds	r1, r4, r0
 80059a4:	428b      	cmp	r3, r1
 80059a6:	d1f3      	bne.n	8005990 <_free_r+0x20>
 80059a8:	6819      	ldr	r1, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	1809      	adds	r1, r1, r0
 80059ae:	6021      	str	r1, [r4, #0]
 80059b0:	e7ee      	b.n	8005990 <_free_r+0x20>
 80059b2:	001a      	movs	r2, r3
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <_free_r+0x4e>
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	d9f9      	bls.n	80059b2 <_free_r+0x42>
 80059be:	6811      	ldr	r1, [r2, #0]
 80059c0:	1850      	adds	r0, r2, r1
 80059c2:	42a0      	cmp	r0, r4
 80059c4:	d10b      	bne.n	80059de <_free_r+0x6e>
 80059c6:	6820      	ldr	r0, [r4, #0]
 80059c8:	1809      	adds	r1, r1, r0
 80059ca:	1850      	adds	r0, r2, r1
 80059cc:	6011      	str	r1, [r2, #0]
 80059ce:	4283      	cmp	r3, r0
 80059d0:	d1e0      	bne.n	8005994 <_free_r+0x24>
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	1841      	adds	r1, r0, r1
 80059d8:	6011      	str	r1, [r2, #0]
 80059da:	6053      	str	r3, [r2, #4]
 80059dc:	e7da      	b.n	8005994 <_free_r+0x24>
 80059de:	42a0      	cmp	r0, r4
 80059e0:	d902      	bls.n	80059e8 <_free_r+0x78>
 80059e2:	230c      	movs	r3, #12
 80059e4:	602b      	str	r3, [r5, #0]
 80059e6:	e7d5      	b.n	8005994 <_free_r+0x24>
 80059e8:	6820      	ldr	r0, [r4, #0]
 80059ea:	1821      	adds	r1, r4, r0
 80059ec:	428b      	cmp	r3, r1
 80059ee:	d103      	bne.n	80059f8 <_free_r+0x88>
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	1809      	adds	r1, r1, r0
 80059f6:	6021      	str	r1, [r4, #0]
 80059f8:	6063      	str	r3, [r4, #4]
 80059fa:	6054      	str	r4, [r2, #4]
 80059fc:	e7ca      	b.n	8005994 <_free_r+0x24>
 80059fe:	46c0      	nop			@ (mov r8, r8)
 8005a00:	20000210 	.word	0x20000210

08005a04 <_init>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	46c0      	nop			@ (mov r8, r8)
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr

08005a10 <_fini>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr
