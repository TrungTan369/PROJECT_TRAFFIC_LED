
TRAFFIC_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002628  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080026e8  080026e8  000126e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002754  08002754  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002754  08002754  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002754  08002754  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002754  08002754  00012754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800275c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000024  08002780  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002780  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ba3  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c5b  00000000  00000000  00029bef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002b850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a8  00000000  00000000  0002c208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010092  00000000  00000000  0002cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c427  00000000  00000000  0003cb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f3ac  00000000  00000000  00048f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a8315  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002134  00000000  00000000  000a8368  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000024 	.word	0x20000024
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026d0 	.word	0x080026d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000028 	.word	0x20000028
 8000104:	080026d0 	.word	0x080026d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <getKeyinput>:
#include "button.h"


int buttonFlag[3] = {0,0,0};

void getKeyinput(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	//-----PROCESS BUTTON 1------------

	// BEGIN: timer_flag[1] == 1
	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == 0)){
 80003f8:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <getKeyinput+0x7c>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d10e      	bne.n	800041e <getKeyinput+0x2a>
 8000400:	2390      	movs	r3, #144	; 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0018      	movs	r0, r3
 8000408:	f001 f89c 	bl	8001544 <HAL_GPIO_ReadPin>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d106      	bne.n	800041e <getKeyinput+0x2a>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		buttonFlag[0] = 1;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <getKeyinput+0x80>)
 8000412:	2201      	movs	r2, #1
 8000414:	601a      	str	r2, [r3, #0]
		setTimer(3, 200);  //Không đọc nút nhấn trong 200ms sau khi nhấn lần đầu tiên
 8000416:	21c8      	movs	r1, #200	; 0xc8
 8000418:	2003      	movs	r0, #3
 800041a:	f000 fd65 	bl	8000ee8 <setTimer>
	}
	// không đọc tiếp nút nhấn trong 200ms

	// ----PROCESS BUTTON 2-----------

	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)){
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <getKeyinput+0x7c>)
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d10e      	bne.n	8000444 <getKeyinput+0x50>
 8000426:	2390      	movs	r3, #144	; 0x90
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2108      	movs	r1, #8
 800042c:	0018      	movs	r0, r3
 800042e:	f001 f889 	bl	8001544 <HAL_GPIO_ReadPin>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d106      	bne.n	8000444 <getKeyinput+0x50>
		//HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
		//counter_debug++;
		buttonFlag[1] = 1;
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <getKeyinput+0x80>)
 8000438:	2201      	movs	r2, #1
 800043a:	605a      	str	r2, [r3, #4]
		setTimer(3, 200);
 800043c:	21c8      	movs	r1, #200	; 0xc8
 800043e:	2003      	movs	r0, #3
 8000440:	f000 fd52 	bl	8000ee8 <setTimer>
	}

	// ----- PROCESS BUTTON 3 -----------
	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == 0)){
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <getKeyinput+0x7c>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d10e      	bne.n	800046a <getKeyinput+0x76>
 800044c:	2390      	movs	r3, #144	; 0x90
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	2102      	movs	r1, #2
 8000452:	0018      	movs	r0, r3
 8000454:	f001 f876 	bl	8001544 <HAL_GPIO_ReadPin>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d106      	bne.n	800046a <getKeyinput+0x76>
		//HAL_GPIO_TogglePin(G0_GPIO_Port, G0_Pin);
		//counter_debug++;
		setTimer(3, 200);
 800045c:	21c8      	movs	r1, #200	; 0xc8
 800045e:	2003      	movs	r0, #3
 8000460:	f000 fd42 	bl	8000ee8 <setTimer>
		buttonFlag[2] = 1;
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <getKeyinput+0x80>)
 8000466:	2201      	movs	r2, #1
 8000468:	609a      	str	r2, [r3, #8]
	}

}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	2000000c 	.word	0x2000000c
 8000474:	20000040 	.word	0x20000040

08000478 <isButtonPress>:
int isButtonPress(int i){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <isButtonPress+0x2c>)
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	0092      	lsls	r2, r2, #2
 8000486:	58d3      	ldr	r3, [r2, r3]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d106      	bne.n	800049a <isButtonPress+0x22>
		buttonFlag[i] = 0;
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <isButtonPress+0x2c>)
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	0092      	lsls	r2, r2, #2
 8000492:	2100      	movs	r1, #0
 8000494:	50d1      	str	r1, [r2, r3]
		return 1;
 8000496:	2301      	movs	r3, #1
 8000498:	e000      	b.n	800049c <isButtonPress+0x24>
	}
	return 0;
 800049a:	2300      	movs	r3, #0
}
 800049c:	0018      	movs	r0, r3
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000040 	.word	0x20000040

080004a8 <fsm_auto_run>:
 *      Author: HOME
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	switch (status) {   // LINE 1
 80004ac:	4bc1      	ldr	r3, [pc, #772]	; (80007b4 <fsm_auto_run+0x30c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	d900      	bls.n	80004b6 <fsm_auto_run+0xe>
 80004b4:	e17b      	b.n	80007ae <fsm_auto_run+0x306>
 80004b6:	009a      	lsls	r2, r3, #2
 80004b8:	4bbf      	ldr	r3, [pc, #764]	; (80007b8 <fsm_auto_run+0x310>)
 80004ba:	18d3      	adds	r3, r2, r3
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	469f      	mov	pc, r3
		case auto_init:
			// ------- ALL LED OFF -------------
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	0159      	lsls	r1, r3, #5
 80004c4:	2390      	movs	r3, #144	; 0x90
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	2201      	movs	r2, #1
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 f857 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 80004d0:	2390      	movs	r3, #144	; 0x90
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	2201      	movs	r2, #1
 80004d6:	2110      	movs	r1, #16
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 f850 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	0059      	lsls	r1, r3, #1
 80004e2:	2390      	movs	r3, #144	; 0x90
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2201      	movs	r2, #1
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 f848 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80004ee:	2390      	movs	r3, #144	; 0x90
 80004f0:	05db      	lsls	r3, r3, #23
 80004f2:	2201      	movs	r2, #1
 80004f4:	2104      	movs	r1, #4
 80004f6:	0018      	movs	r0, r3
 80004f8:	f001 f841 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 80004fc:	4baf      	ldr	r3, [pc, #700]	; (80007bc <fsm_auto_run+0x314>)
 80004fe:	2201      	movs	r2, #1
 8000500:	2120      	movs	r1, #32
 8000502:	0018      	movs	r0, r3
 8000504:	f001 f83b 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000508:	4bac      	ldr	r3, [pc, #688]	; (80007bc <fsm_auto_run+0x314>)
 800050a:	2201      	movs	r2, #1
 800050c:	2110      	movs	r1, #16
 800050e:	0018      	movs	r0, r3
 8000510:	f001 f835 	bl	800157e <HAL_GPIO_WritePin>

			status = auto_red_green;
 8000514:	4ba7      	ldr	r3, [pc, #668]	; (80007b4 <fsm_auto_run+0x30c>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]
			count0 = (time_red_green + time_red_yellow)/1000;
 800051a:	4ba9      	ldr	r3, [pc, #676]	; (80007c0 <fsm_auto_run+0x318>)
 800051c:	681a      	ldr	r2, [r3, #0]
 800051e:	4ba9      	ldr	r3, [pc, #676]	; (80007c4 <fsm_auto_run+0x31c>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	18d3      	adds	r3, r2, r3
 8000524:	22fa      	movs	r2, #250	; 0xfa
 8000526:	0091      	lsls	r1, r2, #2
 8000528:	0018      	movs	r0, r3
 800052a:	f7ff fe77 	bl	800021c <__divsi3>
 800052e:	0003      	movs	r3, r0
 8000530:	001a      	movs	r2, r3
 8000532:	4ba5      	ldr	r3, [pc, #660]	; (80007c8 <fsm_auto_run+0x320>)
 8000534:	601a      	str	r2, [r3, #0]
			count1 = time_red_green/1000;
 8000536:	4ba2      	ldr	r3, [pc, #648]	; (80007c0 <fsm_auto_run+0x318>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	22fa      	movs	r2, #250	; 0xfa
 800053c:	0091      	lsls	r1, r2, #2
 800053e:	0018      	movs	r0, r3
 8000540:	f7ff fe6c 	bl	800021c <__divsi3>
 8000544:	0003      	movs	r3, r0
 8000546:	001a      	movs	r2, r3
 8000548:	4ba0      	ldr	r3, [pc, #640]	; (80007cc <fsm_auto_run+0x324>)
 800054a:	601a      	str	r2, [r3, #0]
			setTimer(0, time_red_green);
 800054c:	4b9c      	ldr	r3, [pc, #624]	; (80007c0 <fsm_auto_run+0x318>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	0019      	movs	r1, r3
 8000552:	2000      	movs	r0, #0
 8000554:	f000 fcc8 	bl	8000ee8 <setTimer>
			setTimer(1, 1000); // count 1s
 8000558:	23fa      	movs	r3, #250	; 0xfa
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	0019      	movs	r1, r3
 800055e:	2001      	movs	r0, #1
 8000560:	f000 fcc2 	bl	8000ee8 <setTimer>
			setTimer(2, 10);  // scan led
 8000564:	210a      	movs	r1, #10
 8000566:	2002      	movs	r0, #2
 8000568:	f000 fcbe 	bl	8000ee8 <setTimer>
			break;
 800056c:	e0f8      	b.n	8000760 <fsm_auto_run+0x2b8>
		case auto_red_green:
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET); // yellow 0 off
 800056e:	2390      	movs	r3, #144	; 0x90
 8000570:	05db      	lsls	r3, r3, #23
 8000572:	2201      	movs	r2, #1
 8000574:	2110      	movs	r1, #16
 8000576:	0018      	movs	r0, r3
 8000578:	f001 f801 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); // red 1 on
 800057c:	2390      	movs	r3, #144	; 0x90
 800057e:	05db      	lsls	r3, r3, #23
 8000580:	2201      	movs	r2, #1
 8000582:	2104      	movs	r1, #4
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fffa 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET); // red0 on
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	0159      	lsls	r1, r3, #5
 800058e:	2390      	movs	r3, #144	; 0x90
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	2200      	movs	r2, #0
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fff2 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET); // green1 on
 800059a:	4b88      	ldr	r3, [pc, #544]	; (80007bc <fsm_auto_run+0x314>)
 800059c:	2200      	movs	r2, #0
 800059e:	2110      	movs	r1, #16
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 ffec 	bl	800157e <HAL_GPIO_WritePin>
			if(timer_flag[0] == 1){
 80005a6:	4b8a      	ldr	r3, [pc, #552]	; (80007d0 <fsm_auto_run+0x328>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d116      	bne.n	80005dc <fsm_auto_run+0x134>
				status = auto_red_yellow;
 80005ae:	4b81      	ldr	r3, [pc, #516]	; (80007b4 <fsm_auto_run+0x30c>)
 80005b0:	2202      	movs	r2, #2
 80005b2:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_yellow);
 80005b4:	4b83      	ldr	r3, [pc, #524]	; (80007c4 <fsm_auto_run+0x31c>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	0019      	movs	r1, r3
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fc94 	bl	8000ee8 <setTimer>
				count0 = 5;
 80005c0:	4b81      	ldr	r3, [pc, #516]	; (80007c8 <fsm_auto_run+0x320>)
 80005c2:	2205      	movs	r2, #5
 80005c4:	601a      	str	r2, [r3, #0]
				count1 = time_red_yellow/1000;
 80005c6:	4b7f      	ldr	r3, [pc, #508]	; (80007c4 <fsm_auto_run+0x31c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	22fa      	movs	r2, #250	; 0xfa
 80005cc:	0091      	lsls	r1, r2, #2
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff fe24 	bl	800021c <__divsi3>
 80005d4:	0003      	movs	r3, r0
 80005d6:	001a      	movs	r2, r3
 80005d8:	4b7c      	ldr	r3, [pc, #496]	; (80007cc <fsm_auto_run+0x324>)
 80005da:	601a      	str	r2, [r3, #0]
			}
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 80005dc:	2001      	movs	r0, #1
 80005de:	f7ff ff4b 	bl	8000478 <isButtonPress>
 80005e2:	0003      	movs	r3, r0
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d000      	beq.n	80005ea <fsm_auto_run+0x142>
 80005e8:	e0b3      	b.n	8000752 <fsm_auto_run+0x2aa>
				status = manual_red_green;
 80005ea:	4b72      	ldr	r3, [pc, #456]	; (80007b4 <fsm_auto_run+0x30c>)
 80005ec:	2205      	movs	r2, #5
 80005ee:	601a      	str	r2, [r3, #0]
				Diable_Led();
 80005f0:	f000 f8f0 	bl	80007d4 <Diable_Led>
				return;
 80005f4:	e0dc      	b.n	80007b0 <fsm_auto_run+0x308>
			}
			break;
		case auto_red_yellow:
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 off
 80005f6:	4b71      	ldr	r3, [pc, #452]	; (80007bc <fsm_auto_run+0x314>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	2110      	movs	r1, #16
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 ffbe 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET); // yellow1 on
 8000602:	4b6e      	ldr	r3, [pc, #440]	; (80007bc <fsm_auto_run+0x314>)
 8000604:	2200      	movs	r2, #0
 8000606:	2120      	movs	r1, #32
 8000608:	0018      	movs	r0, r3
 800060a:	f000 ffb8 	bl	800157e <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 800060e:	4b70      	ldr	r3, [pc, #448]	; (80007d0 <fsm_auto_run+0x328>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d000      	beq.n	8000618 <fsm_auto_run+0x170>
 8000616:	e09e      	b.n	8000756 <fsm_auto_run+0x2ae>
				status = auto_green_red;
 8000618:	4b66      	ldr	r3, [pc, #408]	; (80007b4 <fsm_auto_run+0x30c>)
 800061a:	2203      	movs	r2, #3
 800061c:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green)/1000;
 800061e:	4b68      	ldr	r3, [pc, #416]	; (80007c0 <fsm_auto_run+0x318>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	22fa      	movs	r2, #250	; 0xfa
 8000624:	0091      	lsls	r1, r2, #2
 8000626:	0018      	movs	r0, r3
 8000628:	f7ff fdf8 	bl	800021c <__divsi3>
 800062c:	0003      	movs	r3, r0
 800062e:	001a      	movs	r2, r3
 8000630:	4b65      	ldr	r3, [pc, #404]	; (80007c8 <fsm_auto_run+0x320>)
 8000632:	601a      	str	r2, [r3, #0]
				count1 = (time_red_green + time_red_yellow)/1000;
 8000634:	4b62      	ldr	r3, [pc, #392]	; (80007c0 <fsm_auto_run+0x318>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b62      	ldr	r3, [pc, #392]	; (80007c4 <fsm_auto_run+0x31c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	18d3      	adds	r3, r2, r3
 800063e:	22fa      	movs	r2, #250	; 0xfa
 8000640:	0091      	lsls	r1, r2, #2
 8000642:	0018      	movs	r0, r3
 8000644:	f7ff fdea 	bl	800021c <__divsi3>
 8000648:	0003      	movs	r3, r0
 800064a:	001a      	movs	r2, r3
 800064c:	4b5f      	ldr	r3, [pc, #380]	; (80007cc <fsm_auto_run+0x324>)
 800064e:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000650:	4b5b      	ldr	r3, [pc, #364]	; (80007c0 <fsm_auto_run+0x318>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	0019      	movs	r1, r3
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fc46 	bl	8000ee8 <setTimer>
			}
			break;
 800065c:	e07b      	b.n	8000756 <fsm_auto_run+0x2ae>
		case auto_green_red:
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red 0 off
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	0159      	lsls	r1, r3, #5
 8000662:	2390      	movs	r3, #144	; 0x90
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2201      	movs	r2, #1
 8000668:	0018      	movs	r0, r3
 800066a:	f000 ff88 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); // yellow 1 off
 800066e:	4b53      	ldr	r3, [pc, #332]	; (80007bc <fsm_auto_run+0x314>)
 8000670:	2201      	movs	r2, #1
 8000672:	2120      	movs	r1, #32
 8000674:	0018      	movs	r0, r3
 8000676:	f000 ff82 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET); // green 0 on
 800067a:	2380      	movs	r3, #128	; 0x80
 800067c:	0059      	lsls	r1, r3, #1
 800067e:	2390      	movs	r3, #144	; 0x90
 8000680:	05db      	lsls	r3, r3, #23
 8000682:	2200      	movs	r2, #0
 8000684:	0018      	movs	r0, r3
 8000686:	f000 ff7a 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 800068a:	2390      	movs	r3, #144	; 0x90
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	2200      	movs	r2, #0
 8000690:	2104      	movs	r1, #4
 8000692:	0018      	movs	r0, r3
 8000694:	f000 ff73 	bl	800157e <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 8000698:	4b4d      	ldr	r3, [pc, #308]	; (80007d0 <fsm_auto_run+0x328>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d116      	bne.n	80006ce <fsm_auto_run+0x226>
				status = auto_yellow_red;
 80006a0:	4b44      	ldr	r3, [pc, #272]	; (80007b4 <fsm_auto_run+0x30c>)
 80006a2:	2204      	movs	r2, #4
 80006a4:	601a      	str	r2, [r3, #0]
				count0 = time_red_yellow/1000;
 80006a6:	4b47      	ldr	r3, [pc, #284]	; (80007c4 <fsm_auto_run+0x31c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	22fa      	movs	r2, #250	; 0xfa
 80006ac:	0091      	lsls	r1, r2, #2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f7ff fdb4 	bl	800021c <__divsi3>
 80006b4:	0003      	movs	r3, r0
 80006b6:	001a      	movs	r2, r3
 80006b8:	4b43      	ldr	r3, [pc, #268]	; (80007c8 <fsm_auto_run+0x320>)
 80006ba:	601a      	str	r2, [r3, #0]
				count1 = 5;
 80006bc:	4b43      	ldr	r3, [pc, #268]	; (80007cc <fsm_auto_run+0x324>)
 80006be:	2205      	movs	r2, #5
 80006c0:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_yellow);
 80006c2:	4b40      	ldr	r3, [pc, #256]	; (80007c4 <fsm_auto_run+0x31c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	0019      	movs	r1, r3
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 fc0d 	bl	8000ee8 <setTimer>
			}
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 80006ce:	2001      	movs	r0, #1
 80006d0:	f7ff fed2 	bl	8000478 <isButtonPress>
 80006d4:	0003      	movs	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d13f      	bne.n	800075a <fsm_auto_run+0x2b2>
				status = manual_green_red;
 80006da:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <fsm_auto_run+0x30c>)
 80006dc:	2206      	movs	r2, #6
 80006de:	601a      	str	r2, [r3, #0]
				Diable_Led();
 80006e0:	f000 f878 	bl	80007d4 <Diable_Led>
				return;
 80006e4:	e064      	b.n	80007b0 <fsm_auto_run+0x308>
			}
			break;
		case auto_yellow_red:
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 on
 80006e6:	2390      	movs	r3, #144	; 0x90
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2200      	movs	r2, #0
 80006ec:	2110      	movs	r1, #16
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 ff45 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET); // green 0 off
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	0059      	lsls	r1, r3, #1
 80006f8:	2390      	movs	r3, #144	; 0x90
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	2201      	movs	r2, #1
 80006fe:	0018      	movs	r0, r3
 8000700:	f000 ff3d 	bl	800157e <HAL_GPIO_WritePin>
			if(timer_flag[0] == 1){
 8000704:	4b32      	ldr	r3, [pc, #200]	; (80007d0 <fsm_auto_run+0x328>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2b01      	cmp	r3, #1
 800070a:	d128      	bne.n	800075e <fsm_auto_run+0x2b6>
				status = auto_red_green;
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <fsm_auto_run+0x30c>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 8000712:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <fsm_auto_run+0x318>)
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	4b2b      	ldr	r3, [pc, #172]	; (80007c4 <fsm_auto_run+0x31c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	18d3      	adds	r3, r2, r3
 800071c:	22fa      	movs	r2, #250	; 0xfa
 800071e:	0091      	lsls	r1, r2, #2
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff fd7b 	bl	800021c <__divsi3>
 8000726:	0003      	movs	r3, r0
 8000728:	001a      	movs	r2, r3
 800072a:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <fsm_auto_run+0x320>)
 800072c:	601a      	str	r2, [r3, #0]
				count1 = time_red_green / 1000;
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <fsm_auto_run+0x318>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	22fa      	movs	r2, #250	; 0xfa
 8000734:	0091      	lsls	r1, r2, #2
 8000736:	0018      	movs	r0, r3
 8000738:	f7ff fd70 	bl	800021c <__divsi3>
 800073c:	0003      	movs	r3, r0
 800073e:	001a      	movs	r2, r3
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <fsm_auto_run+0x324>)
 8000742:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000744:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <fsm_auto_run+0x318>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	0019      	movs	r1, r3
 800074a:	2000      	movs	r0, #0
 800074c:	f000 fbcc 	bl	8000ee8 <setTimer>
			}
			break;
 8000750:	e005      	b.n	800075e <fsm_auto_run+0x2b6>
			break;
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	e004      	b.n	8000760 <fsm_auto_run+0x2b8>
			break;
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	e002      	b.n	8000760 <fsm_auto_run+0x2b8>
			break;
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	e000      	b.n	8000760 <fsm_auto_run+0x2b8>
			break;
 800075e:	46c0      	nop			; (mov r8, r8)
		default: // ----- MANUAL MODE & SETTING MODE ---------
			return;
			break;
	}
	updateClockBuffer(count0, count1);
 8000760:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <fsm_auto_run+0x320>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b19      	ldr	r3, [pc, #100]	; (80007cc <fsm_auto_run+0x324>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	0019      	movs	r1, r3
 800076a:	0010      	movs	r0, r2
 800076c:	f000 f9c6 	bl	8000afc <updateClockBuffer>
	if(timer_flag[2] == 1){
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <fsm_auto_run+0x328>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d105      	bne.n	8000784 <fsm_auto_run+0x2dc>
		setTimer(2, 10);
 8000778:	210a      	movs	r1, #10
 800077a:	2002      	movs	r0, #2
 800077c:	f000 fbb4 	bl	8000ee8 <setTimer>
		Scan7SEG();
 8000780:	f000 f84c 	bl	800081c <Scan7SEG>
	}

	if(timer_flag[1] == 1){
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <fsm_auto_run+0x328>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d111      	bne.n	80007b0 <fsm_auto_run+0x308>
		setTimer(1, 1000);
 800078c:	23fa      	movs	r3, #250	; 0xfa
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	0019      	movs	r1, r3
 8000792:	2001      	movs	r0, #1
 8000794:	f000 fba8 	bl	8000ee8 <setTimer>
		count0 --; count1 --;
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <fsm_auto_run+0x320>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1e5a      	subs	r2, r3, #1
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <fsm_auto_run+0x320>)
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	4b0a      	ldr	r3, [pc, #40]	; (80007cc <fsm_auto_run+0x324>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1e5a      	subs	r2, r3, #1
 80007a8:	4b08      	ldr	r3, [pc, #32]	; (80007cc <fsm_auto_run+0x324>)
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	e000      	b.n	80007b0 <fsm_auto_run+0x308>
			return;
 80007ae:	46c0      	nop			; (mov r8, r8)
	}
}
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000004c 	.word	0x2000004c
 80007b8:	080026e8 	.word	0x080026e8
 80007bc:	48000400 	.word	0x48000400
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000004 	.word	0x20000004
 80007c8:	20000050 	.word	0x20000050
 80007cc:	20000054 	.word	0x20000054
 80007d0:	2000000c 	.word	0x2000000c

080007d4 <Diable_Led>:
 */
#include "led_display.h"

int led_buffer[4] = {0,0,0,0};
int led_index = 0;
void Diable_Led(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80007d8:	2390      	movs	r3, #144	; 0x90
 80007da:	05db      	lsls	r3, r3, #23
 80007dc:	2200      	movs	r2, #0
 80007de:	2101      	movs	r1, #1
 80007e0:	0018      	movs	r0, r3
 80007e2:	f000 fecc 	bl	800157e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <Diable_Led+0x40>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	2102      	movs	r1, #2
 80007ec:	0018      	movs	r0, r3
 80007ee:	f000 fec6 	bl	800157e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <Diable_Led+0x44>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	2108      	movs	r1, #8
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 fec0 	bl	800157e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80007fe:	2380      	movs	r3, #128	; 0x80
 8000800:	0119      	lsls	r1, r3, #4
 8000802:	2390      	movs	r3, #144	; 0x90
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	2200      	movs	r2, #0
 8000808:	0018      	movs	r0, r3
 800080a:	f000 feb8 	bl	800157e <HAL_GPIO_WritePin>
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	48001400 	.word	0x48001400
 8000818:	48000400 	.word	0x48000400

0800081c <Scan7SEG>:
void Scan7SEG(){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	Diable_Led();
 8000820:	f7ff ffd8 	bl	80007d4 <Diable_Led>
	switch(led_index){
 8000824:	4b27      	ldr	r3, [pc, #156]	; (80008c4 <Scan7SEG+0xa8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b03      	cmp	r3, #3
 800082a:	d02d      	beq.n	8000888 <Scan7SEG+0x6c>
 800082c:	dc3a      	bgt.n	80008a4 <Scan7SEG+0x88>
 800082e:	2b02      	cmp	r3, #2
 8000830:	d01e      	beq.n	8000870 <Scan7SEG+0x54>
 8000832:	dc37      	bgt.n	80008a4 <Scan7SEG+0x88>
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <Scan7SEG+0x22>
 8000838:	2b01      	cmp	r3, #1
 800083a:	d00d      	beq.n	8000858 <Scan7SEG+0x3c>
		case 3:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
			display7SEG(led_buffer[3]);
			break;
		default:
			break;
 800083c:	e032      	b.n	80008a4 <Scan7SEG+0x88>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800083e:	2390      	movs	r3, #144	; 0x90
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	2201      	movs	r2, #1
 8000844:	2101      	movs	r1, #1
 8000846:	0018      	movs	r0, r3
 8000848:	f000 fe99 	bl	800157e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <Scan7SEG+0xac>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	0018      	movs	r0, r3
 8000852:	f000 f83f 	bl	80008d4 <display7SEG>
			break;
 8000856:	e026      	b.n	80008a6 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000858:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <Scan7SEG+0xb0>)
 800085a:	2201      	movs	r2, #1
 800085c:	2102      	movs	r1, #2
 800085e:	0018      	movs	r0, r3
 8000860:	f000 fe8d 	bl	800157e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <Scan7SEG+0xac>)
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	0018      	movs	r0, r3
 800086a:	f000 f833 	bl	80008d4 <display7SEG>
			break;
 800086e:	e01a      	b.n	80008a6 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000870:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <Scan7SEG+0xb4>)
 8000872:	2201      	movs	r2, #1
 8000874:	2108      	movs	r1, #8
 8000876:	0018      	movs	r0, r3
 8000878:	f000 fe81 	bl	800157e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <Scan7SEG+0xac>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	0018      	movs	r0, r3
 8000882:	f000 f827 	bl	80008d4 <display7SEG>
			break;
 8000886:	e00e      	b.n	80008a6 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	0119      	lsls	r1, r3, #4
 800088c:	2390      	movs	r3, #144	; 0x90
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	2201      	movs	r2, #1
 8000892:	0018      	movs	r0, r3
 8000894:	f000 fe73 	bl	800157e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <Scan7SEG+0xac>)
 800089a:	68db      	ldr	r3, [r3, #12]
 800089c:	0018      	movs	r0, r3
 800089e:	f000 f819 	bl	80008d4 <display7SEG>
			break;
 80008a2:	e000      	b.n	80008a6 <Scan7SEG+0x8a>
			break;
 80008a4:	46c0      	nop			; (mov r8, r8)
	}
	if((++led_index) >= 4) led_index = 0;
 80008a6:	4b07      	ldr	r3, [pc, #28]	; (80008c4 <Scan7SEG+0xa8>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1c5a      	adds	r2, r3, #1
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <Scan7SEG+0xa8>)
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	4b04      	ldr	r3, [pc, #16]	; (80008c4 <Scan7SEG+0xa8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	dd02      	ble.n	80008be <Scan7SEG+0xa2>
 80008b8:	4b02      	ldr	r3, [pc, #8]	; (80008c4 <Scan7SEG+0xa8>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000068 	.word	0x20000068
 80008c8:	20000058 	.word	0x20000058
 80008cc:	48001400 	.word	0x48001400
 80008d0:	48000400 	.word	0x48000400

080008d4 <display7SEG>:
void display7SEG(int num){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b09      	cmp	r3, #9
 80008e0:	d900      	bls.n	80008e4 <display7SEG+0x10>
 80008e2:	e0ff      	b.n	8000ae4 <display7SEG+0x210>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	009a      	lsls	r2, r3, #2
 80008e8:	4b81      	ldr	r3, [pc, #516]	; (8000af0 <display7SEG+0x21c>)
 80008ea:	18d3      	adds	r3, r2, r3
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	469f      	mov	pc, r3
	switch(num){
		case 0:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 80008f0:	4b80      	ldr	r3, [pc, #512]	; (8000af4 <display7SEG+0x220>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	2101      	movs	r1, #1
 80008f6:	0018      	movs	r0, r3
 80008f8:	f000 fe41 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80008fc:	4b7e      	ldr	r3, [pc, #504]	; (8000af8 <display7SEG+0x224>)
 80008fe:	2200      	movs	r2, #0
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	0018      	movs	r0, r3
 8000904:	f000 fe3b 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000908:	4b7b      	ldr	r3, [pc, #492]	; (8000af8 <display7SEG+0x224>)
 800090a:	2200      	movs	r2, #0
 800090c:	2140      	movs	r1, #64	; 0x40
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fe35 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000914:	4b78      	ldr	r3, [pc, #480]	; (8000af8 <display7SEG+0x224>)
 8000916:	2200      	movs	r2, #0
 8000918:	2102      	movs	r1, #2
 800091a:	0018      	movs	r0, r3
 800091c:	f000 fe2f 	bl	800157e <HAL_GPIO_WritePin>
			break;
 8000920:	e0e1      	b.n	8000ae6 <display7SEG+0x212>
		case 1:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000922:	4b74      	ldr	r3, [pc, #464]	; (8000af4 <display7SEG+0x220>)
 8000924:	2201      	movs	r2, #1
 8000926:	2101      	movs	r1, #1
 8000928:	0018      	movs	r0, r3
 800092a:	f000 fe28 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800092e:	4b72      	ldr	r3, [pc, #456]	; (8000af8 <display7SEG+0x224>)
 8000930:	2200      	movs	r2, #0
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fe22 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 800093a:	4b6f      	ldr	r3, [pc, #444]	; (8000af8 <display7SEG+0x224>)
 800093c:	2200      	movs	r2, #0
 800093e:	2140      	movs	r1, #64	; 0x40
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fe1c 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000946:	4b6c      	ldr	r3, [pc, #432]	; (8000af8 <display7SEG+0x224>)
 8000948:	2200      	movs	r2, #0
 800094a:	2102      	movs	r1, #2
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fe16 	bl	800157e <HAL_GPIO_WritePin>
			break;
 8000952:	e0c8      	b.n	8000ae6 <display7SEG+0x212>
		case 2:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000954:	4b67      	ldr	r3, [pc, #412]	; (8000af4 <display7SEG+0x220>)
 8000956:	2200      	movs	r2, #0
 8000958:	2101      	movs	r1, #1
 800095a:	0018      	movs	r0, r3
 800095c:	f000 fe0f 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000960:	4b65      	ldr	r3, [pc, #404]	; (8000af8 <display7SEG+0x224>)
 8000962:	2201      	movs	r2, #1
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fe09 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 800096c:	4b62      	ldr	r3, [pc, #392]	; (8000af8 <display7SEG+0x224>)
 800096e:	2200      	movs	r2, #0
 8000970:	2140      	movs	r1, #64	; 0x40
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fe03 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000978:	4b5f      	ldr	r3, [pc, #380]	; (8000af8 <display7SEG+0x224>)
 800097a:	2200      	movs	r2, #0
 800097c:	2102      	movs	r1, #2
 800097e:	0018      	movs	r0, r3
 8000980:	f000 fdfd 	bl	800157e <HAL_GPIO_WritePin>
			break;
 8000984:	e0af      	b.n	8000ae6 <display7SEG+0x212>
		case 3:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000986:	4b5b      	ldr	r3, [pc, #364]	; (8000af4 <display7SEG+0x220>)
 8000988:	2201      	movs	r2, #1
 800098a:	2101      	movs	r1, #1
 800098c:	0018      	movs	r0, r3
 800098e:	f000 fdf6 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000992:	4b59      	ldr	r3, [pc, #356]	; (8000af8 <display7SEG+0x224>)
 8000994:	2201      	movs	r2, #1
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	0018      	movs	r0, r3
 800099a:	f000 fdf0 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 800099e:	4b56      	ldr	r3, [pc, #344]	; (8000af8 <display7SEG+0x224>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	0018      	movs	r0, r3
 80009a6:	f000 fdea 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80009aa:	4b53      	ldr	r3, [pc, #332]	; (8000af8 <display7SEG+0x224>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	2102      	movs	r1, #2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fde4 	bl	800157e <HAL_GPIO_WritePin>
			break;
 80009b6:	e096      	b.n	8000ae6 <display7SEG+0x212>
		case 4:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 80009b8:	4b4e      	ldr	r3, [pc, #312]	; (8000af4 <display7SEG+0x220>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	2101      	movs	r1, #1
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fddd 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80009c4:	4b4c      	ldr	r3, [pc, #304]	; (8000af8 <display7SEG+0x224>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fdd7 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 80009d0:	4b49      	ldr	r3, [pc, #292]	; (8000af8 <display7SEG+0x224>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	2140      	movs	r1, #64	; 0x40
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fdd1 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80009dc:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <display7SEG+0x224>)
 80009de:	2200      	movs	r2, #0
 80009e0:	2102      	movs	r1, #2
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 fdcb 	bl	800157e <HAL_GPIO_WritePin>
			break;
 80009e8:	e07d      	b.n	8000ae6 <display7SEG+0x212>
		case 5:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 80009ea:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <display7SEG+0x220>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	2101      	movs	r1, #1
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fdc4 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80009f6:	4b40      	ldr	r3, [pc, #256]	; (8000af8 <display7SEG+0x224>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	2180      	movs	r1, #128	; 0x80
 80009fc:	0018      	movs	r0, r3
 80009fe:	f000 fdbe 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8000a02:	4b3d      	ldr	r3, [pc, #244]	; (8000af8 <display7SEG+0x224>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	2140      	movs	r1, #64	; 0x40
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fdb8 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000a0e:	4b3a      	ldr	r3, [pc, #232]	; (8000af8 <display7SEG+0x224>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	2102      	movs	r1, #2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 fdb2 	bl	800157e <HAL_GPIO_WritePin>
			break;
 8000a1a:	e064      	b.n	8000ae6 <display7SEG+0x212>
		case 6:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000a1c:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <display7SEG+0x220>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2101      	movs	r1, #1
 8000a22:	0018      	movs	r0, r3
 8000a24:	f000 fdab 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000a28:	4b33      	ldr	r3, [pc, #204]	; (8000af8 <display7SEG+0x224>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fda5 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8000a34:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <display7SEG+0x224>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 fd9f 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <display7SEG+0x224>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	2102      	movs	r1, #2
 8000a46:	0018      	movs	r0, r3
 8000a48:	f000 fd99 	bl	800157e <HAL_GPIO_WritePin>
			break;
 8000a4c:	e04b      	b.n	8000ae6 <display7SEG+0x212>
		case 7:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <display7SEG+0x220>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	2101      	movs	r1, #1
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fd92 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000a5a:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <display7SEG+0x224>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2180      	movs	r1, #128	; 0x80
 8000a60:	0018      	movs	r0, r3
 8000a62:	f000 fd8c 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8000a66:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <display7SEG+0x224>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2140      	movs	r1, #64	; 0x40
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f000 fd86 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <display7SEG+0x224>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	2102      	movs	r1, #2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fd80 	bl	800157e <HAL_GPIO_WritePin>
			break;
 8000a7e:	e032      	b.n	8000ae6 <display7SEG+0x212>
		case 8:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000a80:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <display7SEG+0x220>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	2101      	movs	r1, #1
 8000a86:	0018      	movs	r0, r3
 8000a88:	f000 fd79 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <display7SEG+0x224>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fd73 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <display7SEG+0x224>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 fd6d 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <display7SEG+0x224>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	2102      	movs	r1, #2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f000 fd67 	bl	800157e <HAL_GPIO_WritePin>
			break;
 8000ab0:	e019      	b.n	8000ae6 <display7SEG+0x212>
		case 9:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <display7SEG+0x220>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 fd60 	bl	800157e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <display7SEG+0x224>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 fd5a 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000aca:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <display7SEG+0x224>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	2140      	movs	r1, #64	; 0x40
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fd54 	bl	800157e <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <display7SEG+0x224>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2102      	movs	r1, #2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 fd4e 	bl	800157e <HAL_GPIO_WritePin>
			break;
 8000ae2:	e000      	b.n	8000ae6 <display7SEG+0x212>
		default:
			break;
 8000ae4:	46c0      	nop			; (mov r8, r8)
	}
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	080026fc 	.word	0x080026fc
 8000af4:	48001400 	.word	0x48001400
 8000af8:	48000400 	.word	0x48000400

08000afc <updateClockBuffer>:
void updateClockBuffer(int num1, int num2){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	210a      	movs	r1, #10
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fb86 	bl	800021c <__divsi3>
 8000b10:	0003      	movs	r3, r0
 8000b12:	001a      	movs	r2, r3
 8000b14:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <updateClockBuffer+0x5c>)
 8000b16:	601a      	str	r2, [r3, #0]
	led_buffer[1] = num1 % 10;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	210a      	movs	r1, #10
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fc63 	bl	80003e8 <__aeabi_idivmod>
 8000b22:	000b      	movs	r3, r1
 8000b24:	001a      	movs	r2, r3
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <updateClockBuffer+0x5c>)
 8000b28:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	210a      	movs	r1, #10
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f7ff fb74 	bl	800021c <__divsi3>
 8000b34:	0003      	movs	r3, r0
 8000b36:	001a      	movs	r2, r3
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <updateClockBuffer+0x5c>)
 8000b3a:	609a      	str	r2, [r3, #8]
	led_buffer[3] = num2 % 10;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	210a      	movs	r1, #10
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fc51 	bl	80003e8 <__aeabi_idivmod>
 8000b46:	000b      	movs	r3, r1
 8000b48:	001a      	movs	r2, r3
 8000b4a:	4b03      	ldr	r3, [pc, #12]	; (8000b58 <updateClockBuffer+0x5c>)
 8000b4c:	60da      	str	r2, [r3, #12]
}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	46bd      	mov	sp, r7
 8000b52:	b002      	add	sp, #8
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			; (mov r8, r8)
 8000b58:	20000058 	.word	0x20000058

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f000 fa46 	bl	8000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 f80e 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b68:	f000 f8a0 	bl	8000cac <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b6c:	f000 f84a 	bl	8000c04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <main+0x24>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 f9cc 	bl	8001f10 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_auto_run();
 8000b78:	f7ff fc96 	bl	80004a8 <fsm_auto_run>
 8000b7c:	e7fc      	b.n	8000b78 <main+0x1c>
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	2000007c 	.word	0x2000007c

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b091      	sub	sp, #68	; 0x44
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	2410      	movs	r4, #16
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2330      	movs	r3, #48	; 0x30
 8000b92:	001a      	movs	r2, r3
 8000b94:	2100      	movs	r1, #0
 8000b96:	f001 fd93 	bl	80026c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9a:	003b      	movs	r3, r7
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f001 fd8c 	bl	80026c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba8:	0021      	movs	r1, r4
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2202      	movs	r2, #2
 8000bae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2210      	movs	r2, #16
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f000 fd15 	bl	80015f4 <HAL_RCC_OscConfig>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000bce:	f000 f913 	bl	8000df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bd8:	003b      	movs	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	003b      	movs	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bea:	003b      	movs	r3, r7
 8000bec:	2100      	movs	r1, #0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 f81a 	bl	8001c28 <HAL_RCC_ClockConfig>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000bf8:	f000 f8fe 	bl	8000df8 <Error_Handler>
  }
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b011      	add	sp, #68	; 0x44
 8000c02:	bd90      	pop	{r4, r7, pc}

08000c04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	0018      	movs	r0, r3
 8000c10:	2310      	movs	r3, #16
 8000c12:	001a      	movs	r2, r3
 8000c14:	2100      	movs	r1, #0
 8000c16:	f001 fd53 	bl	80026c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1a:	003b      	movs	r3, r7
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	2308      	movs	r3, #8
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f001 fd4c 	bl	80026c0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c28:	4b1e      	ldr	r3, [pc, #120]	; (8000ca4 <MX_TIM2_Init+0xa0>)
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	05d2      	lsls	r2, r2, #23
 8000c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c30:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <MX_TIM2_Init+0xa0>)
 8000c32:	4a1d      	ldr	r2, [pc, #116]	; (8000ca8 <MX_TIM2_Init+0xa4>)
 8000c34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM2_Init+0xa0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <MX_TIM2_Init+0xa0>)
 8000c3e:	2209      	movs	r2, #9
 8000c40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_TIM2_Init+0xa0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_TIM2_Init+0xa0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM2_Init+0xa0>)
 8000c50:	0018      	movs	r0, r3
 8000c52:	f001 f90d 	bl	8001e70 <HAL_TIM_Base_Init>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c5a:	f000 f8cd 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	2108      	movs	r1, #8
 8000c60:	187b      	adds	r3, r7, r1
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	0152      	lsls	r2, r2, #5
 8000c66:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c68:	187a      	adds	r2, r7, r1
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <MX_TIM2_Init+0xa0>)
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f001 fa88 	bl	8002184 <HAL_TIM_ConfigClockSource>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c78:	f000 f8be 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	003b      	movs	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c82:	003b      	movs	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c88:	003a      	movs	r2, r7
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <MX_TIM2_Init+0xa0>)
 8000c8c:	0011      	movs	r1, r2
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f001 fc8a 	bl	80025a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	1e03      	subs	r3, r0, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000c98:	f000 f8ae 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b006      	add	sp, #24
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000007c 	.word	0x2000007c
 8000ca8:	00001f3f 	.word	0x00001f3f

08000cac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b089      	sub	sp, #36	; 0x24
 8000cb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb2:	240c      	movs	r4, #12
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	2314      	movs	r3, #20
 8000cba:	001a      	movs	r2, r3
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	f001 fcff 	bl	80026c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc2:	4b49      	ldr	r3, [pc, #292]	; (8000de8 <MX_GPIO_Init+0x13c>)
 8000cc4:	695a      	ldr	r2, [r3, #20]
 8000cc6:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <MX_GPIO_Init+0x13c>)
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	03c9      	lsls	r1, r1, #15
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	615a      	str	r2, [r3, #20]
 8000cd0:	4b45      	ldr	r3, [pc, #276]	; (8000de8 <MX_GPIO_Init+0x13c>)
 8000cd2:	695a      	ldr	r2, [r3, #20]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	03db      	lsls	r3, r3, #15
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b42      	ldr	r3, [pc, #264]	; (8000de8 <MX_GPIO_Init+0x13c>)
 8000ce0:	695a      	ldr	r2, [r3, #20]
 8000ce2:	4b41      	ldr	r3, [pc, #260]	; (8000de8 <MX_GPIO_Init+0x13c>)
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	0289      	lsls	r1, r1, #10
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	615a      	str	r2, [r3, #20]
 8000cec:	4b3e      	ldr	r3, [pc, #248]	; (8000de8 <MX_GPIO_Init+0x13c>)
 8000cee:	695a      	ldr	r2, [r3, #20]
 8000cf0:	2380      	movs	r3, #128	; 0x80
 8000cf2:	029b      	lsls	r3, r3, #10
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <MX_GPIO_Init+0x13c>)
 8000cfc:	695a      	ldr	r2, [r3, #20]
 8000cfe:	4b3a      	ldr	r3, [pc, #232]	; (8000de8 <MX_GPIO_Init+0x13c>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	02c9      	lsls	r1, r1, #11
 8000d04:	430a      	orrs	r2, r1
 8000d06:	615a      	str	r2, [r3, #20]
 8000d08:	4b37      	ldr	r3, [pc, #220]	; (8000de8 <MX_GPIO_Init+0x13c>)
 8000d0a:	695a      	ldr	r2, [r3, #20]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	02db      	lsls	r3, r3, #11
 8000d10:	4013      	ands	r3, r2
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, A_Pin|EN1_Pin, GPIO_PIN_RESET);
 8000d16:	4b35      	ldr	r3, [pc, #212]	; (8000dec <MX_GPIO_Init+0x140>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2103      	movs	r1, #3
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f000 fc2e 	bl	800157e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|R1_Pin|Y0_Pin|G0_Pin
 8000d22:	4933      	ldr	r1, [pc, #204]	; (8000df0 <MX_GPIO_Init+0x144>)
 8000d24:	2390      	movs	r3, #144	; 0x90
 8000d26:	05db      	lsls	r3, r3, #23
 8000d28:	2200      	movs	r2, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 fc27 	bl	800157e <HAL_GPIO_WritePin>
                          |EN3_Pin|R0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_Pin|EN2_Pin|G1_Pin|Y1_Pin
 8000d30:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <MX_GPIO_Init+0x148>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	21fa      	movs	r1, #250	; 0xfa
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fc21 	bl	800157e <HAL_GPIO_WritePin>
                          |C_Pin|B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A_Pin EN1_Pin */
  GPIO_InitStruct.Pin = A_Pin|EN1_Pin;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2203      	movs	r2, #3
 8000d40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	2201      	movs	r2, #1
 8000d46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	4a25      	ldr	r2, [pc, #148]	; (8000dec <MX_GPIO_Init+0x140>)
 8000d58:	0019      	movs	r1, r3
 8000d5a:	0010      	movs	r0, r2
 8000d5c:	f000 fa8a 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin R1_Pin Y0_Pin G0_Pin
                           EN3_Pin R0_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|R1_Pin|Y0_Pin|G0_Pin
 8000d60:	193b      	adds	r3, r7, r4
 8000d62:	4a23      	ldr	r2, [pc, #140]	; (8000df0 <MX_GPIO_Init+0x144>)
 8000d64:	601a      	str	r2, [r3, #0]
                          |EN3_Pin|R0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	2201      	movs	r2, #1
 8000d6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	193b      	adds	r3, r7, r4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	193a      	adds	r2, r7, r4
 8000d7a:	2390      	movs	r3, #144	; 0x90
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 fa77 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	228a      	movs	r2, #138	; 0x8a
 8000d8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	2201      	movs	r2, #1
 8000d96:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	193a      	adds	r2, r7, r4
 8000d9a:	2390      	movs	r3, #144	; 0x90
 8000d9c:	05db      	lsls	r3, r3, #23
 8000d9e:	0011      	movs	r1, r2
 8000da0:	0018      	movs	r0, r3
 8000da2:	f000 fa67 	bl	8001274 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_Pin EN2_Pin G1_Pin Y1_Pin
                           C_Pin B_Pin */
  GPIO_InitStruct.Pin = D_Pin|EN2_Pin|G1_Pin|Y1_Pin
 8000da6:	0021      	movs	r1, r4
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	22fa      	movs	r2, #250	; 0xfa
 8000dac:	601a      	str	r2, [r3, #0]
                          |C_Pin|B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	187b      	adds	r3, r7, r1
 8000db0:	2201      	movs	r2, #1
 8000db2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <MX_GPIO_Init+0x148>)
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	0010      	movs	r0, r2
 8000dc8:	f000 fa54 	bl	8001274 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB6);
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	025b      	lsls	r3, r3, #9
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 fbf1 	bl	80015b8 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB7);
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	029b      	lsls	r3, r3, #10
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 fbec 	bl	80015b8 <HAL_I2CEx_EnableFastModePlus>

}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b009      	add	sp, #36	; 0x24
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	40021000 	.word	0x40021000
 8000dec:	48001400 	.word	0x48001400
 8000df0:	00001915 	.word	0x00001915
 8000df4:	48000400 	.word	0x48000400

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	e7fe      	b.n	8000e00 <Error_Handler+0x8>
	...

08000e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_MspInit+0x44>)
 8000e0c:	699a      	ldr	r2, [r3, #24]
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_MspInit+0x44>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	430a      	orrs	r2, r1
 8000e14:	619a      	str	r2, [r3, #24]
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_MspInit+0x44>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x44>)
 8000e24:	69da      	ldr	r2, [r3, #28]
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_MspInit+0x44>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	0549      	lsls	r1, r1, #21
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	61da      	str	r2, [r3, #28]
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_MspInit+0x44>)
 8000e32:	69da      	ldr	r2, [r3, #28]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	055b      	lsls	r3, r3, #21
 8000e38:	4013      	ands	r3, r2
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	2380      	movs	r3, #128	; 0x80
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d113      	bne.n	8000e88 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e60:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <HAL_TIM_Base_MspInit+0x44>)
 8000e62:	69da      	ldr	r2, [r3, #28]
 8000e64:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_TIM_Base_MspInit+0x44>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	61da      	str	r2, [r3, #28]
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_TIM_Base_MspInit+0x44>)
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	2201      	movs	r2, #1
 8000e72:	4013      	ands	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	200f      	movs	r0, #15
 8000e7e:	f000 f9c7 	bl	8001210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e82:	200f      	movs	r0, #15
 8000e84:	f000 f9d9 	bl	800123a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e88:	46c0      	nop			; (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b004      	add	sp, #16
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb8:	f000 f8e2 	bl	8001080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <TIM2_IRQHandler+0x14>)
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f001 f86c 	bl	8001fa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ed0:	46c0      	nop			; (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	2000007c 	.word	0x2000007c

08000edc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <setTimer>:
#include "timer.h"

int counter[4] = {0, 0, 0, 0};
int timer_flag[4] = {0, 0, 0, 1};// FLAG[3] = 1 TO CHECK BUTTON PRESS( GO TO FUNCTION getKeyinput())

void setTimer(int timer, int duration){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	counter[timer] = duration / 10;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	210a      	movs	r1, #10
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f7ff f990 	bl	800021c <__divsi3>
 8000efc:	0003      	movs	r3, r0
 8000efe:	0019      	movs	r1, r3
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <setTimer+0x34>)
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	0092      	lsls	r2, r2, #2
 8000f06:	50d1      	str	r1, [r2, r3]
	timer_flag[timer] = 0;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <setTimer+0x38>)
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	0092      	lsls	r2, r2, #2
 8000f0e:	2100      	movs	r1, #0
 8000f10:	50d1      	str	r1, [r2, r3]
}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	2000006c 	.word	0x2000006c
 8000f20:	2000000c 	.word	0x2000000c

08000f24 <timer_run>:
void timer_run(){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){ // 4 timer
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	e01c      	b.n	8000f6a <timer_run+0x46>
		if(counter[i] > 0){
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <timer_run+0x58>)
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	0092      	lsls	r2, r2, #2
 8000f36:	58d3      	ldr	r3, [r2, r3]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	dd13      	ble.n	8000f64 <timer_run+0x40>
			counter[i]--;
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <timer_run+0x58>)
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	58d3      	ldr	r3, [r2, r3]
 8000f44:	1e59      	subs	r1, r3, #1
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <timer_run+0x58>)
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	50d1      	str	r1, [r2, r3]
			if(counter[i] <= 0)
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <timer_run+0x58>)
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	58d3      	ldr	r3, [r2, r3]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	dc04      	bgt.n	8000f64 <timer_run+0x40>
				timer_flag[i] = 1;
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <timer_run+0x5c>)
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	0092      	lsls	r2, r2, #2
 8000f60:	2101      	movs	r1, #1
 8000f62:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 4; i++){ // 4 timer
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3301      	adds	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	dddf      	ble.n	8000f30 <timer_run+0xc>
		}
	}
}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b002      	add	sp, #8
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	2000006c 	.word	0x2000006c
 8000f80:	2000000c 	.word	0x2000000c

08000f84 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	getKeyinput();
 8000f8c:	f7ff fa32 	bl	80003f4 <getKeyinput>
	timer_run();
 8000f90:	f7ff ffc8 	bl	8000f24 <timer_run>
}
 8000f94:	46c0      	nop			; (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b002      	add	sp, #8
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa0:	f7ff ff9c 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa6:	490d      	ldr	r1, [pc, #52]	; (8000fdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <LoopForever+0xe>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fac:	e002      	b.n	8000fb4 <LoopCopyDataInit>

08000fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fb2:	3304      	adds	r3, #4

08000fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb8:	d3f9      	bcc.n	8000fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fbc:	4c0a      	ldr	r4, [pc, #40]	; (8000fe8 <LoopForever+0x16>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc0:	e001      	b.n	8000fc6 <LoopFillZerobss>

08000fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc4:	3204      	adds	r2, #4

08000fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc8:	d3fb      	bcc.n	8000fc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fca:	f001 fb55 	bl	8002678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fce:	f7ff fdc5 	bl	8000b5c <main>

08000fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fd2:	e7fe      	b.n	8000fd2 <LoopForever>
  ldr   r0, =_estack
 8000fd4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fdc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000fe0:	0800275c 	.word	0x0800275c
  ldr r2, =_sbss
 8000fe4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000fe8:	200000c8 	.word	0x200000c8

08000fec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fec:	e7fe      	b.n	8000fec <ADC1_IRQHandler>
	...

08000ff0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_Init+0x24>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_Init+0x24>)
 8000ffa:	2110      	movs	r1, #16
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001000:	2000      	movs	r0, #0
 8001002:	f000 f809 	bl	8001018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001006:	f7ff fefd 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	0018      	movs	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40022000 	.word	0x40022000

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_InitTick+0x5c>)
 8001022:	681c      	ldr	r4, [r3, #0]
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_InitTick+0x60>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	0019      	movs	r1, r3
 800102a:	23fa      	movs	r3, #250	; 0xfa
 800102c:	0098      	lsls	r0, r3, #2
 800102e:	f7ff f86b 	bl	8000108 <__udivsi3>
 8001032:	0003      	movs	r3, r0
 8001034:	0019      	movs	r1, r3
 8001036:	0020      	movs	r0, r4
 8001038:	f7ff f866 	bl	8000108 <__udivsi3>
 800103c:	0003      	movs	r3, r0
 800103e:	0018      	movs	r0, r3
 8001040:	f000 f90b 	bl	800125a <HAL_SYSTICK_Config>
 8001044:	1e03      	subs	r3, r0, #0
 8001046:	d001      	beq.n	800104c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e00f      	b.n	800106c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b03      	cmp	r3, #3
 8001050:	d80b      	bhi.n	800106a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	2301      	movs	r3, #1
 8001056:	425b      	negs	r3, r3
 8001058:	2200      	movs	r2, #0
 800105a:	0018      	movs	r0, r3
 800105c:	f000 f8d8 	bl	8001210 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_InitTick+0x64>)
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	e000      	b.n	800106c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
}
 800106c:	0018      	movs	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	b003      	add	sp, #12
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	20000008 	.word	0x20000008
 8001078:	20000020 	.word	0x20000020
 800107c:	2000001c 	.word	0x2000001c

08001080 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <HAL_IncTick+0x1c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	001a      	movs	r2, r3
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_IncTick+0x20>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	18d2      	adds	r2, r2, r3
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_IncTick+0x20>)
 8001092:	601a      	str	r2, [r3, #0]
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	20000020 	.word	0x20000020
 80010a0:	200000c4 	.word	0x200000c4

080010a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b02      	ldr	r3, [pc, #8]	; (80010b4 <HAL_GetTick+0x10>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			; (mov r8, r8)
 80010b4:	200000c4 	.word	0x200000c4

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	0002      	movs	r2, r0
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b7f      	cmp	r3, #127	; 0x7f
 80010ca:	d809      	bhi.n	80010e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	001a      	movs	r2, r3
 80010d2:	231f      	movs	r3, #31
 80010d4:	401a      	ands	r2, r3
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_EnableIRQ+0x30>)
 80010d8:	2101      	movs	r1, #1
 80010da:	4091      	lsls	r1, r2
 80010dc:	000a      	movs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
  }
}
 80010e0:	46c0      	nop			; (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	0002      	movs	r2, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001100:	d828      	bhi.n	8001154 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001102:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <__NVIC_SetPriority+0xd4>)
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	33c0      	adds	r3, #192	; 0xc0
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	589b      	ldr	r3, [r3, r2]
 8001112:	1dfa      	adds	r2, r7, #7
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	0011      	movs	r1, r2
 8001118:	2203      	movs	r2, #3
 800111a:	400a      	ands	r2, r1
 800111c:	00d2      	lsls	r2, r2, #3
 800111e:	21ff      	movs	r1, #255	; 0xff
 8001120:	4091      	lsls	r1, r2
 8001122:	000a      	movs	r2, r1
 8001124:	43d2      	mvns	r2, r2
 8001126:	401a      	ands	r2, r3
 8001128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	22ff      	movs	r2, #255	; 0xff
 8001130:	401a      	ands	r2, r3
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	0018      	movs	r0, r3
 8001138:	2303      	movs	r3, #3
 800113a:	4003      	ands	r3, r0
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001140:	481f      	ldr	r0, [pc, #124]	; (80011c0 <__NVIC_SetPriority+0xd4>)
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	430a      	orrs	r2, r1
 800114c:	33c0      	adds	r3, #192	; 0xc0
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001152:	e031      	b.n	80011b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <__NVIC_SetPriority+0xd8>)
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	0019      	movs	r1, r3
 800115c:	230f      	movs	r3, #15
 800115e:	400b      	ands	r3, r1
 8001160:	3b08      	subs	r3, #8
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3306      	adds	r3, #6
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	18d3      	adds	r3, r2, r3
 800116a:	3304      	adds	r3, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	1dfa      	adds	r2, r7, #7
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	0011      	movs	r1, r2
 8001174:	2203      	movs	r2, #3
 8001176:	400a      	ands	r2, r1
 8001178:	00d2      	lsls	r2, r2, #3
 800117a:	21ff      	movs	r1, #255	; 0xff
 800117c:	4091      	lsls	r1, r2
 800117e:	000a      	movs	r2, r1
 8001180:	43d2      	mvns	r2, r2
 8001182:	401a      	ands	r2, r3
 8001184:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	019b      	lsls	r3, r3, #6
 800118a:	22ff      	movs	r2, #255	; 0xff
 800118c:	401a      	ands	r2, r3
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	0018      	movs	r0, r3
 8001194:	2303      	movs	r3, #3
 8001196:	4003      	ands	r3, r0
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <__NVIC_SetPriority+0xd8>)
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	001c      	movs	r4, r3
 80011a4:	230f      	movs	r3, #15
 80011a6:	4023      	ands	r3, r4
 80011a8:	3b08      	subs	r3, #8
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	430a      	orrs	r2, r1
 80011ae:	3306      	adds	r3, #6
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	18c3      	adds	r3, r0, r3
 80011b4:	3304      	adds	r3, #4
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b003      	add	sp, #12
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	1e5a      	subs	r2, r3, #1
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	045b      	lsls	r3, r3, #17
 80011d8:	429a      	cmp	r2, r3
 80011da:	d301      	bcc.n	80011e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011dc:	2301      	movs	r3, #1
 80011de:	e010      	b.n	8001202 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <SysTick_Config+0x44>)
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	3a01      	subs	r2, #1
 80011e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e8:	2301      	movs	r3, #1
 80011ea:	425b      	negs	r3, r3
 80011ec:	2103      	movs	r1, #3
 80011ee:	0018      	movs	r0, r3
 80011f0:	f7ff ff7c 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f4:	4b05      	ldr	r3, [pc, #20]	; (800120c <SysTick_Config+0x44>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fa:	4b04      	ldr	r3, [pc, #16]	; (800120c <SysTick_Config+0x44>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001200:	2300      	movs	r3, #0
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	e000e010 	.word	0xe000e010

08001210 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	210f      	movs	r1, #15
 800121c:	187b      	adds	r3, r7, r1
 800121e:	1c02      	adds	r2, r0, #0
 8001220:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	187b      	adds	r3, r7, r1
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	b25b      	sxtb	r3, r3
 800122a:	0011      	movs	r1, r2
 800122c:	0018      	movs	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b004      	add	sp, #16
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	0002      	movs	r2, r0
 8001242:	1dfb      	adds	r3, r7, #7
 8001244:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b25b      	sxtb	r3, r3
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff ff33 	bl	80010b8 <__NVIC_EnableIRQ>
}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	b002      	add	sp, #8
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	0018      	movs	r0, r3
 8001266:	f7ff ffaf 	bl	80011c8 <SysTick_Config>
 800126a:	0003      	movs	r3, r0
}
 800126c:	0018      	movs	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001282:	e149      	b.n	8001518 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	4091      	lsls	r1, r2
 800128e:	000a      	movs	r2, r1
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d100      	bne.n	800129c <HAL_GPIO_Init+0x28>
 800129a:	e13a      	b.n	8001512 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2203      	movs	r2, #3
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d005      	beq.n	80012b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2203      	movs	r2, #3
 80012ae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d130      	bne.n	8001316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	409a      	lsls	r2, r3
 80012c2:	0013      	movs	r3, r2
 80012c4:	43da      	mvns	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	409a      	lsls	r2, r3
 80012d6:	0013      	movs	r3, r2
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012ea:	2201      	movs	r2, #1
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
 80012f0:	0013      	movs	r3, r2
 80012f2:	43da      	mvns	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	2201      	movs	r2, #1
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2203      	movs	r2, #3
 800131c:	4013      	ands	r3, r2
 800131e:	2b03      	cmp	r3, #3
 8001320:	d017      	beq.n	8001352 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	409a      	lsls	r2, r3
 8001330:	0013      	movs	r3, r2
 8001332:	43da      	mvns	r2, r3
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	409a      	lsls	r2, r3
 8001344:	0013      	movs	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2203      	movs	r2, #3
 8001358:	4013      	ands	r3, r2
 800135a:	2b02      	cmp	r3, #2
 800135c:	d123      	bne.n	80013a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	08da      	lsrs	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3208      	adds	r2, #8
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	58d3      	ldr	r3, [r2, r3]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2207      	movs	r2, #7
 8001370:	4013      	ands	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	220f      	movs	r2, #15
 8001376:	409a      	lsls	r2, r3
 8001378:	0013      	movs	r3, r2
 800137a:	43da      	mvns	r2, r3
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	691a      	ldr	r2, [r3, #16]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2107      	movs	r1, #7
 800138a:	400b      	ands	r3, r1
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	08da      	lsrs	r2, r3, #3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3208      	adds	r2, #8
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	6939      	ldr	r1, [r7, #16]
 80013a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	2203      	movs	r2, #3
 80013b2:	409a      	lsls	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	43da      	mvns	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2203      	movs	r2, #3
 80013c4:	401a      	ands	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	409a      	lsls	r2, r3
 80013cc:	0013      	movs	r3, r2
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	23c0      	movs	r3, #192	; 0xc0
 80013e0:	029b      	lsls	r3, r3, #10
 80013e2:	4013      	ands	r3, r2
 80013e4:	d100      	bne.n	80013e8 <HAL_GPIO_Init+0x174>
 80013e6:	e094      	b.n	8001512 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e8:	4b51      	ldr	r3, [pc, #324]	; (8001530 <HAL_GPIO_Init+0x2bc>)
 80013ea:	699a      	ldr	r2, [r3, #24]
 80013ec:	4b50      	ldr	r3, [pc, #320]	; (8001530 <HAL_GPIO_Init+0x2bc>)
 80013ee:	2101      	movs	r1, #1
 80013f0:	430a      	orrs	r2, r1
 80013f2:	619a      	str	r2, [r3, #24]
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <HAL_GPIO_Init+0x2bc>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2201      	movs	r2, #1
 80013fa:	4013      	ands	r3, r2
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001400:	4a4c      	ldr	r2, [pc, #304]	; (8001534 <HAL_GPIO_Init+0x2c0>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	589b      	ldr	r3, [r3, r2]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2203      	movs	r2, #3
 8001412:	4013      	ands	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	409a      	lsls	r2, r3
 800141a:	0013      	movs	r3, r2
 800141c:	43da      	mvns	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	2390      	movs	r3, #144	; 0x90
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	429a      	cmp	r2, r3
 800142c:	d00d      	beq.n	800144a <HAL_GPIO_Init+0x1d6>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a41      	ldr	r2, [pc, #260]	; (8001538 <HAL_GPIO_Init+0x2c4>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d007      	beq.n	8001446 <HAL_GPIO_Init+0x1d2>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a40      	ldr	r2, [pc, #256]	; (800153c <HAL_GPIO_Init+0x2c8>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d101      	bne.n	8001442 <HAL_GPIO_Init+0x1ce>
 800143e:	2302      	movs	r3, #2
 8001440:	e004      	b.n	800144c <HAL_GPIO_Init+0x1d8>
 8001442:	2305      	movs	r3, #5
 8001444:	e002      	b.n	800144c <HAL_GPIO_Init+0x1d8>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x1d8>
 800144a:	2300      	movs	r3, #0
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	2103      	movs	r1, #3
 8001450:	400a      	ands	r2, r1
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	4093      	lsls	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800145c:	4935      	ldr	r1, [pc, #212]	; (8001534 <HAL_GPIO_Init+0x2c0>)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146a:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_GPIO_Init+0x2cc>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	43da      	mvns	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	035b      	lsls	r3, r3, #13
 8001482:	4013      	ands	r3, r2
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4313      	orrs	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800148e:	4b2c      	ldr	r3, [pc, #176]	; (8001540 <HAL_GPIO_Init+0x2cc>)
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <HAL_GPIO_Init+0x2cc>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	43da      	mvns	r2, r3
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	039b      	lsls	r3, r3, #14
 80014ac:	4013      	ands	r3, r2
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <HAL_GPIO_Init+0x2cc>)
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_GPIO_Init+0x2cc>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43da      	mvns	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	029b      	lsls	r3, r3, #10
 80014d6:	4013      	ands	r3, r2
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <HAL_GPIO_Init+0x2cc>)
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_GPIO_Init+0x2cc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43da      	mvns	r2, r3
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	025b      	lsls	r3, r3, #9
 8001500:	4013      	ands	r3, r2
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <HAL_GPIO_Init+0x2cc>)
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	40da      	lsrs	r2, r3
 8001520:	1e13      	subs	r3, r2, #0
 8001522:	d000      	beq.n	8001526 <HAL_GPIO_Init+0x2b2>
 8001524:	e6ae      	b.n	8001284 <HAL_GPIO_Init+0x10>
  } 
}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	46c0      	nop			; (mov r8, r8)
 800152a:	46bd      	mov	sp, r7
 800152c:	b006      	add	sp, #24
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40021000 	.word	0x40021000
 8001534:	40010000 	.word	0x40010000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	000a      	movs	r2, r1
 800154e:	1cbb      	adds	r3, r7, #2
 8001550:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	1cba      	adds	r2, r7, #2
 8001558:	8812      	ldrh	r2, [r2, #0]
 800155a:	4013      	ands	r3, r2
 800155c:	d004      	beq.n	8001568 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800155e:	230f      	movs	r3, #15
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	e003      	b.n	8001570 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001568:	230f      	movs	r3, #15
 800156a:	18fb      	adds	r3, r7, r3
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001570:	230f      	movs	r3, #15
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	781b      	ldrb	r3, [r3, #0]
  }
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
 8001586:	0008      	movs	r0, r1
 8001588:	0011      	movs	r1, r2
 800158a:	1cbb      	adds	r3, r7, #2
 800158c:	1c02      	adds	r2, r0, #0
 800158e:	801a      	strh	r2, [r3, #0]
 8001590:	1c7b      	adds	r3, r7, #1
 8001592:	1c0a      	adds	r2, r1, #0
 8001594:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001596:	1c7b      	adds	r3, r7, #1
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800159e:	1cbb      	adds	r3, r7, #2
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015a6:	e003      	b.n	80015b0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015a8:	1cbb      	adds	r3, r7, #2
 80015aa:	881a      	ldrh	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_I2CEx_EnableFastModePlus+0x34>)
 80015c2:	699a      	ldr	r2, [r3, #24]
 80015c4:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_I2CEx_EnableFastModePlus+0x34>)
 80015c6:	2101      	movs	r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	619a      	str	r2, [r3, #24]
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <HAL_I2CEx_EnableFastModePlus+0x34>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80015d8:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80015da:	6819      	ldr	r1, [r3, #0]
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b004      	add	sp, #16
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010000 	.word	0x40010000

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e301      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2201      	movs	r2, #1
 800160c:	4013      	ands	r3, r2
 800160e:	d100      	bne.n	8001612 <HAL_RCC_OscConfig+0x1e>
 8001610:	e08d      	b.n	800172e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001612:	4bc3      	ldr	r3, [pc, #780]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	220c      	movs	r2, #12
 8001618:	4013      	ands	r3, r2
 800161a:	2b04      	cmp	r3, #4
 800161c:	d00e      	beq.n	800163c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800161e:	4bc0      	ldr	r3, [pc, #768]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	220c      	movs	r2, #12
 8001624:	4013      	ands	r3, r2
 8001626:	2b08      	cmp	r3, #8
 8001628:	d116      	bne.n	8001658 <HAL_RCC_OscConfig+0x64>
 800162a:	4bbd      	ldr	r3, [pc, #756]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	401a      	ands	r2, r3
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	429a      	cmp	r2, r3
 800163a:	d10d      	bne.n	8001658 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	4bb8      	ldr	r3, [pc, #736]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	029b      	lsls	r3, r3, #10
 8001644:	4013      	ands	r3, r2
 8001646:	d100      	bne.n	800164a <HAL_RCC_OscConfig+0x56>
 8001648:	e070      	b.n	800172c <HAL_RCC_OscConfig+0x138>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d000      	beq.n	8001654 <HAL_RCC_OscConfig+0x60>
 8001652:	e06b      	b.n	800172c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e2d8      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d107      	bne.n	8001670 <HAL_RCC_OscConfig+0x7c>
 8001660:	4baf      	ldr	r3, [pc, #700]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4bae      	ldr	r3, [pc, #696]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001666:	2180      	movs	r1, #128	; 0x80
 8001668:	0249      	lsls	r1, r1, #9
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	e02f      	b.n	80016d0 <HAL_RCC_OscConfig+0xdc>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d10c      	bne.n	8001692 <HAL_RCC_OscConfig+0x9e>
 8001678:	4ba9      	ldr	r3, [pc, #676]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	4ba8      	ldr	r3, [pc, #672]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800167e:	49a9      	ldr	r1, [pc, #676]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 8001680:	400a      	ands	r2, r1
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	4ba6      	ldr	r3, [pc, #664]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4ba5      	ldr	r3, [pc, #660]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800168a:	49a7      	ldr	r1, [pc, #668]	; (8001928 <HAL_RCC_OscConfig+0x334>)
 800168c:	400a      	ands	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e01e      	b.n	80016d0 <HAL_RCC_OscConfig+0xdc>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b05      	cmp	r3, #5
 8001698:	d10e      	bne.n	80016b8 <HAL_RCC_OscConfig+0xc4>
 800169a:	4ba1      	ldr	r3, [pc, #644]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4ba0      	ldr	r3, [pc, #640]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	02c9      	lsls	r1, r1, #11
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	4b9d      	ldr	r3, [pc, #628]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b9c      	ldr	r3, [pc, #624]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	0249      	lsls	r1, r1, #9
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e00b      	b.n	80016d0 <HAL_RCC_OscConfig+0xdc>
 80016b8:	4b99      	ldr	r3, [pc, #612]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b98      	ldr	r3, [pc, #608]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80016be:	4999      	ldr	r1, [pc, #612]	; (8001924 <HAL_RCC_OscConfig+0x330>)
 80016c0:	400a      	ands	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	4b96      	ldr	r3, [pc, #600]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b95      	ldr	r3, [pc, #596]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	4997      	ldr	r1, [pc, #604]	; (8001928 <HAL_RCC_OscConfig+0x334>)
 80016cc:	400a      	ands	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d014      	beq.n	8001702 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fce4 	bl	80010a4 <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016e2:	f7ff fcdf 	bl	80010a4 <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	; 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e28a      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f4:	4b8a      	ldr	r3, [pc, #552]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	029b      	lsls	r3, r3, #10
 80016fc:	4013      	ands	r3, r2
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0xee>
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fccf 	bl	80010a4 <HAL_GetTick>
 8001706:	0003      	movs	r3, r0
 8001708:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fcca 	bl	80010a4 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e275      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171e:	4b80      	ldr	r3, [pc, #512]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	029b      	lsls	r3, r3, #10
 8001726:	4013      	ands	r3, r2
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x118>
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800172c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2202      	movs	r2, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d100      	bne.n	800173a <HAL_RCC_OscConfig+0x146>
 8001738:	e069      	b.n	800180e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800173a:	4b79      	ldr	r3, [pc, #484]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	220c      	movs	r2, #12
 8001740:	4013      	ands	r3, r2
 8001742:	d00b      	beq.n	800175c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001744:	4b76      	ldr	r3, [pc, #472]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	220c      	movs	r2, #12
 800174a:	4013      	ands	r3, r2
 800174c:	2b08      	cmp	r3, #8
 800174e:	d11c      	bne.n	800178a <HAL_RCC_OscConfig+0x196>
 8001750:	4b73      	ldr	r3, [pc, #460]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001752:	685a      	ldr	r2, [r3, #4]
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	4013      	ands	r3, r2
 800175a:	d116      	bne.n	800178a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175c:	4b70      	ldr	r3, [pc, #448]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d005      	beq.n	8001772 <HAL_RCC_OscConfig+0x17e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d001      	beq.n	8001772 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e24b      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001772:	4b6b      	ldr	r3, [pc, #428]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	22f8      	movs	r2, #248	; 0xf8
 8001778:	4393      	bics	r3, r2
 800177a:	0019      	movs	r1, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	00da      	lsls	r2, r3, #3
 8001782:	4b67      	ldr	r3, [pc, #412]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001784:	430a      	orrs	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001788:	e041      	b.n	800180e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d024      	beq.n	80017dc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001792:	4b63      	ldr	r3, [pc, #396]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b62      	ldr	r3, [pc, #392]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001798:	2101      	movs	r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7ff fc81 	bl	80010a4 <HAL_GetTick>
 80017a2:	0003      	movs	r3, r0
 80017a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff fc7c 	bl	80010a4 <HAL_GetTick>
 80017ac:	0002      	movs	r2, r0
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e227      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	4b59      	ldr	r3, [pc, #356]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2202      	movs	r2, #2
 80017c0:	4013      	ands	r3, r2
 80017c2:	d0f1      	beq.n	80017a8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b56      	ldr	r3, [pc, #344]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	22f8      	movs	r2, #248	; 0xf8
 80017ca:	4393      	bics	r3, r2
 80017cc:	0019      	movs	r1, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	00da      	lsls	r2, r3, #3
 80017d4:	4b52      	ldr	r3, [pc, #328]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	e018      	b.n	800180e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b4f      	ldr	r3, [pc, #316]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	2101      	movs	r1, #1
 80017e4:	438a      	bics	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fc5c 	bl	80010a4 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fc57 	bl	80010a4 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e202      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001804:	4b46      	ldr	r3, [pc, #280]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2202      	movs	r2, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d1f1      	bne.n	80017f2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2208      	movs	r2, #8
 8001814:	4013      	ands	r3, r2
 8001816:	d036      	beq.n	8001886 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d019      	beq.n	8001854 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001820:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001824:	4b3e      	ldr	r3, [pc, #248]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001826:	2101      	movs	r1, #1
 8001828:	430a      	orrs	r2, r1
 800182a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182c:	f7ff fc3a 	bl	80010a4 <HAL_GetTick>
 8001830:	0003      	movs	r3, r0
 8001832:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001834:	e008      	b.n	8001848 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001836:	f7ff fc35 	bl	80010a4 <HAL_GetTick>
 800183a:	0002      	movs	r2, r0
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	2b02      	cmp	r3, #2
 8001842:	d901      	bls.n	8001848 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001844:	2303      	movs	r3, #3
 8001846:	e1e0      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001848:	4b35      	ldr	r3, [pc, #212]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	2202      	movs	r2, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d0f1      	beq.n	8001836 <HAL_RCC_OscConfig+0x242>
 8001852:	e018      	b.n	8001886 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001854:	4b32      	ldr	r3, [pc, #200]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001858:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800185a:	2101      	movs	r1, #1
 800185c:	438a      	bics	r2, r1
 800185e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fc20 	bl	80010a4 <HAL_GetTick>
 8001864:	0003      	movs	r3, r0
 8001866:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186a:	f7ff fc1b 	bl	80010a4 <HAL_GetTick>
 800186e:	0002      	movs	r2, r0
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e1c6      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187c:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	2202      	movs	r2, #2
 8001882:	4013      	ands	r3, r2
 8001884:	d1f1      	bne.n	800186a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2204      	movs	r2, #4
 800188c:	4013      	ands	r3, r2
 800188e:	d100      	bne.n	8001892 <HAL_RCC_OscConfig+0x29e>
 8001890:	e0b4      	b.n	80019fc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001892:	201f      	movs	r0, #31
 8001894:	183b      	adds	r3, r7, r0
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189a:	4b21      	ldr	r3, [pc, #132]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 800189c:	69da      	ldr	r2, [r3, #28]
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	055b      	lsls	r3, r3, #21
 80018a2:	4013      	ands	r3, r2
 80018a4:	d110      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	0549      	lsls	r1, r1, #21
 80018b0:	430a      	orrs	r2, r1
 80018b2:	61da      	str	r2, [r3, #28]
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 80018b6:	69da      	ldr	r2, [r3, #28]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	055b      	lsls	r3, r3, #21
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018c2:	183b      	adds	r3, r7, r0
 80018c4:	2201      	movs	r2, #1
 80018c6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_RCC_OscConfig+0x338>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4013      	ands	r3, r2
 80018d2:	d11a      	bne.n	800190a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_RCC_OscConfig+0x338>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_RCC_OscConfig+0x338>)
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	0049      	lsls	r1, r1, #1
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018e2:	f7ff fbdf 	bl	80010a4 <HAL_GetTick>
 80018e6:	0003      	movs	r3, r0
 80018e8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ec:	f7ff fbda 	bl	80010a4 <HAL_GetTick>
 80018f0:	0002      	movs	r2, r0
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	; 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e185      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_OscConfig+0x338>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4013      	ands	r3, r2
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d10e      	bne.n	8001930 <HAL_RCC_OscConfig+0x33c>
 8001912:	4b03      	ldr	r3, [pc, #12]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001914:	6a1a      	ldr	r2, [r3, #32]
 8001916:	4b02      	ldr	r3, [pc, #8]	; (8001920 <HAL_RCC_OscConfig+0x32c>)
 8001918:	2101      	movs	r1, #1
 800191a:	430a      	orrs	r2, r1
 800191c:	621a      	str	r2, [r3, #32]
 800191e:	e035      	b.n	800198c <HAL_RCC_OscConfig+0x398>
 8001920:	40021000 	.word	0x40021000
 8001924:	fffeffff 	.word	0xfffeffff
 8001928:	fffbffff 	.word	0xfffbffff
 800192c:	40007000 	.word	0x40007000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10c      	bne.n	8001952 <HAL_RCC_OscConfig+0x35e>
 8001938:	4bb6      	ldr	r3, [pc, #728]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 800193a:	6a1a      	ldr	r2, [r3, #32]
 800193c:	4bb5      	ldr	r3, [pc, #724]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 800193e:	2101      	movs	r1, #1
 8001940:	438a      	bics	r2, r1
 8001942:	621a      	str	r2, [r3, #32]
 8001944:	4bb3      	ldr	r3, [pc, #716]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001946:	6a1a      	ldr	r2, [r3, #32]
 8001948:	4bb2      	ldr	r3, [pc, #712]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 800194a:	2104      	movs	r1, #4
 800194c:	438a      	bics	r2, r1
 800194e:	621a      	str	r2, [r3, #32]
 8001950:	e01c      	b.n	800198c <HAL_RCC_OscConfig+0x398>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2b05      	cmp	r3, #5
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0x380>
 800195a:	4bae      	ldr	r3, [pc, #696]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 800195c:	6a1a      	ldr	r2, [r3, #32]
 800195e:	4bad      	ldr	r3, [pc, #692]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001960:	2104      	movs	r1, #4
 8001962:	430a      	orrs	r2, r1
 8001964:	621a      	str	r2, [r3, #32]
 8001966:	4bab      	ldr	r3, [pc, #684]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001968:	6a1a      	ldr	r2, [r3, #32]
 800196a:	4baa      	ldr	r3, [pc, #680]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 800196c:	2101      	movs	r1, #1
 800196e:	430a      	orrs	r2, r1
 8001970:	621a      	str	r2, [r3, #32]
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0x398>
 8001974:	4ba7      	ldr	r3, [pc, #668]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001976:	6a1a      	ldr	r2, [r3, #32]
 8001978:	4ba6      	ldr	r3, [pc, #664]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 800197a:	2101      	movs	r1, #1
 800197c:	438a      	bics	r2, r1
 800197e:	621a      	str	r2, [r3, #32]
 8001980:	4ba4      	ldr	r3, [pc, #656]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001982:	6a1a      	ldr	r2, [r3, #32]
 8001984:	4ba3      	ldr	r3, [pc, #652]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001986:	2104      	movs	r1, #4
 8001988:	438a      	bics	r2, r1
 800198a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d014      	beq.n	80019be <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001994:	f7ff fb86 	bl	80010a4 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199c:	e009      	b.n	80019b2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff fb81 	bl	80010a4 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	4a9b      	ldr	r2, [pc, #620]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e12b      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b2:	4b98      	ldr	r3, [pc, #608]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x3aa>
 80019bc:	e013      	b.n	80019e6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff fb71 	bl	80010a4 <HAL_GetTick>
 80019c2:	0003      	movs	r3, r0
 80019c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c6:	e009      	b.n	80019dc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c8:	f7ff fb6c 	bl	80010a4 <HAL_GetTick>
 80019cc:	0002      	movs	r2, r0
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	4a91      	ldr	r2, [pc, #580]	; (8001c18 <HAL_RCC_OscConfig+0x624>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e116      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	4b8d      	ldr	r3, [pc, #564]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	2202      	movs	r2, #2
 80019e2:	4013      	ands	r3, r2
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019e6:	231f      	movs	r3, #31
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d105      	bne.n	80019fc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f0:	4b88      	ldr	r3, [pc, #544]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 80019f2:	69da      	ldr	r2, [r3, #28]
 80019f4:	4b87      	ldr	r3, [pc, #540]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 80019f6:	4989      	ldr	r1, [pc, #548]	; (8001c1c <HAL_RCC_OscConfig+0x628>)
 80019f8:	400a      	ands	r2, r1
 80019fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2210      	movs	r2, #16
 8001a02:	4013      	ands	r3, r2
 8001a04:	d063      	beq.n	8001ace <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d12a      	bne.n	8001a64 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a0e:	4b81      	ldr	r3, [pc, #516]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a12:	4b80      	ldr	r3, [pc, #512]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a14:	2104      	movs	r1, #4
 8001a16:	430a      	orrs	r2, r1
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001a1a:	4b7e      	ldr	r3, [pc, #504]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a1e:	4b7d      	ldr	r3, [pc, #500]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a20:	2101      	movs	r1, #1
 8001a22:	430a      	orrs	r2, r1
 8001a24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb3d 	bl	80010a4 <HAL_GetTick>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a30:	f7ff fb38 	bl	80010a4 <HAL_GetTick>
 8001a34:	0002      	movs	r2, r0
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e0e3      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001a42:	4b74      	ldr	r3, [pc, #464]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a46:	2202      	movs	r2, #2
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d0f1      	beq.n	8001a30 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a4c:	4b71      	ldr	r3, [pc, #452]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a50:	22f8      	movs	r2, #248	; 0xf8
 8001a52:	4393      	bics	r3, r2
 8001a54:	0019      	movs	r1, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	00da      	lsls	r2, r3, #3
 8001a5c:	4b6d      	ldr	r3, [pc, #436]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34
 8001a62:	e034      	b.n	8001ace <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	3305      	adds	r3, #5
 8001a6a:	d111      	bne.n	8001a90 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a6c:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a70:	4b68      	ldr	r3, [pc, #416]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a72:	2104      	movs	r1, #4
 8001a74:	438a      	bics	r2, r1
 8001a76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001a78:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a7c:	22f8      	movs	r2, #248	; 0xf8
 8001a7e:	4393      	bics	r3, r2
 8001a80:	0019      	movs	r1, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	00da      	lsls	r2, r3, #3
 8001a88:	4b62      	ldr	r3, [pc, #392]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a8e:	e01e      	b.n	8001ace <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a90:	4b60      	ldr	r3, [pc, #384]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a94:	4b5f      	ldr	r3, [pc, #380]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a96:	2104      	movs	r1, #4
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a9c:	4b5d      	ldr	r3, [pc, #372]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aa0:	4b5c      	ldr	r3, [pc, #368]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fafc 	bl	80010a4 <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ab2:	f7ff faf7 	bl	80010a4 <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e0a2      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ac4:	4b53      	ldr	r3, [pc, #332]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac8:	2202      	movs	r2, #2
 8001aca:	4013      	ands	r3, r2
 8001acc:	d1f1      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d100      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4e4>
 8001ad6:	e097      	b.n	8001c08 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad8:	4b4e      	ldr	r3, [pc, #312]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	220c      	movs	r2, #12
 8001ade:	4013      	ands	r3, r2
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d100      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x4f2>
 8001ae4:	e06b      	b.n	8001bbe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d14c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aee:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4b48      	ldr	r3, [pc, #288]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001af4:	494a      	ldr	r1, [pc, #296]	; (8001c20 <HAL_RCC_OscConfig+0x62c>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7ff fad3 	bl	80010a4 <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b04:	f7ff face 	bl	80010a4 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e079      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b16:	4b3f      	ldr	r3, [pc, #252]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	049b      	lsls	r3, r3, #18
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b22:	4b3c      	ldr	r3, [pc, #240]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b26:	220f      	movs	r2, #15
 8001b28:	4393      	bics	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b30:	4b38      	ldr	r3, [pc, #224]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001b32:	430a      	orrs	r2, r1
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b36:	4b37      	ldr	r3, [pc, #220]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4a3a      	ldr	r2, [pc, #232]	; (8001c24 <HAL_RCC_OscConfig+0x630>)
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	0019      	movs	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	4b32      	ldr	r3, [pc, #200]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b50:	4b30      	ldr	r3, [pc, #192]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b2f      	ldr	r3, [pc, #188]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	0449      	lsls	r1, r1, #17
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7ff faa1 	bl	80010a4 <HAL_GetTick>
 8001b62:	0003      	movs	r3, r0
 8001b64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b68:	f7ff fa9c 	bl	80010a4 <HAL_GetTick>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e047      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	049b      	lsls	r3, r3, #18
 8001b82:	4013      	ands	r3, r2
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x574>
 8001b86:	e03f      	b.n	8001c08 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001b8e:	4924      	ldr	r1, [pc, #144]	; (8001c20 <HAL_RCC_OscConfig+0x62c>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff fa86 	bl	80010a4 <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b9e:	f7ff fa81 	bl	80010a4 <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e02c      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb0:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	049b      	lsls	r3, r3, #18
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x5aa>
 8001bbc:	e024      	b.n	8001c08 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e01f      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_RCC_OscConfig+0x620>)
 8001bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	025b      	lsls	r3, r3, #9
 8001bdc:	401a      	ands	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d10e      	bne.n	8001c04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	220f      	movs	r2, #15
 8001bea:	401a      	ands	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d107      	bne.n	8001c04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	23f0      	movs	r3, #240	; 0xf0
 8001bf8:	039b      	lsls	r3, r3, #14
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	0018      	movs	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	b008      	add	sp, #32
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	40021000 	.word	0x40021000
 8001c18:	00001388 	.word	0x00001388
 8001c1c:	efffffff 	.word	0xefffffff
 8001c20:	feffffff 	.word	0xfeffffff
 8001c24:	ffc2ffff 	.word	0xffc2ffff

08001c28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0b3      	b.n	8001da4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b5b      	ldr	r3, [pc, #364]	; (8001dac <HAL_RCC_ClockConfig+0x184>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2201      	movs	r2, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d911      	bls.n	8001c6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b58      	ldr	r3, [pc, #352]	; (8001dac <HAL_RCC_ClockConfig+0x184>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	4393      	bics	r3, r2
 8001c52:	0019      	movs	r1, r3
 8001c54:	4b55      	ldr	r3, [pc, #340]	; (8001dac <HAL_RCC_ClockConfig+0x184>)
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5c:	4b53      	ldr	r3, [pc, #332]	; (8001dac <HAL_RCC_ClockConfig+0x184>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2201      	movs	r2, #1
 8001c62:	4013      	ands	r3, r2
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e09a      	b.n	8001da4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d015      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d006      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c82:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	4b4a      	ldr	r3, [pc, #296]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001c88:	21e0      	movs	r1, #224	; 0xe0
 8001c8a:	00c9      	lsls	r1, r1, #3
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	22f0      	movs	r2, #240	; 0xf0
 8001c96:	4393      	bics	r3, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	4b44      	ldr	r3, [pc, #272]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	4013      	ands	r3, r2
 8001cac:	d040      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b3e      	ldr	r3, [pc, #248]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d114      	bne.n	8001cec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e06e      	b.n	8001da4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cce:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	049b      	lsls	r3, r3, #18
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d108      	bne.n	8001cec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e062      	b.n	8001da4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2202      	movs	r2, #2
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e05b      	b.n	8001da4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cec:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	4393      	bics	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4b2d      	ldr	r3, [pc, #180]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d00:	f7ff f9d0 	bl	80010a4 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d08:	e009      	b.n	8001d1e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0a:	f7ff f9cb 	bl	80010a4 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4a27      	ldr	r2, [pc, #156]	; (8001db4 <HAL_RCC_ClockConfig+0x18c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e042      	b.n	8001da4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	220c      	movs	r2, #12
 8001d24:	401a      	ands	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1ec      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d30:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <HAL_RCC_ClockConfig+0x184>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2201      	movs	r2, #1
 8001d36:	4013      	ands	r3, r2
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d211      	bcs.n	8001d62 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_RCC_ClockConfig+0x184>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2201      	movs	r2, #1
 8001d44:	4393      	bics	r3, r2
 8001d46:	0019      	movs	r1, r3
 8001d48:	4b18      	ldr	r3, [pc, #96]	; (8001dac <HAL_RCC_ClockConfig+0x184>)
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d50:	4b16      	ldr	r3, [pc, #88]	; (8001dac <HAL_RCC_ClockConfig+0x184>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2201      	movs	r2, #1
 8001d56:	4013      	ands	r3, r2
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e020      	b.n	8001da4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2204      	movs	r2, #4
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d009      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6c:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a11      	ldr	r2, [pc, #68]	; (8001db8 <HAL_RCC_ClockConfig+0x190>)
 8001d72:	4013      	ands	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d80:	f000 f820 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d84:	0001      	movs	r1, r0
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_RCC_ClockConfig+0x188>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	091b      	lsrs	r3, r3, #4
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	4013      	ands	r3, r2
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_RCC_ClockConfig+0x194>)
 8001d92:	5cd3      	ldrb	r3, [r2, r3]
 8001d94:	000a      	movs	r2, r1
 8001d96:	40da      	lsrs	r2, r3
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_ClockConfig+0x198>)
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7ff f93b 	bl	8001018 <HAL_InitTick>
  
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	0018      	movs	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b004      	add	sp, #16
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40022000 	.word	0x40022000
 8001db0:	40021000 	.word	0x40021000
 8001db4:	00001388 	.word	0x00001388
 8001db8:	fffff8ff 	.word	0xfffff8ff
 8001dbc:	08002724 	.word	0x08002724
 8001dc0:	20000008 	.word	0x20000008

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001dde:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	220c      	movs	r2, #12
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d002      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d003      	beq.n	8001dfa <HAL_RCC_GetSysClockFreq+0x36>
 8001df2:	e02c      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001df6:	613b      	str	r3, [r7, #16]
      break;
 8001df8:	e02c      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	0c9b      	lsrs	r3, r3, #18
 8001dfe:	220f      	movs	r2, #15
 8001e00:	4013      	ands	r3, r2
 8001e02:	4a19      	ldr	r2, [pc, #100]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e04:	5cd3      	ldrb	r3, [r2, r3]
 8001e06:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	220f      	movs	r2, #15
 8001e0e:	4013      	ands	r3, r2
 8001e10:	4a16      	ldr	r2, [pc, #88]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001e12:	5cd3      	ldrb	r3, [r2, r3]
 8001e14:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	025b      	lsls	r3, r3, #9
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	4810      	ldr	r0, [pc, #64]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e24:	f7fe f970 	bl	8000108 <__udivsi3>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	001a      	movs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4353      	muls	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e009      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	000a      	movs	r2, r1
 8001e38:	0152      	lsls	r2, r2, #5
 8001e3a:	1a52      	subs	r2, r2, r1
 8001e3c:	0193      	lsls	r3, r2, #6
 8001e3e:	1a9b      	subs	r3, r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	185b      	adds	r3, r3, r1
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
      break;
 8001e4c:	e002      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e4e:	4b05      	ldr	r3, [pc, #20]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e50:	613b      	str	r3, [r7, #16]
      break;
 8001e52:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e54:	693b      	ldr	r3, [r7, #16]
}
 8001e56:	0018      	movs	r0, r3
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b006      	add	sp, #24
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	40021000 	.word	0x40021000
 8001e64:	007a1200 	.word	0x007a1200
 8001e68:	08002734 	.word	0x08002734
 8001e6c:	08002744 	.word	0x08002744

08001e70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e042      	b.n	8001f08 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	223d      	movs	r2, #61	; 0x3d
 8001e86:	5c9b      	ldrb	r3, [r3, r2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	223c      	movs	r2, #60	; 0x3c
 8001e92:	2100      	movs	r1, #0
 8001e94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7fe ffd7 	bl	8000e4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	223d      	movs	r2, #61	; 0x3d
 8001ea2:	2102      	movs	r1, #2
 8001ea4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3304      	adds	r3, #4
 8001eae:	0019      	movs	r1, r3
 8001eb0:	0010      	movs	r0, r2
 8001eb2:	f000 fa5b 	bl	800236c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2246      	movs	r2, #70	; 0x46
 8001eba:	2101      	movs	r1, #1
 8001ebc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	223e      	movs	r2, #62	; 0x3e
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	5499      	strb	r1, [r3, r2]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	223f      	movs	r2, #63	; 0x3f
 8001eca:	2101      	movs	r1, #1
 8001ecc:	5499      	strb	r1, [r3, r2]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2240      	movs	r2, #64	; 0x40
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	5499      	strb	r1, [r3, r2]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2241      	movs	r2, #65	; 0x41
 8001eda:	2101      	movs	r1, #1
 8001edc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2242      	movs	r2, #66	; 0x42
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	5499      	strb	r1, [r3, r2]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2243      	movs	r2, #67	; 0x43
 8001eea:	2101      	movs	r1, #1
 8001eec:	5499      	strb	r1, [r3, r2]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2244      	movs	r2, #68	; 0x44
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	5499      	strb	r1, [r3, r2]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2245      	movs	r2, #69	; 0x45
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	223d      	movs	r2, #61	; 0x3d
 8001f02:	2101      	movs	r1, #1
 8001f04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	223d      	movs	r2, #61	; 0x3d
 8001f1c:	5c9b      	ldrb	r3, [r3, r2]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d001      	beq.n	8001f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e036      	b.n	8001f96 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	223d      	movs	r2, #61	; 0x3d
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a16      	ldr	r2, [pc, #88]	; (8001fa0 <HAL_TIM_Base_Start_IT+0x90>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d00a      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x50>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	05db      	lsls	r3, r3, #23
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d004      	beq.n	8001f60 <HAL_TIM_Base_Start_IT+0x50>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a12      	ldr	r2, [pc, #72]	; (8001fa4 <HAL_TIM_Base_Start_IT+0x94>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d111      	bne.n	8001f84 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2207      	movs	r2, #7
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d010      	beq.n	8001f94 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f82:	e007      	b.n	8001f94 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2101      	movs	r1, #1
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	0018      	movs	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	b004      	add	sp, #16
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d021      	beq.n	800200c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d01d      	beq.n	800200c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	4252      	negs	r2, r2
 8001fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d004      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f9a4 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e007      	b.n	8002006 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f000 f997 	bl	800232c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f000 f9a3 	bl	800234c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2204      	movs	r2, #4
 8002010:	4013      	ands	r3, r2
 8002012:	d022      	beq.n	800205a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2204      	movs	r2, #4
 8002018:	4013      	ands	r3, r2
 800201a:	d01e      	beq.n	800205a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2205      	movs	r2, #5
 8002022:	4252      	negs	r2, r2
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699a      	ldr	r2, [r3, #24]
 8002032:	23c0      	movs	r3, #192	; 0xc0
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0018      	movs	r0, r3
 800203e:	f000 f97d 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 8002042:	e007      	b.n	8002054 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	0018      	movs	r0, r3
 8002048:	f000 f970 	bl	800232c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0018      	movs	r0, r3
 8002050:	f000 f97c 	bl	800234c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2208      	movs	r2, #8
 800205e:	4013      	ands	r3, r2
 8002060:	d021      	beq.n	80020a6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2208      	movs	r2, #8
 8002066:	4013      	ands	r3, r2
 8002068:	d01d      	beq.n	80020a6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2209      	movs	r2, #9
 8002070:	4252      	negs	r2, r2
 8002072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2204      	movs	r2, #4
 8002078:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	2203      	movs	r2, #3
 8002082:	4013      	ands	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 f957 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 800208e:	e007      	b.n	80020a0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0018      	movs	r0, r3
 8002094:	f000 f94a 	bl	800232c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	0018      	movs	r0, r3
 800209c:	f000 f956 	bl	800234c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	2210      	movs	r2, #16
 80020aa:	4013      	ands	r3, r2
 80020ac:	d022      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2210      	movs	r2, #16
 80020b2:	4013      	ands	r3, r2
 80020b4:	d01e      	beq.n	80020f4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2211      	movs	r2, #17
 80020bc:	4252      	negs	r2, r2
 80020be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2208      	movs	r2, #8
 80020c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69da      	ldr	r2, [r3, #28]
 80020cc:	23c0      	movs	r3, #192	; 0xc0
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4013      	ands	r3, r2
 80020d2:	d004      	beq.n	80020de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	0018      	movs	r0, r3
 80020d8:	f000 f930 	bl	800233c <HAL_TIM_IC_CaptureCallback>
 80020dc:	e007      	b.n	80020ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 f923 	bl	800232c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 f92f 	bl	800234c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	d00c      	beq.n	8002116 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	4013      	ands	r3, r2
 8002102:	d008      	beq.n	8002116 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2202      	movs	r2, #2
 800210a:	4252      	negs	r2, r2
 800210c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0018      	movs	r0, r3
 8002112:	f7fe ff37 	bl	8000f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2280      	movs	r2, #128	; 0x80
 800211a:	4013      	ands	r3, r2
 800211c:	d00c      	beq.n	8002138 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2280      	movs	r2, #128	; 0x80
 8002122:	4013      	ands	r3, r2
 8002124:	d008      	beq.n	8002138 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2281      	movs	r2, #129	; 0x81
 800212c:	4252      	negs	r2, r2
 800212e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	0018      	movs	r0, r3
 8002134:	f000 fa98 	bl	8002668 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2240      	movs	r2, #64	; 0x40
 800213c:	4013      	ands	r3, r2
 800213e:	d00c      	beq.n	800215a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2240      	movs	r2, #64	; 0x40
 8002144:	4013      	ands	r3, r2
 8002146:	d008      	beq.n	800215a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2241      	movs	r2, #65	; 0x41
 800214e:	4252      	negs	r2, r2
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	0018      	movs	r0, r3
 8002156:	f000 f901 	bl	800235c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2220      	movs	r2, #32
 800215e:	4013      	ands	r3, r2
 8002160:	d00c      	beq.n	800217c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2220      	movs	r2, #32
 8002166:	4013      	ands	r3, r2
 8002168:	d008      	beq.n	800217c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2221      	movs	r2, #33	; 0x21
 8002170:	4252      	negs	r2, r2
 8002172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	0018      	movs	r0, r3
 8002178:	f000 fa6e 	bl	8002658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800217c:	46c0      	nop			; (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b004      	add	sp, #16
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218e:	230f      	movs	r3, #15
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	223c      	movs	r2, #60	; 0x3c
 800219a:	5c9b      	ldrb	r3, [r3, r2]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_ConfigClockSource+0x20>
 80021a0:	2302      	movs	r3, #2
 80021a2:	e0bc      	b.n	800231e <HAL_TIM_ConfigClockSource+0x19a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	223c      	movs	r2, #60	; 0x3c
 80021a8:	2101      	movs	r1, #1
 80021aa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	223d      	movs	r2, #61	; 0x3d
 80021b0:	2102      	movs	r1, #2
 80021b2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2277      	movs	r2, #119	; 0x77
 80021c0:	4393      	bics	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4a58      	ldr	r2, [pc, #352]	; (8002328 <HAL_TIM_ConfigClockSource+0x1a4>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68ba      	ldr	r2, [r7, #8]
 80021d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2280      	movs	r2, #128	; 0x80
 80021da:	0192      	lsls	r2, r2, #6
 80021dc:	4293      	cmp	r3, r2
 80021de:	d040      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0xde>
 80021e0:	2280      	movs	r2, #128	; 0x80
 80021e2:	0192      	lsls	r2, r2, #6
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d900      	bls.n	80021ea <HAL_TIM_ConfigClockSource+0x66>
 80021e8:	e088      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 80021ea:	2280      	movs	r2, #128	; 0x80
 80021ec:	0152      	lsls	r2, r2, #5
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d100      	bne.n	80021f4 <HAL_TIM_ConfigClockSource+0x70>
 80021f2:	e088      	b.n	8002306 <HAL_TIM_ConfigClockSource+0x182>
 80021f4:	2280      	movs	r2, #128	; 0x80
 80021f6:	0152      	lsls	r2, r2, #5
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d900      	bls.n	80021fe <HAL_TIM_ConfigClockSource+0x7a>
 80021fc:	e07e      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 80021fe:	2b70      	cmp	r3, #112	; 0x70
 8002200:	d018      	beq.n	8002234 <HAL_TIM_ConfigClockSource+0xb0>
 8002202:	d900      	bls.n	8002206 <HAL_TIM_ConfigClockSource+0x82>
 8002204:	e07a      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 8002206:	2b60      	cmp	r3, #96	; 0x60
 8002208:	d04f      	beq.n	80022aa <HAL_TIM_ConfigClockSource+0x126>
 800220a:	d900      	bls.n	800220e <HAL_TIM_ConfigClockSource+0x8a>
 800220c:	e076      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 800220e:	2b50      	cmp	r3, #80	; 0x50
 8002210:	d03b      	beq.n	800228a <HAL_TIM_ConfigClockSource+0x106>
 8002212:	d900      	bls.n	8002216 <HAL_TIM_ConfigClockSource+0x92>
 8002214:	e072      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 8002216:	2b40      	cmp	r3, #64	; 0x40
 8002218:	d057      	beq.n	80022ca <HAL_TIM_ConfigClockSource+0x146>
 800221a:	d900      	bls.n	800221e <HAL_TIM_ConfigClockSource+0x9a>
 800221c:	e06e      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 800221e:	2b30      	cmp	r3, #48	; 0x30
 8002220:	d063      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x166>
 8002222:	d86b      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 8002224:	2b20      	cmp	r3, #32
 8002226:	d060      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x166>
 8002228:	d868      	bhi.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d05d      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x166>
 800222e:	2b10      	cmp	r3, #16
 8002230:	d05b      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x166>
 8002232:	e063      	b.n	80022fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	6899      	ldr	r1, [r3, #8]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f000 f990 	bl	8002568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	2277      	movs	r2, #119	; 0x77
 8002254:	4313      	orrs	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68ba      	ldr	r2, [r7, #8]
 800225e:	609a      	str	r2, [r3, #8]
      break;
 8002260:	e052      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f000 f979 	bl	8002568 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	01c9      	lsls	r1, r1, #7
 8002284:	430a      	orrs	r2, r1
 8002286:	609a      	str	r2, [r3, #8]
      break;
 8002288:	e03e      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6818      	ldr	r0, [r3, #0]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	6859      	ldr	r1, [r3, #4]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	001a      	movs	r2, r3
 8002298:	f000 f8ec 	bl	8002474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2150      	movs	r1, #80	; 0x50
 80022a2:	0018      	movs	r0, r3
 80022a4:	f000 f946 	bl	8002534 <TIM_ITRx_SetConfig>
      break;
 80022a8:	e02e      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	001a      	movs	r2, r3
 80022b8:	f000 f90a 	bl	80024d0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2160      	movs	r1, #96	; 0x60
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 f936 	bl	8002534 <TIM_ITRx_SetConfig>
      break;
 80022c8:	e01e      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	001a      	movs	r2, r3
 80022d8:	f000 f8cc 	bl	8002474 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2140      	movs	r1, #64	; 0x40
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 f926 	bl	8002534 <TIM_ITRx_SetConfig>
      break;
 80022e8:	e00e      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	0019      	movs	r1, r3
 80022f4:	0010      	movs	r0, r2
 80022f6:	f000 f91d 	bl	8002534 <TIM_ITRx_SetConfig>
      break;
 80022fa:	e005      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80022fc:	230f      	movs	r3, #15
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	2201      	movs	r2, #1
 8002302:	701a      	strb	r2, [r3, #0]
      break;
 8002304:	e000      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002306:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	223d      	movs	r2, #61	; 0x3d
 800230c:	2101      	movs	r1, #1
 800230e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	223c      	movs	r2, #60	; 0x3c
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]

  return status;
 8002318:	230f      	movs	r3, #15
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	781b      	ldrb	r3, [r3, #0]
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b004      	add	sp, #16
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	ffff00ff 	.word	0xffff00ff

0800232c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002344:	46c0      	nop			; (mov r8, r8)
 8002346:	46bd      	mov	sp, r7
 8002348:	b002      	add	sp, #8
 800234a:	bd80      	pop	{r7, pc}

0800234c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b002      	add	sp, #8
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b002      	add	sp, #8
 800236a:	bd80      	pop	{r7, pc}

0800236c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a37      	ldr	r2, [pc, #220]	; (800245c <TIM_Base_SetConfig+0xf0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d008      	beq.n	8002396 <TIM_Base_SetConfig+0x2a>
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	05db      	lsls	r3, r3, #23
 800238a:	429a      	cmp	r2, r3
 800238c:	d003      	beq.n	8002396 <TIM_Base_SetConfig+0x2a>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a33      	ldr	r2, [pc, #204]	; (8002460 <TIM_Base_SetConfig+0xf4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d108      	bne.n	80023a8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2270      	movs	r2, #112	; 0x70
 800239a:	4393      	bics	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a2c      	ldr	r2, [pc, #176]	; (800245c <TIM_Base_SetConfig+0xf0>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d014      	beq.n	80023da <TIM_Base_SetConfig+0x6e>
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	05db      	lsls	r3, r3, #23
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d00f      	beq.n	80023da <TIM_Base_SetConfig+0x6e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a28      	ldr	r2, [pc, #160]	; (8002460 <TIM_Base_SetConfig+0xf4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00b      	beq.n	80023da <TIM_Base_SetConfig+0x6e>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a27      	ldr	r2, [pc, #156]	; (8002464 <TIM_Base_SetConfig+0xf8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <TIM_Base_SetConfig+0x6e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a26      	ldr	r2, [pc, #152]	; (8002468 <TIM_Base_SetConfig+0xfc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <TIM_Base_SetConfig+0x6e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <TIM_Base_SetConfig+0x100>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d108      	bne.n	80023ec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <TIM_Base_SetConfig+0x104>)
 80023de:	4013      	ands	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2280      	movs	r2, #128	; 0x80
 80023f0:	4393      	bics	r3, r2
 80023f2:	001a      	movs	r2, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a11      	ldr	r2, [pc, #68]	; (800245c <TIM_Base_SetConfig+0xf0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d007      	beq.n	800242a <TIM_Base_SetConfig+0xbe>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a12      	ldr	r2, [pc, #72]	; (8002468 <TIM_Base_SetConfig+0xfc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d003      	beq.n	800242a <TIM_Base_SetConfig+0xbe>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a11      	ldr	r2, [pc, #68]	; (800246c <TIM_Base_SetConfig+0x100>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d103      	bne.n	8002432 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2201      	movs	r2, #1
 800243e:	4013      	ands	r3, r2
 8002440:	2b01      	cmp	r3, #1
 8002442:	d106      	bne.n	8002452 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2201      	movs	r2, #1
 800244a:	4393      	bics	r3, r2
 800244c:	001a      	movs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	611a      	str	r2, [r3, #16]
  }
}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	46bd      	mov	sp, r7
 8002456:	b004      	add	sp, #16
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	40012c00 	.word	0x40012c00
 8002460:	40000400 	.word	0x40000400
 8002464:	40002000 	.word	0x40002000
 8002468:	40014400 	.word	0x40014400
 800246c:	40014800 	.word	0x40014800
 8002470:	fffffcff 	.word	0xfffffcff

08002474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	2201      	movs	r2, #1
 800248c:	4393      	bics	r3, r2
 800248e:	001a      	movs	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	22f0      	movs	r2, #240	; 0xf0
 800249e:	4393      	bics	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	220a      	movs	r2, #10
 80024b0:	4393      	bics	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	693a      	ldr	r2, [r7, #16]
 80024c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	621a      	str	r2, [r3, #32]
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b006      	add	sp, #24
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a1b      	ldr	r3, [r3, #32]
 80024e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	2210      	movs	r2, #16
 80024e8:	4393      	bics	r3, r2
 80024ea:	001a      	movs	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4a0d      	ldr	r2, [pc, #52]	; (8002530 <TIM_TI2_ConfigInputStage+0x60>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	031b      	lsls	r3, r3, #12
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	22a0      	movs	r2, #160	; 0xa0
 800250c:	4393      	bics	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	621a      	str	r2, [r3, #32]
}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	46bd      	mov	sp, r7
 800252a:	b006      	add	sp, #24
 800252c:	bd80      	pop	{r7, pc}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	ffff0fff 	.word	0xffff0fff

08002534 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2270      	movs	r2, #112	; 0x70
 8002548:	4393      	bics	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	2207      	movs	r2, #7
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	609a      	str	r2, [r3, #8]
}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	b004      	add	sp, #16
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <TIM_ETR_SetConfig+0x3c>)
 8002580:	4013      	ands	r3, r2
 8002582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	021a      	lsls	r2, r3, #8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	431a      	orrs	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4313      	orrs	r3, r2
 8002590:	697a      	ldr	r2, [r7, #20]
 8002592:	4313      	orrs	r3, r2
 8002594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	609a      	str	r2, [r3, #8]
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b006      	add	sp, #24
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	ffff00ff 	.word	0xffff00ff

080025a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	223c      	movs	r2, #60	; 0x3c
 80025b6:	5c9b      	ldrb	r3, [r3, r2]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025bc:	2302      	movs	r3, #2
 80025be:	e042      	b.n	8002646 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	223c      	movs	r2, #60	; 0x3c
 80025c4:	2101      	movs	r1, #1
 80025c6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	223d      	movs	r2, #61	; 0x3d
 80025cc:	2102      	movs	r1, #2
 80025ce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2270      	movs	r2, #112	; 0x70
 80025e4:	4393      	bics	r3, r2
 80025e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a14      	ldr	r2, [pc, #80]	; (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00a      	beq.n	800261a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	05db      	lsls	r3, r3, #23
 800260c:	429a      	cmp	r2, r3
 800260e:	d004      	beq.n	800261a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10c      	bne.n	8002634 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	4393      	bics	r3, r2
 8002620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	4313      	orrs	r3, r2
 800262a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	223d      	movs	r2, #61	; 0x3d
 8002638:	2101      	movs	r1, #1
 800263a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	223c      	movs	r2, #60	; 0x3c
 8002640:	2100      	movs	r1, #0
 8002642:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b004      	add	sp, #16
 800264c:	bd80      	pop	{r7, pc}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	40012c00 	.word	0x40012c00
 8002654:	40000400 	.word	0x40000400

08002658 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002660:	46c0      	nop			; (mov r8, r8)
 8002662:	46bd      	mov	sp, r7
 8002664:	b002      	add	sp, #8
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b002      	add	sp, #8
 8002676:	bd80      	pop	{r7, pc}

08002678 <__libc_init_array>:
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	2600      	movs	r6, #0
 800267c:	4d0c      	ldr	r5, [pc, #48]	; (80026b0 <__libc_init_array+0x38>)
 800267e:	4c0d      	ldr	r4, [pc, #52]	; (80026b4 <__libc_init_array+0x3c>)
 8002680:	1b64      	subs	r4, r4, r5
 8002682:	10a4      	asrs	r4, r4, #2
 8002684:	42a6      	cmp	r6, r4
 8002686:	d109      	bne.n	800269c <__libc_init_array+0x24>
 8002688:	2600      	movs	r6, #0
 800268a:	f000 f821 	bl	80026d0 <_init>
 800268e:	4d0a      	ldr	r5, [pc, #40]	; (80026b8 <__libc_init_array+0x40>)
 8002690:	4c0a      	ldr	r4, [pc, #40]	; (80026bc <__libc_init_array+0x44>)
 8002692:	1b64      	subs	r4, r4, r5
 8002694:	10a4      	asrs	r4, r4, #2
 8002696:	42a6      	cmp	r6, r4
 8002698:	d105      	bne.n	80026a6 <__libc_init_array+0x2e>
 800269a:	bd70      	pop	{r4, r5, r6, pc}
 800269c:	00b3      	lsls	r3, r6, #2
 800269e:	58eb      	ldr	r3, [r5, r3]
 80026a0:	4798      	blx	r3
 80026a2:	3601      	adds	r6, #1
 80026a4:	e7ee      	b.n	8002684 <__libc_init_array+0xc>
 80026a6:	00b3      	lsls	r3, r6, #2
 80026a8:	58eb      	ldr	r3, [r5, r3]
 80026aa:	4798      	blx	r3
 80026ac:	3601      	adds	r6, #1
 80026ae:	e7f2      	b.n	8002696 <__libc_init_array+0x1e>
 80026b0:	08002754 	.word	0x08002754
 80026b4:	08002754 	.word	0x08002754
 80026b8:	08002754 	.word	0x08002754
 80026bc:	08002758 	.word	0x08002758

080026c0 <memset>:
 80026c0:	0003      	movs	r3, r0
 80026c2:	1882      	adds	r2, r0, r2
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d100      	bne.n	80026ca <memset+0xa>
 80026c8:	4770      	bx	lr
 80026ca:	7019      	strb	r1, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	e7f9      	b.n	80026c4 <memset+0x4>

080026d0 <_init>:
 80026d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026d6:	bc08      	pop	{r3}
 80026d8:	469e      	mov	lr, r3
 80026da:	4770      	bx	lr

080026dc <_fini>:
 80026dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026de:	46c0      	nop			; (mov r8, r8)
 80026e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026e2:	bc08      	pop	{r3}
 80026e4:	469e      	mov	lr, r3
 80026e6:	4770      	bx	lr
