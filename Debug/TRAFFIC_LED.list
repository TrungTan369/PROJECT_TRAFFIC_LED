
TRAFFIC_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002afc  08002afc  00012afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b68  08002b68  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08002b68  08002b68  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b68  08002b68  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b6c  08002b6c  00012b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08002b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000038  08002ba8  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08002ba8  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a189  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5d  00000000  00000000  0002a1e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a00  00000000  00000000  0002c048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002ca48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010496  00000000  00000000  0002d318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3a7  00000000  00000000  0003d7ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f40d  00000000  00000000  0004ab55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a9f62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ac  00000000  00000000  000a9fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000038 	.word	0x20000038
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ae4 	.word	0x08002ae4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000003c 	.word	0x2000003c
 8000104:	08002ae4 	.word	0x08002ae4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <getKeyinput>:
#include "button.h"


int buttonFlag[3] = {0,0,0};

void getKeyinput(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	//-----PROCESS BUTTON 1------------

	// BEGIN: timer_flag[1] == 1
	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin) == 0)){
 80003f8:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <getKeyinput+0x7c>)
 80003fa:	68db      	ldr	r3, [r3, #12]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d10e      	bne.n	800041e <getKeyinput+0x2a>
 8000400:	2390      	movs	r3, #144	; 0x90
 8000402:	05db      	lsls	r3, r3, #23
 8000404:	2180      	movs	r1, #128	; 0x80
 8000406:	0018      	movs	r0, r3
 8000408:	f001 fa8a 	bl	8001920 <HAL_GPIO_ReadPin>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d106      	bne.n	800041e <getKeyinput+0x2a>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		buttonFlag[0] = 1;
 8000410:	4b18      	ldr	r3, [pc, #96]	; (8000474 <getKeyinput+0x80>)
 8000412:	2201      	movs	r2, #1
 8000414:	601a      	str	r2, [r3, #0]
		setTimer(3, 200);  //Không đọc nút nhấn trong 200ms sau khi nhấn lần đầu tiên
 8000416:	21c8      	movs	r1, #200	; 0xc8
 8000418:	2003      	movs	r0, #3
 800041a:	f000 ff53 	bl	80012c4 <setTimer>
	}
	// không đọc tiếp nút nhấn trong 200ms

	// ----PROCESS BUTTON 2-----------

	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin) == 0)){
 800041e:	4b14      	ldr	r3, [pc, #80]	; (8000470 <getKeyinput+0x7c>)
 8000420:	68db      	ldr	r3, [r3, #12]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d10e      	bne.n	8000444 <getKeyinput+0x50>
 8000426:	2390      	movs	r3, #144	; 0x90
 8000428:	05db      	lsls	r3, r3, #23
 800042a:	2108      	movs	r1, #8
 800042c:	0018      	movs	r0, r3
 800042e:	f001 fa77 	bl	8001920 <HAL_GPIO_ReadPin>
 8000432:	1e03      	subs	r3, r0, #0
 8000434:	d106      	bne.n	8000444 <getKeyinput+0x50>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		buttonFlag[1] = 1;
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <getKeyinput+0x80>)
 8000438:	2201      	movs	r2, #1
 800043a:	605a      	str	r2, [r3, #4]
		setTimer(3, 200);
 800043c:	21c8      	movs	r1, #200	; 0xc8
 800043e:	2003      	movs	r0, #3
 8000440:	f000 ff40 	bl	80012c4 <setTimer>
	}

	// ----- PROCESS BUTTON 3 -----------
	if((timer_flag[3] == 1) && (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == 0)){
 8000444:	4b0a      	ldr	r3, [pc, #40]	; (8000470 <getKeyinput+0x7c>)
 8000446:	68db      	ldr	r3, [r3, #12]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d10e      	bne.n	800046a <getKeyinput+0x76>
 800044c:	2390      	movs	r3, #144	; 0x90
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	2102      	movs	r1, #2
 8000452:	0018      	movs	r0, r3
 8000454:	f001 fa64 	bl	8001920 <HAL_GPIO_ReadPin>
 8000458:	1e03      	subs	r3, r0, #0
 800045a:	d106      	bne.n	800046a <getKeyinput+0x76>
		//HAL_GPIO_TogglePin(R0_GPIO_Port, R0_Pin);
		//counter_debug++;
		setTimer(3, 200);
 800045c:	21c8      	movs	r1, #200	; 0xc8
 800045e:	2003      	movs	r0, #3
 8000460:	f000 ff30 	bl	80012c4 <setTimer>
		buttonFlag[2] = 1;
 8000464:	4b03      	ldr	r3, [pc, #12]	; (8000474 <getKeyinput+0x80>)
 8000466:	2201      	movs	r2, #1
 8000468:	609a      	str	r2, [r3, #8]
	}

}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000020 	.word	0x20000020
 8000474:	20000054 	.word	0x20000054

08000478 <isButtonPress>:
int isButtonPress(int i){
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if(buttonFlag[i] == 1){
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <isButtonPress+0x2c>)
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	0092      	lsls	r2, r2, #2
 8000486:	58d3      	ldr	r3, [r2, r3]
 8000488:	2b01      	cmp	r3, #1
 800048a:	d106      	bne.n	800049a <isButtonPress+0x22>
		buttonFlag[i] = 0;
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <isButtonPress+0x2c>)
 800048e:	687a      	ldr	r2, [r7, #4]
 8000490:	0092      	lsls	r2, r2, #2
 8000492:	2100      	movs	r1, #0
 8000494:	50d1      	str	r1, [r2, r3]
		return 1;
 8000496:	2301      	movs	r3, #1
 8000498:	e000      	b.n	800049c <isButtonPress+0x24>
	}
	return 0;
 800049a:	2300      	movs	r3, #0
}
 800049c:	0018      	movs	r0, r3
 800049e:	46bd      	mov	sp, r7
 80004a0:	b002      	add	sp, #8
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	20000054 	.word	0x20000054

080004a8 <fsm_auto_run>:
 *      Author: HOME
 */

#include "fsm_auto.h"

void fsm_auto_run(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	switch (status) {   // LINE 1
 80004ac:	4bc0      	ldr	r3, [pc, #768]	; (80007b0 <fsm_auto_run+0x308>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	d900      	bls.n	80004b6 <fsm_auto_run+0xe>
 80004b4:	e178      	b.n	80007a8 <fsm_auto_run+0x300>
 80004b6:	009a      	lsls	r2, r3, #2
 80004b8:	4bbe      	ldr	r3, [pc, #760]	; (80007b4 <fsm_auto_run+0x30c>)
 80004ba:	18d3      	adds	r3, r2, r3
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	469f      	mov	pc, r3
		case auto_init:
			// ------- ALL LED OFF -------------
			single_LED_off();
 80004c0:	f000 fd04 	bl	8000ecc <single_LED_off>
			status = auto_red_green;
 80004c4:	4bba      	ldr	r3, [pc, #744]	; (80007b0 <fsm_auto_run+0x308>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
			count0 = (time_red_green + time_red_yellow)/1000;
 80004ca:	4bbb      	ldr	r3, [pc, #748]	; (80007b8 <fsm_auto_run+0x310>)
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	4bbb      	ldr	r3, [pc, #748]	; (80007bc <fsm_auto_run+0x314>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	18d3      	adds	r3, r2, r3
 80004d4:	22fa      	movs	r2, #250	; 0xfa
 80004d6:	0091      	lsls	r1, r2, #2
 80004d8:	0018      	movs	r0, r3
 80004da:	f7ff fe9f 	bl	800021c <__divsi3>
 80004de:	0003      	movs	r3, r0
 80004e0:	001a      	movs	r2, r3
 80004e2:	4bb7      	ldr	r3, [pc, #732]	; (80007c0 <fsm_auto_run+0x318>)
 80004e4:	601a      	str	r2, [r3, #0]
			count1 = time_red_green/1000;
 80004e6:	4bb4      	ldr	r3, [pc, #720]	; (80007b8 <fsm_auto_run+0x310>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	22fa      	movs	r2, #250	; 0xfa
 80004ec:	0091      	lsls	r1, r2, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f7ff fe94 	bl	800021c <__divsi3>
 80004f4:	0003      	movs	r3, r0
 80004f6:	001a      	movs	r2, r3
 80004f8:	4bb2      	ldr	r3, [pc, #712]	; (80007c4 <fsm_auto_run+0x31c>)
 80004fa:	601a      	str	r2, [r3, #0]
			setTimer(0, time_red_green);
 80004fc:	4bae      	ldr	r3, [pc, #696]	; (80007b8 <fsm_auto_run+0x310>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	0019      	movs	r1, r3
 8000502:	2000      	movs	r0, #0
 8000504:	f000 fede 	bl	80012c4 <setTimer>
			setTimer(1, 1000); // count 1s
 8000508:	23fa      	movs	r3, #250	; 0xfa
 800050a:	009b      	lsls	r3, r3, #2
 800050c:	0019      	movs	r1, r3
 800050e:	2001      	movs	r0, #1
 8000510:	f000 fed8 	bl	80012c4 <setTimer>
			setTimer(2, 10);  // scan led
 8000514:	210a      	movs	r1, #10
 8000516:	2002      	movs	r0, #2
 8000518:	f000 fed4 	bl	80012c4 <setTimer>
			break;
 800051c:	e108      	b.n	8000730 <fsm_auto_run+0x288>
		case auto_red_green:
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET); // yellow 0 off
 800051e:	2390      	movs	r3, #144	; 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	2201      	movs	r2, #1
 8000524:	2110      	movs	r1, #16
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fa17 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET); // red 1 on
 800052c:	2390      	movs	r3, #144	; 0x90
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	2201      	movs	r2, #1
 8000532:	2104      	movs	r1, #4
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fa10 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET); // red0 on
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	0159      	lsls	r1, r3, #5
 800053e:	2390      	movs	r3, #144	; 0x90
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	2200      	movs	r2, #0
 8000544:	0018      	movs	r0, r3
 8000546:	f001 fa08 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET); // green1 on
 800054a:	4b9f      	ldr	r3, [pc, #636]	; (80007c8 <fsm_auto_run+0x320>)
 800054c:	2200      	movs	r2, #0
 800054e:	2110      	movs	r1, #16
 8000550:	0018      	movs	r0, r3
 8000552:	f001 fa02 	bl	800195a <HAL_GPIO_WritePin>
			if(timer_flag[0] == 1){
 8000556:	4b9d      	ldr	r3, [pc, #628]	; (80007cc <fsm_auto_run+0x324>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d11e      	bne.n	800059c <fsm_auto_run+0xf4>
				status = auto_red_yellow;
 800055e:	4b94      	ldr	r3, [pc, #592]	; (80007b0 <fsm_auto_run+0x308>)
 8000560:	2202      	movs	r2, #2
 8000562:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_yellow);
 8000564:	4b95      	ldr	r3, [pc, #596]	; (80007bc <fsm_auto_run+0x314>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	0019      	movs	r1, r3
 800056a:	2000      	movs	r0, #0
 800056c:	f000 feaa 	bl	80012c4 <setTimer>
				count0 = time_red_yellow/1000;;
 8000570:	4b92      	ldr	r3, [pc, #584]	; (80007bc <fsm_auto_run+0x314>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	22fa      	movs	r2, #250	; 0xfa
 8000576:	0091      	lsls	r1, r2, #2
 8000578:	0018      	movs	r0, r3
 800057a:	f7ff fe4f 	bl	800021c <__divsi3>
 800057e:	0003      	movs	r3, r0
 8000580:	001a      	movs	r2, r3
 8000582:	4b8f      	ldr	r3, [pc, #572]	; (80007c0 <fsm_auto_run+0x318>)
 8000584:	601a      	str	r2, [r3, #0]
				count1 = time_red_yellow/1000;
 8000586:	4b8d      	ldr	r3, [pc, #564]	; (80007bc <fsm_auto_run+0x314>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	22fa      	movs	r2, #250	; 0xfa
 800058c:	0091      	lsls	r1, r2, #2
 800058e:	0018      	movs	r0, r3
 8000590:	f7ff fe44 	bl	800021c <__divsi3>
 8000594:	0003      	movs	r3, r0
 8000596:	001a      	movs	r2, r3
 8000598:	4b8a      	ldr	r3, [pc, #552]	; (80007c4 <fsm_auto_run+0x31c>)
 800059a:	601a      	str	r2, [r3, #0]
			}
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 800059c:	2001      	movs	r0, #1
 800059e:	f7ff ff6b 	bl	8000478 <isButtonPress>
 80005a2:	0003      	movs	r3, r0
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d000      	beq.n	80005aa <fsm_auto_run+0x102>
 80005a8:	e0bb      	b.n	8000722 <fsm_auto_run+0x27a>
				status = manual_red_green;
 80005aa:	4b81      	ldr	r3, [pc, #516]	; (80007b0 <fsm_auto_run+0x308>)
 80005ac:	2205      	movs	r2, #5
 80005ae:	601a      	str	r2, [r3, #0]
				Diable_Led();
 80005b0:	f000 fac8 	bl	8000b44 <Diable_Led>
				return;
 80005b4:	e0f9      	b.n	80007aa <fsm_auto_run+0x302>
			}
			break;
		case auto_red_yellow:
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET); // green1 off
 80005b6:	4b84      	ldr	r3, [pc, #528]	; (80007c8 <fsm_auto_run+0x320>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	2110      	movs	r1, #16
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 f9cc 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, RESET); // yellow1 on
 80005c2:	4b81      	ldr	r3, [pc, #516]	; (80007c8 <fsm_auto_run+0x320>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	2120      	movs	r1, #32
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 f9c6 	bl	800195a <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 80005ce:	4b7f      	ldr	r3, [pc, #508]	; (80007cc <fsm_auto_run+0x324>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d000      	beq.n	80005d8 <fsm_auto_run+0x130>
 80005d6:	e0a6      	b.n	8000726 <fsm_auto_run+0x27e>
				status = auto_green_red;
 80005d8:	4b75      	ldr	r3, [pc, #468]	; (80007b0 <fsm_auto_run+0x308>)
 80005da:	2203      	movs	r2, #3
 80005dc:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green)/1000;
 80005de:	4b76      	ldr	r3, [pc, #472]	; (80007b8 <fsm_auto_run+0x310>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	22fa      	movs	r2, #250	; 0xfa
 80005e4:	0091      	lsls	r1, r2, #2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff fe18 	bl	800021c <__divsi3>
 80005ec:	0003      	movs	r3, r0
 80005ee:	001a      	movs	r2, r3
 80005f0:	4b73      	ldr	r3, [pc, #460]	; (80007c0 <fsm_auto_run+0x318>)
 80005f2:	601a      	str	r2, [r3, #0]
				count1 = (time_red_green + time_red_yellow)/1000;
 80005f4:	4b70      	ldr	r3, [pc, #448]	; (80007b8 <fsm_auto_run+0x310>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	4b70      	ldr	r3, [pc, #448]	; (80007bc <fsm_auto_run+0x314>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	18d3      	adds	r3, r2, r3
 80005fe:	22fa      	movs	r2, #250	; 0xfa
 8000600:	0091      	lsls	r1, r2, #2
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff fe0a 	bl	800021c <__divsi3>
 8000608:	0003      	movs	r3, r0
 800060a:	001a      	movs	r2, r3
 800060c:	4b6d      	ldr	r3, [pc, #436]	; (80007c4 <fsm_auto_run+0x31c>)
 800060e:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000610:	4b69      	ldr	r3, [pc, #420]	; (80007b8 <fsm_auto_run+0x310>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	0019      	movs	r1, r3
 8000616:	2000      	movs	r0, #0
 8000618:	f000 fe54 	bl	80012c4 <setTimer>
			}
			break;
 800061c:	e083      	b.n	8000726 <fsm_auto_run+0x27e>
		case auto_green_red:
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET); // red 0 off
 800061e:	2380      	movs	r3, #128	; 0x80
 8000620:	0159      	lsls	r1, r3, #5
 8000622:	2390      	movs	r3, #144	; 0x90
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	2201      	movs	r2, #1
 8000628:	0018      	movs	r0, r3
 800062a:	f001 f996 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET); // yellow 1 off
 800062e:	4b66      	ldr	r3, [pc, #408]	; (80007c8 <fsm_auto_run+0x320>)
 8000630:	2201      	movs	r2, #1
 8000632:	2120      	movs	r1, #32
 8000634:	0018      	movs	r0, r3
 8000636:	f001 f990 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET); // green 0 on
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	0059      	lsls	r1, r3, #1
 800063e:	2390      	movs	r3, #144	; 0x90
 8000640:	05db      	lsls	r3, r3, #23
 8000642:	2200      	movs	r2, #0
 8000644:	0018      	movs	r0, r3
 8000646:	f001 f988 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET); // red 1 on
 800064a:	2390      	movs	r3, #144	; 0x90
 800064c:	05db      	lsls	r3, r3, #23
 800064e:	2200      	movs	r2, #0
 8000650:	2104      	movs	r1, #4
 8000652:	0018      	movs	r0, r3
 8000654:	f001 f981 	bl	800195a <HAL_GPIO_WritePin>

			if(timer_flag[0] == 1){
 8000658:	4b5c      	ldr	r3, [pc, #368]	; (80007cc <fsm_auto_run+0x324>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d11e      	bne.n	800069e <fsm_auto_run+0x1f6>
				status = auto_yellow_red;
 8000660:	4b53      	ldr	r3, [pc, #332]	; (80007b0 <fsm_auto_run+0x308>)
 8000662:	2204      	movs	r2, #4
 8000664:	601a      	str	r2, [r3, #0]
				count0 = time_red_yellow/1000;
 8000666:	4b55      	ldr	r3, [pc, #340]	; (80007bc <fsm_auto_run+0x314>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	22fa      	movs	r2, #250	; 0xfa
 800066c:	0091      	lsls	r1, r2, #2
 800066e:	0018      	movs	r0, r3
 8000670:	f7ff fdd4 	bl	800021c <__divsi3>
 8000674:	0003      	movs	r3, r0
 8000676:	001a      	movs	r2, r3
 8000678:	4b51      	ldr	r3, [pc, #324]	; (80007c0 <fsm_auto_run+0x318>)
 800067a:	601a      	str	r2, [r3, #0]
				count1 = time_red_yellow/1000;;
 800067c:	4b4f      	ldr	r3, [pc, #316]	; (80007bc <fsm_auto_run+0x314>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	22fa      	movs	r2, #250	; 0xfa
 8000682:	0091      	lsls	r1, r2, #2
 8000684:	0018      	movs	r0, r3
 8000686:	f7ff fdc9 	bl	800021c <__divsi3>
 800068a:	0003      	movs	r3, r0
 800068c:	001a      	movs	r2, r3
 800068e:	4b4d      	ldr	r3, [pc, #308]	; (80007c4 <fsm_auto_run+0x31c>)
 8000690:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_yellow);
 8000692:	4b4a      	ldr	r3, [pc, #296]	; (80007bc <fsm_auto_run+0x314>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	0019      	movs	r1, r3
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fe13 	bl	80012c4 <setTimer>
			}
			//-----SWITCHING MANNUAL MODE -----------
			if(isButtonPress(1) == 1){
 800069e:	2001      	movs	r0, #1
 80006a0:	f7ff feea 	bl	8000478 <isButtonPress>
 80006a4:	0003      	movs	r3, r0
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d13f      	bne.n	800072a <fsm_auto_run+0x282>
				status = manual_green_red;
 80006aa:	4b41      	ldr	r3, [pc, #260]	; (80007b0 <fsm_auto_run+0x308>)
 80006ac:	2206      	movs	r2, #6
 80006ae:	601a      	str	r2, [r3, #0]
				Diable_Led();
 80006b0:	f000 fa48 	bl	8000b44 <Diable_Led>
				return;
 80006b4:	e079      	b.n	80007aa <fsm_auto_run+0x302>
			}
			break;
		case auto_yellow_red:
			HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, RESET); // yellow 0 on
 80006b6:	2390      	movs	r3, #144	; 0x90
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	2200      	movs	r2, #0
 80006bc:	2110      	movs	r1, #16
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 f94b 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET); // green 0 off
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	0059      	lsls	r1, r3, #1
 80006c8:	2390      	movs	r3, #144	; 0x90
 80006ca:	05db      	lsls	r3, r3, #23
 80006cc:	2201      	movs	r2, #1
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 f943 	bl	800195a <HAL_GPIO_WritePin>
			if(timer_flag[0] == 1){
 80006d4:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <fsm_auto_run+0x324>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d128      	bne.n	800072e <fsm_auto_run+0x286>
				status = auto_red_green;
 80006dc:	4b34      	ldr	r3, [pc, #208]	; (80007b0 <fsm_auto_run+0x308>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <fsm_auto_run+0x310>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b35      	ldr	r3, [pc, #212]	; (80007bc <fsm_auto_run+0x314>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	18d3      	adds	r3, r2, r3
 80006ec:	22fa      	movs	r2, #250	; 0xfa
 80006ee:	0091      	lsls	r1, r2, #2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff fd93 	bl	800021c <__divsi3>
 80006f6:	0003      	movs	r3, r0
 80006f8:	001a      	movs	r2, r3
 80006fa:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <fsm_auto_run+0x318>)
 80006fc:	601a      	str	r2, [r3, #0]
				count1 = time_red_green / 1000;
 80006fe:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <fsm_auto_run+0x310>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	22fa      	movs	r2, #250	; 0xfa
 8000704:	0091      	lsls	r1, r2, #2
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff fd88 	bl	800021c <__divsi3>
 800070c:	0003      	movs	r3, r0
 800070e:	001a      	movs	r2, r3
 8000710:	4b2c      	ldr	r3, [pc, #176]	; (80007c4 <fsm_auto_run+0x31c>)
 8000712:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <fsm_auto_run+0x310>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	0019      	movs	r1, r3
 800071a:	2000      	movs	r0, #0
 800071c:	f000 fdd2 	bl	80012c4 <setTimer>
			}
			break;
 8000720:	e005      	b.n	800072e <fsm_auto_run+0x286>
			break;
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	e004      	b.n	8000730 <fsm_auto_run+0x288>
			break;
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	e002      	b.n	8000730 <fsm_auto_run+0x288>
			break;
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	e000      	b.n	8000730 <fsm_auto_run+0x288>
			break;
 800072e:	46c0      	nop			; (mov r8, r8)
		default: // ----- MANUAL MODE & SETTING MODE ---------
			return;
			break;
	}

	updateClockBuffer(count0, count1);
 8000730:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <fsm_auto_run+0x318>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <fsm_auto_run+0x31c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	0019      	movs	r1, r3
 800073a:	0010      	movs	r0, r2
 800073c:	f000 fb96 	bl	8000e6c <updateClockBuffer>
	if(timer_flag[2] == 1){
 8000740:	4b22      	ldr	r3, [pc, #136]	; (80007cc <fsm_auto_run+0x324>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d105      	bne.n	8000754 <fsm_auto_run+0x2ac>

		setTimer(2, 10);
 8000748:	210a      	movs	r1, #10
 800074a:	2002      	movs	r0, #2
 800074c:	f000 fdba 	bl	80012c4 <setTimer>
		Scan7SEG();
 8000750:	f000 fa1c 	bl	8000b8c <Scan7SEG>
	}
	if(timer_flag[1] == 1){
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <fsm_auto_run+0x324>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10f      	bne.n	800077c <fsm_auto_run+0x2d4>
		setTimer(1, 1000);
 800075c:	23fa      	movs	r3, #250	; 0xfa
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	0019      	movs	r1, r3
 8000762:	2001      	movs	r0, #1
 8000764:	f000 fdae 	bl	80012c4 <setTimer>
		count0 --; count1 --;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <fsm_auto_run+0x318>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <fsm_auto_run+0x318>)
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <fsm_auto_run+0x31c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	1e5a      	subs	r2, r3, #1
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <fsm_auto_run+0x31c>)
 800077a:	601a      	str	r2, [r3, #0]
	}
	// -------SWITCHING SETTING MODE ------------
	if(isButtonPress(2) == 1){
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff fe7b 	bl	8000478 <isButtonPress>
 8000782:	0003      	movs	r3, r0
 8000784:	2b01      	cmp	r3, #1
 8000786:	d110      	bne.n	80007aa <fsm_auto_run+0x302>
		time_red_yellow = 0;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <fsm_auto_run+0x314>)
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <fsm_auto_run+0x310>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
		single_LED_off();
 8000794:	f000 fb9a 	bl	8000ecc <single_LED_off>
		status = set_green;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <fsm_auto_run+0x308>)
 800079a:	2208      	movs	r2, #8
 800079c:	601a      	str	r2, [r3, #0]
		setTimer(0, 100);
 800079e:	2164      	movs	r1, #100	; 0x64
 80007a0:	2000      	movs	r0, #0
 80007a2:	f000 fd8f 	bl	80012c4 <setTimer>
		return;
 80007a6:	e000      	b.n	80007aa <fsm_auto_run+0x302>
			return;
 80007a8:	46c0      	nop			; (mov r8, r8)
	}
}
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	20000064 	.word	0x20000064
 80007b4:	08002afc 	.word	0x08002afc
 80007b8:	20000014 	.word	0x20000014
 80007bc:	20000018 	.word	0x20000018
 80007c0:	20000068 	.word	0x20000068
 80007c4:	2000006c 	.word	0x2000006c
 80007c8:	48000400 	.word	0x48000400
 80007cc:	20000020 	.word	0x20000020

080007d0 <fsm_manual>:
 *      Author: Admin
 */

#include "fsm_manual.h"

void fsm_manual(){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	switch (status) {
 80007d4:	4b5d      	ldr	r3, [pc, #372]	; (800094c <fsm_manual+0x17c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b05      	cmp	r3, #5
 80007da:	d002      	beq.n	80007e2 <fsm_manual+0x12>
 80007dc:	2b06      	cmp	r3, #6
 80007de:	d04f      	beq.n	8000880 <fsm_manual+0xb0>
				count1 =   (time_red_green + time_red_yellow)/1000;
				setTimer(0, time_red_green);
			}
			break;
		default:
			return;
 80007e0:	e0b1      	b.n	8000946 <fsm_manual+0x176>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, RESET);
 80007e2:	2380      	movs	r3, #128	; 0x80
 80007e4:	0159      	lsls	r1, r3, #5
 80007e6:	2390      	movs	r3, #144	; 0x90
 80007e8:	05db      	lsls	r3, r3, #23
 80007ea:	2200      	movs	r2, #0
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 f8b4 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, RESET);
 80007f2:	4b57      	ldr	r3, [pc, #348]	; (8000950 <fsm_manual+0x180>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	2110      	movs	r1, #16
 80007f8:	0018      	movs	r0, r3
 80007fa:	f001 f8ae 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 80007fe:	2390      	movs	r3, #144	; 0x90
 8000800:	05db      	lsls	r3, r3, #23
 8000802:	2201      	movs	r2, #1
 8000804:	2104      	movs	r1, #4
 8000806:	0018      	movs	r0, r3
 8000808:	f001 f8a7 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	0059      	lsls	r1, r3, #1
 8000810:	2390      	movs	r3, #144	; 0x90
 8000812:	05db      	lsls	r3, r3, #23
 8000814:	2201      	movs	r2, #1
 8000816:	0018      	movs	r0, r3
 8000818:	f001 f89f 	bl	800195a <HAL_GPIO_WritePin>
			if(isButtonPress(1) == 1){
 800081c:	2001      	movs	r0, #1
 800081e:	f7ff fe2b 	bl	8000478 <isButtonPress>
 8000822:	0003      	movs	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d102      	bne.n	800082e <fsm_manual+0x5e>
				status = manual_green_red;
 8000828:	4b48      	ldr	r3, [pc, #288]	; (800094c <fsm_manual+0x17c>)
 800082a:	2206      	movs	r2, #6
 800082c:	601a      	str	r2, [r3, #0]
			if(isButtonPress(0) == 1){
 800082e:	2000      	movs	r0, #0
 8000830:	f7ff fe22 	bl	8000478 <isButtonPress>
 8000834:	0003      	movs	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d171      	bne.n	800091e <fsm_manual+0x14e>
				status = auto_red_green;
 800083a:	4b44      	ldr	r3, [pc, #272]	; (800094c <fsm_manual+0x17c>)
 800083c:	2201      	movs	r2, #1
 800083e:	601a      	str	r2, [r3, #0]
				count0 = (time_red_green + time_red_yellow)/1000;
 8000840:	4b44      	ldr	r3, [pc, #272]	; (8000954 <fsm_manual+0x184>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b44      	ldr	r3, [pc, #272]	; (8000958 <fsm_manual+0x188>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	18d3      	adds	r3, r2, r3
 800084a:	22fa      	movs	r2, #250	; 0xfa
 800084c:	0091      	lsls	r1, r2, #2
 800084e:	0018      	movs	r0, r3
 8000850:	f7ff fce4 	bl	800021c <__divsi3>
 8000854:	0003      	movs	r3, r0
 8000856:	001a      	movs	r2, r3
 8000858:	4b40      	ldr	r3, [pc, #256]	; (800095c <fsm_manual+0x18c>)
 800085a:	601a      	str	r2, [r3, #0]
				count1 = time_red_green / 1000;
 800085c:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <fsm_manual+0x184>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	22fa      	movs	r2, #250	; 0xfa
 8000862:	0091      	lsls	r1, r2, #2
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff fcd9 	bl	800021c <__divsi3>
 800086a:	0003      	movs	r3, r0
 800086c:	001a      	movs	r2, r3
 800086e:	4b3c      	ldr	r3, [pc, #240]	; (8000960 <fsm_manual+0x190>)
 8000870:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000872:	4b38      	ldr	r3, [pc, #224]	; (8000954 <fsm_manual+0x184>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	0019      	movs	r1, r3
 8000878:	2000      	movs	r0, #0
 800087a:	f000 fd23 	bl	80012c4 <setTimer>
			break;
 800087e:	e04e      	b.n	800091e <fsm_manual+0x14e>
			HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, RESET);
 8000880:	2390      	movs	r3, #144	; 0x90
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	2200      	movs	r2, #0
 8000886:	2104      	movs	r1, #4
 8000888:	0018      	movs	r0, r3
 800088a:	f001 f866 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, RESET);
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	0059      	lsls	r1, r3, #1
 8000892:	2390      	movs	r3, #144	; 0x90
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	2200      	movs	r2, #0
 8000898:	0018      	movs	r0, r3
 800089a:	f001 f85e 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	0159      	lsls	r1, r3, #5
 80008a2:	2390      	movs	r3, #144	; 0x90
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	2201      	movs	r2, #1
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 f856 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <fsm_manual+0x180>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	2110      	movs	r1, #16
 80008b4:	0018      	movs	r0, r3
 80008b6:	f001 f850 	bl	800195a <HAL_GPIO_WritePin>
			if(isButtonPress(1) == 1){
 80008ba:	2001      	movs	r0, #1
 80008bc:	f7ff fddc 	bl	8000478 <isButtonPress>
 80008c0:	0003      	movs	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d102      	bne.n	80008cc <fsm_manual+0xfc>
				status = manual_red_green;
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <fsm_manual+0x17c>)
 80008c8:	2205      	movs	r2, #5
 80008ca:	601a      	str	r2, [r3, #0]
			if(isButtonPress(0) == 1){
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff fdd3 	bl	8000478 <isButtonPress>
 80008d2:	0003      	movs	r3, r0
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d124      	bne.n	8000922 <fsm_manual+0x152>
				status = auto_green_red;
 80008d8:	4b1c      	ldr	r3, [pc, #112]	; (800094c <fsm_manual+0x17c>)
 80008da:	2203      	movs	r2, #3
 80008dc:	601a      	str	r2, [r3, #0]
				count0 = time_red_green/1000;
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <fsm_manual+0x184>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	22fa      	movs	r2, #250	; 0xfa
 80008e4:	0091      	lsls	r1, r2, #2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff fc98 	bl	800021c <__divsi3>
 80008ec:	0003      	movs	r3, r0
 80008ee:	001a      	movs	r2, r3
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <fsm_manual+0x18c>)
 80008f2:	601a      	str	r2, [r3, #0]
				count1 =   (time_red_green + time_red_yellow)/1000;
 80008f4:	4b17      	ldr	r3, [pc, #92]	; (8000954 <fsm_manual+0x184>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <fsm_manual+0x188>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	18d3      	adds	r3, r2, r3
 80008fe:	22fa      	movs	r2, #250	; 0xfa
 8000900:	0091      	lsls	r1, r2, #2
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff fc8a 	bl	800021c <__divsi3>
 8000908:	0003      	movs	r3, r0
 800090a:	001a      	movs	r2, r3
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <fsm_manual+0x190>)
 800090e:	601a      	str	r2, [r3, #0]
				setTimer(0, time_red_green);
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <fsm_manual+0x184>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	0019      	movs	r1, r3
 8000916:	2000      	movs	r0, #0
 8000918:	f000 fcd4 	bl	80012c4 <setTimer>
			break;
 800091c:	e001      	b.n	8000922 <fsm_manual+0x152>
			break;
 800091e:	46c0      	nop			; (mov r8, r8)
 8000920:	e000      	b.n	8000924 <fsm_manual+0x154>
			break;
 8000922:	46c0      	nop			; (mov r8, r8)
			break;
	}
	if(isButtonPress(2) == 1){
 8000924:	2002      	movs	r0, #2
 8000926:	f7ff fda7 	bl	8000478 <isButtonPress>
 800092a:	0003      	movs	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d10a      	bne.n	8000946 <fsm_manual+0x176>
		single_LED_off();
 8000930:	f000 facc 	bl	8000ecc <single_LED_off>
		status = set_green;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <fsm_manual+0x17c>)
 8000936:	2208      	movs	r2, #8
 8000938:	601a      	str	r2, [r3, #0]
		time_red_green = 0;
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <fsm_manual+0x184>)
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
		time_red_yellow = 0;
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <fsm_manual+0x188>)
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
	}
}
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	20000064 	.word	0x20000064
 8000950:	48000400 	.word	0x48000400
 8000954:	20000014 	.word	0x20000014
 8000958:	20000018 	.word	0x20000018
 800095c:	20000068 	.word	0x20000068
 8000960:	2000006c 	.word	0x2000006c

08000964 <fsm_setting>:
#include "fsm_setting.h"

int increment[5] = {1000,2000,5000,10000,20000};
int i = 0;

void fsm_setting(){
 8000964:	b5b0      	push	{r4, r5, r7, lr}
 8000966:	af00      	add	r7, sp, #0
	switch (status) {
 8000968:	4b6d      	ldr	r3, [pc, #436]	; (8000b20 <fsm_setting+0x1bc>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b07      	cmp	r3, #7
 800096e:	d062      	beq.n	8000a36 <fsm_setting+0xd2>
 8000970:	2b08      	cmp	r3, #8
 8000972:	d000      	beq.n	8000976 <fsm_setting+0x12>
 8000974:	e0d0      	b.n	8000b18 <fsm_setting+0x1b4>
		case set_green:
			if(timer_flag[0] == 1){
 8000976:	4b6b      	ldr	r3, [pc, #428]	; (8000b24 <fsm_setting+0x1c0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d110      	bne.n	80009a0 <fsm_setting+0x3c>
				setTimer(0, 100);
 800097e:	2164      	movs	r1, #100	; 0x64
 8000980:	2000      	movs	r0, #0
 8000982:	f000 fc9f 	bl	80012c4 <setTimer>
				HAL_GPIO_TogglePin(G0_GPIO_Port, G0_Pin);
 8000986:	2380      	movs	r3, #128	; 0x80
 8000988:	005a      	lsls	r2, r3, #1
 800098a:	2390      	movs	r3, #144	; 0x90
 800098c:	05db      	lsls	r3, r3, #23
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f000 ffff 	bl	8001994 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 8000996:	4b64      	ldr	r3, [pc, #400]	; (8000b28 <fsm_setting+0x1c4>)
 8000998:	2110      	movs	r1, #16
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fffa 	bl	8001994 <HAL_GPIO_TogglePin>
			}
			if(isButtonPress(0) == 1){  // TIME INCREASE
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fd69 	bl	8000478 <isButtonPress>
 80009a6:	0003      	movs	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d111      	bne.n	80009d0 <fsm_setting+0x6c>
				time_red_green += increment[i];
 80009ac:	4b5f      	ldr	r3, [pc, #380]	; (8000b2c <fsm_setting+0x1c8>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b5f      	ldr	r3, [pc, #380]	; (8000b30 <fsm_setting+0x1cc>)
 80009b2:	0092      	lsls	r2, r2, #2
 80009b4:	58d2      	ldr	r2, [r2, r3]
 80009b6:	4b5f      	ldr	r3, [pc, #380]	; (8000b34 <fsm_setting+0x1d0>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	18d2      	adds	r2, r2, r3
 80009bc:	4b5d      	ldr	r3, [pc, #372]	; (8000b34 <fsm_setting+0x1d0>)
 80009be:	601a      	str	r2, [r3, #0]
				if(time_red_green > 98000){
 80009c0:	4b5c      	ldr	r3, [pc, #368]	; (8000b34 <fsm_setting+0x1d0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a5c      	ldr	r2, [pc, #368]	; (8000b38 <fsm_setting+0x1d4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	dd02      	ble.n	80009d0 <fsm_setting+0x6c>
					time_red_green = 0;
 80009ca:	4b5a      	ldr	r3, [pc, #360]	; (8000b34 <fsm_setting+0x1d0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
				}
			}
			if(isButtonPress(2) == 1){
 80009d0:	2002      	movs	r0, #2
 80009d2:	f7ff fd51 	bl	8000478 <isButtonPress>
 80009d6:	0003      	movs	r3, r0
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d113      	bne.n	8000a04 <fsm_setting+0xa0>
				HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 80009dc:	2380      	movs	r3, #128	; 0x80
 80009de:	0059      	lsls	r1, r3, #1
 80009e0:	2390      	movs	r3, #144	; 0x90
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	2201      	movs	r2, #1
 80009e6:	0018      	movs	r0, r3
 80009e8:	f000 ffb7 	bl	800195a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 80009ec:	4b4e      	ldr	r3, [pc, #312]	; (8000b28 <fsm_setting+0x1c4>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	2110      	movs	r1, #16
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 ffb1 	bl	800195a <HAL_GPIO_WritePin>
				status = set_yellow;
 80009f8:	4b49      	ldr	r3, [pc, #292]	; (8000b20 <fsm_setting+0x1bc>)
 80009fa:	2207      	movs	r2, #7
 80009fc:	601a      	str	r2, [r3, #0]
				i = 0;
 80009fe:	4b4b      	ldr	r3, [pc, #300]	; (8000b2c <fsm_setting+0x1c8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
			}
			updateClockBuffer(time_red_green/1000, increment[i]/1000);
 8000a04:	4b4b      	ldr	r3, [pc, #300]	; (8000b34 <fsm_setting+0x1d0>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	22fa      	movs	r2, #250	; 0xfa
 8000a0a:	0091      	lsls	r1, r2, #2
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff fc05 	bl	800021c <__divsi3>
 8000a12:	0003      	movs	r3, r0
 8000a14:	001c      	movs	r4, r3
 8000a16:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <fsm_setting+0x1c8>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <fsm_setting+0x1cc>)
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	58d3      	ldr	r3, [r2, r3]
 8000a20:	22fa      	movs	r2, #250	; 0xfa
 8000a22:	0091      	lsls	r1, r2, #2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff fbf9 	bl	800021c <__divsi3>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	0020      	movs	r0, r4
 8000a30:	f000 fa1c 	bl	8000e6c <updateClockBuffer>
			break;
 8000a34:	e053      	b.n	8000ade <fsm_setting+0x17a>
		case set_yellow:
			if(timer_flag[0] == 1){
 8000a36:	4b3b      	ldr	r3, [pc, #236]	; (8000b24 <fsm_setting+0x1c0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d10e      	bne.n	8000a5c <fsm_setting+0xf8>
				setTimer(0, 100);
 8000a3e:	2164      	movs	r1, #100	; 0x64
 8000a40:	2000      	movs	r0, #0
 8000a42:	f000 fc3f 	bl	80012c4 <setTimer>
				HAL_GPIO_TogglePin(Y0_GPIO_Port, Y0_Pin);
 8000a46:	2390      	movs	r3, #144	; 0x90
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 ffa1 	bl	8001994 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 8000a52:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <fsm_setting+0x1c4>)
 8000a54:	2120      	movs	r1, #32
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 ff9c 	bl	8001994 <HAL_GPIO_TogglePin>
			}
			if(isButtonPress(0) == 1){
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fd0b 	bl	8000478 <isButtonPress>
 8000a62:	0003      	movs	r3, r0
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d109      	bne.n	8000a7c <fsm_setting+0x118>
				time_red_yellow += increment[i];
 8000a68:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <fsm_setting+0x1c8>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b30      	ldr	r3, [pc, #192]	; (8000b30 <fsm_setting+0x1cc>)
 8000a6e:	0092      	lsls	r2, r2, #2
 8000a70:	58d2      	ldr	r2, [r2, r3]
 8000a72:	4b32      	ldr	r3, [pc, #200]	; (8000b3c <fsm_setting+0x1d8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	18d2      	adds	r2, r2, r3
 8000a78:	4b30      	ldr	r3, [pc, #192]	; (8000b3c <fsm_setting+0x1d8>)
 8000a7a:	601a      	str	r2, [r3, #0]
			}
			if(isButtonPress(2) == 1){
 8000a7c:	2002      	movs	r0, #2
 8000a7e:	f7ff fcfb 	bl	8000478 <isButtonPress>
 8000a82:	0003      	movs	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d111      	bne.n	8000aac <fsm_setting+0x148>
				if((time_red_yellow + time_red_green) >= 100000){
 8000a88:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <fsm_setting+0x1d8>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <fsm_setting+0x1d0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	18d3      	adds	r3, r2, r3
 8000a92:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <fsm_setting+0x1dc>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	dd06      	ble.n	8000aa6 <fsm_setting+0x142>
					status = set_green;
 8000a98:	4b21      	ldr	r3, [pc, #132]	; (8000b20 <fsm_setting+0x1bc>)
 8000a9a:	2208      	movs	r2, #8
 8000a9c:	601a      	str	r2, [r3, #0]
					i = 0;
 8000a9e:	4b23      	ldr	r3, [pc, #140]	; (8000b2c <fsm_setting+0x1c8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	e002      	b.n	8000aac <fsm_setting+0x148>
				}
				else status = auto_init;
 8000aa6:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <fsm_setting+0x1bc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
			}
			updateClockBuffer(time_red_yellow/1000, increment[i]/1000);
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <fsm_setting+0x1d8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	22fa      	movs	r2, #250	; 0xfa
 8000ab2:	0091      	lsls	r1, r2, #2
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f7ff fbb1 	bl	800021c <__divsi3>
 8000aba:	0003      	movs	r3, r0
 8000abc:	001c      	movs	r4, r3
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <fsm_setting+0x1c8>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <fsm_setting+0x1cc>)
 8000ac4:	0092      	lsls	r2, r2, #2
 8000ac6:	58d3      	ldr	r3, [r2, r3]
 8000ac8:	22fa      	movs	r2, #250	; 0xfa
 8000aca:	0091      	lsls	r1, r2, #2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff fba5 	bl	800021c <__divsi3>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	0020      	movs	r0, r4
 8000ad8:	f000 f9c8 	bl	8000e6c <updateClockBuffer>
			break;
 8000adc:	46c0      	nop			; (mov r8, r8)
		default:
			return;
	}
	if(isButtonPress(1) == 1){
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff fcca 	bl	8000478 <isButtonPress>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d10b      	bne.n	8000b02 <fsm_setting+0x19e>
		 ++i;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <fsm_setting+0x1c8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <fsm_setting+0x1c8>)
 8000af2:	601a      	str	r2, [r3, #0]
		 if(i >=5) i = 0;
 8000af4:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <fsm_setting+0x1c8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	dd02      	ble.n	8000b02 <fsm_setting+0x19e>
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <fsm_setting+0x1c8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag[2] == 1){
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <fsm_setting+0x1c0>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d107      	bne.n	8000b1a <fsm_setting+0x1b6>
		setTimer(2, 10);
 8000b0a:	210a      	movs	r1, #10
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f000 fbd9 	bl	80012c4 <setTimer>
		Scan7SEG();
 8000b12:	f000 f83b 	bl	8000b8c <Scan7SEG>
 8000b16:	e000      	b.n	8000b1a <fsm_setting+0x1b6>
			return;
 8000b18:	46c0      	nop			; (mov r8, r8)
	}

}
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000064 	.word	0x20000064
 8000b24:	20000020 	.word	0x20000020
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	20000060 	.word	0x20000060
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000014 	.word	0x20000014
 8000b38:	00017ed0 	.word	0x00017ed0
 8000b3c:	20000018 	.word	0x20000018
 8000b40:	0001869f 	.word	0x0001869f

08000b44 <Diable_Led>:
 */
#include "led_display.h"

int led_buffer[4] = {0,0,0,0};
int led_index = 0;
void Diable_Led(){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000b48:	2390      	movs	r3, #144	; 0x90
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2101      	movs	r1, #1
 8000b50:	0018      	movs	r0, r3
 8000b52:	f000 ff02 	bl	800195a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <Diable_Led+0x40>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f000 fefc 	bl	800195a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <Diable_Led+0x44>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	2108      	movs	r1, #8
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 fef6 	bl	800195a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	0119      	lsls	r1, r3, #4
 8000b72:	2390      	movs	r3, #144	; 0x90
 8000b74:	05db      	lsls	r3, r3, #23
 8000b76:	2200      	movs	r2, #0
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f000 feee 	bl	800195a <HAL_GPIO_WritePin>
}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	48001400 	.word	0x48001400
 8000b88:	48000400 	.word	0x48000400

08000b8c <Scan7SEG>:
void Scan7SEG(){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
	Diable_Led();
 8000b90:	f7ff ffd8 	bl	8000b44 <Diable_Led>
	switch(led_index){
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <Scan7SEG+0xa8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d02d      	beq.n	8000bf8 <Scan7SEG+0x6c>
 8000b9c:	dc3a      	bgt.n	8000c14 <Scan7SEG+0x88>
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d01e      	beq.n	8000be0 <Scan7SEG+0x54>
 8000ba2:	dc37      	bgt.n	8000c14 <Scan7SEG+0x88>
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d002      	beq.n	8000bae <Scan7SEG+0x22>
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d00d      	beq.n	8000bc8 <Scan7SEG+0x3c>
		case 3:
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
			display7SEG(led_buffer[3]);
			break;
		default:
			break;
 8000bac:	e032      	b.n	8000c14 <Scan7SEG+0x88>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000bae:	2390      	movs	r3, #144	; 0x90
 8000bb0:	05db      	lsls	r3, r3, #23
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2101      	movs	r1, #1
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fecf 	bl	800195a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <Scan7SEG+0xac>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f000 f83f 	bl	8000c44 <display7SEG>
			break;
 8000bc6:	e026      	b.n	8000c16 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <Scan7SEG+0xb0>)
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2102      	movs	r1, #2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 fec3 	bl	800195a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <Scan7SEG+0xac>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f000 f833 	bl	8000c44 <display7SEG>
			break;
 8000bde:	e01a      	b.n	8000c16 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <Scan7SEG+0xb4>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	2108      	movs	r1, #8
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 feb7 	bl	800195a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <Scan7SEG+0xac>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f000 f827 	bl	8000c44 <display7SEG>
			break;
 8000bf6:	e00e      	b.n	8000c16 <Scan7SEG+0x8a>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	0119      	lsls	r1, r3, #4
 8000bfc:	2390      	movs	r3, #144	; 0x90
 8000bfe:	05db      	lsls	r3, r3, #23
 8000c00:	2201      	movs	r2, #1
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fea9 	bl	800195a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <Scan7SEG+0xac>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f000 f819 	bl	8000c44 <display7SEG>
			break;
 8000c12:	e000      	b.n	8000c16 <Scan7SEG+0x8a>
			break;
 8000c14:	46c0      	nop			; (mov r8, r8)
	}
	if((++led_index) >= 4) led_index = 0;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <Scan7SEG+0xa8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <Scan7SEG+0xa8>)
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <Scan7SEG+0xa8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b03      	cmp	r3, #3
 8000c26:	dd02      	ble.n	8000c2e <Scan7SEG+0xa2>
 8000c28:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <Scan7SEG+0xa8>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000080 	.word	0x20000080
 8000c38:	20000070 	.word	0x20000070
 8000c3c:	48001400 	.word	0x48001400
 8000c40:	48000400 	.word	0x48000400

08000c44 <display7SEG>:
void display7SEG(int num){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2b09      	cmp	r3, #9
 8000c50:	d900      	bls.n	8000c54 <display7SEG+0x10>
 8000c52:	e0ff      	b.n	8000e54 <display7SEG+0x210>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	009a      	lsls	r2, r3, #2
 8000c58:	4b81      	ldr	r3, [pc, #516]	; (8000e60 <display7SEG+0x21c>)
 8000c5a:	18d3      	adds	r3, r2, r3
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	469f      	mov	pc, r3
	switch(num){
		case 0:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000c60:	4b80      	ldr	r3, [pc, #512]	; (8000e64 <display7SEG+0x220>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	2101      	movs	r1, #1
 8000c66:	0018      	movs	r0, r3
 8000c68:	f000 fe77 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000c6c:	4b7e      	ldr	r3, [pc, #504]	; (8000e68 <display7SEG+0x224>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0018      	movs	r0, r3
 8000c74:	f000 fe71 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000c78:	4b7b      	ldr	r3, [pc, #492]	; (8000e68 <display7SEG+0x224>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2140      	movs	r1, #64	; 0x40
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fe6b 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000c84:	4b78      	ldr	r3, [pc, #480]	; (8000e68 <display7SEG+0x224>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	2102      	movs	r1, #2
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f000 fe65 	bl	800195a <HAL_GPIO_WritePin>
			break;
 8000c90:	e0e1      	b.n	8000e56 <display7SEG+0x212>
		case 1:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000c92:	4b74      	ldr	r3, [pc, #464]	; (8000e64 <display7SEG+0x220>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	2101      	movs	r1, #1
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f000 fe5e 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000c9e:	4b72      	ldr	r3, [pc, #456]	; (8000e68 <display7SEG+0x224>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2180      	movs	r1, #128	; 0x80
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f000 fe58 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000caa:	4b6f      	ldr	r3, [pc, #444]	; (8000e68 <display7SEG+0x224>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f000 fe52 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000cb6:	4b6c      	ldr	r3, [pc, #432]	; (8000e68 <display7SEG+0x224>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2102      	movs	r1, #2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f000 fe4c 	bl	800195a <HAL_GPIO_WritePin>
			break;
 8000cc2:	e0c8      	b.n	8000e56 <display7SEG+0x212>
		case 2:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000cc4:	4b67      	ldr	r3, [pc, #412]	; (8000e64 <display7SEG+0x220>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2101      	movs	r1, #1
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 fe45 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000cd0:	4b65      	ldr	r3, [pc, #404]	; (8000e68 <display7SEG+0x224>)
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	2180      	movs	r1, #128	; 0x80
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fe3f 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000cdc:	4b62      	ldr	r3, [pc, #392]	; (8000e68 <display7SEG+0x224>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2140      	movs	r1, #64	; 0x40
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f000 fe39 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000ce8:	4b5f      	ldr	r3, [pc, #380]	; (8000e68 <display7SEG+0x224>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	2102      	movs	r1, #2
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 fe33 	bl	800195a <HAL_GPIO_WritePin>
			break;
 8000cf4:	e0af      	b.n	8000e56 <display7SEG+0x212>
		case 3:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <display7SEG+0x220>)
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 fe2c 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000d02:	4b59      	ldr	r3, [pc, #356]	; (8000e68 <display7SEG+0x224>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f000 fe26 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000d0e:	4b56      	ldr	r3, [pc, #344]	; (8000e68 <display7SEG+0x224>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	2140      	movs	r1, #64	; 0x40
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 fe20 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000d1a:	4b53      	ldr	r3, [pc, #332]	; (8000e68 <display7SEG+0x224>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2102      	movs	r1, #2
 8000d20:	0018      	movs	r0, r3
 8000d22:	f000 fe1a 	bl	800195a <HAL_GPIO_WritePin>
			break;
 8000d26:	e096      	b.n	8000e56 <display7SEG+0x212>
		case 4:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000d28:	4b4e      	ldr	r3, [pc, #312]	; (8000e64 <display7SEG+0x220>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 fe13 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000d34:	4b4c      	ldr	r3, [pc, #304]	; (8000e68 <display7SEG+0x224>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	2180      	movs	r1, #128	; 0x80
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 fe0d 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8000d40:	4b49      	ldr	r3, [pc, #292]	; (8000e68 <display7SEG+0x224>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	2140      	movs	r1, #64	; 0x40
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 fe07 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000d4c:	4b46      	ldr	r3, [pc, #280]	; (8000e68 <display7SEG+0x224>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2102      	movs	r1, #2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 fe01 	bl	800195a <HAL_GPIO_WritePin>
			break;
 8000d58:	e07d      	b.n	8000e56 <display7SEG+0x212>
		case 5:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000d5a:	4b42      	ldr	r3, [pc, #264]	; (8000e64 <display7SEG+0x220>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	2101      	movs	r1, #1
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fdfa 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000d66:	4b40      	ldr	r3, [pc, #256]	; (8000e68 <display7SEG+0x224>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2180      	movs	r1, #128	; 0x80
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f000 fdf4 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8000d72:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <display7SEG+0x224>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	2140      	movs	r1, #64	; 0x40
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f000 fdee 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000d7e:	4b3a      	ldr	r3, [pc, #232]	; (8000e68 <display7SEG+0x224>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	2102      	movs	r1, #2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f000 fde8 	bl	800195a <HAL_GPIO_WritePin>
			break;
 8000d8a:	e064      	b.n	8000e56 <display7SEG+0x212>
		case 6:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000d8c:	4b35      	ldr	r3, [pc, #212]	; (8000e64 <display7SEG+0x220>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2101      	movs	r1, #1
 8000d92:	0018      	movs	r0, r3
 8000d94:	f000 fde1 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000d98:	4b33      	ldr	r3, [pc, #204]	; (8000e68 <display7SEG+0x224>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2180      	movs	r1, #128	; 0x80
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 fddb 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <display7SEG+0x224>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	2140      	movs	r1, #64	; 0x40
 8000daa:	0018      	movs	r0, r3
 8000dac:	f000 fdd5 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <display7SEG+0x224>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	2102      	movs	r1, #2
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 fdcf 	bl	800195a <HAL_GPIO_WritePin>
			break;
 8000dbc:	e04b      	b.n	8000e56 <display7SEG+0x212>
		case 7:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000dbe:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <display7SEG+0x220>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 fdc8 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000dca:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <display7SEG+0x224>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2180      	movs	r1, #128	; 0x80
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 fdc2 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8000dd6:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <display7SEG+0x224>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2140      	movs	r1, #64	; 0x40
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f000 fdbc 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000de2:	4b21      	ldr	r3, [pc, #132]	; (8000e68 <display7SEG+0x224>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	2102      	movs	r1, #2
 8000de8:	0018      	movs	r0, r3
 8000dea:	f000 fdb6 	bl	800195a <HAL_GPIO_WritePin>
			break;
 8000dee:	e032      	b.n	8000e56 <display7SEG+0x212>
		case 8:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 8000df0:	4b1c      	ldr	r3, [pc, #112]	; (8000e64 <display7SEG+0x220>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	2101      	movs	r1, #1
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fdaf 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <display7SEG+0x224>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0018      	movs	r0, r3
 8000e04:	f000 fda9 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <display7SEG+0x224>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2140      	movs	r1, #64	; 0x40
 8000e0e:	0018      	movs	r0, r3
 8000e10:	f000 fda3 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <display7SEG+0x224>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	2102      	movs	r1, #2
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 fd9d 	bl	800195a <HAL_GPIO_WritePin>
			break;
 8000e20:	e019      	b.n	8000e56 <display7SEG+0x212>
		case 9:
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <display7SEG+0x220>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	2101      	movs	r1, #1
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f000 fd96 	bl	800195a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <display7SEG+0x224>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	2180      	movs	r1, #128	; 0x80
 8000e34:	0018      	movs	r0, r3
 8000e36:	f000 fd90 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <display7SEG+0x224>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2140      	movs	r1, #64	; 0x40
 8000e40:	0018      	movs	r0, r3
 8000e42:	f000 fd8a 	bl	800195a <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <display7SEG+0x224>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f000 fd84 	bl	800195a <HAL_GPIO_WritePin>
			break;
 8000e52:	e000      	b.n	8000e56 <display7SEG+0x212>
		default:
			break;
 8000e54:	46c0      	nop			; (mov r8, r8)
	}
}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	08002b10 	.word	0x08002b10
 8000e64:	48001400 	.word	0x48001400
 8000e68:	48000400 	.word	0x48000400

08000e6c <updateClockBuffer>:
void updateClockBuffer(int num1, int num2){
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	led_buffer[0] = num1 / 10;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	210a      	movs	r1, #10
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f7ff f9ce 	bl	800021c <__divsi3>
 8000e80:	0003      	movs	r3, r0
 8000e82:	001a      	movs	r2, r3
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <updateClockBuffer+0x5c>)
 8000e86:	601a      	str	r2, [r3, #0]
	led_buffer[1] = num1 % 10;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	210a      	movs	r1, #10
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff faab 	bl	80003e8 <__aeabi_idivmod>
 8000e92:	000b      	movs	r3, r1
 8000e94:	001a      	movs	r2, r3
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <updateClockBuffer+0x5c>)
 8000e98:	605a      	str	r2, [r3, #4]
	led_buffer[2] = num2 / 10;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	210a      	movs	r1, #10
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f7ff f9bc 	bl	800021c <__divsi3>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	001a      	movs	r2, r3
 8000ea8:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <updateClockBuffer+0x5c>)
 8000eaa:	609a      	str	r2, [r3, #8]
	led_buffer[3] = num2 % 10;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	210a      	movs	r1, #10
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff fa99 	bl	80003e8 <__aeabi_idivmod>
 8000eb6:	000b      	movs	r3, r1
 8000eb8:	001a      	movs	r2, r3
 8000eba:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <updateClockBuffer+0x5c>)
 8000ebc:	60da      	str	r2, [r3, #12]
}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	20000070 	.word	0x20000070

08000ecc <single_LED_off>:
void single_LED_off(){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(R0_GPIO_Port, R0_Pin, SET);
 8000ed0:	2380      	movs	r3, #128	; 0x80
 8000ed2:	0159      	lsls	r1, r3, #5
 8000ed4:	2390      	movs	r3, #144	; 0x90
 8000ed6:	05db      	lsls	r3, r3, #23
 8000ed8:	2201      	movs	r2, #1
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 fd3d 	bl	800195a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y0_GPIO_Port, Y0_Pin, SET);
 8000ee0:	2390      	movs	r3, #144	; 0x90
 8000ee2:	05db      	lsls	r3, r3, #23
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2110      	movs	r1, #16
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 fd36 	bl	800195a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G0_GPIO_Port, G0_Pin, SET);
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	0059      	lsls	r1, r3, #1
 8000ef2:	2390      	movs	r3, #144	; 0x90
 8000ef4:	05db      	lsls	r3, r3, #23
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f000 fd2e 	bl	800195a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000efe:	2390      	movs	r3, #144	; 0x90
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	2201      	movs	r2, #1
 8000f04:	2104      	movs	r1, #4
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 fd27 	bl	800195a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <single_LED_off+0x60>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2120      	movs	r1, #32
 8000f12:	0018      	movs	r0, r3
 8000f14:	f000 fd21 	bl	800195a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <single_LED_off+0x60>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2110      	movs	r1, #16
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 fd1b 	bl	800195a <HAL_GPIO_WritePin>
}
 8000f24:	46c0      	nop			; (mov r8, r8)
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	48000400 	.word	0x48000400

08000f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f34:	f000 fa4a 	bl	80013cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f38:	f000 f812 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f3c:	f000 f8a4 	bl	8001088 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f40:	f000 f84e 	bl	8000fe0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <main+0x2c>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 f9ec 	bl	8002324 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_auto_run();
 8000f4c:	f7ff faac 	bl	80004a8 <fsm_auto_run>
	  fsm_manual();
 8000f50:	f7ff fc3e 	bl	80007d0 <fsm_manual>
	  fsm_setting();
 8000f54:	f7ff fd06 	bl	8000964 <fsm_setting>
	  fsm_auto_run();
 8000f58:	e7f8      	b.n	8000f4c <main+0x1c>
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	20000094 	.word	0x20000094

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b091      	sub	sp, #68	; 0x44
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	2410      	movs	r4, #16
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	2330      	movs	r3, #48	; 0x30
 8000f6e:	001a      	movs	r2, r3
 8000f70:	2100      	movs	r1, #0
 8000f72:	f001 fdaf 	bl	8002ad4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f76:	003b      	movs	r3, r7
 8000f78:	0018      	movs	r0, r3
 8000f7a:	2310      	movs	r3, #16
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f001 fda8 	bl	8002ad4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f84:	0021      	movs	r1, r4
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2202      	movs	r2, #2
 8000f8a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2201      	movs	r2, #1
 8000f90:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2210      	movs	r2, #16
 8000f96:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f000 fd31 	bl	8001a08 <HAL_RCC_OscConfig>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000faa:	f000 f913 	bl	80011d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fae:	003b      	movs	r3, r7
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000fb4:	003b      	movs	r3, r7
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fba:	003b      	movs	r3, r7
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc0:	003b      	movs	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2100      	movs	r1, #0
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f001 f836 	bl	800203c <HAL_RCC_ClockConfig>
 8000fd0:	1e03      	subs	r3, r0, #0
 8000fd2:	d001      	beq.n	8000fd8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000fd4:	f000 f8fe 	bl	80011d4 <Error_Handler>
  }
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b011      	add	sp, #68	; 0x44
 8000fde:	bd90      	pop	{r4, r7, pc}

08000fe0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	0018      	movs	r0, r3
 8000fec:	2310      	movs	r3, #16
 8000fee:	001a      	movs	r2, r3
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	f001 fd6f 	bl	8002ad4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff6:	003b      	movs	r3, r7
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	001a      	movs	r2, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	f001 fd68 	bl	8002ad4 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001004:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_TIM2_Init+0xa0>)
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	05d2      	lsls	r2, r2, #23
 800100a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM2_Init+0xa0>)
 800100e:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <MX_TIM2_Init+0xa4>)
 8001010:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <MX_TIM2_Init+0xa0>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM2_Init+0xa0>)
 800101a:	2209      	movs	r2, #9
 800101c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <MX_TIM2_Init+0xa0>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001024:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_TIM2_Init+0xa0>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_TIM2_Init+0xa0>)
 800102c:	0018      	movs	r0, r3
 800102e:	f001 f929 	bl	8002284 <HAL_TIM_Base_Init>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001036:	f000 f8cd 	bl	80011d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103a:	2108      	movs	r1, #8
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	0152      	lsls	r2, r2, #5
 8001042:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001044:	187a      	adds	r2, r7, r1
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_TIM2_Init+0xa0>)
 8001048:	0011      	movs	r1, r2
 800104a:	0018      	movs	r0, r3
 800104c:	f001 faa4 	bl	8002598 <HAL_TIM_ConfigClockSource>
 8001050:	1e03      	subs	r3, r0, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001054:	f000 f8be 	bl	80011d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	003b      	movs	r3, r7
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	003b      	movs	r3, r7
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001064:	003a      	movs	r2, r7
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_TIM2_Init+0xa0>)
 8001068:	0011      	movs	r1, r2
 800106a:	0018      	movs	r0, r3
 800106c:	f001 fca6 	bl	80029bc <HAL_TIMEx_MasterConfigSynchronization>
 8001070:	1e03      	subs	r3, r0, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001074:	f000 f8ae 	bl	80011d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	b006      	add	sp, #24
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000094 	.word	0x20000094
 8001084:	00001f3f 	.word	0x00001f3f

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b089      	sub	sp, #36	; 0x24
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	240c      	movs	r4, #12
 8001090:	193b      	adds	r3, r7, r4
 8001092:	0018      	movs	r0, r3
 8001094:	2314      	movs	r3, #20
 8001096:	001a      	movs	r2, r3
 8001098:	2100      	movs	r1, #0
 800109a:	f001 fd1b 	bl	8002ad4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800109e:	4b49      	ldr	r3, [pc, #292]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	4b48      	ldr	r3, [pc, #288]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	03c9      	lsls	r1, r1, #15
 80010a8:	430a      	orrs	r2, r1
 80010aa:	615a      	str	r2, [r3, #20]
 80010ac:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010ae:	695a      	ldr	r2, [r3, #20]
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	03db      	lsls	r3, r3, #15
 80010b4:	4013      	ands	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010c0:	2180      	movs	r1, #128	; 0x80
 80010c2:	0289      	lsls	r1, r1, #10
 80010c4:	430a      	orrs	r2, r1
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	029b      	lsls	r3, r3, #10
 80010d0:	4013      	ands	r3, r2
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010d8:	695a      	ldr	r2, [r3, #20]
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010dc:	2180      	movs	r1, #128	; 0x80
 80010de:	02c9      	lsls	r1, r1, #11
 80010e0:	430a      	orrs	r2, r1
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	02db      	lsls	r3, r3, #11
 80010ec:	4013      	ands	r3, r2
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, A_Pin|EN1_Pin, GPIO_PIN_RESET);
 80010f2:	4b35      	ldr	r3, [pc, #212]	; (80011c8 <MX_GPIO_Init+0x140>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	2103      	movs	r1, #3
 80010f8:	0018      	movs	r0, r3
 80010fa:	f000 fc2e 	bl	800195a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|R1_Pin|Y0_Pin|G0_Pin
 80010fe:	4933      	ldr	r1, [pc, #204]	; (80011cc <MX_GPIO_Init+0x144>)
 8001100:	2390      	movs	r3, #144	; 0x90
 8001102:	05db      	lsls	r3, r3, #23
 8001104:	2200      	movs	r2, #0
 8001106:	0018      	movs	r0, r3
 8001108:	f000 fc27 	bl	800195a <HAL_GPIO_WritePin>
                          |EN3_Pin|R0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_Pin|EN2_Pin|G1_Pin|Y1_Pin
 800110c:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <MX_GPIO_Init+0x148>)
 800110e:	2200      	movs	r2, #0
 8001110:	21fa      	movs	r1, #250	; 0xfa
 8001112:	0018      	movs	r0, r3
 8001114:	f000 fc21 	bl	800195a <HAL_GPIO_WritePin>
                          |C_Pin|B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A_Pin EN1_Pin */
  GPIO_InitStruct.Pin = A_Pin|EN1_Pin;
 8001118:	193b      	adds	r3, r7, r4
 800111a:	2203      	movs	r2, #3
 800111c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	2201      	movs	r2, #1
 8001122:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	193b      	adds	r3, r7, r4
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	2200      	movs	r2, #0
 800112e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001130:	193b      	adds	r3, r7, r4
 8001132:	4a25      	ldr	r2, [pc, #148]	; (80011c8 <MX_GPIO_Init+0x140>)
 8001134:	0019      	movs	r1, r3
 8001136:	0010      	movs	r0, r2
 8001138:	f000 fa8a 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin R1_Pin Y0_Pin G0_Pin
                           EN3_Pin R0_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|R1_Pin|Y0_Pin|G0_Pin
 800113c:	193b      	adds	r3, r7, r4
 800113e:	4a23      	ldr	r2, [pc, #140]	; (80011cc <MX_GPIO_Init+0x144>)
 8001140:	601a      	str	r2, [r3, #0]
                          |EN3_Pin|R0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	2201      	movs	r2, #1
 8001146:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	193b      	adds	r3, r7, r4
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	193a      	adds	r2, r7, r4
 8001156:	2390      	movs	r3, #144	; 0x90
 8001158:	05db      	lsls	r3, r3, #23
 800115a:	0011      	movs	r1, r2
 800115c:	0018      	movs	r0, r3
 800115e:	f000 fa77 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
 8001162:	193b      	adds	r3, r7, r4
 8001164:	228a      	movs	r2, #138	; 0x8a
 8001166:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001168:	193b      	adds	r3, r7, r4
 800116a:	2200      	movs	r2, #0
 800116c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	193b      	adds	r3, r7, r4
 8001170:	2201      	movs	r2, #1
 8001172:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	193a      	adds	r2, r7, r4
 8001176:	2390      	movs	r3, #144	; 0x90
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	0011      	movs	r1, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f000 fa67 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_Pin EN2_Pin G1_Pin Y1_Pin
                           C_Pin B_Pin */
  GPIO_InitStruct.Pin = D_Pin|EN2_Pin|G1_Pin|Y1_Pin
 8001182:	0021      	movs	r1, r4
 8001184:	187b      	adds	r3, r7, r1
 8001186:	22fa      	movs	r2, #250	; 0xfa
 8001188:	601a      	str	r2, [r3, #0]
                          |C_Pin|B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	187b      	adds	r3, r7, r1
 800118c:	2201      	movs	r2, #1
 800118e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	187b      	adds	r3, r7, r1
 800119e:	4a0c      	ldr	r2, [pc, #48]	; (80011d0 <MX_GPIO_Init+0x148>)
 80011a0:	0019      	movs	r1, r3
 80011a2:	0010      	movs	r0, r2
 80011a4:	f000 fa54 	bl	8001650 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB6);
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	025b      	lsls	r3, r3, #9
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 fc0d 	bl	80019cc <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB7);
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	029b      	lsls	r3, r3, #10
 80011b6:	0018      	movs	r0, r3
 80011b8:	f000 fc08 	bl	80019cc <HAL_I2CEx_EnableFastModePlus>

}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	b009      	add	sp, #36	; 0x24
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48001400 	.word	0x48001400
 80011cc:	00001915 	.word	0x00001915
 80011d0:	48000400 	.word	0x48000400

080011d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d8:	b672      	cpsid	i
}
 80011da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011dc:	e7fe      	b.n	80011dc <Error_Handler+0x8>
	...

080011e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_MspInit+0x44>)
 80011e8:	699a      	ldr	r2, [r3, #24]
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_MspInit+0x44>)
 80011ec:	2101      	movs	r1, #1
 80011ee:	430a      	orrs	r2, r1
 80011f0:	619a      	str	r2, [r3, #24]
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_MspInit+0x44>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	2201      	movs	r2, #1
 80011f8:	4013      	ands	r3, r2
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_MspInit+0x44>)
 8001200:	69da      	ldr	r2, [r3, #28]
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_MspInit+0x44>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0549      	lsls	r1, r1, #21
 8001208:	430a      	orrs	r2, r1
 800120a:	61da      	str	r2, [r3, #28]
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_MspInit+0x44>)
 800120e:	69da      	ldr	r2, [r3, #28]
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	055b      	lsls	r3, r3, #21
 8001214:	4013      	ands	r3, r2
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	b002      	add	sp, #8
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	40021000 	.word	0x40021000

08001228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	05db      	lsls	r3, r3, #23
 8001238:	429a      	cmp	r2, r3
 800123a:	d113      	bne.n	8001264 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 800123e:	69da      	ldr	r2, [r3, #28]
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 8001242:	2101      	movs	r1, #1
 8001244:	430a      	orrs	r2, r1
 8001246:	61da      	str	r2, [r3, #28]
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	2201      	movs	r2, #1
 800124e:	4013      	ands	r3, r2
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	200f      	movs	r0, #15
 800125a:	f000 f9c7 	bl	80015ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800125e:	200f      	movs	r0, #15
 8001260:	f000 f9d9 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b004      	add	sp, #16
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40021000 	.word	0x40021000

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <NMI_Handler+0x4>

08001276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <HardFault_Handler+0x4>

0800127c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001280:	46c0      	nop			; (mov r8, r8)
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f8e2 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a4:	4b03      	ldr	r3, [pc, #12]	; (80012b4 <TIM2_IRQHandler+0x14>)
 80012a6:	0018      	movs	r0, r3
 80012a8:	f001 f888 	bl	80023bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	20000094 	.word	0x20000094

080012b8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <setTimer>:
#include "timer.h"

int counter[4] = {0, 0, 0, 0};
int timer_flag[4] = {0, 0, 0, 1};// FLAG[3] = 1 TO CHECK BUTTON PRESS( GO TO FUNCTION getKeyinput())

void setTimer(int timer, int duration){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
	counter[timer] = duration / 10;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	210a      	movs	r1, #10
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7fe ffa2 	bl	800021c <__divsi3>
 80012d8:	0003      	movs	r3, r0
 80012da:	0019      	movs	r1, r3
 80012dc:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <setTimer+0x34>)
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	0092      	lsls	r2, r2, #2
 80012e2:	50d1      	str	r1, [r2, r3]
	timer_flag[timer] = 0;
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <setTimer+0x38>)
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	0092      	lsls	r2, r2, #2
 80012ea:	2100      	movs	r1, #0
 80012ec:	50d1      	str	r1, [r2, r3]
}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	20000084 	.word	0x20000084
 80012fc:	20000020 	.word	0x20000020

08001300 <timer_run>:
void timer_run(){
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++){ // 4 timer
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e01c      	b.n	8001346 <timer_run+0x46>
		if(counter[i] > 0){
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <timer_run+0x58>)
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	0092      	lsls	r2, r2, #2
 8001312:	58d3      	ldr	r3, [r2, r3]
 8001314:	2b00      	cmp	r3, #0
 8001316:	dd13      	ble.n	8001340 <timer_run+0x40>
			counter[i]--;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <timer_run+0x58>)
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	58d3      	ldr	r3, [r2, r3]
 8001320:	1e59      	subs	r1, r3, #1
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <timer_run+0x58>)
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	50d1      	str	r1, [r2, r3]
			if(counter[i] <= 0)
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <timer_run+0x58>)
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	0092      	lsls	r2, r2, #2
 8001330:	58d3      	ldr	r3, [r2, r3]
 8001332:	2b00      	cmp	r3, #0
 8001334:	dc04      	bgt.n	8001340 <timer_run+0x40>
				timer_flag[i] = 1;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <timer_run+0x5c>)
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	2101      	movs	r1, #1
 800133e:	50d1      	str	r1, [r2, r3]
	for(int i = 0; i < 4; i++){ // 4 timer
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3301      	adds	r3, #1
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b03      	cmp	r3, #3
 800134a:	dddf      	ble.n	800130c <timer_run+0xc>
		}
	}
}
 800134c:	46c0      	nop			; (mov r8, r8)
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46bd      	mov	sp, r7
 8001352:	b002      	add	sp, #8
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	20000084 	.word	0x20000084
 800135c:	20000020 	.word	0x20000020

08001360 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	getKeyinput();
 8001368:	f7ff f844 	bl	80003f4 <getKeyinput>
	timer_run();
 800136c:	f7ff ffc8 	bl	8001300 <timer_run>
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001378:	480d      	ldr	r0, [pc, #52]	; (80013b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800137a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800137c:	f7ff ff9c 	bl	80012b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001380:	480c      	ldr	r0, [pc, #48]	; (80013b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001382:	490d      	ldr	r1, [pc, #52]	; (80013b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <LoopForever+0xe>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001388:	e002      	b.n	8001390 <LoopCopyDataInit>

0800138a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800138c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138e:	3304      	adds	r3, #4

08001390 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001390:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001392:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001394:	d3f9      	bcc.n	800138a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001396:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001398:	4c0a      	ldr	r4, [pc, #40]	; (80013c4 <LoopForever+0x16>)
  movs r3, #0
 800139a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800139c:	e001      	b.n	80013a2 <LoopFillZerobss>

0800139e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a0:	3204      	adds	r2, #4

080013a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a4:	d3fb      	bcc.n	800139e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013a6:	f001 fb71 	bl	8002a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013aa:	f7ff fdc1 	bl	8000f30 <main>

080013ae <LoopForever>:

LoopForever:
    b LoopForever
 80013ae:	e7fe      	b.n	80013ae <LoopForever>
  ldr   r0, =_estack
 80013b0:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b8:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80013bc:	08002b70 	.word	0x08002b70
  ldr r2, =_sbss
 80013c0:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80013c4:	200000e0 	.word	0x200000e0

080013c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c8:	e7fe      	b.n	80013c8 <ADC1_IRQHandler>
	...

080013cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <HAL_Init+0x24>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_Init+0x24>)
 80013d6:	2110      	movs	r1, #16
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80013dc:	2000      	movs	r0, #0
 80013de:	f000 f809 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e2:	f7ff fefd 	bl	80011e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			; (mov r8, r8)
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b14      	ldr	r3, [pc, #80]	; (8001450 <HAL_InitTick+0x5c>)
 80013fe:	681c      	ldr	r4, [r3, #0]
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_InitTick+0x60>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	0019      	movs	r1, r3
 8001406:	23fa      	movs	r3, #250	; 0xfa
 8001408:	0098      	lsls	r0, r3, #2
 800140a:	f7fe fe7d 	bl	8000108 <__udivsi3>
 800140e:	0003      	movs	r3, r0
 8001410:	0019      	movs	r1, r3
 8001412:	0020      	movs	r0, r4
 8001414:	f7fe fe78 	bl	8000108 <__udivsi3>
 8001418:	0003      	movs	r3, r0
 800141a:	0018      	movs	r0, r3
 800141c:	f000 f90b 	bl	8001636 <HAL_SYSTICK_Config>
 8001420:	1e03      	subs	r3, r0, #0
 8001422:	d001      	beq.n	8001428 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e00f      	b.n	8001448 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d80b      	bhi.n	8001446 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	2301      	movs	r3, #1
 8001432:	425b      	negs	r3, r3
 8001434:	2200      	movs	r2, #0
 8001436:	0018      	movs	r0, r3
 8001438:	f000 f8d8 	bl	80015ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_InitTick+0x64>)
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	b003      	add	sp, #12
 800144e:	bd90      	pop	{r4, r7, pc}
 8001450:	2000001c 	.word	0x2000001c
 8001454:	20000034 	.word	0x20000034
 8001458:	20000030 	.word	0x20000030

0800145c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <HAL_IncTick+0x1c>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	001a      	movs	r2, r3
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_IncTick+0x20>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	18d2      	adds	r2, r2, r3
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_IncTick+0x20>)
 800146e:	601a      	str	r2, [r3, #0]
}
 8001470:	46c0      	nop			; (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	20000034 	.word	0x20000034
 800147c:	200000dc 	.word	0x200000dc

08001480 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b02      	ldr	r3, [pc, #8]	; (8001490 <HAL_GetTick+0x10>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	0018      	movs	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	200000dc 	.word	0x200000dc

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	0002      	movs	r2, r0
 800149c:	1dfb      	adds	r3, r7, #7
 800149e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014a0:	1dfb      	adds	r3, r7, #7
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b7f      	cmp	r3, #127	; 0x7f
 80014a6:	d809      	bhi.n	80014bc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a8:	1dfb      	adds	r3, r7, #7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	001a      	movs	r2, r3
 80014ae:	231f      	movs	r3, #31
 80014b0:	401a      	ands	r2, r3
 80014b2:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_EnableIRQ+0x30>)
 80014b4:	2101      	movs	r1, #1
 80014b6:	4091      	lsls	r1, r2
 80014b8:	000a      	movs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
  }
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b002      	add	sp, #8
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	e000e100 	.word	0xe000e100

080014c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	0002      	movs	r2, r0
 80014d0:	6039      	str	r1, [r7, #0]
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b7f      	cmp	r3, #127	; 0x7f
 80014dc:	d828      	bhi.n	8001530 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014de:	4a2f      	ldr	r2, [pc, #188]	; (800159c <__NVIC_SetPriority+0xd4>)
 80014e0:	1dfb      	adds	r3, r7, #7
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	b25b      	sxtb	r3, r3
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	33c0      	adds	r3, #192	; 0xc0
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	589b      	ldr	r3, [r3, r2]
 80014ee:	1dfa      	adds	r2, r7, #7
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	0011      	movs	r1, r2
 80014f4:	2203      	movs	r2, #3
 80014f6:	400a      	ands	r2, r1
 80014f8:	00d2      	lsls	r2, r2, #3
 80014fa:	21ff      	movs	r1, #255	; 0xff
 80014fc:	4091      	lsls	r1, r2
 80014fe:	000a      	movs	r2, r1
 8001500:	43d2      	mvns	r2, r2
 8001502:	401a      	ands	r2, r3
 8001504:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	019b      	lsls	r3, r3, #6
 800150a:	22ff      	movs	r2, #255	; 0xff
 800150c:	401a      	ands	r2, r3
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	0018      	movs	r0, r3
 8001514:	2303      	movs	r3, #3
 8001516:	4003      	ands	r3, r0
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800151c:	481f      	ldr	r0, [pc, #124]	; (800159c <__NVIC_SetPriority+0xd4>)
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	b25b      	sxtb	r3, r3
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	430a      	orrs	r2, r1
 8001528:	33c0      	adds	r3, #192	; 0xc0
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800152e:	e031      	b.n	8001594 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001530:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <__NVIC_SetPriority+0xd8>)
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	0019      	movs	r1, r3
 8001538:	230f      	movs	r3, #15
 800153a:	400b      	ands	r3, r1
 800153c:	3b08      	subs	r3, #8
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3306      	adds	r3, #6
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	18d3      	adds	r3, r2, r3
 8001546:	3304      	adds	r3, #4
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	1dfa      	adds	r2, r7, #7
 800154c:	7812      	ldrb	r2, [r2, #0]
 800154e:	0011      	movs	r1, r2
 8001550:	2203      	movs	r2, #3
 8001552:	400a      	ands	r2, r1
 8001554:	00d2      	lsls	r2, r2, #3
 8001556:	21ff      	movs	r1, #255	; 0xff
 8001558:	4091      	lsls	r1, r2
 800155a:	000a      	movs	r2, r1
 800155c:	43d2      	mvns	r2, r2
 800155e:	401a      	ands	r2, r3
 8001560:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	019b      	lsls	r3, r3, #6
 8001566:	22ff      	movs	r2, #255	; 0xff
 8001568:	401a      	ands	r2, r3
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	0018      	movs	r0, r3
 8001570:	2303      	movs	r3, #3
 8001572:	4003      	ands	r3, r0
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <__NVIC_SetPriority+0xd8>)
 800157a:	1dfb      	adds	r3, r7, #7
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	001c      	movs	r4, r3
 8001580:	230f      	movs	r3, #15
 8001582:	4023      	ands	r3, r4
 8001584:	3b08      	subs	r3, #8
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	430a      	orrs	r2, r1
 800158a:	3306      	adds	r3, #6
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	18c3      	adds	r3, r0, r3
 8001590:	3304      	adds	r3, #4
 8001592:	601a      	str	r2, [r3, #0]
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	b003      	add	sp, #12
 800159a:	bd90      	pop	{r4, r7, pc}
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	1e5a      	subs	r2, r3, #1
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	045b      	lsls	r3, r3, #17
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d301      	bcc.n	80015bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015b8:	2301      	movs	r3, #1
 80015ba:	e010      	b.n	80015de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015bc:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <SysTick_Config+0x44>)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	3a01      	subs	r2, #1
 80015c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015c4:	2301      	movs	r3, #1
 80015c6:	425b      	negs	r3, r3
 80015c8:	2103      	movs	r1, #3
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7ff ff7c 	bl	80014c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <SysTick_Config+0x44>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <SysTick_Config+0x44>)
 80015d8:	2207      	movs	r2, #7
 80015da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015dc:	2300      	movs	r3, #0
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b002      	add	sp, #8
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	e000e010 	.word	0xe000e010

080015ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	210f      	movs	r1, #15
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	1c02      	adds	r2, r0, #0
 80015fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	187b      	adds	r3, r7, r1
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b25b      	sxtb	r3, r3
 8001606:	0011      	movs	r1, r2
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff ff5d 	bl	80014c8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b004      	add	sp, #16
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	0002      	movs	r2, r0
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001622:	1dfb      	adds	r3, r7, #7
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	b25b      	sxtb	r3, r3
 8001628:	0018      	movs	r0, r3
 800162a:	f7ff ff33 	bl	8001494 <__NVIC_EnableIRQ>
}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b082      	sub	sp, #8
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff ffaf 	bl	80015a4 <SysTick_Config>
 8001646:	0003      	movs	r3, r0
}
 8001648:	0018      	movs	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	b002      	add	sp, #8
 800164e:	bd80      	pop	{r7, pc}

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165e:	e149      	b.n	80018f4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2101      	movs	r1, #1
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4091      	lsls	r1, r2
 800166a:	000a      	movs	r2, r1
 800166c:	4013      	ands	r3, r2
 800166e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d100      	bne.n	8001678 <HAL_GPIO_Init+0x28>
 8001676:	e13a      	b.n	80018ee <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2203      	movs	r2, #3
 800167e:	4013      	ands	r3, r2
 8001680:	2b01      	cmp	r3, #1
 8001682:	d005      	beq.n	8001690 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2203      	movs	r2, #3
 800168a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800168c:	2b02      	cmp	r3, #2
 800168e:	d130      	bne.n	80016f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	2203      	movs	r2, #3
 800169c:	409a      	lsls	r2, r3
 800169e:	0013      	movs	r3, r2
 80016a0:	43da      	mvns	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	409a      	lsls	r2, r3
 80016b2:	0013      	movs	r3, r2
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c6:	2201      	movs	r2, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	43da      	mvns	r2, r3
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	091b      	lsrs	r3, r3, #4
 80016dc:	2201      	movs	r2, #1
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
 80016e4:	0013      	movs	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2203      	movs	r2, #3
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d017      	beq.n	800172e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	2203      	movs	r2, #3
 800170a:	409a      	lsls	r2, r3
 800170c:	0013      	movs	r3, r2
 800170e:	43da      	mvns	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2203      	movs	r2, #3
 8001734:	4013      	ands	r3, r2
 8001736:	2b02      	cmp	r3, #2
 8001738:	d123      	bne.n	8001782 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	0092      	lsls	r2, r2, #2
 8001744:	58d3      	ldr	r3, [r2, r3]
 8001746:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2207      	movs	r2, #7
 800174c:	4013      	ands	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	220f      	movs	r2, #15
 8001752:	409a      	lsls	r2, r3
 8001754:	0013      	movs	r3, r2
 8001756:	43da      	mvns	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	691a      	ldr	r2, [r3, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2107      	movs	r1, #7
 8001766:	400b      	ands	r3, r1
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	409a      	lsls	r2, r3
 800176c:	0013      	movs	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	0092      	lsls	r2, r2, #2
 800177e:	6939      	ldr	r1, [r7, #16]
 8001780:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	409a      	lsls	r2, r3
 8001790:	0013      	movs	r3, r2
 8001792:	43da      	mvns	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2203      	movs	r2, #3
 80017a0:	401a      	ands	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	409a      	lsls	r2, r3
 80017a8:	0013      	movs	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	23c0      	movs	r3, #192	; 0xc0
 80017bc:	029b      	lsls	r3, r3, #10
 80017be:	4013      	ands	r3, r2
 80017c0:	d100      	bne.n	80017c4 <HAL_GPIO_Init+0x174>
 80017c2:	e094      	b.n	80018ee <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c4:	4b51      	ldr	r3, [pc, #324]	; (800190c <HAL_GPIO_Init+0x2bc>)
 80017c6:	699a      	ldr	r2, [r3, #24]
 80017c8:	4b50      	ldr	r3, [pc, #320]	; (800190c <HAL_GPIO_Init+0x2bc>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	430a      	orrs	r2, r1
 80017ce:	619a      	str	r2, [r3, #24]
 80017d0:	4b4e      	ldr	r3, [pc, #312]	; (800190c <HAL_GPIO_Init+0x2bc>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017dc:	4a4c      	ldr	r2, [pc, #304]	; (8001910 <HAL_GPIO_Init+0x2c0>)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	089b      	lsrs	r3, r3, #2
 80017e2:	3302      	adds	r3, #2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	589b      	ldr	r3, [r3, r2]
 80017e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	2203      	movs	r2, #3
 80017ee:	4013      	ands	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	409a      	lsls	r2, r3
 80017f6:	0013      	movs	r3, r2
 80017f8:	43da      	mvns	r2, r3
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	2390      	movs	r3, #144	; 0x90
 8001804:	05db      	lsls	r3, r3, #23
 8001806:	429a      	cmp	r2, r3
 8001808:	d00d      	beq.n	8001826 <HAL_GPIO_Init+0x1d6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a41      	ldr	r2, [pc, #260]	; (8001914 <HAL_GPIO_Init+0x2c4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d007      	beq.n	8001822 <HAL_GPIO_Init+0x1d2>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a40      	ldr	r2, [pc, #256]	; (8001918 <HAL_GPIO_Init+0x2c8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_GPIO_Init+0x1ce>
 800181a:	2302      	movs	r3, #2
 800181c:	e004      	b.n	8001828 <HAL_GPIO_Init+0x1d8>
 800181e:	2305      	movs	r3, #5
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x1d8>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x1d8>
 8001826:	2300      	movs	r3, #0
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	2103      	movs	r1, #3
 800182c:	400a      	ands	r2, r1
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	4093      	lsls	r3, r2
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001838:	4935      	ldr	r1, [pc, #212]	; (8001910 <HAL_GPIO_Init+0x2c0>)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001846:	4b35      	ldr	r3, [pc, #212]	; (800191c <HAL_GPIO_Init+0x2cc>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43da      	mvns	r2, r3
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	035b      	lsls	r3, r3, #13
 800185e:	4013      	ands	r3, r2
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_GPIO_Init+0x2cc>)
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <HAL_GPIO_Init+0x2cc>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43da      	mvns	r2, r3
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	039b      	lsls	r3, r3, #14
 8001888:	4013      	ands	r3, r2
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001894:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_GPIO_Init+0x2cc>)
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_GPIO_Init+0x2cc>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43da      	mvns	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	2380      	movs	r3, #128	; 0x80
 80018b0:	029b      	lsls	r3, r3, #10
 80018b2:	4013      	ands	r3, r2
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_GPIO_Init+0x2cc>)
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_GPIO_Init+0x2cc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43da      	mvns	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	025b      	lsls	r3, r3, #9
 80018dc:	4013      	ands	r3, r2
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_GPIO_Init+0x2cc>)
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3301      	adds	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	40da      	lsrs	r2, r3
 80018fc:	1e13      	subs	r3, r2, #0
 80018fe:	d000      	beq.n	8001902 <HAL_GPIO_Init+0x2b2>
 8001900:	e6ae      	b.n	8001660 <HAL_GPIO_Init+0x10>
  } 
}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46c0      	nop			; (mov r8, r8)
 8001906:	46bd      	mov	sp, r7
 8001908:	b006      	add	sp, #24
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	40010000 	.word	0x40010000
 8001914:	48000400 	.word	0x48000400
 8001918:	48000800 	.word	0x48000800
 800191c:	40010400 	.word	0x40010400

08001920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	000a      	movs	r2, r1
 800192a:	1cbb      	adds	r3, r7, #2
 800192c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	1cba      	adds	r2, r7, #2
 8001934:	8812      	ldrh	r2, [r2, #0]
 8001936:	4013      	ands	r3, r2
 8001938:	d004      	beq.n	8001944 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800193a:	230f      	movs	r3, #15
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
 8001942:	e003      	b.n	800194c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001944:	230f      	movs	r3, #15
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800194c:	230f      	movs	r3, #15
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	781b      	ldrb	r3, [r3, #0]
  }
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b004      	add	sp, #16
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b082      	sub	sp, #8
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	0008      	movs	r0, r1
 8001964:	0011      	movs	r1, r2
 8001966:	1cbb      	adds	r3, r7, #2
 8001968:	1c02      	adds	r2, r0, #0
 800196a:	801a      	strh	r2, [r3, #0]
 800196c:	1c7b      	adds	r3, r7, #1
 800196e:	1c0a      	adds	r2, r1, #0
 8001970:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001972:	1c7b      	adds	r3, r7, #1
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800197a:	1cbb      	adds	r3, r7, #2
 800197c:	881a      	ldrh	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001982:	e003      	b.n	800198c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001984:	1cbb      	adds	r3, r7, #2
 8001986:	881a      	ldrh	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800198c:	46c0      	nop			; (mov r8, r8)
 800198e:	46bd      	mov	sp, r7
 8001990:	b002      	add	sp, #8
 8001992:	bd80      	pop	{r7, pc}

08001994 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	000a      	movs	r2, r1
 800199e:	1cbb      	adds	r3, r7, #2
 80019a0:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a8:	1cbb      	adds	r3, r7, #2
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	4013      	ands	r3, r2
 80019b0:	041a      	lsls	r2, r3, #16
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	1cb9      	adds	r1, r7, #2
 80019b8:	8809      	ldrh	r1, [r1, #0]
 80019ba:	400b      	ands	r3, r1
 80019bc:	431a      	orrs	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	619a      	str	r2, [r3, #24]
}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	46bd      	mov	sp, r7
 80019c6:	b004      	add	sp, #16
 80019c8:	bd80      	pop	{r7, pc}
	...

080019cc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d4:	4b0a      	ldr	r3, [pc, #40]	; (8001a00 <HAL_I2CEx_EnableFastModePlus+0x34>)
 80019d6:	699a      	ldr	r2, [r3, #24]
 80019d8:	4b09      	ldr	r3, [pc, #36]	; (8001a00 <HAL_I2CEx_EnableFastModePlus+0x34>)
 80019da:	2101      	movs	r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	619a      	str	r2, [r3, #24]
 80019e0:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <HAL_I2CEx_EnableFastModePlus+0x34>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80019ee:	6819      	ldr	r1, [r3, #0]
 80019f0:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <HAL_I2CEx_EnableFastModePlus+0x38>)
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b004      	add	sp, #16
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40010000 	.word	0x40010000

08001a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e301      	b.n	800201e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4013      	ands	r3, r2
 8001a22:	d100      	bne.n	8001a26 <HAL_RCC_OscConfig+0x1e>
 8001a24:	e08d      	b.n	8001b42 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a26:	4bc3      	ldr	r3, [pc, #780]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d00e      	beq.n	8001a50 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a32:	4bc0      	ldr	r3, [pc, #768]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	220c      	movs	r2, #12
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d116      	bne.n	8001a6c <HAL_RCC_OscConfig+0x64>
 8001a3e:	4bbd      	ldr	r3, [pc, #756]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	025b      	lsls	r3, r3, #9
 8001a46:	401a      	ands	r2, r3
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	025b      	lsls	r3, r3, #9
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d10d      	bne.n	8001a6c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	4bb8      	ldr	r3, [pc, #736]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	029b      	lsls	r3, r3, #10
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d100      	bne.n	8001a5e <HAL_RCC_OscConfig+0x56>
 8001a5c:	e070      	b.n	8001b40 <HAL_RCC_OscConfig+0x138>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d000      	beq.n	8001a68 <HAL_RCC_OscConfig+0x60>
 8001a66:	e06b      	b.n	8001b40 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e2d8      	b.n	800201e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_OscConfig+0x7c>
 8001a74:	4baf      	ldr	r3, [pc, #700]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4bae      	ldr	r3, [pc, #696]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	0249      	lsls	r1, r1, #9
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	e02f      	b.n	8001ae4 <HAL_RCC_OscConfig+0xdc>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x9e>
 8001a8c:	4ba9      	ldr	r3, [pc, #676]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4ba8      	ldr	r3, [pc, #672]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	49a9      	ldr	r1, [pc, #676]	; (8001d38 <HAL_RCC_OscConfig+0x330>)
 8001a94:	400a      	ands	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	4ba6      	ldr	r3, [pc, #664]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4ba5      	ldr	r3, [pc, #660]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	49a7      	ldr	r1, [pc, #668]	; (8001d3c <HAL_RCC_OscConfig+0x334>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e01e      	b.n	8001ae4 <HAL_RCC_OscConfig+0xdc>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b05      	cmp	r3, #5
 8001aac:	d10e      	bne.n	8001acc <HAL_RCC_OscConfig+0xc4>
 8001aae:	4ba1      	ldr	r3, [pc, #644]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4ba0      	ldr	r3, [pc, #640]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001ab4:	2180      	movs	r1, #128	; 0x80
 8001ab6:	02c9      	lsls	r1, r1, #11
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	4b9d      	ldr	r3, [pc, #628]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b9c      	ldr	r3, [pc, #624]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0249      	lsls	r1, r1, #9
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCC_OscConfig+0xdc>
 8001acc:	4b99      	ldr	r3, [pc, #612]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b98      	ldr	r3, [pc, #608]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	4999      	ldr	r1, [pc, #612]	; (8001d38 <HAL_RCC_OscConfig+0x330>)
 8001ad4:	400a      	ands	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	4b96      	ldr	r3, [pc, #600]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b95      	ldr	r3, [pc, #596]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	4997      	ldr	r1, [pc, #604]	; (8001d3c <HAL_RCC_OscConfig+0x334>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d014      	beq.n	8001b16 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff fcc8 	bl	8001480 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001af6:	f7ff fcc3 	bl	8001480 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b64      	cmp	r3, #100	; 0x64
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e28a      	b.n	800201e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b08:	4b8a      	ldr	r3, [pc, #552]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	2380      	movs	r3, #128	; 0x80
 8001b0e:	029b      	lsls	r3, r3, #10
 8001b10:	4013      	ands	r3, r2
 8001b12:	d0f0      	beq.n	8001af6 <HAL_RCC_OscConfig+0xee>
 8001b14:	e015      	b.n	8001b42 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b16:	f7ff fcb3 	bl	8001480 <HAL_GetTick>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b20:	f7ff fcae 	bl	8001480 <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e275      	b.n	800201e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b32:	4b80      	ldr	r3, [pc, #512]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	029b      	lsls	r3, r3, #10
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x118>
 8001b3e:	e000      	b.n	8001b42 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b40:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2202      	movs	r2, #2
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d100      	bne.n	8001b4e <HAL_RCC_OscConfig+0x146>
 8001b4c:	e069      	b.n	8001c22 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b4e:	4b79      	ldr	r3, [pc, #484]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	220c      	movs	r2, #12
 8001b54:	4013      	ands	r3, r2
 8001b56:	d00b      	beq.n	8001b70 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b58:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	220c      	movs	r2, #12
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d11c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x196>
 8001b64:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	025b      	lsls	r3, r3, #9
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d116      	bne.n	8001b9e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b70:	4b70      	ldr	r3, [pc, #448]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2202      	movs	r2, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	d005      	beq.n	8001b86 <HAL_RCC_OscConfig+0x17e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e24b      	b.n	800201e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b86:	4b6b      	ldr	r3, [pc, #428]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	22f8      	movs	r2, #248	; 0xf8
 8001b8c:	4393      	bics	r3, r2
 8001b8e:	0019      	movs	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	00da      	lsls	r2, r3, #3
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b9c:	e041      	b.n	8001c22 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d024      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ba6:	4b63      	ldr	r3, [pc, #396]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4b62      	ldr	r3, [pc, #392]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff fc65 	bl	8001480 <HAL_GetTick>
 8001bb6:	0003      	movs	r3, r0
 8001bb8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fc60 	bl	8001480 <HAL_GetTick>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e227      	b.n	800201e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bce:	4b59      	ldr	r3, [pc, #356]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d0f1      	beq.n	8001bbc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b56      	ldr	r3, [pc, #344]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	22f8      	movs	r2, #248	; 0xf8
 8001bde:	4393      	bics	r3, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00da      	lsls	r2, r3, #3
 8001be8:	4b52      	ldr	r3, [pc, #328]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001bea:	430a      	orrs	r2, r1
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	e018      	b.n	8001c22 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bf0:	4b50      	ldr	r3, [pc, #320]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b4f      	ldr	r3, [pc, #316]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fc40 	bl	8001480 <HAL_GetTick>
 8001c00:	0003      	movs	r3, r0
 8001c02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff fc3b 	bl	8001480 <HAL_GetTick>
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e202      	b.n	800201e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c18:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	d1f1      	bne.n	8001c06 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2208      	movs	r2, #8
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d036      	beq.n	8001c9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d019      	beq.n	8001c68 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c34:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c38:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c40:	f7ff fc1e 	bl	8001480 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c4a:	f7ff fc19 	bl	8001480 <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e1e0      	b.n	800201e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c5c:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	2202      	movs	r2, #2
 8001c62:	4013      	ands	r3, r2
 8001c64:	d0f1      	beq.n	8001c4a <HAL_RCC_OscConfig+0x242>
 8001c66:	e018      	b.n	8001c9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c68:	4b32      	ldr	r3, [pc, #200]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c6c:	4b31      	ldr	r3, [pc, #196]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	438a      	bics	r2, r1
 8001c72:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c74:	f7ff fc04 	bl	8001480 <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7e:	f7ff fbff 	bl	8001480 <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e1c6      	b.n	800201e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	2202      	movs	r2, #2
 8001c96:	4013      	ands	r3, r2
 8001c98:	d1f1      	bne.n	8001c7e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d100      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x29e>
 8001ca4:	e0b4      	b.n	8001e10 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ca6:	201f      	movs	r0, #31
 8001ca8:	183b      	adds	r3, r7, r0
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	055b      	lsls	r3, r3, #21
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d110      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001cbc:	69da      	ldr	r2, [r3, #28]
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	0549      	lsls	r1, r1, #21
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	61da      	str	r2, [r3, #28]
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001cca:	69da      	ldr	r2, [r3, #28]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	055b      	lsls	r3, r3, #21
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001cd6:	183b      	adds	r3, r7, r0
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <HAL_RCC_OscConfig+0x338>)
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d11a      	bne.n	8001d1e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ce8:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_RCC_OscConfig+0x338>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <HAL_RCC_OscConfig+0x338>)
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	0049      	lsls	r1, r1, #1
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fbc3 	bl	8001480 <HAL_GetTick>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d00:	f7ff fbbe 	bl	8001480 <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e185      	b.n	800201e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_OscConfig+0x338>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d10e      	bne.n	8001d44 <HAL_RCC_OscConfig+0x33c>
 8001d26:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001d28:	6a1a      	ldr	r2, [r3, #32]
 8001d2a:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	621a      	str	r2, [r3, #32]
 8001d32:	e035      	b.n	8001da0 <HAL_RCC_OscConfig+0x398>
 8001d34:	40021000 	.word	0x40021000
 8001d38:	fffeffff 	.word	0xfffeffff
 8001d3c:	fffbffff 	.word	0xfffbffff
 8001d40:	40007000 	.word	0x40007000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10c      	bne.n	8001d66 <HAL_RCC_OscConfig+0x35e>
 8001d4c:	4bb6      	ldr	r3, [pc, #728]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d4e:	6a1a      	ldr	r2, [r3, #32]
 8001d50:	4bb5      	ldr	r3, [pc, #724]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d52:	2101      	movs	r1, #1
 8001d54:	438a      	bics	r2, r1
 8001d56:	621a      	str	r2, [r3, #32]
 8001d58:	4bb3      	ldr	r3, [pc, #716]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d5a:	6a1a      	ldr	r2, [r3, #32]
 8001d5c:	4bb2      	ldr	r3, [pc, #712]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d5e:	2104      	movs	r1, #4
 8001d60:	438a      	bics	r2, r1
 8001d62:	621a      	str	r2, [r3, #32]
 8001d64:	e01c      	b.n	8001da0 <HAL_RCC_OscConfig+0x398>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x380>
 8001d6e:	4bae      	ldr	r3, [pc, #696]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d70:	6a1a      	ldr	r2, [r3, #32]
 8001d72:	4bad      	ldr	r3, [pc, #692]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d74:	2104      	movs	r1, #4
 8001d76:	430a      	orrs	r2, r1
 8001d78:	621a      	str	r2, [r3, #32]
 8001d7a:	4bab      	ldr	r3, [pc, #684]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d7c:	6a1a      	ldr	r2, [r3, #32]
 8001d7e:	4baa      	ldr	r3, [pc, #680]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	430a      	orrs	r2, r1
 8001d84:	621a      	str	r2, [r3, #32]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0x398>
 8001d88:	4ba7      	ldr	r3, [pc, #668]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d8a:	6a1a      	ldr	r2, [r3, #32]
 8001d8c:	4ba6      	ldr	r3, [pc, #664]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	438a      	bics	r2, r1
 8001d92:	621a      	str	r2, [r3, #32]
 8001d94:	4ba4      	ldr	r3, [pc, #656]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d96:	6a1a      	ldr	r2, [r3, #32]
 8001d98:	4ba3      	ldr	r3, [pc, #652]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d014      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da8:	f7ff fb6a 	bl	8001480 <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db0:	e009      	b.n	8001dc6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7ff fb65 	bl	8001480 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	4a9b      	ldr	r2, [pc, #620]	; (800202c <HAL_RCC_OscConfig+0x624>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e12b      	b.n	800201e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc6:	4b98      	ldr	r3, [pc, #608]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x3aa>
 8001dd0:	e013      	b.n	8001dfa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fb55 	bl	8001480 <HAL_GetTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dda:	e009      	b.n	8001df0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fb50 	bl	8001480 <HAL_GetTick>
 8001de0:	0002      	movs	r2, r0
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	4a91      	ldr	r2, [pc, #580]	; (800202c <HAL_RCC_OscConfig+0x624>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e116      	b.n	800201e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df0:	4b8d      	ldr	r3, [pc, #564]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001df2:	6a1b      	ldr	r3, [r3, #32]
 8001df4:	2202      	movs	r2, #2
 8001df6:	4013      	ands	r3, r2
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dfa:	231f      	movs	r3, #31
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d105      	bne.n	8001e10 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e04:	4b88      	ldr	r3, [pc, #544]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e06:	69da      	ldr	r2, [r3, #28]
 8001e08:	4b87      	ldr	r3, [pc, #540]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e0a:	4989      	ldr	r1, [pc, #548]	; (8002030 <HAL_RCC_OscConfig+0x628>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2210      	movs	r2, #16
 8001e16:	4013      	ands	r3, r2
 8001e18:	d063      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d12a      	bne.n	8001e78 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e22:	4b81      	ldr	r3, [pc, #516]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e26:	4b80      	ldr	r3, [pc, #512]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e28:	2104      	movs	r1, #4
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001e2e:	4b7e      	ldr	r3, [pc, #504]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e32:	4b7d      	ldr	r3, [pc, #500]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e34:	2101      	movs	r1, #1
 8001e36:	430a      	orrs	r2, r1
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff fb21 	bl	8001480 <HAL_GetTick>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e44:	f7ff fb1c 	bl	8001480 <HAL_GetTick>
 8001e48:	0002      	movs	r2, r0
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e0e3      	b.n	800201e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001e56:	4b74      	ldr	r3, [pc, #464]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d0f1      	beq.n	8001e44 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e60:	4b71      	ldr	r3, [pc, #452]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	22f8      	movs	r2, #248	; 0xf8
 8001e66:	4393      	bics	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	00da      	lsls	r2, r3, #3
 8001e70:	4b6d      	ldr	r3, [pc, #436]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e72:	430a      	orrs	r2, r1
 8001e74:	635a      	str	r2, [r3, #52]	; 0x34
 8001e76:	e034      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	3305      	adds	r3, #5
 8001e7e:	d111      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e80:	4b69      	ldr	r3, [pc, #420]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e84:	4b68      	ldr	r3, [pc, #416]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e86:	2104      	movs	r1, #4
 8001e88:	438a      	bics	r2, r1
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e8c:	4b66      	ldr	r3, [pc, #408]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e90:	22f8      	movs	r2, #248	; 0xf8
 8001e92:	4393      	bics	r3, r2
 8001e94:	0019      	movs	r1, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	00da      	lsls	r2, r3, #3
 8001e9c:	4b62      	ldr	r3, [pc, #392]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea2:	e01e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ea4:	4b60      	ldr	r3, [pc, #384]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ea8:	4b5f      	ldr	r3, [pc, #380]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001eaa:	2104      	movs	r1, #4
 8001eac:	430a      	orrs	r2, r1
 8001eae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001eb0:	4b5d      	ldr	r3, [pc, #372]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb4:	4b5c      	ldr	r3, [pc, #368]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	438a      	bics	r2, r1
 8001eba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fae0 	bl	8001480 <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ec6:	f7ff fadb 	bl	8001480 <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0a2      	b.n	800201e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001ed8:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001edc:	2202      	movs	r2, #2
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d1f1      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d100      	bne.n	8001eec <HAL_RCC_OscConfig+0x4e4>
 8001eea:	e097      	b.n	800201c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eec:	4b4e      	ldr	r3, [pc, #312]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	220c      	movs	r2, #12
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d100      	bne.n	8001efa <HAL_RCC_OscConfig+0x4f2>
 8001ef8:	e06b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d14c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b49      	ldr	r3, [pc, #292]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b48      	ldr	r3, [pc, #288]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001f08:	494a      	ldr	r1, [pc, #296]	; (8002034 <HAL_RCC_OscConfig+0x62c>)
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0e:	f7ff fab7 	bl	8001480 <HAL_GetTick>
 8001f12:	0003      	movs	r3, r0
 8001f14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff fab2 	bl	8001480 <HAL_GetTick>
 8001f1c:	0002      	movs	r2, r0
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e079      	b.n	800201e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f2a:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	049b      	lsls	r3, r3, #18
 8001f32:	4013      	ands	r3, r2
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3a:	220f      	movs	r2, #15
 8001f3c:	4393      	bics	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f44:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f4a:	4b37      	ldr	r3, [pc, #220]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4a3a      	ldr	r2, [pc, #232]	; (8002038 <HAL_RCC_OscConfig+0x630>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	4b32      	ldr	r3, [pc, #200]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001f60:	430a      	orrs	r2, r1
 8001f62:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	4b30      	ldr	r3, [pc, #192]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001f6a:	2180      	movs	r1, #128	; 0x80
 8001f6c:	0449      	lsls	r1, r1, #17
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f72:	f7ff fa85 	bl	8001480 <HAL_GetTick>
 8001f76:	0003      	movs	r3, r0
 8001f78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7c:	f7ff fa80 	bl	8001480 <HAL_GetTick>
 8001f80:	0002      	movs	r2, r0
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e047      	b.n	800201e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f8e:	4b26      	ldr	r3, [pc, #152]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	049b      	lsls	r3, r3, #18
 8001f96:	4013      	ands	r3, r2
 8001f98:	d0f0      	beq.n	8001f7c <HAL_RCC_OscConfig+0x574>
 8001f9a:	e03f      	b.n	800201c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9c:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b21      	ldr	r3, [pc, #132]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001fa2:	4924      	ldr	r1, [pc, #144]	; (8002034 <HAL_RCC_OscConfig+0x62c>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa8:	f7ff fa6a 	bl	8001480 <HAL_GetTick>
 8001fac:	0003      	movs	r3, r0
 8001fae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7ff fa65 	bl	8001480 <HAL_GetTick>
 8001fb6:	0002      	movs	r2, r0
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e02c      	b.n	800201e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc4:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	049b      	lsls	r3, r3, #18
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x5aa>
 8001fd0:	e024      	b.n	800201c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e01f      	b.n	800201e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001fe4:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_RCC_OscConfig+0x620>)
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d10e      	bne.n	8002018 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	401a      	ands	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d107      	bne.n	8002018 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	23f0      	movs	r3, #240	; 0xf0
 800200c:	039b      	lsls	r3, r3, #14
 800200e:	401a      	ands	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b008      	add	sp, #32
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	40021000 	.word	0x40021000
 800202c:	00001388 	.word	0x00001388
 8002030:	efffffff 	.word	0xefffffff
 8002034:	feffffff 	.word	0xfeffffff
 8002038:	ffc2ffff 	.word	0xffc2ffff

0800203c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b3      	b.n	80021b8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002050:	4b5b      	ldr	r3, [pc, #364]	; (80021c0 <HAL_RCC_ClockConfig+0x184>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2201      	movs	r2, #1
 8002056:	4013      	ands	r3, r2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d911      	bls.n	8002082 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	4b58      	ldr	r3, [pc, #352]	; (80021c0 <HAL_RCC_ClockConfig+0x184>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2201      	movs	r2, #1
 8002064:	4393      	bics	r3, r2
 8002066:	0019      	movs	r1, r3
 8002068:	4b55      	ldr	r3, [pc, #340]	; (80021c0 <HAL_RCC_ClockConfig+0x184>)
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCC_ClockConfig+0x184>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2201      	movs	r2, #1
 8002076:	4013      	ands	r3, r2
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e09a      	b.n	80021b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2202      	movs	r2, #2
 8002088:	4013      	ands	r3, r2
 800208a:	d015      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2204      	movs	r2, #4
 8002092:	4013      	ands	r3, r2
 8002094:	d006      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002096:	4b4b      	ldr	r3, [pc, #300]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4b4a      	ldr	r3, [pc, #296]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 800209c:	21e0      	movs	r1, #224	; 0xe0
 800209e:	00c9      	lsls	r1, r1, #3
 80020a0:	430a      	orrs	r2, r1
 80020a2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a4:	4b47      	ldr	r3, [pc, #284]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	22f0      	movs	r2, #240	; 0xf0
 80020aa:	4393      	bics	r3, r2
 80020ac:	0019      	movs	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689a      	ldr	r2, [r3, #8]
 80020b2:	4b44      	ldr	r3, [pc, #272]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2201      	movs	r2, #1
 80020be:	4013      	ands	r3, r2
 80020c0:	d040      	beq.n	8002144 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b3e      	ldr	r3, [pc, #248]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	029b      	lsls	r3, r3, #10
 80020d2:	4013      	ands	r3, r2
 80020d4:	d114      	bne.n	8002100 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06e      	b.n	80021b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e2:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	2380      	movs	r3, #128	; 0x80
 80020e8:	049b      	lsls	r3, r3, #18
 80020ea:	4013      	ands	r3, r2
 80020ec:	d108      	bne.n	8002100 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e062      	b.n	80021b8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f2:	4b34      	ldr	r3, [pc, #208]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2202      	movs	r2, #2
 80020f8:	4013      	ands	r3, r2
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e05b      	b.n	80021b8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002100:	4b30      	ldr	r3, [pc, #192]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2203      	movs	r2, #3
 8002106:	4393      	bics	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 8002110:	430a      	orrs	r2, r1
 8002112:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002114:	f7ff f9b4 	bl	8001480 <HAL_GetTick>
 8002118:	0003      	movs	r3, r0
 800211a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211c:	e009      	b.n	8002132 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211e:	f7ff f9af 	bl	8001480 <HAL_GetTick>
 8002122:	0002      	movs	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <HAL_RCC_ClockConfig+0x18c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e042      	b.n	80021b8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	220c      	movs	r2, #12
 8002138:	401a      	ands	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	429a      	cmp	r2, r3
 8002142:	d1ec      	bne.n	800211e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_RCC_ClockConfig+0x184>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2201      	movs	r2, #1
 800214a:	4013      	ands	r3, r2
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d211      	bcs.n	8002176 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_RCC_ClockConfig+0x184>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2201      	movs	r2, #1
 8002158:	4393      	bics	r3, r2
 800215a:	0019      	movs	r1, r3
 800215c:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_RCC_ClockConfig+0x184>)
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_RCC_ClockConfig+0x184>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2201      	movs	r2, #1
 800216a:	4013      	ands	r3, r2
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d001      	beq.n	8002176 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e020      	b.n	80021b8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2204      	movs	r2, #4
 800217c:	4013      	ands	r3, r2
 800217e:	d009      	beq.n	8002194 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	4a11      	ldr	r2, [pc, #68]	; (80021cc <HAL_RCC_ClockConfig+0x190>)
 8002186:	4013      	ands	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 8002190:	430a      	orrs	r2, r1
 8002192:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002194:	f000 f820 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002198:	0001      	movs	r1, r0
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <HAL_RCC_ClockConfig+0x188>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	220f      	movs	r2, #15
 80021a2:	4013      	ands	r3, r2
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <HAL_RCC_ClockConfig+0x194>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	000a      	movs	r2, r1
 80021aa:	40da      	lsrs	r2, r3
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x198>)
 80021ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7ff f91f 	bl	80013f4 <HAL_InitTick>
  
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b004      	add	sp, #16
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	00001388 	.word	0x00001388
 80021cc:	fffff8ff 	.word	0xfffff8ff
 80021d0:	08002b38 	.word	0x08002b38
 80021d4:	2000001c 	.word	0x2000001c

080021d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <HAL_RCC_GetSysClockFreq+0x9c>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	220c      	movs	r2, #12
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d002      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0x30>
 8002202:	2b08      	cmp	r3, #8
 8002204:	d003      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x36>
 8002206:	e02c      	b.n	8002262 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HAL_RCC_GetSysClockFreq+0xa0>)
 800220a:	613b      	str	r3, [r7, #16]
      break;
 800220c:	e02c      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	0c9b      	lsrs	r3, r3, #18
 8002212:	220f      	movs	r2, #15
 8002214:	4013      	ands	r3, r2
 8002216:	4a19      	ldr	r2, [pc, #100]	; (800227c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002218:	5cd3      	ldrb	r3, [r2, r3]
 800221a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800221c:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_RCC_GetSysClockFreq+0x9c>)
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	220f      	movs	r2, #15
 8002222:	4013      	ands	r3, r2
 8002224:	4a16      	ldr	r2, [pc, #88]	; (8002280 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002226:	5cd3      	ldrb	r3, [r2, r3]
 8002228:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	2380      	movs	r3, #128	; 0x80
 800222e:	025b      	lsls	r3, r3, #9
 8002230:	4013      	ands	r3, r2
 8002232:	d009      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002234:	68b9      	ldr	r1, [r7, #8]
 8002236:	4810      	ldr	r0, [pc, #64]	; (8002278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002238:	f7fd ff66 	bl	8000108 <__udivsi3>
 800223c:	0003      	movs	r3, r0
 800223e:	001a      	movs	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4353      	muls	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e009      	b.n	800225c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	000a      	movs	r2, r1
 800224c:	0152      	lsls	r2, r2, #5
 800224e:	1a52      	subs	r2, r2, r1
 8002250:	0193      	lsls	r3, r2, #6
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	185b      	adds	r3, r3, r1
 8002258:	021b      	lsls	r3, r3, #8
 800225a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	613b      	str	r3, [r7, #16]
      break;
 8002260:	e002      	b.n	8002268 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002264:	613b      	str	r3, [r7, #16]
      break;
 8002266:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002268:	693b      	ldr	r3, [r7, #16]
}
 800226a:	0018      	movs	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	b006      	add	sp, #24
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	40021000 	.word	0x40021000
 8002278:	007a1200 	.word	0x007a1200
 800227c:	08002b48 	.word	0x08002b48
 8002280:	08002b58 	.word	0x08002b58

08002284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e042      	b.n	800231c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	223d      	movs	r2, #61	; 0x3d
 800229a:	5c9b      	ldrb	r3, [r3, r2]
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d107      	bne.n	80022b2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	223c      	movs	r2, #60	; 0x3c
 80022a6:	2100      	movs	r1, #0
 80022a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7fe ffbb 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	223d      	movs	r2, #61	; 0x3d
 80022b6:	2102      	movs	r1, #2
 80022b8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	0019      	movs	r1, r3
 80022c4:	0010      	movs	r0, r2
 80022c6:	f000 fa5b 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2246      	movs	r2, #70	; 0x46
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	223e      	movs	r2, #62	; 0x3e
 80022d6:	2101      	movs	r1, #1
 80022d8:	5499      	strb	r1, [r3, r2]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	223f      	movs	r2, #63	; 0x3f
 80022de:	2101      	movs	r1, #1
 80022e0:	5499      	strb	r1, [r3, r2]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2240      	movs	r2, #64	; 0x40
 80022e6:	2101      	movs	r1, #1
 80022e8:	5499      	strb	r1, [r3, r2]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2241      	movs	r2, #65	; 0x41
 80022ee:	2101      	movs	r1, #1
 80022f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2242      	movs	r2, #66	; 0x42
 80022f6:	2101      	movs	r1, #1
 80022f8:	5499      	strb	r1, [r3, r2]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2243      	movs	r2, #67	; 0x43
 80022fe:	2101      	movs	r1, #1
 8002300:	5499      	strb	r1, [r3, r2]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2244      	movs	r2, #68	; 0x44
 8002306:	2101      	movs	r1, #1
 8002308:	5499      	strb	r1, [r3, r2]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2245      	movs	r2, #69	; 0x45
 800230e:	2101      	movs	r1, #1
 8002310:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	223d      	movs	r2, #61	; 0x3d
 8002316:	2101      	movs	r1, #1
 8002318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	223d      	movs	r2, #61	; 0x3d
 8002330:	5c9b      	ldrb	r3, [r3, r2]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b01      	cmp	r3, #1
 8002336:	d001      	beq.n	800233c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e036      	b.n	80023aa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	223d      	movs	r2, #61	; 0x3d
 8002340:	2102      	movs	r1, #2
 8002342:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2101      	movs	r1, #1
 8002350:	430a      	orrs	r2, r1
 8002352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a16      	ldr	r2, [pc, #88]	; (80023b4 <HAL_TIM_Base_Start_IT+0x90>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d00a      	beq.n	8002374 <HAL_TIM_Base_Start_IT+0x50>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	05db      	lsls	r3, r3, #23
 8002366:	429a      	cmp	r2, r3
 8002368:	d004      	beq.n	8002374 <HAL_TIM_Base_Start_IT+0x50>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <HAL_TIM_Base_Start_IT+0x94>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d111      	bne.n	8002398 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2207      	movs	r2, #7
 800237c:	4013      	ands	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2b06      	cmp	r3, #6
 8002384:	d010      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002396:	e007      	b.n	80023a8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2101      	movs	r1, #1
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	0018      	movs	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	b004      	add	sp, #16
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	46c0      	nop			; (mov r8, r8)
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400

080023bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2202      	movs	r2, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	d021      	beq.n	8002420 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2202      	movs	r2, #2
 80023e0:	4013      	ands	r3, r2
 80023e2:	d01d      	beq.n	8002420 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2203      	movs	r2, #3
 80023ea:	4252      	negs	r2, r2
 80023ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2203      	movs	r2, #3
 80023fc:	4013      	ands	r3, r2
 80023fe:	d004      	beq.n	800240a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	0018      	movs	r0, r3
 8002404:	f000 f9a4 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 8002408:	e007      	b.n	800241a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	0018      	movs	r0, r3
 800240e:	f000 f997 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0018      	movs	r0, r3
 8002416:	f000 f9a3 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2204      	movs	r2, #4
 8002424:	4013      	ands	r3, r2
 8002426:	d022      	beq.n	800246e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2204      	movs	r2, #4
 800242c:	4013      	ands	r3, r2
 800242e:	d01e      	beq.n	800246e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2205      	movs	r2, #5
 8002436:	4252      	negs	r2, r2
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	23c0      	movs	r3, #192	; 0xc0
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4013      	ands	r3, r2
 800244c:	d004      	beq.n	8002458 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	0018      	movs	r0, r3
 8002452:	f000 f97d 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 8002456:	e007      	b.n	8002468 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	0018      	movs	r0, r3
 800245c:	f000 f970 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f97c 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	2208      	movs	r2, #8
 8002472:	4013      	ands	r3, r2
 8002474:	d021      	beq.n	80024ba <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2208      	movs	r2, #8
 800247a:	4013      	ands	r3, r2
 800247c:	d01d      	beq.n	80024ba <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2209      	movs	r2, #9
 8002484:	4252      	negs	r2, r2
 8002486:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2204      	movs	r2, #4
 800248c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	2203      	movs	r2, #3
 8002496:	4013      	ands	r3, r2
 8002498:	d004      	beq.n	80024a4 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0018      	movs	r0, r3
 800249e:	f000 f957 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 80024a2:	e007      	b.n	80024b4 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 f94a 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 f956 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2210      	movs	r2, #16
 80024be:	4013      	ands	r3, r2
 80024c0:	d022      	beq.n	8002508 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2210      	movs	r2, #16
 80024c6:	4013      	ands	r3, r2
 80024c8:	d01e      	beq.n	8002508 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2211      	movs	r2, #17
 80024d0:	4252      	negs	r2, r2
 80024d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2208      	movs	r2, #8
 80024d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69da      	ldr	r2, [r3, #28]
 80024e0:	23c0      	movs	r3, #192	; 0xc0
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4013      	ands	r3, r2
 80024e6:	d004      	beq.n	80024f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	0018      	movs	r0, r3
 80024ec:	f000 f930 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 80024f0:	e007      	b.n	8002502 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f000 f923 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 f92f 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2201      	movs	r2, #1
 800250c:	4013      	ands	r3, r2
 800250e:	d00c      	beq.n	800252a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	4013      	ands	r3, r2
 8002516:	d008      	beq.n	800252a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2202      	movs	r2, #2
 800251e:	4252      	negs	r2, r2
 8002520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	0018      	movs	r0, r3
 8002526:	f7fe ff1b 	bl	8001360 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2280      	movs	r2, #128	; 0x80
 800252e:	4013      	ands	r3, r2
 8002530:	d00c      	beq.n	800254c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2280      	movs	r2, #128	; 0x80
 8002536:	4013      	ands	r3, r2
 8002538:	d008      	beq.n	800254c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2281      	movs	r2, #129	; 0x81
 8002540:	4252      	negs	r2, r2
 8002542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	0018      	movs	r0, r3
 8002548:	f000 fa98 	bl	8002a7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2240      	movs	r2, #64	; 0x40
 8002550:	4013      	ands	r3, r2
 8002552:	d00c      	beq.n	800256e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2240      	movs	r2, #64	; 0x40
 8002558:	4013      	ands	r3, r2
 800255a:	d008      	beq.n	800256e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2241      	movs	r2, #65	; 0x41
 8002562:	4252      	negs	r2, r2
 8002564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f000 f901 	bl	8002770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2220      	movs	r2, #32
 8002572:	4013      	ands	r3, r2
 8002574:	d00c      	beq.n	8002590 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	4013      	ands	r3, r2
 800257c:	d008      	beq.n	8002590 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2221      	movs	r2, #33	; 0x21
 8002584:	4252      	negs	r2, r2
 8002586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	0018      	movs	r0, r3
 800258c:	f000 fa6e 	bl	8002a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002590:	46c0      	nop			; (mov r8, r8)
 8002592:	46bd      	mov	sp, r7
 8002594:	b004      	add	sp, #16
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	230f      	movs	r3, #15
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	223c      	movs	r2, #60	; 0x3c
 80025ae:	5c9b      	ldrb	r3, [r3, r2]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_TIM_ConfigClockSource+0x20>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e0bc      	b.n	8002732 <HAL_TIM_ConfigClockSource+0x19a>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	223c      	movs	r2, #60	; 0x3c
 80025bc:	2101      	movs	r1, #1
 80025be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	223d      	movs	r2, #61	; 0x3d
 80025c4:	2102      	movs	r1, #2
 80025c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2277      	movs	r2, #119	; 0x77
 80025d4:	4393      	bics	r3, r2
 80025d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_TIM_ConfigClockSource+0x1a4>)
 80025dc:	4013      	ands	r3, r2
 80025de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	0192      	lsls	r2, r2, #6
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d040      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0xde>
 80025f4:	2280      	movs	r2, #128	; 0x80
 80025f6:	0192      	lsls	r2, r2, #6
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d900      	bls.n	80025fe <HAL_TIM_ConfigClockSource+0x66>
 80025fc:	e088      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x178>
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	0152      	lsls	r2, r2, #5
 8002602:	4293      	cmp	r3, r2
 8002604:	d100      	bne.n	8002608 <HAL_TIM_ConfigClockSource+0x70>
 8002606:	e088      	b.n	800271a <HAL_TIM_ConfigClockSource+0x182>
 8002608:	2280      	movs	r2, #128	; 0x80
 800260a:	0152      	lsls	r2, r2, #5
 800260c:	4293      	cmp	r3, r2
 800260e:	d900      	bls.n	8002612 <HAL_TIM_ConfigClockSource+0x7a>
 8002610:	e07e      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x178>
 8002612:	2b70      	cmp	r3, #112	; 0x70
 8002614:	d018      	beq.n	8002648 <HAL_TIM_ConfigClockSource+0xb0>
 8002616:	d900      	bls.n	800261a <HAL_TIM_ConfigClockSource+0x82>
 8002618:	e07a      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x178>
 800261a:	2b60      	cmp	r3, #96	; 0x60
 800261c:	d04f      	beq.n	80026be <HAL_TIM_ConfigClockSource+0x126>
 800261e:	d900      	bls.n	8002622 <HAL_TIM_ConfigClockSource+0x8a>
 8002620:	e076      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x178>
 8002622:	2b50      	cmp	r3, #80	; 0x50
 8002624:	d03b      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x106>
 8002626:	d900      	bls.n	800262a <HAL_TIM_ConfigClockSource+0x92>
 8002628:	e072      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x178>
 800262a:	2b40      	cmp	r3, #64	; 0x40
 800262c:	d057      	beq.n	80026de <HAL_TIM_ConfigClockSource+0x146>
 800262e:	d900      	bls.n	8002632 <HAL_TIM_ConfigClockSource+0x9a>
 8002630:	e06e      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x178>
 8002632:	2b30      	cmp	r3, #48	; 0x30
 8002634:	d063      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x166>
 8002636:	d86b      	bhi.n	8002710 <HAL_TIM_ConfigClockSource+0x178>
 8002638:	2b20      	cmp	r3, #32
 800263a:	d060      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x166>
 800263c:	d868      	bhi.n	8002710 <HAL_TIM_ConfigClockSource+0x178>
 800263e:	2b00      	cmp	r3, #0
 8002640:	d05d      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x166>
 8002642:	2b10      	cmp	r3, #16
 8002644:	d05b      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x166>
 8002646:	e063      	b.n	8002710 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6818      	ldr	r0, [r3, #0]
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6899      	ldr	r1, [r3, #8]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	f000 f990 	bl	800297c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2277      	movs	r2, #119	; 0x77
 8002668:	4313      	orrs	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	609a      	str	r2, [r3, #8]
      break;
 8002674:	e052      	b.n	800271c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6899      	ldr	r1, [r3, #8]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	f000 f979 	bl	800297c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2180      	movs	r1, #128	; 0x80
 8002696:	01c9      	lsls	r1, r1, #7
 8002698:	430a      	orrs	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
      break;
 800269c:	e03e      	b.n	800271c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	001a      	movs	r2, r3
 80026ac:	f000 f8ec 	bl	8002888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2150      	movs	r1, #80	; 0x50
 80026b6:	0018      	movs	r0, r3
 80026b8:	f000 f946 	bl	8002948 <TIM_ITRx_SetConfig>
      break;
 80026bc:	e02e      	b.n	800271c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	001a      	movs	r2, r3
 80026cc:	f000 f90a 	bl	80028e4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2160      	movs	r1, #96	; 0x60
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f936 	bl	8002948 <TIM_ITRx_SetConfig>
      break;
 80026dc:	e01e      	b.n	800271c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	001a      	movs	r2, r3
 80026ec:	f000 f8cc 	bl	8002888 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 f926 	bl	8002948 <TIM_ITRx_SetConfig>
      break;
 80026fc:	e00e      	b.n	800271c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0019      	movs	r1, r3
 8002708:	0010      	movs	r0, r2
 800270a:	f000 f91d 	bl	8002948 <TIM_ITRx_SetConfig>
      break;
 800270e:	e005      	b.n	800271c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002710:	230f      	movs	r3, #15
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
      break;
 8002718:	e000      	b.n	800271c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800271a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	223d      	movs	r2, #61	; 0x3d
 8002720:	2101      	movs	r1, #1
 8002722:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	223c      	movs	r2, #60	; 0x3c
 8002728:	2100      	movs	r1, #0
 800272a:	5499      	strb	r1, [r3, r2]

  return status;
 800272c:	230f      	movs	r3, #15
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	781b      	ldrb	r3, [r3, #0]
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b004      	add	sp, #16
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	ffff00ff 	.word	0xffff00ff

08002740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b002      	add	sp, #8
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}

08002780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a37      	ldr	r2, [pc, #220]	; (8002870 <TIM_Base_SetConfig+0xf0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d008      	beq.n	80027aa <TIM_Base_SetConfig+0x2a>
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	05db      	lsls	r3, r3, #23
 800279e:	429a      	cmp	r2, r3
 80027a0:	d003      	beq.n	80027aa <TIM_Base_SetConfig+0x2a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a33      	ldr	r2, [pc, #204]	; (8002874 <TIM_Base_SetConfig+0xf4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d108      	bne.n	80027bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2270      	movs	r2, #112	; 0x70
 80027ae:	4393      	bics	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a2c      	ldr	r2, [pc, #176]	; (8002870 <TIM_Base_SetConfig+0xf0>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d014      	beq.n	80027ee <TIM_Base_SetConfig+0x6e>
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	05db      	lsls	r3, r3, #23
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d00f      	beq.n	80027ee <TIM_Base_SetConfig+0x6e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a28      	ldr	r2, [pc, #160]	; (8002874 <TIM_Base_SetConfig+0xf4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00b      	beq.n	80027ee <TIM_Base_SetConfig+0x6e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a27      	ldr	r2, [pc, #156]	; (8002878 <TIM_Base_SetConfig+0xf8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d007      	beq.n	80027ee <TIM_Base_SetConfig+0x6e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a26      	ldr	r2, [pc, #152]	; (800287c <TIM_Base_SetConfig+0xfc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d003      	beq.n	80027ee <TIM_Base_SetConfig+0x6e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a25      	ldr	r2, [pc, #148]	; (8002880 <TIM_Base_SetConfig+0x100>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d108      	bne.n	8002800 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a24      	ldr	r2, [pc, #144]	; (8002884 <TIM_Base_SetConfig+0x104>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2280      	movs	r2, #128	; 0x80
 8002804:	4393      	bics	r3, r2
 8002806:	001a      	movs	r2, r3
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a11      	ldr	r2, [pc, #68]	; (8002870 <TIM_Base_SetConfig+0xf0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d007      	beq.n	800283e <TIM_Base_SetConfig+0xbe>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a12      	ldr	r2, [pc, #72]	; (800287c <TIM_Base_SetConfig+0xfc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d003      	beq.n	800283e <TIM_Base_SetConfig+0xbe>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a11      	ldr	r2, [pc, #68]	; (8002880 <TIM_Base_SetConfig+0x100>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d103      	bne.n	8002846 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	691a      	ldr	r2, [r3, #16]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2201      	movs	r2, #1
 800284a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	2201      	movs	r2, #1
 8002852:	4013      	ands	r3, r2
 8002854:	2b01      	cmp	r3, #1
 8002856:	d106      	bne.n	8002866 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2201      	movs	r2, #1
 800285e:	4393      	bics	r3, r2
 8002860:	001a      	movs	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	611a      	str	r2, [r3, #16]
  }
}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	46bd      	mov	sp, r7
 800286a:	b004      	add	sp, #16
 800286c:	bd80      	pop	{r7, pc}
 800286e:	46c0      	nop			; (mov r8, r8)
 8002870:	40012c00 	.word	0x40012c00
 8002874:	40000400 	.word	0x40000400
 8002878:	40002000 	.word	0x40002000
 800287c:	40014400 	.word	0x40014400
 8002880:	40014800 	.word	0x40014800
 8002884:	fffffcff 	.word	0xfffffcff

08002888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	2201      	movs	r2, #1
 80028a0:	4393      	bics	r3, r2
 80028a2:	001a      	movs	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	22f0      	movs	r2, #240	; 0xf0
 80028b2:	4393      	bics	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	220a      	movs	r2, #10
 80028c4:	4393      	bics	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	621a      	str	r2, [r3, #32]
}
 80028dc:	46c0      	nop			; (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b006      	add	sp, #24
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a1b      	ldr	r3, [r3, #32]
 80028f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	2210      	movs	r2, #16
 80028fc:	4393      	bics	r3, r2
 80028fe:	001a      	movs	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4a0d      	ldr	r2, [pc, #52]	; (8002944 <TIM_TI2_ConfigInputStage+0x60>)
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	031b      	lsls	r3, r3, #12
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	22a0      	movs	r2, #160	; 0xa0
 8002920:	4393      	bics	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	621a      	str	r2, [r3, #32]
}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	46bd      	mov	sp, r7
 800293e:	b006      	add	sp, #24
 8002940:	bd80      	pop	{r7, pc}
 8002942:	46c0      	nop			; (mov r8, r8)
 8002944:	ffff0fff 	.word	0xffff0fff

08002948 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2270      	movs	r2, #112	; 0x70
 800295c:	4393      	bics	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	2207      	movs	r2, #7
 8002968:	4313      	orrs	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	609a      	str	r2, [r3, #8]
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	b004      	add	sp, #16
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <TIM_ETR_SetConfig+0x3c>)
 8002994:	4013      	ands	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	021a      	lsls	r2, r3, #8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	431a      	orrs	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	609a      	str	r2, [r3, #8]
}
 80029b0:	46c0      	nop			; (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b006      	add	sp, #24
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	ffff00ff 	.word	0xffff00ff

080029bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	223c      	movs	r2, #60	; 0x3c
 80029ca:	5c9b      	ldrb	r3, [r3, r2]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e042      	b.n	8002a5a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	223c      	movs	r2, #60	; 0x3c
 80029d8:	2101      	movs	r1, #1
 80029da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	223d      	movs	r2, #61	; 0x3d
 80029e0:	2102      	movs	r1, #2
 80029e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2270      	movs	r2, #112	; 0x70
 80029f8:	4393      	bics	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a14      	ldr	r2, [pc, #80]	; (8002a64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00a      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	05db      	lsls	r3, r3, #23
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d004      	beq.n	8002a2e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d10c      	bne.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	4393      	bics	r3, r2
 8002a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	223d      	movs	r2, #61	; 0x3d
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	223c      	movs	r2, #60	; 0x3c
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b004      	add	sp, #16
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400

08002a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a74:	46c0      	nop			; (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <__libc_init_array>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	2600      	movs	r6, #0
 8002a90:	4d0c      	ldr	r5, [pc, #48]	; (8002ac4 <__libc_init_array+0x38>)
 8002a92:	4c0d      	ldr	r4, [pc, #52]	; (8002ac8 <__libc_init_array+0x3c>)
 8002a94:	1b64      	subs	r4, r4, r5
 8002a96:	10a4      	asrs	r4, r4, #2
 8002a98:	42a6      	cmp	r6, r4
 8002a9a:	d109      	bne.n	8002ab0 <__libc_init_array+0x24>
 8002a9c:	2600      	movs	r6, #0
 8002a9e:	f000 f821 	bl	8002ae4 <_init>
 8002aa2:	4d0a      	ldr	r5, [pc, #40]	; (8002acc <__libc_init_array+0x40>)
 8002aa4:	4c0a      	ldr	r4, [pc, #40]	; (8002ad0 <__libc_init_array+0x44>)
 8002aa6:	1b64      	subs	r4, r4, r5
 8002aa8:	10a4      	asrs	r4, r4, #2
 8002aaa:	42a6      	cmp	r6, r4
 8002aac:	d105      	bne.n	8002aba <__libc_init_array+0x2e>
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
 8002ab0:	00b3      	lsls	r3, r6, #2
 8002ab2:	58eb      	ldr	r3, [r5, r3]
 8002ab4:	4798      	blx	r3
 8002ab6:	3601      	adds	r6, #1
 8002ab8:	e7ee      	b.n	8002a98 <__libc_init_array+0xc>
 8002aba:	00b3      	lsls	r3, r6, #2
 8002abc:	58eb      	ldr	r3, [r5, r3]
 8002abe:	4798      	blx	r3
 8002ac0:	3601      	adds	r6, #1
 8002ac2:	e7f2      	b.n	8002aaa <__libc_init_array+0x1e>
 8002ac4:	08002b68 	.word	0x08002b68
 8002ac8:	08002b68 	.word	0x08002b68
 8002acc:	08002b68 	.word	0x08002b68
 8002ad0:	08002b6c 	.word	0x08002b6c

08002ad4 <memset>:
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	1882      	adds	r2, r0, r2
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d100      	bne.n	8002ade <memset+0xa>
 8002adc:	4770      	bx	lr
 8002ade:	7019      	strb	r1, [r3, #0]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	e7f9      	b.n	8002ad8 <memset+0x4>

08002ae4 <_init>:
 8002ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aea:	bc08      	pop	{r3}
 8002aec:	469e      	mov	lr, r3
 8002aee:	4770      	bx	lr

08002af0 <_fini>:
 8002af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002af6:	bc08      	pop	{r3}
 8002af8:	469e      	mov	lr, r3
 8002afa:	4770      	bx	lr
