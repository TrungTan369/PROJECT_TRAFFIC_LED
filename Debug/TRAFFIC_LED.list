
TRAFFIC_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080020b0  080020b0  000120b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020e0  080020e0  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080020e0  080020e0  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020e0  080020e0  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020e0  080020e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020e4  080020e4  000120e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080020e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000003c  08002124  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08002124  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d77  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018c8  00000000  00000000  00028ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000958  00000000  00000000  0002a6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002b000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fa37  00000000  00000000  0002b880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aeeb  00000000  00000000  0003b2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f2a0  00000000  00000000  000461a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a5442  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002090  00000000  00000000  000a5498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002098 	.word	0x08002098

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08002098 	.word	0x08002098

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <getKeyinput>:

int buttonFlag1 = 0;
int buttonFlag2 = 0;
int buttonFlag3 = 0;
int timePress = 0;
void getKeyinput(){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	//-----PROCESS BUTTON 1------------
	key1_temp0 = key1_temp1;
 8000224:	4b64      	ldr	r3, [pc, #400]	; (80003b8 <getKeyinput+0x198>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b64      	ldr	r3, [pc, #400]	; (80003bc <getKeyinput+0x19c>)
 800022a:	601a      	str	r2, [r3, #0]
	key1_temp1 = key1_temp2;
 800022c:	4b64      	ldr	r3, [pc, #400]	; (80003c0 <getKeyinput+0x1a0>)
 800022e:	681a      	ldr	r2, [r3, #0]
 8000230:	4b61      	ldr	r3, [pc, #388]	; (80003b8 <getKeyinput+0x198>)
 8000232:	601a      	str	r2, [r3, #0]
	key1_temp2 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000234:	2390      	movs	r3, #144	; 0x90
 8000236:	05db      	lsls	r3, r3, #23
 8000238:	2180      	movs	r1, #128	; 0x80
 800023a:	0018      	movs	r0, r3
 800023c:	f000 fe4a 	bl	8000ed4 <HAL_GPIO_ReadPin>
 8000240:	0003      	movs	r3, r0
 8000242:	001a      	movs	r2, r3
 8000244:	4b5e      	ldr	r3, [pc, #376]	; (80003c0 <getKeyinput+0x1a0>)
 8000246:	601a      	str	r2, [r3, #0]

	key2_temp0 = key2_temp1;
 8000248:	4b5e      	ldr	r3, [pc, #376]	; (80003c4 <getKeyinput+0x1a4>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	4b5e      	ldr	r3, [pc, #376]	; (80003c8 <getKeyinput+0x1a8>)
 800024e:	601a      	str	r2, [r3, #0]
	key2_temp1 = key2_temp2;
 8000250:	4b5e      	ldr	r3, [pc, #376]	; (80003cc <getKeyinput+0x1ac>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b5b      	ldr	r3, [pc, #364]	; (80003c4 <getKeyinput+0x1a4>)
 8000256:	601a      	str	r2, [r3, #0]
	key2_temp2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000258:	2390      	movs	r3, #144	; 0x90
 800025a:	05db      	lsls	r3, r3, #23
 800025c:	2108      	movs	r1, #8
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fe38 	bl	8000ed4 <HAL_GPIO_ReadPin>
 8000264:	0003      	movs	r3, r0
 8000266:	001a      	movs	r2, r3
 8000268:	4b58      	ldr	r3, [pc, #352]	; (80003cc <getKeyinput+0x1ac>)
 800026a:	601a      	str	r2, [r3, #0]

	key3_temp0 = key3_temp1;
 800026c:	4b58      	ldr	r3, [pc, #352]	; (80003d0 <getKeyinput+0x1b0>)
 800026e:	681a      	ldr	r2, [r3, #0]
 8000270:	4b58      	ldr	r3, [pc, #352]	; (80003d4 <getKeyinput+0x1b4>)
 8000272:	601a      	str	r2, [r3, #0]
	key3_temp1 = key3_temp2;
 8000274:	4b58      	ldr	r3, [pc, #352]	; (80003d8 <getKeyinput+0x1b8>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b55      	ldr	r3, [pc, #340]	; (80003d0 <getKeyinput+0x1b0>)
 800027a:	601a      	str	r2, [r3, #0]
	key3_temp2 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 800027c:	2390      	movs	r3, #144	; 0x90
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	2102      	movs	r1, #2
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fe26 	bl	8000ed4 <HAL_GPIO_ReadPin>
 8000288:	0003      	movs	r3, r0
 800028a:	001a      	movs	r2, r3
 800028c:	4b52      	ldr	r3, [pc, #328]	; (80003d8 <getKeyinput+0x1b8>)
 800028e:	601a      	str	r2, [r3, #0]

	if((key1_temp0 == key1_temp1) && (key1_temp1 == key1_temp2)){
 8000290:	4b4a      	ldr	r3, [pc, #296]	; (80003bc <getKeyinput+0x19c>)
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	4b48      	ldr	r3, [pc, #288]	; (80003b8 <getKeyinput+0x198>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	429a      	cmp	r2, r3
 800029a:	d12c      	bne.n	80002f6 <getKeyinput+0xd6>
 800029c:	4b46      	ldr	r3, [pc, #280]	; (80003b8 <getKeyinput+0x198>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b47      	ldr	r3, [pc, #284]	; (80003c0 <getKeyinput+0x1a0>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d126      	bne.n	80002f6 <getKeyinput+0xd6>
		if(key1_temp3 != key1_temp2){
 80002a8:	4b4c      	ldr	r3, [pc, #304]	; (80003dc <getKeyinput+0x1bc>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b44      	ldr	r3, [pc, #272]	; (80003c0 <getKeyinput+0x1a0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d011      	beq.n	80002d8 <getKeyinput+0xb8>
			key1_temp3 = key1_temp2;
 80002b4:	4b42      	ldr	r3, [pc, #264]	; (80003c0 <getKeyinput+0x1a0>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b48      	ldr	r3, [pc, #288]	; (80003dc <getKeyinput+0x1bc>)
 80002ba:	601a      	str	r2, [r3, #0]
			if(key1_temp2 == PRESS_STATE){
 80002bc:	4b40      	ldr	r3, [pc, #256]	; (80003c0 <getKeyinput+0x1a0>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d118      	bne.n	80002f6 <getKeyinput+0xd6>
				buttonFlag1 = 1;
 80002c4:	4b46      	ldr	r3, [pc, #280]	; (80003e0 <getKeyinput+0x1c0>)
 80002c6:	2201      	movs	r2, #1
 80002c8:	601a      	str	r2, [r3, #0]
				HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 80002ca:	2390      	movs	r3, #144	; 0x90
 80002cc:	05db      	lsls	r3, r3, #23
 80002ce:	2140      	movs	r1, #64	; 0x40
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fe39 	bl	8000f48 <HAL_GPIO_TogglePin>
 80002d6:	e00e      	b.n	80002f6 <getKeyinput+0xd6>
			}
		}
		else{
			timePress--;
 80002d8:	4b42      	ldr	r3, [pc, #264]	; (80003e4 <getKeyinput+0x1c4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	1e5a      	subs	r2, r3, #1
 80002de:	4b41      	ldr	r3, [pc, #260]	; (80003e4 <getKeyinput+0x1c4>)
 80002e0:	601a      	str	r2, [r3, #0]
			if(timePress <= 0){
 80002e2:	4b40      	ldr	r3, [pc, #256]	; (80003e4 <getKeyinput+0x1c4>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	dc05      	bgt.n	80002f6 <getKeyinput+0xd6>
				key1_temp3 = NORMAL_STATE;
 80002ea:	4b3c      	ldr	r3, [pc, #240]	; (80003dc <getKeyinput+0x1bc>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	601a      	str	r2, [r3, #0]
				timePress = 200;
 80002f0:	4b3c      	ldr	r3, [pc, #240]	; (80003e4 <getKeyinput+0x1c4>)
 80002f2:	22c8      	movs	r2, #200	; 0xc8
 80002f4:	601a      	str	r2, [r3, #0]
			}
		}

	}
	// ----PROCESS BUTTON 2-----------
	if((key2_temp0 == key2_temp1) && (key2_temp1 == key2_temp2)){
 80002f6:	4b34      	ldr	r3, [pc, #208]	; (80003c8 <getKeyinput+0x1a8>)
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	4b32      	ldr	r3, [pc, #200]	; (80003c4 <getKeyinput+0x1a4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	429a      	cmp	r2, r3
 8000300:	d129      	bne.n	8000356 <getKeyinput+0x136>
 8000302:	4b30      	ldr	r3, [pc, #192]	; (80003c4 <getKeyinput+0x1a4>)
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	4b31      	ldr	r3, [pc, #196]	; (80003cc <getKeyinput+0x1ac>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	429a      	cmp	r2, r3
 800030c:	d123      	bne.n	8000356 <getKeyinput+0x136>
		if(key2_temp3 != key2_temp2){
 800030e:	4b36      	ldr	r3, [pc, #216]	; (80003e8 <getKeyinput+0x1c8>)
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <getKeyinput+0x1ac>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	429a      	cmp	r2, r3
 8000318:	d00e      	beq.n	8000338 <getKeyinput+0x118>
			key2_temp3 = key2_temp2;
 800031a:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <getKeyinput+0x1ac>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	4b32      	ldr	r3, [pc, #200]	; (80003e8 <getKeyinput+0x1c8>)
 8000320:	601a      	str	r2, [r3, #0]
			if(key2_temp2 == PRESS_STATE){
 8000322:	4b2a      	ldr	r3, [pc, #168]	; (80003cc <getKeyinput+0x1ac>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d115      	bne.n	8000356 <getKeyinput+0x136>
				buttonFlag2 = 1;
 800032a:	4b30      	ldr	r3, [pc, #192]	; (80003ec <getKeyinput+0x1cc>)
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
				timePress = 200;
 8000330:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <getKeyinput+0x1c4>)
 8000332:	22c8      	movs	r2, #200	; 0xc8
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	e00e      	b.n	8000356 <getKeyinput+0x136>
				//HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
			}
		}
		else{
			timePress--;
 8000338:	4b2a      	ldr	r3, [pc, #168]	; (80003e4 <getKeyinput+0x1c4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	1e5a      	subs	r2, r3, #1
 800033e:	4b29      	ldr	r3, [pc, #164]	; (80003e4 <getKeyinput+0x1c4>)
 8000340:	601a      	str	r2, [r3, #0]
			if(timePress <= 0){
 8000342:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <getKeyinput+0x1c4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	dc05      	bgt.n	8000356 <getKeyinput+0x136>
				key2_temp3 = NORMAL_STATE;
 800034a:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <getKeyinput+0x1c8>)
 800034c:	2201      	movs	r2, #1
 800034e:	601a      	str	r2, [r3, #0]
				timePress = 200;
 8000350:	4b24      	ldr	r3, [pc, #144]	; (80003e4 <getKeyinput+0x1c4>)
 8000352:	22c8      	movs	r2, #200	; 0xc8
 8000354:	601a      	str	r2, [r3, #0]
			}
		}
	}
	// ----- PROCESS BUTTON 3 -----------
	if((key3_temp0 == key3_temp1) && (key3_temp1 == key3_temp2)){
 8000356:	4b1f      	ldr	r3, [pc, #124]	; (80003d4 <getKeyinput+0x1b4>)
 8000358:	681a      	ldr	r2, [r3, #0]
 800035a:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <getKeyinput+0x1b0>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	429a      	cmp	r2, r3
 8000360:	d126      	bne.n	80003b0 <getKeyinput+0x190>
 8000362:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <getKeyinput+0x1b0>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	4b1c      	ldr	r3, [pc, #112]	; (80003d8 <getKeyinput+0x1b8>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	429a      	cmp	r2, r3
 800036c:	d120      	bne.n	80003b0 <getKeyinput+0x190>
		if(key3_temp3 != key3_temp2){
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <getKeyinput+0x1d0>)
 8000370:	681a      	ldr	r2, [r3, #0]
 8000372:	4b19      	ldr	r3, [pc, #100]	; (80003d8 <getKeyinput+0x1b8>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	429a      	cmp	r2, r3
 8000378:	d00b      	beq.n	8000392 <getKeyinput+0x172>
			key3_temp3 = key3_temp2;
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <getKeyinput+0x1b8>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <getKeyinput+0x1d0>)
 8000380:	601a      	str	r2, [r3, #0]
			if(key3_temp2 == PRESS_STATE){
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <getKeyinput+0x1b8>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d112      	bne.n	80003b0 <getKeyinput+0x190>
				buttonFlag3 = 1;
 800038a:	4b1a      	ldr	r3, [pc, #104]	; (80003f4 <getKeyinput+0x1d4>)
 800038c:	2201      	movs	r2, #1
 800038e:	601a      	str	r2, [r3, #0]
				key3_temp3 = NORMAL_STATE;
				timePress = 200;
			}
		}
	}
}
 8000390:	e00e      	b.n	80003b0 <getKeyinput+0x190>
			timePress--;
 8000392:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <getKeyinput+0x1c4>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	1e5a      	subs	r2, r3, #1
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <getKeyinput+0x1c4>)
 800039a:	601a      	str	r2, [r3, #0]
			if(timePress <= 0){
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <getKeyinput+0x1c4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	dc05      	bgt.n	80003b0 <getKeyinput+0x190>
				key3_temp3 = NORMAL_STATE;
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <getKeyinput+0x1d0>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	601a      	str	r2, [r3, #0]
				timePress = 200;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <getKeyinput+0x1c4>)
 80003ac:	22c8      	movs	r2, #200	; 0xc8
 80003ae:	601a      	str	r2, [r3, #0]
}
 80003b0:	46c0      	nop			; (mov r8, r8)
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	20000004 	.word	0x20000004
 80003bc:	20000000 	.word	0x20000000
 80003c0:	20000008 	.word	0x20000008
 80003c4:	20000014 	.word	0x20000014
 80003c8:	20000010 	.word	0x20000010
 80003cc:	20000018 	.word	0x20000018
 80003d0:	20000024 	.word	0x20000024
 80003d4:	20000020 	.word	0x20000020
 80003d8:	20000028 	.word	0x20000028
 80003dc:	2000000c 	.word	0x2000000c
 80003e0:	20000058 	.word	0x20000058
 80003e4:	20000064 	.word	0x20000064
 80003e8:	2000001c 	.word	0x2000001c
 80003ec:	2000005c 	.word	0x2000005c
 80003f0:	2000002c 	.word	0x2000002c
 80003f4:	20000060 	.word	0x20000060

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fc:	f000 fac0 	bl	8000980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000400:	f000 f88c 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000404:	f000 f91e 	bl	8000644 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000408:	f000 f8c8 	bl	800059c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 800040c:	4b40      	ldr	r3, [pc, #256]	; (8000510 <main+0x118>)
 800040e:	0018      	movs	r0, r3
 8000410:	f001 fa62 	bl	80018d8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(R1_GPIO_Port, R1_Pin, SET);
 8000414:	2390      	movs	r3, #144	; 0x90
 8000416:	05db      	lsls	r3, r3, #23
 8000418:	2201      	movs	r2, #1
 800041a:	2104      	movs	r1, #4
 800041c:	0018      	movs	r0, r3
 800041e:	f000 fd76 	bl	8000f0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y1_GPIO_Port, Y1_Pin, SET);
 8000422:	4b3c      	ldr	r3, [pc, #240]	; (8000514 <main+0x11c>)
 8000424:	2201      	movs	r2, #1
 8000426:	2120      	movs	r1, #32
 8000428:	0018      	movs	r0, r3
 800042a:	f000 fd70 	bl	8000f0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(G1_GPIO_Port, G1_Pin, SET);
 800042e:	4b39      	ldr	r3, [pc, #228]	; (8000514 <main+0x11c>)
 8000430:	2201      	movs	r2, #1
 8000432:	2110      	movs	r1, #16
 8000434:	0018      	movs	r0, r3
 8000436:	f000 fd6a 	bl	8000f0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(R2_GPIO_Port, R2_Pin, SET);
 800043a:	2390      	movs	r3, #144	; 0x90
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	2201      	movs	r2, #1
 8000440:	2140      	movs	r1, #64	; 0x40
 8000442:	0018      	movs	r0, r3
 8000444:	f000 fd63 	bl	8000f0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Y2_GPIO_Port, Y2_Pin, SET);
 8000448:	2390      	movs	r3, #144	; 0x90
 800044a:	05db      	lsls	r3, r3, #23
 800044c:	2201      	movs	r2, #1
 800044e:	2110      	movs	r1, #16
 8000450:	0018      	movs	r0, r3
 8000452:	f000 fd5c 	bl	8000f0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(G2_GPIO_Port, G2_Pin, SET);
 8000456:	2390      	movs	r3, #144	; 0x90
 8000458:	05db      	lsls	r3, r3, #23
 800045a:	2201      	movs	r2, #1
 800045c:	2120      	movs	r1, #32
 800045e:	0018      	movs	r0, r3
 8000460:	f000 fd55 	bl	8000f0e <HAL_GPIO_WritePin>
  //setTimer(0, 100);
  while (1)
  {

	  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000464:	2390      	movs	r3, #144	; 0x90
 8000466:	05db      	lsls	r3, r3, #23
 8000468:	2201      	movs	r2, #1
 800046a:	2101      	movs	r1, #1
 800046c:	0018      	movs	r0, r3
 800046e:	f000 fd4e 	bl	8000f0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000472:	4b29      	ldr	r3, [pc, #164]	; (8000518 <main+0x120>)
 8000474:	2201      	movs	r2, #1
 8000476:	2102      	movs	r1, #2
 8000478:	0018      	movs	r0, r3
 800047a:	f000 fd48 	bl	8000f0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 800047e:	4b25      	ldr	r3, [pc, #148]	; (8000514 <main+0x11c>)
 8000480:	2201      	movs	r2, #1
 8000482:	2108      	movs	r1, #8
 8000484:	0018      	movs	r0, r3
 8000486:	f000 fd42 	bl	8000f0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	0119      	lsls	r1, r3, #4
 800048e:	2390      	movs	r3, #144	; 0x90
 8000490:	05db      	lsls	r3, r3, #23
 8000492:	2201      	movs	r2, #1
 8000494:	0018      	movs	r0, r3
 8000496:	f000 fd3a 	bl	8000f0e <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
 800049a:	4b1f      	ldr	r3, [pc, #124]	; (8000518 <main+0x120>)
 800049c:	2200      	movs	r2, #0
 800049e:	2101      	movs	r1, #1
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 fd34 	bl	8000f0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET); //set
 80004a6:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <main+0x11c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 fd2e 	bl	8000f0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);  //set
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <main+0x11c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	2140      	movs	r1, #64	; 0x40
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 fd28 	bl	8000f0e <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(D_GPIO_Port, D_Pin,	SET);
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <main+0x11c>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	2102      	movs	r1, #2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 fd22 	bl	8000f0e <HAL_GPIO_WritePin>

	  HAL_GPIO_TogglePin(R1_GPIO_Port, R1_Pin);
 80004ca:	2390      	movs	r3, #144	; 0x90
 80004cc:	05db      	lsls	r3, r3, #23
 80004ce:	2104      	movs	r1, #4
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 fd39 	bl	8000f48 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(Y1_GPIO_Port, Y1_Pin);
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <main+0x11c>)
 80004d8:	2120      	movs	r1, #32
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fd34 	bl	8000f48 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(G1_GPIO_Port, G1_Pin);
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <main+0x11c>)
 80004e2:	2110      	movs	r1, #16
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fd2f 	bl	8000f48 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(R2_GPIO_Port, R2_Pin);
 80004ea:	2390      	movs	r3, #144	; 0x90
 80004ec:	05db      	lsls	r3, r3, #23
 80004ee:	2140      	movs	r1, #64	; 0x40
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 fd29 	bl	8000f48 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(Y2_GPIO_Port, Y2_Pin);
 80004f6:	2390      	movs	r3, #144	; 0x90
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	2110      	movs	r1, #16
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fd23 	bl	8000f48 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(G2_GPIO_Port, G2_Pin);
 8000502:	2390      	movs	r3, #144	; 0x90
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2120      	movs	r1, #32
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fd1d 	bl	8000f48 <HAL_GPIO_TogglePin>
	  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800050e:	e7a9      	b.n	8000464 <main+0x6c>
 8000510:	20000088 	.word	0x20000088
 8000514:	48000400 	.word	0x48000400
 8000518:	48001400 	.word	0x48001400

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b590      	push	{r4, r7, lr}
 800051e:	b091      	sub	sp, #68	; 0x44
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	2410      	movs	r4, #16
 8000524:	193b      	adds	r3, r7, r4
 8000526:	0018      	movs	r0, r3
 8000528:	2330      	movs	r3, #48	; 0x30
 800052a:	001a      	movs	r2, r3
 800052c:	2100      	movs	r1, #0
 800052e:	f001 fdab 	bl	8002088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000532:	003b      	movs	r3, r7
 8000534:	0018      	movs	r0, r3
 8000536:	2310      	movs	r3, #16
 8000538:	001a      	movs	r2, r3
 800053a:	2100      	movs	r1, #0
 800053c:	f001 fda4 	bl	8002088 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	0021      	movs	r1, r4
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2202      	movs	r2, #2
 8000546:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2201      	movs	r2, #1
 800054c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2210      	movs	r2, #16
 8000552:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	187b      	adds	r3, r7, r1
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fd2d 	bl	8000fbc <HAL_RCC_OscConfig>
 8000562:	1e03      	subs	r3, r0, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000566:	f000 f91f 	bl	80007a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	003b      	movs	r3, r7
 800056c:	2207      	movs	r2, #7
 800056e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000570:	003b      	movs	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	003b      	movs	r3, r7
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057c:	003b      	movs	r3, r7
 800057e:	2200      	movs	r2, #0
 8000580:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000582:	003b      	movs	r3, r7
 8000584:	2100      	movs	r1, #0
 8000586:	0018      	movs	r0, r3
 8000588:	f001 f832 	bl	80015f0 <HAL_RCC_ClockConfig>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000590:	f000 f90a 	bl	80007a8 <Error_Handler>
  }
}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b011      	add	sp, #68	; 0x44
 800059a:	bd90      	pop	{r4, r7, pc}

0800059c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a2:	2308      	movs	r3, #8
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	0018      	movs	r0, r3
 80005a8:	2310      	movs	r3, #16
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f001 fd6b 	bl	8002088 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	2308      	movs	r3, #8
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f001 fd64 	bl	8002088 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <MX_TIM2_Init+0xa0>)
 80005c2:	2280      	movs	r2, #128	; 0x80
 80005c4:	05d2      	lsls	r2, r2, #23
 80005c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80005c8:	4b1c      	ldr	r3, [pc, #112]	; (800063c <MX_TIM2_Init+0xa0>)
 80005ca:	4a1d      	ldr	r2, [pc, #116]	; (8000640 <MX_TIM2_Init+0xa4>)
 80005cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_TIM2_Init+0xa0>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80005d4:	4b19      	ldr	r3, [pc, #100]	; (800063c <MX_TIM2_Init+0xa0>)
 80005d6:	2209      	movs	r2, #9
 80005d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_TIM2_Init+0xa0>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_TIM2_Init+0xa0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_TIM2_Init+0xa0>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 f925 	bl	8001838 <HAL_TIM_Base_Init>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80005f2:	f000 f8d9 	bl	80007a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f6:	2108      	movs	r1, #8
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0152      	lsls	r2, r2, #5
 80005fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000600:	187a      	adds	r2, r7, r1
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_TIM2_Init+0xa0>)
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f001 faa0 	bl	8001b4c <HAL_TIM_ConfigClockSource>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000610:	f000 f8ca 	bl	80007a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000614:	003b      	movs	r3, r7
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800061a:	003b      	movs	r3, r7
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000620:	003a      	movs	r2, r7
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_TIM2_Init+0xa0>)
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fca2 	bl	8001f70 <HAL_TIMEx_MasterConfigSynchronization>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000630:	f000 f8ba 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000634:	46c0      	nop			; (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b006      	add	sp, #24
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000088 	.word	0x20000088
 8000640:	00001f3f 	.word	0x00001f3f

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b089      	sub	sp, #36	; 0x24
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	240c      	movs	r4, #12
 800064c:	193b      	adds	r3, r7, r4
 800064e:	0018      	movs	r0, r3
 8000650:	2314      	movs	r3, #20
 8000652:	001a      	movs	r2, r3
 8000654:	2100      	movs	r1, #0
 8000656:	f001 fd17 	bl	8002088 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065a:	4b49      	ldr	r3, [pc, #292]	; (8000780 <MX_GPIO_Init+0x13c>)
 800065c:	695a      	ldr	r2, [r3, #20]
 800065e:	4b48      	ldr	r3, [pc, #288]	; (8000780 <MX_GPIO_Init+0x13c>)
 8000660:	2180      	movs	r1, #128	; 0x80
 8000662:	03c9      	lsls	r1, r1, #15
 8000664:	430a      	orrs	r2, r1
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	4b45      	ldr	r3, [pc, #276]	; (8000780 <MX_GPIO_Init+0x13c>)
 800066a:	695a      	ldr	r2, [r3, #20]
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	03db      	lsls	r3, r3, #15
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b42      	ldr	r3, [pc, #264]	; (8000780 <MX_GPIO_Init+0x13c>)
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	4b41      	ldr	r3, [pc, #260]	; (8000780 <MX_GPIO_Init+0x13c>)
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	0289      	lsls	r1, r1, #10
 8000680:	430a      	orrs	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	4b3e      	ldr	r3, [pc, #248]	; (8000780 <MX_GPIO_Init+0x13c>)
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	029b      	lsls	r3, r3, #10
 800068c:	4013      	ands	r3, r2
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b3b      	ldr	r3, [pc, #236]	; (8000780 <MX_GPIO_Init+0x13c>)
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4b3a      	ldr	r3, [pc, #232]	; (8000780 <MX_GPIO_Init+0x13c>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	02c9      	lsls	r1, r1, #11
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	4b37      	ldr	r3, [pc, #220]	; (8000780 <MX_GPIO_Init+0x13c>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	02db      	lsls	r3, r3, #11
 80006a8:	4013      	ands	r3, r2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, A_Pin|EN1_Pin, GPIO_PIN_RESET);
 80006ae:	4b35      	ldr	r3, [pc, #212]	; (8000784 <MX_GPIO_Init+0x140>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	2103      	movs	r1, #3
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fc2a 	bl	8000f0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|R1_Pin|Y2_Pin|G2_Pin
 80006ba:	4933      	ldr	r1, [pc, #204]	; (8000788 <MX_GPIO_Init+0x144>)
 80006bc:	2390      	movs	r3, #144	; 0x90
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	2200      	movs	r2, #0
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fc23 	bl	8000f0e <HAL_GPIO_WritePin>
                          |R2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D_Pin|EN2_Pin|G1_Pin|Y1_Pin
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <MX_GPIO_Init+0x148>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	21fa      	movs	r1, #250	; 0xfa
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 fc1d 	bl	8000f0e <HAL_GPIO_WritePin>
                          |C_Pin|B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A_Pin EN1_Pin */
  GPIO_InitStruct.Pin = A_Pin|EN1_Pin;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2203      	movs	r2, #3
 80006d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2201      	movs	r2, #1
 80006de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	4a25      	ldr	r2, [pc, #148]	; (8000784 <MX_GPIO_Init+0x140>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	0010      	movs	r0, r2
 80006f4:	f000 fa86 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin R1_Pin Y2_Pin G2_Pin
                           R2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|R1_Pin|Y2_Pin|G2_Pin
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	4a23      	ldr	r2, [pc, #140]	; (8000788 <MX_GPIO_Init+0x144>)
 80006fc:	601a      	str	r2, [r3, #0]
                          |R2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2201      	movs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	193b      	adds	r3, r7, r4
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000710:	193a      	adds	r2, r7, r4
 8000712:	2390      	movs	r3, #144	; 0x90
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	0011      	movs	r1, r2
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fa73 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	228a      	movs	r2, #138	; 0x8a
 8000722:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2201      	movs	r2, #1
 800072e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	193a      	adds	r2, r7, r4
 8000732:	2390      	movs	r3, #144	; 0x90
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fa63 	bl	8000c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_Pin EN2_Pin G1_Pin Y1_Pin
                           C_Pin B_Pin */
  GPIO_InitStruct.Pin = D_Pin|EN2_Pin|G1_Pin|Y1_Pin
 800073e:	0021      	movs	r1, r4
 8000740:	187b      	adds	r3, r7, r1
 8000742:	22fa      	movs	r2, #250	; 0xfa
 8000744:	601a      	str	r2, [r3, #0]
                          |C_Pin|B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2201      	movs	r2, #1
 800074a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	187b      	adds	r3, r7, r1
 800075a:	4a0c      	ldr	r2, [pc, #48]	; (800078c <MX_GPIO_Init+0x148>)
 800075c:	0019      	movs	r1, r3
 800075e:	0010      	movs	r0, r2
 8000760:	f000 fa50 	bl	8000c04 <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB6);
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	025b      	lsls	r3, r3, #9
 8000768:	0018      	movs	r0, r3
 800076a:	f000 fc09 	bl	8000f80 <HAL_I2CEx_EnableFastModePlus>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_FMP_PB7);
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	029b      	lsls	r3, r3, #10
 8000772:	0018      	movs	r0, r3
 8000774:	f000 fc04 	bl	8000f80 <HAL_I2CEx_EnableFastModePlus>

}
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b009      	add	sp, #36	; 0x24
 800077e:	bd90      	pop	{r4, r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	48001400 	.word	0x48001400
 8000788:	00000875 	.word	0x00000875
 800078c:	48000400 	.word	0x48000400

08000790 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	getKeyinput();
 8000798:	f7ff fd42 	bl	8000220 <getKeyinput>
	timer_run();
 800079c:	f000 f87c 	bl	8000898 <timer_run>
}
 80007a0:	46c0      	nop			; (mov r8, r8)
 80007a2:	46bd      	mov	sp, r7
 80007a4:	b002      	add	sp, #8
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <Error_Handler+0x8>
	...

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <HAL_MspInit+0x44>)
 80007bc:	699a      	ldr	r2, [r3, #24]
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <HAL_MspInit+0x44>)
 80007c0:	2101      	movs	r1, #1
 80007c2:	430a      	orrs	r2, r1
 80007c4:	619a      	str	r2, [r3, #24]
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <HAL_MspInit+0x44>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	2201      	movs	r2, #1
 80007cc:	4013      	ands	r3, r2
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <HAL_MspInit+0x44>)
 80007d4:	69da      	ldr	r2, [r3, #28]
 80007d6:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <HAL_MspInit+0x44>)
 80007d8:	2180      	movs	r1, #128	; 0x80
 80007da:	0549      	lsls	r1, r1, #21
 80007dc:	430a      	orrs	r2, r1
 80007de:	61da      	str	r2, [r3, #28]
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_MspInit+0x44>)
 80007e2:	69da      	ldr	r2, [r3, #28]
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	055b      	lsls	r3, r3, #21
 80007e8:	4013      	ands	r3, r2
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b002      	add	sp, #8
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	429a      	cmp	r2, r3
 800080e:	d113      	bne.n	8000838 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <HAL_TIM_Base_MspInit+0x44>)
 8000812:	69da      	ldr	r2, [r3, #28]
 8000814:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <HAL_TIM_Base_MspInit+0x44>)
 8000816:	2101      	movs	r1, #1
 8000818:	430a      	orrs	r2, r1
 800081a:	61da      	str	r2, [r3, #28]
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_TIM_Base_MspInit+0x44>)
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	2201      	movs	r2, #1
 8000822:	4013      	ands	r3, r2
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	200f      	movs	r0, #15
 800082e:	f000 f9b7 	bl	8000ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000832:	200f      	movs	r0, #15
 8000834:	f000 f9c9 	bl	8000bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000838:	46c0      	nop			; (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	b004      	add	sp, #16
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000

08000844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <NMI_Handler+0x4>

0800084a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <HardFault_Handler+0x4>

08000850 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000854:	46c0      	nop			; (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f8d2 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	46c0      	nop			; (mov r8, r8)
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <TIM2_IRQHandler+0x14>)
 800087a:	0018      	movs	r0, r3
 800087c:	f001 f878 	bl	8001970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	20000088 	.word	0x20000088

0800088c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <timer_run>:
void setTimer(int timer, int duration){
	counter[timer] = duration / 10;
	flag[timer] = 0;
}

void timer_run(){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	if(counter[0] > 0){   // TIMER LINE 1
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <timer_run+0x8c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	dd0b      	ble.n	80008bc <timer_run+0x24>
		counter[0]--;
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <timer_run+0x8c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	1e5a      	subs	r2, r3, #1
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <timer_run+0x8c>)
 80008ac:	601a      	str	r2, [r3, #0]
		if(counter[0] == 0)
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <timer_run+0x8c>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d102      	bne.n	80008bc <timer_run+0x24>
			flag[0] = 1;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <timer_run+0x90>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	601a      	str	r2, [r3, #0]
	}
	if(counter[1] > 0){ // TIMER LINE 2
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <timer_run+0x8c>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	dd0b      	ble.n	80008dc <timer_run+0x44>
		counter[1]--;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <timer_run+0x8c>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	1e5a      	subs	r2, r3, #1
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <timer_run+0x8c>)
 80008cc:	605a      	str	r2, [r3, #4]
		if(counter[1] == 0)
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <timer_run+0x8c>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d102      	bne.n	80008dc <timer_run+0x44>
			flag[1] = 1;
 80008d6:	4b14      	ldr	r3, [pc, #80]	; (8000928 <timer_run+0x90>)
 80008d8:	2201      	movs	r2, #1
 80008da:	605a      	str	r2, [r3, #4]
	}
	if(counter[2] > 0){   //1 S
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <timer_run+0x8c>)
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	dd0b      	ble.n	80008fc <timer_run+0x64>
		counter[2]--;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <timer_run+0x8c>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <timer_run+0x8c>)
 80008ec:	609a      	str	r2, [r3, #8]
		if(counter[2] == 0)
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <timer_run+0x8c>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d102      	bne.n	80008fc <timer_run+0x64>
			flag[2] = 1;
 80008f6:	4b0c      	ldr	r3, [pc, #48]	; (8000928 <timer_run+0x90>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	609a      	str	r2, [r3, #8]
	}
	if(counter[3] > 0){   //250 MS
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <timer_run+0x8c>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	2b00      	cmp	r3, #0
 8000902:	dd0b      	ble.n	800091c <timer_run+0x84>
		counter[3]--;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <timer_run+0x8c>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	1e5a      	subs	r2, r3, #1
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <timer_run+0x8c>)
 800090c:	60da      	str	r2, [r3, #12]
		if(counter[3] == 0)
 800090e:	4b05      	ldr	r3, [pc, #20]	; (8000924 <timer_run+0x8c>)
 8000910:	68db      	ldr	r3, [r3, #12]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d102      	bne.n	800091c <timer_run+0x84>
			flag[3] = 1;
 8000916:	4b04      	ldr	r3, [pc, #16]	; (8000928 <timer_run+0x90>)
 8000918:	2201      	movs	r2, #1
 800091a:	60da      	str	r2, [r3, #12]
	}
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	20000068 	.word	0x20000068
 8000928:	20000078 	.word	0x20000078

0800092c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800092c:	480d      	ldr	r0, [pc, #52]	; (8000964 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800092e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000930:	f7ff ffac 	bl	800088c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <LoopForever+0x6>)
  ldr r1, =_edata
 8000936:	490d      	ldr	r1, [pc, #52]	; (800096c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <LoopForever+0xe>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <LoopForever+0x12>)
  ldr r4, =_ebss
 800094c:	4c0a      	ldr	r4, [pc, #40]	; (8000978 <LoopForever+0x16>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800095a:	f001 fb71 	bl	8002040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fd4b 	bl	80003f8 <main>

08000962 <LoopForever>:

LoopForever:
    b LoopForever
 8000962:	e7fe      	b.n	8000962 <LoopForever>
  ldr   r0, =_estack
 8000964:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800096c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8000970:	080020e8 	.word	0x080020e8
  ldr r2, =_sbss
 8000974:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8000978:	200000d4 	.word	0x200000d4

0800097c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800097c:	e7fe      	b.n	800097c <ADC1_IRQHandler>
	...

08000980 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <HAL_Init+0x24>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_Init+0x24>)
 800098a:	2110      	movs	r1, #16
 800098c:	430a      	orrs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000990:	2000      	movs	r0, #0
 8000992:	f000 f809 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000996:	f7ff ff0d 	bl	80007b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <HAL_InitTick+0x5c>)
 80009b2:	681c      	ldr	r4, [r3, #0]
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_InitTick+0x60>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	0019      	movs	r1, r3
 80009ba:	23fa      	movs	r3, #250	; 0xfa
 80009bc:	0098      	lsls	r0, r3, #2
 80009be:	f7ff fba3 	bl	8000108 <__udivsi3>
 80009c2:	0003      	movs	r3, r0
 80009c4:	0019      	movs	r1, r3
 80009c6:	0020      	movs	r0, r4
 80009c8:	f7ff fb9e 	bl	8000108 <__udivsi3>
 80009cc:	0003      	movs	r3, r0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 f90b 	bl	8000bea <HAL_SYSTICK_Config>
 80009d4:	1e03      	subs	r3, r0, #0
 80009d6:	d001      	beq.n	80009dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e00f      	b.n	80009fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	d80b      	bhi.n	80009fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	2301      	movs	r3, #1
 80009e6:	425b      	negs	r3, r3
 80009e8:	2200      	movs	r2, #0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f000 f8d8 	bl	8000ba0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_InitTick+0x64>)
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	0018      	movs	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b003      	add	sp, #12
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	20000030 	.word	0x20000030
 8000a08:	20000038 	.word	0x20000038
 8000a0c:	20000034 	.word	0x20000034

08000a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_IncTick+0x1c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	001a      	movs	r2, r3
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_IncTick+0x20>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	18d2      	adds	r2, r2, r3
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_IncTick+0x20>)
 8000a22:	601a      	str	r2, [r3, #0]
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	20000038 	.word	0x20000038
 8000a30:	200000d0 	.word	0x200000d0

08000a34 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <HAL_GetTick+0x10>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	200000d0 	.word	0x200000d0

08000a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	0002      	movs	r2, r0
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a54:	1dfb      	adds	r3, r7, #7
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b7f      	cmp	r3, #127	; 0x7f
 8000a5a:	d809      	bhi.n	8000a70 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	001a      	movs	r2, r3
 8000a62:	231f      	movs	r3, #31
 8000a64:	401a      	ands	r2, r3
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_EnableIRQ+0x30>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4091      	lsls	r1, r2
 8000a6c:	000a      	movs	r2, r1
 8000a6e:	601a      	str	r2, [r3, #0]
  }
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b002      	add	sp, #8
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	0002      	movs	r2, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8000a90:	d828      	bhi.n	8000ae4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a92:	4a2f      	ldr	r2, [pc, #188]	; (8000b50 <__NVIC_SetPriority+0xd4>)
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b25b      	sxtb	r3, r3
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	33c0      	adds	r3, #192	; 0xc0
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	589b      	ldr	r3, [r3, r2]
 8000aa2:	1dfa      	adds	r2, r7, #7
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	0011      	movs	r1, r2
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	400a      	ands	r2, r1
 8000aac:	00d2      	lsls	r2, r2, #3
 8000aae:	21ff      	movs	r1, #255	; 0xff
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	000a      	movs	r2, r1
 8000ab4:	43d2      	mvns	r2, r2
 8000ab6:	401a      	ands	r2, r3
 8000ab8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	22ff      	movs	r2, #255	; 0xff
 8000ac0:	401a      	ands	r2, r3
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	2303      	movs	r3, #3
 8000aca:	4003      	ands	r3, r0
 8000acc:	00db      	lsls	r3, r3, #3
 8000ace:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad0:	481f      	ldr	r0, [pc, #124]	; (8000b50 <__NVIC_SetPriority+0xd4>)
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	089b      	lsrs	r3, r3, #2
 8000ada:	430a      	orrs	r2, r1
 8000adc:	33c0      	adds	r3, #192	; 0xc0
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ae2:	e031      	b.n	8000b48 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <__NVIC_SetPriority+0xd8>)
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	0019      	movs	r1, r3
 8000aec:	230f      	movs	r3, #15
 8000aee:	400b      	ands	r3, r1
 8000af0:	3b08      	subs	r3, #8
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	3306      	adds	r3, #6
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	18d3      	adds	r3, r2, r3
 8000afa:	3304      	adds	r3, #4
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	1dfa      	adds	r2, r7, #7
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	0011      	movs	r1, r2
 8000b04:	2203      	movs	r2, #3
 8000b06:	400a      	ands	r2, r1
 8000b08:	00d2      	lsls	r2, r2, #3
 8000b0a:	21ff      	movs	r1, #255	; 0xff
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	43d2      	mvns	r2, r2
 8000b12:	401a      	ands	r2, r3
 8000b14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	22ff      	movs	r2, #255	; 0xff
 8000b1c:	401a      	ands	r2, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	0018      	movs	r0, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	4003      	ands	r3, r0
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <__NVIC_SetPriority+0xd8>)
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	001c      	movs	r4, r3
 8000b34:	230f      	movs	r3, #15
 8000b36:	4023      	ands	r3, r4
 8000b38:	3b08      	subs	r3, #8
 8000b3a:	089b      	lsrs	r3, r3, #2
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	3306      	adds	r3, #6
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	18c3      	adds	r3, r0, r3
 8000b44:	3304      	adds	r3, #4
 8000b46:	601a      	str	r2, [r3, #0]
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b003      	add	sp, #12
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	e000e100 	.word	0xe000e100
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	1e5a      	subs	r2, r3, #1
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	045b      	lsls	r3, r3, #17
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d301      	bcc.n	8000b70 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e010      	b.n	8000b92 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <SysTick_Config+0x44>)
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	3a01      	subs	r2, #1
 8000b76:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	2103      	movs	r1, #3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff ff7c 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <SysTick_Config+0x44>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b8a:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SysTick_Config+0x44>)
 8000b8c:	2207      	movs	r2, #7
 8000b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	0018      	movs	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	e000e010 	.word	0xe000e010

08000ba0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60b9      	str	r1, [r7, #8]
 8000ba8:	607a      	str	r2, [r7, #4]
 8000baa:	210f      	movs	r1, #15
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	1c02      	adds	r2, r0, #0
 8000bb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	0011      	movs	r1, r2
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff5d 	bl	8000a7c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b004      	add	sp, #16
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	b25b      	sxtb	r3, r3
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff ff33 	bl	8000a48 <__NVIC_EnableIRQ>
}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}

08000bea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b082      	sub	sp, #8
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	f7ff ffaf 	bl	8000b58 <SysTick_Config>
 8000bfa:	0003      	movs	r3, r0
}
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c12:	e149      	b.n	8000ea8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2101      	movs	r1, #1
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	4091      	lsls	r1, r2
 8000c1e:	000a      	movs	r2, r1
 8000c20:	4013      	ands	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d100      	bne.n	8000c2c <HAL_GPIO_Init+0x28>
 8000c2a:	e13a      	b.n	8000ea2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2203      	movs	r2, #3
 8000c32:	4013      	ands	r3, r2
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d005      	beq.n	8000c44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d130      	bne.n	8000ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	409a      	lsls	r2, r3
 8000c52:	0013      	movs	r3, r2
 8000c54:	43da      	mvns	r2, r3
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	409a      	lsls	r2, r3
 8000c66:	0013      	movs	r3, r2
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	0013      	movs	r3, r2
 8000c82:	43da      	mvns	r2, r3
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	091b      	lsrs	r3, r3, #4
 8000c90:	2201      	movs	r2, #1
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
 8000c98:	0013      	movs	r3, r2
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2203      	movs	r2, #3
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b03      	cmp	r3, #3
 8000cb0:	d017      	beq.n	8000ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	68db      	ldr	r3, [r3, #12]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	409a      	lsls	r2, r3
 8000cd4:	0013      	movs	r3, r2
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d123      	bne.n	8000d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	08da      	lsrs	r2, r3, #3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3208      	adds	r2, #8
 8000cf6:	0092      	lsls	r2, r2, #2
 8000cf8:	58d3      	ldr	r3, [r2, r3]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	2207      	movs	r2, #7
 8000d00:	4013      	ands	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	220f      	movs	r2, #15
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	691a      	ldr	r2, [r3, #16]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	2107      	movs	r1, #7
 8000d1a:	400b      	ands	r3, r1
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	409a      	lsls	r2, r3
 8000d20:	0013      	movs	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	0092      	lsls	r2, r2, #2
 8000d32:	6939      	ldr	r1, [r7, #16]
 8000d34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	2203      	movs	r2, #3
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2203      	movs	r2, #3
 8000d54:	401a      	ands	r2, r3
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	23c0      	movs	r3, #192	; 0xc0
 8000d70:	029b      	lsls	r3, r3, #10
 8000d72:	4013      	ands	r3, r2
 8000d74:	d100      	bne.n	8000d78 <HAL_GPIO_Init+0x174>
 8000d76:	e094      	b.n	8000ea2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d78:	4b51      	ldr	r3, [pc, #324]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000d7a:	699a      	ldr	r2, [r3, #24]
 8000d7c:	4b50      	ldr	r3, [pc, #320]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000d7e:	2101      	movs	r1, #1
 8000d80:	430a      	orrs	r2, r1
 8000d82:	619a      	str	r2, [r3, #24]
 8000d84:	4b4e      	ldr	r3, [pc, #312]	; (8000ec0 <HAL_GPIO_Init+0x2bc>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d90:	4a4c      	ldr	r2, [pc, #304]	; (8000ec4 <HAL_GPIO_Init+0x2c0>)
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	3302      	adds	r3, #2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	589b      	ldr	r3, [r3, r2]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	2203      	movs	r2, #3
 8000da2:	4013      	ands	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	409a      	lsls	r2, r3
 8000daa:	0013      	movs	r3, r2
 8000dac:	43da      	mvns	r2, r3
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	2390      	movs	r3, #144	; 0x90
 8000db8:	05db      	lsls	r3, r3, #23
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d00d      	beq.n	8000dda <HAL_GPIO_Init+0x1d6>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a41      	ldr	r2, [pc, #260]	; (8000ec8 <HAL_GPIO_Init+0x2c4>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d007      	beq.n	8000dd6 <HAL_GPIO_Init+0x1d2>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a40      	ldr	r2, [pc, #256]	; (8000ecc <HAL_GPIO_Init+0x2c8>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d101      	bne.n	8000dd2 <HAL_GPIO_Init+0x1ce>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e004      	b.n	8000ddc <HAL_GPIO_Init+0x1d8>
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	e002      	b.n	8000ddc <HAL_GPIO_Init+0x1d8>
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e000      	b.n	8000ddc <HAL_GPIO_Init+0x1d8>
 8000dda:	2300      	movs	r3, #0
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	2103      	movs	r1, #3
 8000de0:	400a      	ands	r2, r1
 8000de2:	0092      	lsls	r2, r2, #2
 8000de4:	4093      	lsls	r3, r2
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dec:	4935      	ldr	r1, [pc, #212]	; (8000ec4 <HAL_GPIO_Init+0x2c0>)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	089b      	lsrs	r3, r3, #2
 8000df2:	3302      	adds	r3, #2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfa:	4b35      	ldr	r3, [pc, #212]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43da      	mvns	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	035b      	lsls	r3, r3, #13
 8000e12:	4013      	ands	r3, r2
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e1e:	4b2c      	ldr	r3, [pc, #176]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000e24:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43da      	mvns	r2, r3
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	039b      	lsls	r3, r3, #14
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	2380      	movs	r3, #128	; 0x80
 8000e64:	029b      	lsls	r3, r3, #10
 8000e66:	4013      	ands	r3, r2
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43da      	mvns	r2, r3
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	025b      	lsls	r3, r3, #9
 8000e90:	4013      	ands	r3, r2
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_GPIO_Init+0x2cc>)
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	40da      	lsrs	r2, r3
 8000eb0:	1e13      	subs	r3, r2, #0
 8000eb2:	d000      	beq.n	8000eb6 <HAL_GPIO_Init+0x2b2>
 8000eb4:	e6ae      	b.n	8000c14 <HAL_GPIO_Init+0x10>
  } 
}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b006      	add	sp, #24
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40010000 	.word	0x40010000
 8000ec8:	48000400 	.word	0x48000400
 8000ecc:	48000800 	.word	0x48000800
 8000ed0:	40010400 	.word	0x40010400

08000ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	000a      	movs	r2, r1
 8000ede:	1cbb      	adds	r3, r7, #2
 8000ee0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	1cba      	adds	r2, r7, #2
 8000ee8:	8812      	ldrh	r2, [r2, #0]
 8000eea:	4013      	ands	r3, r2
 8000eec:	d004      	beq.n	8000ef8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000eee:	230f      	movs	r3, #15
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e003      	b.n	8000f00 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ef8:	230f      	movs	r3, #15
 8000efa:	18fb      	adds	r3, r7, r3
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000f00:	230f      	movs	r3, #15
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	781b      	ldrb	r3, [r3, #0]
  }
 8000f06:	0018      	movs	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b004      	add	sp, #16
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	0008      	movs	r0, r1
 8000f18:	0011      	movs	r1, r2
 8000f1a:	1cbb      	adds	r3, r7, #2
 8000f1c:	1c02      	adds	r2, r0, #0
 8000f1e:	801a      	strh	r2, [r3, #0]
 8000f20:	1c7b      	adds	r3, r7, #1
 8000f22:	1c0a      	adds	r2, r1, #0
 8000f24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f26:	1c7b      	adds	r3, r7, #1
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d004      	beq.n	8000f38 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f2e:	1cbb      	adds	r3, r7, #2
 8000f30:	881a      	ldrh	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f36:	e003      	b.n	8000f40 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f38:	1cbb      	adds	r3, r7, #2
 8000f3a:	881a      	ldrh	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	000a      	movs	r2, r1
 8000f52:	1cbb      	adds	r3, r7, #2
 8000f54:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f5c:	1cbb      	adds	r3, r7, #2
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	4013      	ands	r3, r2
 8000f64:	041a      	lsls	r2, r3, #16
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	1cb9      	adds	r1, r7, #2
 8000f6c:	8809      	ldrh	r1, [r1, #0]
 8000f6e:	400b      	ands	r3, r1
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b004      	add	sp, #16
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C2 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C2 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8000f8a:	699a      	ldr	r2, [r3, #24]
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	430a      	orrs	r2, r1
 8000f92:	619a      	str	r2, [r3, #24]
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <HAL_I2CEx_EnableFastModePlus+0x34>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8000fa2:	6819      	ldr	r1, [r3, #0]
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b004      	add	sp, #16
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010000 	.word	0x40010000

08000fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e301      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d100      	bne.n	8000fda <HAL_RCC_OscConfig+0x1e>
 8000fd8:	e08d      	b.n	80010f6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fda:	4bc3      	ldr	r3, [pc, #780]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	220c      	movs	r2, #12
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d00e      	beq.n	8001004 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000fe6:	4bc0      	ldr	r3, [pc, #768]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	220c      	movs	r2, #12
 8000fec:	4013      	ands	r3, r2
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d116      	bne.n	8001020 <HAL_RCC_OscConfig+0x64>
 8000ff2:	4bbd      	ldr	r3, [pc, #756]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	025b      	lsls	r3, r3, #9
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	025b      	lsls	r3, r3, #9
 8001000:	429a      	cmp	r2, r3
 8001002:	d10d      	bne.n	8001020 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001004:	4bb8      	ldr	r3, [pc, #736]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	2380      	movs	r3, #128	; 0x80
 800100a:	029b      	lsls	r3, r3, #10
 800100c:	4013      	ands	r3, r2
 800100e:	d100      	bne.n	8001012 <HAL_RCC_OscConfig+0x56>
 8001010:	e070      	b.n	80010f4 <HAL_RCC_OscConfig+0x138>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d000      	beq.n	800101c <HAL_RCC_OscConfig+0x60>
 800101a:	e06b      	b.n	80010f4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e2d8      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d107      	bne.n	8001038 <HAL_RCC_OscConfig+0x7c>
 8001028:	4baf      	ldr	r3, [pc, #700]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	4bae      	ldr	r3, [pc, #696]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800102e:	2180      	movs	r1, #128	; 0x80
 8001030:	0249      	lsls	r1, r1, #9
 8001032:	430a      	orrs	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	e02f      	b.n	8001098 <HAL_RCC_OscConfig+0xdc>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10c      	bne.n	800105a <HAL_RCC_OscConfig+0x9e>
 8001040:	4ba9      	ldr	r3, [pc, #676]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4ba8      	ldr	r3, [pc, #672]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001046:	49a9      	ldr	r1, [pc, #676]	; (80012ec <HAL_RCC_OscConfig+0x330>)
 8001048:	400a      	ands	r2, r1
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	4ba6      	ldr	r3, [pc, #664]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	4ba5      	ldr	r3, [pc, #660]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001052:	49a7      	ldr	r1, [pc, #668]	; (80012f0 <HAL_RCC_OscConfig+0x334>)
 8001054:	400a      	ands	r2, r1
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	e01e      	b.n	8001098 <HAL_RCC_OscConfig+0xdc>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b05      	cmp	r3, #5
 8001060:	d10e      	bne.n	8001080 <HAL_RCC_OscConfig+0xc4>
 8001062:	4ba1      	ldr	r3, [pc, #644]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4ba0      	ldr	r3, [pc, #640]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	02c9      	lsls	r1, r1, #11
 800106c:	430a      	orrs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	4b9d      	ldr	r3, [pc, #628]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b9c      	ldr	r3, [pc, #624]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	0249      	lsls	r1, r1, #9
 800107a:	430a      	orrs	r2, r1
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	e00b      	b.n	8001098 <HAL_RCC_OscConfig+0xdc>
 8001080:	4b99      	ldr	r3, [pc, #612]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b98      	ldr	r3, [pc, #608]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001086:	4999      	ldr	r1, [pc, #612]	; (80012ec <HAL_RCC_OscConfig+0x330>)
 8001088:	400a      	ands	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	4b96      	ldr	r3, [pc, #600]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b95      	ldr	r3, [pc, #596]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001092:	4997      	ldr	r1, [pc, #604]	; (80012f0 <HAL_RCC_OscConfig+0x334>)
 8001094:	400a      	ands	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d014      	beq.n	80010ca <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fcc8 	bl	8000a34 <HAL_GetTick>
 80010a4:	0003      	movs	r3, r0
 80010a6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a8:	e008      	b.n	80010bc <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010aa:	f7ff fcc3 	bl	8000a34 <HAL_GetTick>
 80010ae:	0002      	movs	r2, r0
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	2b64      	cmp	r3, #100	; 0x64
 80010b6:	d901      	bls.n	80010bc <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e28a      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010bc:	4b8a      	ldr	r3, [pc, #552]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	029b      	lsls	r3, r3, #10
 80010c4:	4013      	ands	r3, r2
 80010c6:	d0f0      	beq.n	80010aa <HAL_RCC_OscConfig+0xee>
 80010c8:	e015      	b.n	80010f6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ca:	f7ff fcb3 	bl	8000a34 <HAL_GetTick>
 80010ce:	0003      	movs	r3, r0
 80010d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010d2:	e008      	b.n	80010e6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010d4:	f7ff fcae 	bl	8000a34 <HAL_GetTick>
 80010d8:	0002      	movs	r2, r0
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b64      	cmp	r3, #100	; 0x64
 80010e0:	d901      	bls.n	80010e6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80010e2:	2303      	movs	r3, #3
 80010e4:	e275      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e6:	4b80      	ldr	r3, [pc, #512]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	029b      	lsls	r3, r3, #10
 80010ee:	4013      	ands	r3, r2
 80010f0:	d1f0      	bne.n	80010d4 <HAL_RCC_OscConfig+0x118>
 80010f2:	e000      	b.n	80010f6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2202      	movs	r2, #2
 80010fc:	4013      	ands	r3, r2
 80010fe:	d100      	bne.n	8001102 <HAL_RCC_OscConfig+0x146>
 8001100:	e069      	b.n	80011d6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001102:	4b79      	ldr	r3, [pc, #484]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	220c      	movs	r2, #12
 8001108:	4013      	ands	r3, r2
 800110a:	d00b      	beq.n	8001124 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800110c:	4b76      	ldr	r3, [pc, #472]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	220c      	movs	r2, #12
 8001112:	4013      	ands	r3, r2
 8001114:	2b08      	cmp	r3, #8
 8001116:	d11c      	bne.n	8001152 <HAL_RCC_OscConfig+0x196>
 8001118:	4b73      	ldr	r3, [pc, #460]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	025b      	lsls	r3, r3, #9
 8001120:	4013      	ands	r3, r2
 8001122:	d116      	bne.n	8001152 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001124:	4b70      	ldr	r3, [pc, #448]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2202      	movs	r2, #2
 800112a:	4013      	ands	r3, r2
 800112c:	d005      	beq.n	800113a <HAL_RCC_OscConfig+0x17e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	2b01      	cmp	r3, #1
 8001134:	d001      	beq.n	800113a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e24b      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800113a:	4b6b      	ldr	r3, [pc, #428]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	22f8      	movs	r2, #248	; 0xf8
 8001140:	4393      	bics	r3, r2
 8001142:	0019      	movs	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	00da      	lsls	r2, r3, #3
 800114a:	4b67      	ldr	r3, [pc, #412]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001150:	e041      	b.n	80011d6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d024      	beq.n	80011a4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b62      	ldr	r3, [pc, #392]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001160:	2101      	movs	r1, #1
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001166:	f7ff fc65 	bl	8000a34 <HAL_GetTick>
 800116a:	0003      	movs	r3, r0
 800116c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001170:	f7ff fc60 	bl	8000a34 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e227      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001182:	4b59      	ldr	r3, [pc, #356]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2202      	movs	r2, #2
 8001188:	4013      	ands	r3, r2
 800118a:	d0f1      	beq.n	8001170 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	22f8      	movs	r2, #248	; 0xf8
 8001192:	4393      	bics	r3, r2
 8001194:	0019      	movs	r1, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	691b      	ldr	r3, [r3, #16]
 800119a:	00da      	lsls	r2, r3, #3
 800119c:	4b52      	ldr	r3, [pc, #328]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e018      	b.n	80011d6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011a4:	4b50      	ldr	r3, [pc, #320]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 80011aa:	2101      	movs	r1, #1
 80011ac:	438a      	bics	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc40 	bl	8000a34 <HAL_GetTick>
 80011b4:	0003      	movs	r3, r0
 80011b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ba:	f7ff fc3b 	bl	8000a34 <HAL_GetTick>
 80011be:	0002      	movs	r2, r0
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e202      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011cc:	4b46      	ldr	r3, [pc, #280]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2202      	movs	r2, #2
 80011d2:	4013      	ands	r3, r2
 80011d4:	d1f1      	bne.n	80011ba <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2208      	movs	r2, #8
 80011dc:	4013      	ands	r3, r2
 80011de:	d036      	beq.n	800124e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d019      	beq.n	800121c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011e8:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 80011ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011ec:	4b3e      	ldr	r3, [pc, #248]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f4:	f7ff fc1e 	bl	8000a34 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011fc:	e008      	b.n	8001210 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011fe:	f7ff fc19 	bl	8000a34 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	2b02      	cmp	r3, #2
 800120a:	d901      	bls.n	8001210 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800120c:	2303      	movs	r3, #3
 800120e:	e1e0      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001210:	4b35      	ldr	r3, [pc, #212]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	2202      	movs	r2, #2
 8001216:	4013      	ands	r3, r2
 8001218:	d0f1      	beq.n	80011fe <HAL_RCC_OscConfig+0x242>
 800121a:	e018      	b.n	800124e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800121c:	4b32      	ldr	r3, [pc, #200]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800121e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001220:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001222:	2101      	movs	r1, #1
 8001224:	438a      	bics	r2, r1
 8001226:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001228:	f7ff fc04 	bl	8000a34 <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001232:	f7ff fbff 	bl	8000a34 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e1c6      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001244:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	2202      	movs	r2, #2
 800124a:	4013      	ands	r3, r2
 800124c:	d1f1      	bne.n	8001232 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2204      	movs	r2, #4
 8001254:	4013      	ands	r3, r2
 8001256:	d100      	bne.n	800125a <HAL_RCC_OscConfig+0x29e>
 8001258:	e0b4      	b.n	80013c4 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125a:	201f      	movs	r0, #31
 800125c:	183b      	adds	r3, r7, r0
 800125e:	2200      	movs	r2, #0
 8001260:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001264:	69da      	ldr	r2, [r3, #28]
 8001266:	2380      	movs	r3, #128	; 0x80
 8001268:	055b      	lsls	r3, r3, #21
 800126a:	4013      	ands	r3, r2
 800126c:	d110      	bne.n	8001290 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001270:	69da      	ldr	r2, [r3, #28]
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	0549      	lsls	r1, r1, #21
 8001278:	430a      	orrs	r2, r1
 800127a:	61da      	str	r2, [r3, #28]
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 800127e:	69da      	ldr	r2, [r3, #28]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	055b      	lsls	r3, r3, #21
 8001284:	4013      	ands	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800128a:	183b      	adds	r3, r7, r0
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001290:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_RCC_OscConfig+0x338>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4013      	ands	r3, r2
 800129a:	d11a      	bne.n	80012d2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_RCC_OscConfig+0x338>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_RCC_OscConfig+0x338>)
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	0049      	lsls	r1, r1, #1
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fbc3 	bl	8000a34 <HAL_GetTick>
 80012ae:	0003      	movs	r3, r0
 80012b0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012b4:	f7ff fbbe 	bl	8000a34 <HAL_GetTick>
 80012b8:	0002      	movs	r2, r0
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e185      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_OscConfig+0x338>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4013      	ands	r3, r2
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d10e      	bne.n	80012f8 <HAL_RCC_OscConfig+0x33c>
 80012da:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 80012dc:	6a1a      	ldr	r2, [r3, #32]
 80012de:	4b02      	ldr	r3, [pc, #8]	; (80012e8 <HAL_RCC_OscConfig+0x32c>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	430a      	orrs	r2, r1
 80012e4:	621a      	str	r2, [r3, #32]
 80012e6:	e035      	b.n	8001354 <HAL_RCC_OscConfig+0x398>
 80012e8:	40021000 	.word	0x40021000
 80012ec:	fffeffff 	.word	0xfffeffff
 80012f0:	fffbffff 	.word	0xfffbffff
 80012f4:	40007000 	.word	0x40007000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10c      	bne.n	800131a <HAL_RCC_OscConfig+0x35e>
 8001300:	4bb6      	ldr	r3, [pc, #728]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001302:	6a1a      	ldr	r2, [r3, #32]
 8001304:	4bb5      	ldr	r3, [pc, #724]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001306:	2101      	movs	r1, #1
 8001308:	438a      	bics	r2, r1
 800130a:	621a      	str	r2, [r3, #32]
 800130c:	4bb3      	ldr	r3, [pc, #716]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800130e:	6a1a      	ldr	r2, [r3, #32]
 8001310:	4bb2      	ldr	r3, [pc, #712]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001312:	2104      	movs	r1, #4
 8001314:	438a      	bics	r2, r1
 8001316:	621a      	str	r2, [r3, #32]
 8001318:	e01c      	b.n	8001354 <HAL_RCC_OscConfig+0x398>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2b05      	cmp	r3, #5
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0x380>
 8001322:	4bae      	ldr	r3, [pc, #696]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001324:	6a1a      	ldr	r2, [r3, #32]
 8001326:	4bad      	ldr	r3, [pc, #692]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001328:	2104      	movs	r1, #4
 800132a:	430a      	orrs	r2, r1
 800132c:	621a      	str	r2, [r3, #32]
 800132e:	4bab      	ldr	r3, [pc, #684]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001330:	6a1a      	ldr	r2, [r3, #32]
 8001332:	4baa      	ldr	r3, [pc, #680]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001334:	2101      	movs	r1, #1
 8001336:	430a      	orrs	r2, r1
 8001338:	621a      	str	r2, [r3, #32]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0x398>
 800133c:	4ba7      	ldr	r3, [pc, #668]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800133e:	6a1a      	ldr	r2, [r3, #32]
 8001340:	4ba6      	ldr	r3, [pc, #664]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001342:	2101      	movs	r1, #1
 8001344:	438a      	bics	r2, r1
 8001346:	621a      	str	r2, [r3, #32]
 8001348:	4ba4      	ldr	r3, [pc, #656]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800134a:	6a1a      	ldr	r2, [r3, #32]
 800134c:	4ba3      	ldr	r3, [pc, #652]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800134e:	2104      	movs	r1, #4
 8001350:	438a      	bics	r2, r1
 8001352:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d014      	beq.n	8001386 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135c:	f7ff fb6a 	bl	8000a34 <HAL_GetTick>
 8001360:	0003      	movs	r3, r0
 8001362:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001364:	e009      	b.n	800137a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001366:	f7ff fb65 	bl	8000a34 <HAL_GetTick>
 800136a:	0002      	movs	r2, r0
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	4a9b      	ldr	r2, [pc, #620]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d901      	bls.n	800137a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001376:	2303      	movs	r3, #3
 8001378:	e12b      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800137a:	4b98      	ldr	r3, [pc, #608]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800137c:	6a1b      	ldr	r3, [r3, #32]
 800137e:	2202      	movs	r2, #2
 8001380:	4013      	ands	r3, r2
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x3aa>
 8001384:	e013      	b.n	80013ae <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fb55 	bl	8000a34 <HAL_GetTick>
 800138a:	0003      	movs	r3, r0
 800138c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138e:	e009      	b.n	80013a4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001390:	f7ff fb50 	bl	8000a34 <HAL_GetTick>
 8001394:	0002      	movs	r2, r0
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	4a91      	ldr	r2, [pc, #580]	; (80015e0 <HAL_RCC_OscConfig+0x624>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e116      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a4:	4b8d      	ldr	r3, [pc, #564]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	2202      	movs	r2, #2
 80013aa:	4013      	ands	r3, r2
 80013ac:	d1f0      	bne.n	8001390 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013ae:	231f      	movs	r3, #31
 80013b0:	18fb      	adds	r3, r7, r3
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d105      	bne.n	80013c4 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b8:	4b88      	ldr	r3, [pc, #544]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80013ba:	69da      	ldr	r2, [r3, #28]
 80013bc:	4b87      	ldr	r3, [pc, #540]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80013be:	4989      	ldr	r1, [pc, #548]	; (80015e4 <HAL_RCC_OscConfig+0x628>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2210      	movs	r2, #16
 80013ca:	4013      	ands	r3, r2
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d12a      	bne.n	800142c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013d6:	4b81      	ldr	r3, [pc, #516]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80013d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013da:	4b80      	ldr	r3, [pc, #512]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80013dc:	2104      	movs	r1, #4
 80013de:	430a      	orrs	r2, r1
 80013e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80013e2:	4b7e      	ldr	r3, [pc, #504]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80013e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013e6:	4b7d      	ldr	r3, [pc, #500]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	430a      	orrs	r2, r1
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fb21 	bl	8000a34 <HAL_GetTick>
 80013f2:	0003      	movs	r3, r0
 80013f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013f8:	f7ff fb1c 	bl	8000a34 <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e0e3      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800140a:	4b74      	ldr	r3, [pc, #464]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800140c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800140e:	2202      	movs	r2, #2
 8001410:	4013      	ands	r3, r2
 8001412:	d0f1      	beq.n	80013f8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001414:	4b71      	ldr	r3, [pc, #452]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001418:	22f8      	movs	r2, #248	; 0xf8
 800141a:	4393      	bics	r3, r2
 800141c:	0019      	movs	r1, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	00da      	lsls	r2, r3, #3
 8001424:	4b6d      	ldr	r3, [pc, #436]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001426:	430a      	orrs	r2, r1
 8001428:	635a      	str	r2, [r3, #52]	; 0x34
 800142a:	e034      	b.n	8001496 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	695b      	ldr	r3, [r3, #20]
 8001430:	3305      	adds	r3, #5
 8001432:	d111      	bne.n	8001458 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001434:	4b69      	ldr	r3, [pc, #420]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001438:	4b68      	ldr	r3, [pc, #416]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800143a:	2104      	movs	r1, #4
 800143c:	438a      	bics	r2, r1
 800143e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001440:	4b66      	ldr	r3, [pc, #408]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001444:	22f8      	movs	r2, #248	; 0xf8
 8001446:	4393      	bics	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	00da      	lsls	r2, r3, #3
 8001450:	4b62      	ldr	r3, [pc, #392]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001452:	430a      	orrs	r2, r1
 8001454:	635a      	str	r2, [r3, #52]	; 0x34
 8001456:	e01e      	b.n	8001496 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001458:	4b60      	ldr	r3, [pc, #384]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800145a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145c:	4b5f      	ldr	r3, [pc, #380]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800145e:	2104      	movs	r1, #4
 8001460:	430a      	orrs	r2, r1
 8001462:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001464:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001468:	4b5c      	ldr	r3, [pc, #368]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800146a:	2101      	movs	r1, #1
 800146c:	438a      	bics	r2, r1
 800146e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001470:	f7ff fae0 	bl	8000a34 <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800147a:	f7ff fadb 	bl	8000a34 <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e0a2      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800148c:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800148e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001490:	2202      	movs	r2, #2
 8001492:	4013      	ands	r3, r2
 8001494:	d1f1      	bne.n	800147a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d100      	bne.n	80014a0 <HAL_RCC_OscConfig+0x4e4>
 800149e:	e097      	b.n	80015d0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a0:	4b4e      	ldr	r3, [pc, #312]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	220c      	movs	r2, #12
 80014a6:	4013      	ands	r3, r2
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d100      	bne.n	80014ae <HAL_RCC_OscConfig+0x4f2>
 80014ac:	e06b      	b.n	8001586 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d14c      	bne.n	8001550 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b49      	ldr	r3, [pc, #292]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b48      	ldr	r3, [pc, #288]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80014bc:	494a      	ldr	r1, [pc, #296]	; (80015e8 <HAL_RCC_OscConfig+0x62c>)
 80014be:	400a      	ands	r2, r1
 80014c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c2:	f7ff fab7 	bl	8000a34 <HAL_GetTick>
 80014c6:	0003      	movs	r3, r0
 80014c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014cc:	f7ff fab2 	bl	8000a34 <HAL_GetTick>
 80014d0:	0002      	movs	r2, r0
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e079      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014de:	4b3f      	ldr	r3, [pc, #252]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	049b      	lsls	r3, r3, #18
 80014e6:	4013      	ands	r3, r2
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014ea:	4b3c      	ldr	r3, [pc, #240]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80014ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ee:	220f      	movs	r2, #15
 80014f0:	4393      	bics	r3, r2
 80014f2:	0019      	movs	r1, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f8:	4b38      	ldr	r3, [pc, #224]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 80014fa:	430a      	orrs	r2, r1
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80014fe:	4b37      	ldr	r3, [pc, #220]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4a3a      	ldr	r2, [pc, #232]	; (80015ec <HAL_RCC_OscConfig+0x630>)
 8001504:	4013      	ands	r3, r2
 8001506:	0019      	movs	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	431a      	orrs	r2, r3
 8001512:	4b32      	ldr	r3, [pc, #200]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001514:	430a      	orrs	r2, r1
 8001516:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001518:	4b30      	ldr	r3, [pc, #192]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	0449      	lsls	r1, r1, #17
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fa85 	bl	8000a34 <HAL_GetTick>
 800152a:	0003      	movs	r3, r0
 800152c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001530:	f7ff fa80 	bl	8000a34 <HAL_GetTick>
 8001534:	0002      	movs	r2, r0
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b02      	cmp	r3, #2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e047      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001542:	4b26      	ldr	r3, [pc, #152]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	049b      	lsls	r3, r3, #18
 800154a:	4013      	ands	r3, r2
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x574>
 800154e:	e03f      	b.n	80015d0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4b21      	ldr	r3, [pc, #132]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001556:	4924      	ldr	r1, [pc, #144]	; (80015e8 <HAL_RCC_OscConfig+0x62c>)
 8001558:	400a      	ands	r2, r1
 800155a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fa6a 	bl	8000a34 <HAL_GetTick>
 8001560:	0003      	movs	r3, r0
 8001562:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fa65 	bl	8000a34 <HAL_GetTick>
 800156a:	0002      	movs	r2, r0
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e02c      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	049b      	lsls	r3, r3, #18
 8001580:	4013      	ands	r3, r2
 8001582:	d1f0      	bne.n	8001566 <HAL_RCC_OscConfig+0x5aa>
 8001584:	e024      	b.n	80015d0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d101      	bne.n	8001592 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e01f      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001592:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <HAL_RCC_OscConfig+0x620>)
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	2380      	movs	r3, #128	; 0x80
 80015a2:	025b      	lsls	r3, r3, #9
 80015a4:	401a      	ands	r2, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d10e      	bne.n	80015cc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	220f      	movs	r2, #15
 80015b2:	401a      	ands	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80015bc:	697a      	ldr	r2, [r7, #20]
 80015be:	23f0      	movs	r3, #240	; 0xf0
 80015c0:	039b      	lsls	r3, r3, #14
 80015c2:	401a      	ands	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b008      	add	sp, #32
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	40021000 	.word	0x40021000
 80015e0:	00001388 	.word	0x00001388
 80015e4:	efffffff 	.word	0xefffffff
 80015e8:	feffffff 	.word	0xfeffffff
 80015ec:	ffc2ffff 	.word	0xffc2ffff

080015f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d101      	bne.n	8001604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e0b3      	b.n	800176c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001604:	4b5b      	ldr	r3, [pc, #364]	; (8001774 <HAL_RCC_ClockConfig+0x184>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2201      	movs	r2, #1
 800160a:	4013      	ands	r3, r2
 800160c:	683a      	ldr	r2, [r7, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d911      	bls.n	8001636 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001612:	4b58      	ldr	r3, [pc, #352]	; (8001774 <HAL_RCC_ClockConfig+0x184>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4393      	bics	r3, r2
 800161a:	0019      	movs	r1, r3
 800161c:	4b55      	ldr	r3, [pc, #340]	; (8001774 <HAL_RCC_ClockConfig+0x184>)
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001624:	4b53      	ldr	r3, [pc, #332]	; (8001774 <HAL_RCC_ClockConfig+0x184>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2201      	movs	r2, #1
 800162a:	4013      	ands	r3, r2
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	429a      	cmp	r2, r3
 8001630:	d001      	beq.n	8001636 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e09a      	b.n	800176c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2202      	movs	r2, #2
 800163c:	4013      	ands	r3, r2
 800163e:	d015      	beq.n	800166c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2204      	movs	r2, #4
 8001646:	4013      	ands	r3, r2
 8001648:	d006      	beq.n	8001658 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800164a:	4b4b      	ldr	r3, [pc, #300]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 8001650:	21e0      	movs	r1, #224	; 0xe0
 8001652:	00c9      	lsls	r1, r1, #3
 8001654:	430a      	orrs	r2, r1
 8001656:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b47      	ldr	r3, [pc, #284]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	22f0      	movs	r2, #240	; 0xf0
 800165e:	4393      	bics	r3, r2
 8001660:	0019      	movs	r1, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	4b44      	ldr	r3, [pc, #272]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 8001668:	430a      	orrs	r2, r1
 800166a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2201      	movs	r2, #1
 8001672:	4013      	ands	r3, r2
 8001674:	d040      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	029b      	lsls	r3, r3, #10
 8001686:	4013      	ands	r3, r2
 8001688:	d114      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e06e      	b.n	800176c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d107      	bne.n	80016a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001696:	4b38      	ldr	r3, [pc, #224]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	049b      	lsls	r3, r3, #18
 800169e:	4013      	ands	r3, r2
 80016a0:	d108      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e062      	b.n	800176c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a6:	4b34      	ldr	r3, [pc, #208]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2202      	movs	r2, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d101      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e05b      	b.n	800176c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b4:	4b30      	ldr	r3, [pc, #192]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4393      	bics	r3, r2
 80016bc:	0019      	movs	r1, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 80016c4:	430a      	orrs	r2, r1
 80016c6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016c8:	f7ff f9b4 	bl	8000a34 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d0:	e009      	b.n	80016e6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d2:	f7ff f9af 	bl	8000a34 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	4a27      	ldr	r2, [pc, #156]	; (800177c <HAL_RCC_ClockConfig+0x18c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e042      	b.n	800176c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e6:	4b24      	ldr	r3, [pc, #144]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	220c      	movs	r2, #12
 80016ec:	401a      	ands	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d1ec      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_RCC_ClockConfig+0x184>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	4013      	ands	r3, r2
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d211      	bcs.n	800172a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_RCC_ClockConfig+0x184>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2201      	movs	r2, #1
 800170c:	4393      	bics	r3, r2
 800170e:	0019      	movs	r1, r3
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <HAL_RCC_ClockConfig+0x184>)
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <HAL_RCC_ClockConfig+0x184>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2201      	movs	r2, #1
 800171e:	4013      	ands	r3, r2
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e020      	b.n	800176c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2204      	movs	r2, #4
 8001730:	4013      	ands	r3, r2
 8001732:	d009      	beq.n	8001748 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4a11      	ldr	r2, [pc, #68]	; (8001780 <HAL_RCC_ClockConfig+0x190>)
 800173a:	4013      	ands	r3, r2
 800173c:	0019      	movs	r1, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68da      	ldr	r2, [r3, #12]
 8001742:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 8001744:	430a      	orrs	r2, r1
 8001746:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001748:	f000 f820 	bl	800178c <HAL_RCC_GetSysClockFreq>
 800174c:	0001      	movs	r1, r0
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_RCC_ClockConfig+0x188>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	220f      	movs	r2, #15
 8001756:	4013      	ands	r3, r2
 8001758:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_RCC_ClockConfig+0x194>)
 800175a:	5cd3      	ldrb	r3, [r2, r3]
 800175c:	000a      	movs	r2, r1
 800175e:	40da      	lsrs	r2, r3
 8001760:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x198>)
 8001762:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff f91f 	bl	80009a8 <HAL_InitTick>
  
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40022000 	.word	0x40022000
 8001778:	40021000 	.word	0x40021000
 800177c:	00001388 	.word	0x00001388
 8001780:	fffff8ff 	.word	0xfffff8ff
 8001784:	080020b0 	.word	0x080020b0
 8001788:	20000030 	.word	0x20000030

0800178c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	220c      	movs	r2, #12
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d002      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x30>
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d003      	beq.n	80017c2 <HAL_RCC_GetSysClockFreq+0x36>
 80017ba:	e02c      	b.n	8001816 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_RCC_GetSysClockFreq+0xa0>)
 80017be:	613b      	str	r3, [r7, #16]
      break;
 80017c0:	e02c      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	0c9b      	lsrs	r3, r3, #18
 80017c6:	220f      	movs	r2, #15
 80017c8:	4013      	ands	r3, r2
 80017ca:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80017d0:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	220f      	movs	r2, #15
 80017d6:	4013      	ands	r3, r2
 80017d8:	4a16      	ldr	r2, [pc, #88]	; (8001834 <HAL_RCC_GetSysClockFreq+0xa8>)
 80017da:	5cd3      	ldrb	r3, [r2, r3]
 80017dc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	025b      	lsls	r3, r3, #9
 80017e4:	4013      	ands	r3, r2
 80017e6:	d009      	beq.n	80017fc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	4810      	ldr	r0, [pc, #64]	; (800182c <HAL_RCC_GetSysClockFreq+0xa0>)
 80017ec:	f7fe fc8c 	bl	8000108 <__udivsi3>
 80017f0:	0003      	movs	r3, r0
 80017f2:	001a      	movs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4353      	muls	r3, r2
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e009      	b.n	8001810 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	000a      	movs	r2, r1
 8001800:	0152      	lsls	r2, r2, #5
 8001802:	1a52      	subs	r2, r2, r1
 8001804:	0193      	lsls	r3, r2, #6
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	185b      	adds	r3, r3, r1
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	613b      	str	r3, [r7, #16]
      break;
 8001814:	e002      	b.n	800181c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001818:	613b      	str	r3, [r7, #16]
      break;
 800181a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800181c:	693b      	ldr	r3, [r7, #16]
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b006      	add	sp, #24
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	40021000 	.word	0x40021000
 800182c:	007a1200 	.word	0x007a1200
 8001830:	080020c0 	.word	0x080020c0
 8001834:	080020d0 	.word	0x080020d0

08001838 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e042      	b.n	80018d0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	223d      	movs	r2, #61	; 0x3d
 800184e:	5c9b      	ldrb	r3, [r3, r2]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d107      	bne.n	8001866 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	223c      	movs	r2, #60	; 0x3c
 800185a:	2100      	movs	r1, #0
 800185c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	0018      	movs	r0, r3
 8001862:	f7fe ffcb 	bl	80007fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	223d      	movs	r2, #61	; 0x3d
 800186a:	2102      	movs	r1, #2
 800186c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	3304      	adds	r3, #4
 8001876:	0019      	movs	r1, r3
 8001878:	0010      	movs	r0, r2
 800187a:	f000 fa5b 	bl	8001d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2246      	movs	r2, #70	; 0x46
 8001882:	2101      	movs	r1, #1
 8001884:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	223e      	movs	r2, #62	; 0x3e
 800188a:	2101      	movs	r1, #1
 800188c:	5499      	strb	r1, [r3, r2]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	223f      	movs	r2, #63	; 0x3f
 8001892:	2101      	movs	r1, #1
 8001894:	5499      	strb	r1, [r3, r2]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2240      	movs	r2, #64	; 0x40
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2241      	movs	r2, #65	; 0x41
 80018a2:	2101      	movs	r1, #1
 80018a4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2242      	movs	r2, #66	; 0x42
 80018aa:	2101      	movs	r1, #1
 80018ac:	5499      	strb	r1, [r3, r2]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2243      	movs	r2, #67	; 0x43
 80018b2:	2101      	movs	r1, #1
 80018b4:	5499      	strb	r1, [r3, r2]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2244      	movs	r2, #68	; 0x44
 80018ba:	2101      	movs	r1, #1
 80018bc:	5499      	strb	r1, [r3, r2]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2245      	movs	r2, #69	; 0x45
 80018c2:	2101      	movs	r1, #1
 80018c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	223d      	movs	r2, #61	; 0x3d
 80018ca:	2101      	movs	r1, #1
 80018cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	0018      	movs	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b002      	add	sp, #8
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	223d      	movs	r2, #61	; 0x3d
 80018e4:	5c9b      	ldrb	r3, [r3, r2]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d001      	beq.n	80018f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e036      	b.n	800195e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	223d      	movs	r2, #61	; 0x3d
 80018f4:	2102      	movs	r1, #2
 80018f6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2101      	movs	r1, #1
 8001904:	430a      	orrs	r2, r1
 8001906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a16      	ldr	r2, [pc, #88]	; (8001968 <HAL_TIM_Base_Start_IT+0x90>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00a      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x50>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	05db      	lsls	r3, r3, #23
 800191a:	429a      	cmp	r2, r3
 800191c:	d004      	beq.n	8001928 <HAL_TIM_Base_Start_IT+0x50>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <HAL_TIM_Base_Start_IT+0x94>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d111      	bne.n	800194c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2207      	movs	r2, #7
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b06      	cmp	r3, #6
 8001938:	d010      	beq.n	800195c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2101      	movs	r1, #1
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800194a:	e007      	b.n	800195c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2101      	movs	r1, #1
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b004      	add	sp, #16
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	40012c00 	.word	0x40012c00
 800196c:	40000400 	.word	0x40000400

08001970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	2202      	movs	r2, #2
 800198c:	4013      	ands	r3, r2
 800198e:	d021      	beq.n	80019d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2202      	movs	r2, #2
 8001994:	4013      	ands	r3, r2
 8001996:	d01d      	beq.n	80019d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2203      	movs	r2, #3
 800199e:	4252      	negs	r2, r2
 80019a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	2203      	movs	r2, #3
 80019b0:	4013      	ands	r3, r2
 80019b2:	d004      	beq.n	80019be <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	0018      	movs	r0, r3
 80019b8:	f000 f9a4 	bl	8001d04 <HAL_TIM_IC_CaptureCallback>
 80019bc:	e007      	b.n	80019ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f000 f997 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	0018      	movs	r0, r3
 80019ca:	f000 f9a3 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2204      	movs	r2, #4
 80019d8:	4013      	ands	r3, r2
 80019da:	d022      	beq.n	8001a22 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2204      	movs	r2, #4
 80019e0:	4013      	ands	r3, r2
 80019e2:	d01e      	beq.n	8001a22 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2205      	movs	r2, #5
 80019ea:	4252      	negs	r2, r2
 80019ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2202      	movs	r2, #2
 80019f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	23c0      	movs	r3, #192	; 0xc0
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4013      	ands	r3, r2
 8001a00:	d004      	beq.n	8001a0c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f000 f97d 	bl	8001d04 <HAL_TIM_IC_CaptureCallback>
 8001a0a:	e007      	b.n	8001a1c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 f970 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 f97c 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2208      	movs	r2, #8
 8001a26:	4013      	ands	r3, r2
 8001a28:	d021      	beq.n	8001a6e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d01d      	beq.n	8001a6e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2209      	movs	r2, #9
 8001a38:	4252      	negs	r2, r2
 8001a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2204      	movs	r2, #4
 8001a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	2203      	movs	r2, #3
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d004      	beq.n	8001a58 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	0018      	movs	r0, r3
 8001a52:	f000 f957 	bl	8001d04 <HAL_TIM_IC_CaptureCallback>
 8001a56:	e007      	b.n	8001a68 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 f94a 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	0018      	movs	r0, r3
 8001a64:	f000 f956 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2210      	movs	r2, #16
 8001a72:	4013      	ands	r3, r2
 8001a74:	d022      	beq.n	8001abc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d01e      	beq.n	8001abc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2211      	movs	r2, #17
 8001a84:	4252      	negs	r2, r2
 8001a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2208      	movs	r2, #8
 8001a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	69da      	ldr	r2, [r3, #28]
 8001a94:	23c0      	movs	r3, #192	; 0xc0
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d004      	beq.n	8001aa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f000 f930 	bl	8001d04 <HAL_TIM_IC_CaptureCallback>
 8001aa4:	e007      	b.n	8001ab6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f000 f923 	bl	8001cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 f92f 	bl	8001d14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d00c      	beq.n	8001ade <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d008      	beq.n	8001ade <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2202      	movs	r2, #2
 8001ad2:	4252      	negs	r2, r2
 8001ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7fe fe59 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d00c      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2280      	movs	r2, #128	; 0x80
 8001aea:	4013      	ands	r3, r2
 8001aec:	d008      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2281      	movs	r2, #129	; 0x81
 8001af4:	4252      	negs	r2, r2
 8001af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	0018      	movs	r0, r3
 8001afc:	f000 fa98 	bl	8002030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2240      	movs	r2, #64	; 0x40
 8001b04:	4013      	ands	r3, r2
 8001b06:	d00c      	beq.n	8001b22 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2240      	movs	r2, #64	; 0x40
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d008      	beq.n	8001b22 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2241      	movs	r2, #65	; 0x41
 8001b16:	4252      	negs	r2, r2
 8001b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 f901 	bl	8001d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2220      	movs	r2, #32
 8001b26:	4013      	ands	r3, r2
 8001b28:	d00c      	beq.n	8001b44 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d008      	beq.n	8001b44 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2221      	movs	r2, #33	; 0x21
 8001b38:	4252      	negs	r2, r2
 8001b3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f000 fa6e 	bl	8002020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b56:	230f      	movs	r3, #15
 8001b58:	18fb      	adds	r3, r7, r3
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	223c      	movs	r2, #60	; 0x3c
 8001b62:	5c9b      	ldrb	r3, [r3, r2]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_TIM_ConfigClockSource+0x20>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e0bc      	b.n	8001ce6 <HAL_TIM_ConfigClockSource+0x19a>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	223c      	movs	r2, #60	; 0x3c
 8001b70:	2101      	movs	r1, #1
 8001b72:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	223d      	movs	r2, #61	; 0x3d
 8001b78:	2102      	movs	r1, #2
 8001b7a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2277      	movs	r2, #119	; 0x77
 8001b88:	4393      	bics	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	0192      	lsls	r2, r2, #6
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d040      	beq.n	8001c2a <HAL_TIM_ConfigClockSource+0xde>
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	0192      	lsls	r2, r2, #6
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d900      	bls.n	8001bb2 <HAL_TIM_ConfigClockSource+0x66>
 8001bb0:	e088      	b.n	8001cc4 <HAL_TIM_ConfigClockSource+0x178>
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	0152      	lsls	r2, r2, #5
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d100      	bne.n	8001bbc <HAL_TIM_ConfigClockSource+0x70>
 8001bba:	e088      	b.n	8001cce <HAL_TIM_ConfigClockSource+0x182>
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	0152      	lsls	r2, r2, #5
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d900      	bls.n	8001bc6 <HAL_TIM_ConfigClockSource+0x7a>
 8001bc4:	e07e      	b.n	8001cc4 <HAL_TIM_ConfigClockSource+0x178>
 8001bc6:	2b70      	cmp	r3, #112	; 0x70
 8001bc8:	d018      	beq.n	8001bfc <HAL_TIM_ConfigClockSource+0xb0>
 8001bca:	d900      	bls.n	8001bce <HAL_TIM_ConfigClockSource+0x82>
 8001bcc:	e07a      	b.n	8001cc4 <HAL_TIM_ConfigClockSource+0x178>
 8001bce:	2b60      	cmp	r3, #96	; 0x60
 8001bd0:	d04f      	beq.n	8001c72 <HAL_TIM_ConfigClockSource+0x126>
 8001bd2:	d900      	bls.n	8001bd6 <HAL_TIM_ConfigClockSource+0x8a>
 8001bd4:	e076      	b.n	8001cc4 <HAL_TIM_ConfigClockSource+0x178>
 8001bd6:	2b50      	cmp	r3, #80	; 0x50
 8001bd8:	d03b      	beq.n	8001c52 <HAL_TIM_ConfigClockSource+0x106>
 8001bda:	d900      	bls.n	8001bde <HAL_TIM_ConfigClockSource+0x92>
 8001bdc:	e072      	b.n	8001cc4 <HAL_TIM_ConfigClockSource+0x178>
 8001bde:	2b40      	cmp	r3, #64	; 0x40
 8001be0:	d057      	beq.n	8001c92 <HAL_TIM_ConfigClockSource+0x146>
 8001be2:	d900      	bls.n	8001be6 <HAL_TIM_ConfigClockSource+0x9a>
 8001be4:	e06e      	b.n	8001cc4 <HAL_TIM_ConfigClockSource+0x178>
 8001be6:	2b30      	cmp	r3, #48	; 0x30
 8001be8:	d063      	beq.n	8001cb2 <HAL_TIM_ConfigClockSource+0x166>
 8001bea:	d86b      	bhi.n	8001cc4 <HAL_TIM_ConfigClockSource+0x178>
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d060      	beq.n	8001cb2 <HAL_TIM_ConfigClockSource+0x166>
 8001bf0:	d868      	bhi.n	8001cc4 <HAL_TIM_ConfigClockSource+0x178>
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d05d      	beq.n	8001cb2 <HAL_TIM_ConfigClockSource+0x166>
 8001bf6:	2b10      	cmp	r3, #16
 8001bf8:	d05b      	beq.n	8001cb2 <HAL_TIM_ConfigClockSource+0x166>
 8001bfa:	e063      	b.n	8001cc4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	6899      	ldr	r1, [r3, #8]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685a      	ldr	r2, [r3, #4]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f000 f990 	bl	8001f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	2277      	movs	r2, #119	; 0x77
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	609a      	str	r2, [r3, #8]
      break;
 8001c28:	e052      	b.n	8001cd0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6899      	ldr	r1, [r3, #8]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f000 f979 	bl	8001f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2180      	movs	r1, #128	; 0x80
 8001c4a:	01c9      	lsls	r1, r1, #7
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	609a      	str	r2, [r3, #8]
      break;
 8001c50:	e03e      	b.n	8001cd0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	6859      	ldr	r1, [r3, #4]
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	001a      	movs	r2, r3
 8001c60:	f000 f8ec 	bl	8001e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2150      	movs	r1, #80	; 0x50
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f000 f946 	bl	8001efc <TIM_ITRx_SetConfig>
      break;
 8001c70:	e02e      	b.n	8001cd0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6859      	ldr	r1, [r3, #4]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	001a      	movs	r2, r3
 8001c80:	f000 f90a 	bl	8001e98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2160      	movs	r1, #96	; 0x60
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 f936 	bl	8001efc <TIM_ITRx_SetConfig>
      break;
 8001c90:	e01e      	b.n	8001cd0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6859      	ldr	r1, [r3, #4]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	001a      	movs	r2, r3
 8001ca0:	f000 f8cc 	bl	8001e3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2140      	movs	r1, #64	; 0x40
 8001caa:	0018      	movs	r0, r3
 8001cac:	f000 f926 	bl	8001efc <TIM_ITRx_SetConfig>
      break;
 8001cb0:	e00e      	b.n	8001cd0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0019      	movs	r1, r3
 8001cbc:	0010      	movs	r0, r2
 8001cbe:	f000 f91d 	bl	8001efc <TIM_ITRx_SetConfig>
      break;
 8001cc2:	e005      	b.n	8001cd0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001cc4:	230f      	movs	r3, #15
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
      break;
 8001ccc:	e000      	b.n	8001cd0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001cce:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	223d      	movs	r2, #61	; 0x3d
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	223c      	movs	r2, #60	; 0x3c
 8001cdc:	2100      	movs	r1, #0
 8001cde:	5499      	strb	r1, [r3, r2]

  return status;
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b004      	add	sp, #16
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			; (mov r8, r8)
 8001cf0:	ffff00ff 	.word	0xffff00ff

08001cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b002      	add	sp, #8
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b002      	add	sp, #8
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d2c:	46c0      	nop			; (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	b002      	add	sp, #8
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <TIM_Base_SetConfig+0xf0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d008      	beq.n	8001d5e <TIM_Base_SetConfig+0x2a>
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	05db      	lsls	r3, r3, #23
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d003      	beq.n	8001d5e <TIM_Base_SetConfig+0x2a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a33      	ldr	r2, [pc, #204]	; (8001e28 <TIM_Base_SetConfig+0xf4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d108      	bne.n	8001d70 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2270      	movs	r2, #112	; 0x70
 8001d62:	4393      	bics	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a2c      	ldr	r2, [pc, #176]	; (8001e24 <TIM_Base_SetConfig+0xf0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d014      	beq.n	8001da2 <TIM_Base_SetConfig+0x6e>
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	2380      	movs	r3, #128	; 0x80
 8001d7c:	05db      	lsls	r3, r3, #23
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d00f      	beq.n	8001da2 <TIM_Base_SetConfig+0x6e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <TIM_Base_SetConfig+0xf4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d00b      	beq.n	8001da2 <TIM_Base_SetConfig+0x6e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <TIM_Base_SetConfig+0xf8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d007      	beq.n	8001da2 <TIM_Base_SetConfig+0x6e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a26      	ldr	r2, [pc, #152]	; (8001e30 <TIM_Base_SetConfig+0xfc>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d003      	beq.n	8001da2 <TIM_Base_SetConfig+0x6e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a25      	ldr	r2, [pc, #148]	; (8001e34 <TIM_Base_SetConfig+0x100>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d108      	bne.n	8001db4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <TIM_Base_SetConfig+0x104>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	4393      	bics	r3, r2
 8001dba:	001a      	movs	r2, r3
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <TIM_Base_SetConfig+0xf0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <TIM_Base_SetConfig+0xbe>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <TIM_Base_SetConfig+0xfc>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d003      	beq.n	8001df2 <TIM_Base_SetConfig+0xbe>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a11      	ldr	r2, [pc, #68]	; (8001e34 <TIM_Base_SetConfig+0x100>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d103      	bne.n	8001dfa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	691a      	ldr	r2, [r3, #16]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4393      	bics	r3, r2
 8001e14:	001a      	movs	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	611a      	str	r2, [r3, #16]
  }
}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b004      	add	sp, #16
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	40012c00 	.word	0x40012c00
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40002000 	.word	0x40002000
 8001e30:	40014400 	.word	0x40014400
 8001e34:	40014800 	.word	0x40014800
 8001e38:	fffffcff 	.word	0xfffffcff

08001e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	6a1b      	ldr	r3, [r3, #32]
 8001e52:	2201      	movs	r2, #1
 8001e54:	4393      	bics	r3, r2
 8001e56:	001a      	movs	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	22f0      	movs	r2, #240	; 0xf0
 8001e66:	4393      	bics	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	220a      	movs	r2, #10
 8001e78:	4393      	bics	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001e7c:	697a      	ldr	r2, [r7, #20]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	621a      	str	r2, [r3, #32]
}
 8001e90:	46c0      	nop			; (mov r8, r8)
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b006      	add	sp, #24
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	2210      	movs	r2, #16
 8001eb0:	4393      	bics	r3, r2
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <TIM_TI2_ConfigInputStage+0x60>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	031b      	lsls	r3, r3, #12
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	22a0      	movs	r2, #160	; 0xa0
 8001ed4:	4393      	bics	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	621a      	str	r2, [r3, #32]
}
 8001eee:	46c0      	nop			; (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b006      	add	sp, #24
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	ffff0fff 	.word	0xffff0fff

08001efc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2270      	movs	r2, #112	; 0x70
 8001f10:	4393      	bics	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	609a      	str	r2, [r3, #8]
}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b004      	add	sp, #16
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <TIM_ETR_SetConfig+0x3c>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	021a      	lsls	r2, r3, #8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	609a      	str	r2, [r3, #8]
}
 8001f64:	46c0      	nop			; (mov r8, r8)
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b006      	add	sp, #24
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	ffff00ff 	.word	0xffff00ff

08001f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	223c      	movs	r2, #60	; 0x3c
 8001f7e:	5c9b      	ldrb	r3, [r3, r2]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e042      	b.n	800200e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	223c      	movs	r2, #60	; 0x3c
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	223d      	movs	r2, #61	; 0x3d
 8001f94:	2102      	movs	r1, #2
 8001f96:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2270      	movs	r2, #112	; 0x70
 8001fac:	4393      	bics	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a14      	ldr	r2, [pc, #80]	; (8002018 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d00a      	beq.n	8001fe2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	05db      	lsls	r3, r3, #23
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d004      	beq.n	8001fe2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0f      	ldr	r2, [pc, #60]	; (800201c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d10c      	bne.n	8001ffc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2280      	movs	r2, #128	; 0x80
 8001fe6:	4393      	bics	r3, r2
 8001fe8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	223d      	movs	r2, #61	; 0x3d
 8002000:	2101      	movs	r1, #1
 8002002:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	223c      	movs	r2, #60	; 0x3c
 8002008:	2100      	movs	r1, #0
 800200a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b004      	add	sp, #16
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	40012c00 	.word	0x40012c00
 800201c:	40000400 	.word	0x40000400

08002020 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002028:	46c0      	nop			; (mov r8, r8)
 800202a:	46bd      	mov	sp, r7
 800202c:	b002      	add	sp, #8
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002038:	46c0      	nop			; (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b002      	add	sp, #8
 800203e:	bd80      	pop	{r7, pc}

08002040 <__libc_init_array>:
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	2600      	movs	r6, #0
 8002044:	4d0c      	ldr	r5, [pc, #48]	; (8002078 <__libc_init_array+0x38>)
 8002046:	4c0d      	ldr	r4, [pc, #52]	; (800207c <__libc_init_array+0x3c>)
 8002048:	1b64      	subs	r4, r4, r5
 800204a:	10a4      	asrs	r4, r4, #2
 800204c:	42a6      	cmp	r6, r4
 800204e:	d109      	bne.n	8002064 <__libc_init_array+0x24>
 8002050:	2600      	movs	r6, #0
 8002052:	f000 f821 	bl	8002098 <_init>
 8002056:	4d0a      	ldr	r5, [pc, #40]	; (8002080 <__libc_init_array+0x40>)
 8002058:	4c0a      	ldr	r4, [pc, #40]	; (8002084 <__libc_init_array+0x44>)
 800205a:	1b64      	subs	r4, r4, r5
 800205c:	10a4      	asrs	r4, r4, #2
 800205e:	42a6      	cmp	r6, r4
 8002060:	d105      	bne.n	800206e <__libc_init_array+0x2e>
 8002062:	bd70      	pop	{r4, r5, r6, pc}
 8002064:	00b3      	lsls	r3, r6, #2
 8002066:	58eb      	ldr	r3, [r5, r3]
 8002068:	4798      	blx	r3
 800206a:	3601      	adds	r6, #1
 800206c:	e7ee      	b.n	800204c <__libc_init_array+0xc>
 800206e:	00b3      	lsls	r3, r6, #2
 8002070:	58eb      	ldr	r3, [r5, r3]
 8002072:	4798      	blx	r3
 8002074:	3601      	adds	r6, #1
 8002076:	e7f2      	b.n	800205e <__libc_init_array+0x1e>
 8002078:	080020e0 	.word	0x080020e0
 800207c:	080020e0 	.word	0x080020e0
 8002080:	080020e0 	.word	0x080020e0
 8002084:	080020e4 	.word	0x080020e4

08002088 <memset>:
 8002088:	0003      	movs	r3, r0
 800208a:	1882      	adds	r2, r0, r2
 800208c:	4293      	cmp	r3, r2
 800208e:	d100      	bne.n	8002092 <memset+0xa>
 8002090:	4770      	bx	lr
 8002092:	7019      	strb	r1, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	e7f9      	b.n	800208c <memset+0x4>

08002098 <_init>:
 8002098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800209e:	bc08      	pop	{r3}
 80020a0:	469e      	mov	lr, r3
 80020a2:	4770      	bx	lr

080020a4 <_fini>:
 80020a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020aa:	bc08      	pop	{r3}
 80020ac:	469e      	mov	lr, r3
 80020ae:	4770      	bx	lr
